{"DateTime":{"add":{"s":"Ajoute une dur\u00e9e \u00e0 un objet DateTime","y":"public DateTime DateTime::add\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"interval","d":"Un objet DateInterval"}]},"__construct":{"s":"Retourne un nouvel objet DateTime","y":"","p":[{"t":"time","d":"Une cha\u00eene date\/heure. Les formats valides sont expliqu\u00e9s dans la documentation sur les\nformats Date et Heure."},{"t":"timezone","d":"Un objet DateTimeZone representant\n       le fuseau horaire de $time."}]},"createFromFormat":{"s":"Retourne un nouvel objet DateTime format\u00e9","y":"public static DateTime DateTime::createFromFormat\n    ( string $format\n   , string $time\n   [, DateTimeZone $timezone\n  ] )","p":[{"t":"format","d":"Le format \u00e0 utiliser. Voir les options de formatage ci-dessous.\n      Dans le plupart des cas, les m\u00eames lettres que pour la fonction\n      date() peuvent \u00eatre utilis\u00e9es."},{"t":"time","d":"Cha\u00eene repr\u00e9sentant l&#039;heure."},{"t":"timezone","d":"Un objet DateTimeZone repr\u00e9sentant\n      le fuseau horaire d\u00e9sir\u00e9."}]},"getLastErrors":{"s":"Retourne les derni\u00e8res erreurs et alertes","y":"public static array DateTime::getLastErrors\n    ( void\n   )","p":null},"modify":{"s":"Modifie le timestamp","y":"public DateTime DateTime::modify\n    ( string $modify\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"modify","d":"Une cha\u00eene date\/heure. Les formats valides sont expliqu\u00e9s dans la documentation sur les\nformats Date et Heure."}]},"__set_state":{"s":"Le gestionnaire __set_state","y":"public static DateTime DateTime::__set_state\n    ( array $array\n   )","p":[{"t":"array","d":"Le tableau d&#039;initialisation."}]},"setDate":{"s":"Assigne la date","y":"public DateTime DateTime::setDate\n    ( int $year\n   , int $month\n   , int $day\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"year","d":"Ann\u00e9e de la date."},{"t":"month","d":"Mois de la date."},{"t":"day","d":"Jour de la date."}]},"setISODate":{"s":"Configure une date ISO","y":"public DateTime DateTime::setISODate\n    ( int $year\n   , int $week\n   [, int $day = 1\n  ] )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"year","d":"L&#039;ann\u00e9e de la date."},{"t":"week","d":"Le num\u00e9ro de la semaine."},{"t":"day","d":"D\u00e9calage par rapport au premier jour de la semaine."}]},"setTime":{"s":"Assigne l&#039;heure","y":"public DateTime DateTime::setTime\n    ( int $hour\n   , int $minute\n   [, int $second = 0\n  ] )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"hour","d":"Heure du moment."},{"t":"minute","d":"Minute du moment."},{"t":"second","d":"Seconde du moment."}]},"setTimestamp":{"s":"Assigne la date et l&#039;heure \u00e0 l&#039;aide d&#039;un timestamp Unix","y":"public DateTime DateTime::setTimestamp\n    ( int $unixtimestamp\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"unixtimestamp","d":"Timestamp Unix repr\u00e9sentant la date et l&#039;heure."}]},"setTimezone":{"s":"Configure le fuseau horaire de l&#039;objet DateTime","y":"public DateTime DateTime::setTimezone\n    ( DateTimeZone $timezone\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"timezone","d":"Un objet DateTimeZone repr\u00e9sentant\n      le fuseau horaire d\u00e9sir\u00e9."}]},"sub":{"s":"Soustrait une dur\u00e9e \u00e0 un objet DateTime","y":"public DateTime DateTime::sub\n    ( DateInterval $interval\n   )","p":[{"t":"object","d":"Style proc\u00e9dural uniquement : Un objet DateTime\nretourn\u00e9 par la fonction date_create().\nCette fonction modifie cet objet."},{"t":"interval","d":"Un objet DateInterval"}]}},"ArrayObject":{"append":{"s":"Ajoute la valeur \u00e0 la fin d&#039;un tableau","y":"public void ArrayObject::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"La valeur ajout\u00e9e."}]},"asort":{"s":"Trie les \u00e9l\u00e9ments par valeur","y":"public void ArrayObject::asort\n    ( void\n   )","p":null},"__construct":{"s":"Construit un nouvel objet tableau","y":"","p":[{"t":"input","d":"Le param\u00e8tre input accepte\n       un tableau ou un autre objet."},{"t":"flags","d":"Option de contr\u00f4le du comportement de \n       l&#039;objet ArrayObject.\n       Voir la m\u00e9thode ArrayObject::setFlags()."},{"t":"iterator_class","d":"Sp\u00e9cifie la classe qui sera utilis\u00e9e pour les it\u00e9rations\n       de l&#039;objet ArrayObject."}]},"count":{"s":"Retourne le nombre de propri\u00e9t\u00e9s publiques dans l&#039;objet ArrayObject","y":"public int ArrayObject::count\n    ( void\n   )","p":null},"exchangeArray":{"s":"Remplace un tableau par un autre","y":"public array ArrayObject::exchangeArray\n    ( mixed $input\n   )","p":[{"t":"input","d":"Le nouveau tableau ou objet \u00e0 utiliser."}]},"getArrayCopy":{"s":"Cr\u00e9e une copie de l&#039;objet ArrayObject","y":"public array ArrayObject::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"Lit les options de comportement","y":"public int ArrayObject::getFlags\n    ( void\n   )","p":null},"getIterator":{"s":"Cr\u00e9e un nouvel it\u00e9rateur \u00e0 partir d&#039;un objet ArrayObject","y":"public ArrayIterator ArrayObject::getIterator\n    ( void\n   )","p":null},"getIteratorClass":{"s":"Lit le nom de la classe de ArrayObject","y":"public string ArrayObject::getIteratorClass\n    ( void\n   )","p":null},"ksort":{"s":"Trie un tableau par cl\u00e9","y":"public void ArrayObject::ksort\n    ( void\n   )","p":null},"natsort":{"s":"Trie les \u00e9l\u00e9ments avec un tri naturel","y":"public void ArrayObject::natsort\n    ( void\n   )","p":null},"offsetExists":{"s":"V\u00e9rifie si un index existe","y":"public bool ArrayObject::offsetExists\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 v\u00e9rifier."}]},"offsetGet":{"s":"Retourne la valeur de l&#039;index sp\u00e9cifi\u00e9","y":"public mixed ArrayObject::offsetGet\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index demand\u00e9."}]},"offsetSet":{"s":"D\u00e9finie $newval comme valeur \u00e0 l&#039;$index sp\u00e9cifi\u00e9","y":"public void ArrayObject::offsetSet\n    ( mixed $index\n   , mixed $newval\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 d\u00e9finir."},{"t":"newval","d":"La nouvelle valeur de l&#039;index index."}]},"offsetUnset":{"s":"Efface la valeur \u00e0 l&#039;$index sp\u00e9cifi\u00e9","y":"public void ArrayObject::offsetUnset\n    ( mixed $index\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 effacer."}]},"serialize":{"s":"Lin\u00e9arise un ArrayObject","y":"public string ArrayObject::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"Configure les options de comportement","y":"public void ArrayObject::setFlags\n    ( int $flags\n   )","p":[{"t":"flags","d":"Le nouveau comportement ArrayObject. \n       Cela peut \u00eatre un champ de bits ou des constantes nomm\u00e9es. L&#039;utilisation\n       des constantes est fortement encourag\u00e9e, pour assurer la compatibilit\u00e9\n       avec les futures versions."}]},"setIteratorClass":{"s":"D\u00e9finit le nom de la classe de l&#039;it\u00e9rateur pour l&#039;objet ArrayObject","y":"public void ArrayObject::setIteratorClass\n    ( string $iterator_class\n   )","p":[{"t":"iterator_class","d":"Le nom de la classe de l&#039;it\u00e9rateur \u00e0 utiliser pour it\u00e9rer sur cet\n       objet."}]},"uasort":{"s":"Trie les \u00e9l\u00e9ments avec une fonction utilisateur","y":"public void ArrayObject::uasort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction cmp_function doit accepter\n       deux param\u00e8tres, qui contiendront les \u00e9l\u00e9ments.\n       La fonction de comparaison doit retourner un entier qui peut\n       \u00eatre n\u00e9gatif, nul ou positif, suivant que le premier \n       param\u00e8tre est consid\u00e9r\u00e9 comme inf\u00e9rieur, \u00e9gal ou sup\u00e9rieur\n       au second."}]},"uksort":{"s":"Trie les \u00e9l\u00e9ments par cl\u00e9 avec une fonction utilisateur","y":"public void ArrayObject::uksort\n    ( callable $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de rappel pour les comparaisons."}]},"unserialize":{"s":"D\u00e9lin\u00e9arisation d&#039;un ArrayObject","y":"public void ArrayObject::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"L&#039;objet ArrayObject lin\u00e9aris\u00e9."}]}},"Directory":{"close":{"s":"Ferme le gestionnaire de dossier","y":"public void Directory::close\n    ([ resource $dir_handle\n  ] )","p":null},"read":{"s":"Lit une entr\u00e9e depuis le gestionnaire de dossier","y":"public string Directory::read\n    ([ resource $dir_handle\n  ] )","p":null},"rewind":{"s":"R\u00e9initialise le gestionnaire de dossier","y":"public void Directory::rewind\n    ([ resource $dir_handle\n  ] )","p":null}},"DirectoryIterator":{"__construct":{"s":"Construit un nouvel it\u00e9rateur de dossier \u00e0 partir d&#039;un chemin","y":"","p":[{"t":"path","d":"Le chemin du dossier \u00e0 parcourir."}]},"current":{"s":"Retourne l&#039;\u00e9l\u00e9ment courant du DirectoryIterator","y":"public DirectoryIterator DirectoryIterator::current\n    ( void\n   )","p":null},"getATime":{"s":"Lit la date et l&#039;heure du dernier acc\u00e8s \u00e0 un fichier","y":"public int DirectoryIterator::getATime\n    ( void\n   )","p":null},"getBasename":{"s":"Lit le nom de dossier de l&#039;\u00e9l\u00e9ment DirectoryIterator","y":"public\n   string \n   DirectoryIterator::getBasename\n    ([ \n    string\n     $suffix\n   \n  ] )","p":[{"t":"suffix","d":"Si le nom du dossier se termine par le suffixe suffix, \n       il sera retir\u00e9."}]},"getCTime":{"s":"R\u00e9cup\u00e8re l&#039;heure de cr\u00e9ation de l&#039;inode d&#039;un fichier","y":"public int DirectoryIterator::getCTime\n    ( void\n   )","p":null},"getExtension":{"s":"R\u00e9cup\u00e8re l&#039;extension du fichier","y":"public string DirectoryIterator::getExtension\n    ( void\n   )","p":null},"getFilename":{"s":"Retourne le nom de l&#039;entr\u00e9e courante du dossier","y":"public string DirectoryIterator::getFilename\n    ( void\n   )","p":null},"getGroup":{"s":"R\u00e9cup\u00e8re le groupe d&#039;un fichier","y":"public int DirectoryIterator::getGroup\n    ( void\n   )","p":null},"getInode":{"s":"R\u00e9cup\u00e8re l&#039;inode d&#039;un fichier","y":"public int DirectoryIterator::getInode\n    ( void\n   )","p":null},"getMTime":{"s":"R\u00e9cup\u00e8re l&#039;heure de la derni\u00e8re modification d&#039;un fichier","y":"public int DirectoryIterator::getMTime\n    ( void\n   )","p":null},"getOwner":{"s":"R\u00e9cup\u00e8re le propri\u00e9taire d&#039;un fichier","y":"public int DirectoryIterator::getOwner\n    ( void\n   )","p":null},"getPath":{"s":"Retourne le chemin du dossier","y":"public string DirectoryIterator::getPath\n    ( void\n   )","p":null},"getPathname":{"s":"Retourne le chemin et le nom de l&#039;entr\u00e9e courante du dossier","y":"public string DirectoryIterator::getPathname\n    ( void\n   )","p":null},"getPerms":{"s":"R\u00e9cup\u00e8re les permissions d&#039;un fichier","y":"public int DirectoryIterator::getPerms\n    ( void\n   )","p":null},"getSize":{"s":"R\u00e9cup\u00e8re la taille d&#039;un fichier","y":"public int DirectoryIterator::getSize\n    ( void\n   )","p":null},"getType":{"s":"R\u00e9cup\u00e8re le type d&#039;un fichier","y":"public string DirectoryIterator::getType\n    ( void\n   )","p":null},"isDir":{"s":"V\u00e9rifie si un fichier est un dossier","y":"public bool DirectoryIterator::isDir\n    ( void\n   )","p":null},"isDot":{"s":"Retourne TRUE si l&#039;entr\u00e9e courante est &#039;.&#039; ou &#039;..&#039;","y":"public bool DirectoryIterator::isDot\n    ( void\n   )","p":null},"isExecutable":{"s":"V\u00e9rifie si le fichier est ex\u00e9cutable","y":"public bool DirectoryIterator::isExecutable\n    ( void\n   )","p":null},"isFile":{"s":"V\u00e9rifie si l&#039;entr\u00e9e est un fichier normal","y":"public bool DirectoryIterator::isFile\n    ( void\n   )","p":null},"isLink":{"s":"V\u00e9rifie si le fichier est un lien symbolique","y":"public bool DirectoryIterator::isLink\n    ( void\n   )","p":null},"isReadable":{"s":"V\u00e9rifie si le fichier est accessible en lecture","y":"public bool DirectoryIterator::isReadable\n    ( void\n   )","p":null},"isWritable":{"s":"V\u00e9rifie si le fichier peut \u00eatre modifi\u00e9","y":"public bool DirectoryIterator::isWritable\n    ( void\n   )","p":null},"key":{"s":"Retourne l&#039;entr\u00e9e courante du dossier","y":"publicstring DirectoryIterator::key\n    ( void\n   )","p":null},"next":{"s":"Se d\u00e9place vers la prochaine entr\u00e9e","y":"publicvoid DirectoryIterator::next\n    ( void\n   )","p":null},"rewind":{"s":"Revient au d\u00e9but du dossier","y":"public void DirectoryIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"D\u00e9place le pointeur dans un it\u00e9rateur DirectoryIterator","y":"public\n   void \n   DirectoryIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"La position \u00e0 atteindre (les positions commencent \u00e0 z\u00e9ro)."}]},"__toString":{"s":"Lit le nom du fichier","y":"public\n   string \n   DirectoryIterator::__toString\n    ( void\n   )","p":null},"valid":{"s":"V\u00e9rifie si le r\u00e9pertoire contient encore des entr\u00e9es","y":"public bool DirectoryIterator::valid\n    ( void\n   )","p":null}},"ArrayIterator":{"__construct":{"s":"Construit un ArrayIterator","y":"public ArrayIterator::__construct\n    ([ mixed $array = array()\n   [, int $flags = 0\n  ]] )","p":[{"t":"array","d":"Le tableau ou l&#039;objet \u00e0 it\u00e9rer."},{"t":"flags","d":"Drapeaux permettant de contr\u00f4ler le\n       comportement de l&#039;objet ArrayIterator.\n       Voir la documentation de la m\u00e9thode\n       ArrayIterator::setFlags()."}]},"append":{"s":"Ajoute un \u00e9l\u00e9ment","y":"public void ArrayIterator::append\n    ( mixed $value\n   )","p":[{"t":"value","d":"La valeur \u00e0 ajouter."}]},"asort":{"s":"Trie un tableau par les valeurs","y":"public void ArrayIterator::asort\n    ( void\n   )","p":null},"count":{"s":"Compte les \u00e9l\u00e9ments","y":"public int ArrayIterator::count\n    ( void\n   )","p":null},"current":{"s":"Retourne l&#039;entr\u00e9e courante du tableau","y":"public mixed ArrayIterator::current\n    ( void\n   )","p":null},"getArrayCopy":{"s":"R\u00e9cup\u00e8re la copie d&#039;un tableau","y":"public array ArrayIterator::getArrayCopy\n    ( void\n   )","p":null},"getFlags":{"s":"R\u00e9cup\u00e8re un comportement","y":"public void ArrayIterator::getFlags\n    ( void\n   )","p":null},"key":{"s":"Retourne la cl\u00e9 courante du tableau","y":"public mixed ArrayIterator::key\n    ( void\n   )","p":null},"ksort":{"s":"Trie un tableau par les cl\u00e9s","y":"public void ArrayIterator::ksort\n    ( void\n   )","p":null},"natcasesort":{"s":"Trie naturellement un tableau, en ne tenant pas compte de la casse","y":"public void ArrayIterator::natcasesort\n    ( void\n   )","p":null},"natsort":{"s":"Trie naturellement un tableau","y":"public void ArrayIterator::natsort\n    ( void\n   )","p":null},"next":{"s":"Se d\u00e9place vers la prochaine entr\u00e9e","y":"public void ArrayIterator::next\n    ( void\n   )","p":null},"offsetExists":{"s":"V\u00e9rifie si une position existe","y":"public void ArrayIterator::offsetExists\n    ( string $index\n   )","p":[{"t":"index","d":"La position \u00e0 v\u00e9rifier."}]},"offsetGet":{"s":"R\u00e9cup\u00e8re la valeur pour une position","y":"public mixed ArrayIterator::offsetGet\n    ( string $index\n   )","p":[{"t":"index","d":"La position dont on doit r\u00e9cup\u00e9rer la valeur."}]},"offsetSet":{"s":"D\u00e9finit la valeur d&#039;une position","y":"public void ArrayIterator::offsetSet\n    ( string $index\n   , string $newval\n   )","p":[{"t":"index","d":"L&#039;index \u00e0 d\u00e9finir."},{"t":"newval","d":"La nouvelle valeur \u00e0 stocker \u00e0 l&#039;index donn\u00e9."}]},"offsetUnset":{"s":"Efface la valeur d&#039;une position","y":"public void ArrayIterator::offsetUnset\n    ( string $index\n   )","p":[{"t":"index","d":"La position \u00e0 effacer."}]},"rewind":{"s":"Revient \u00e0 la position initiale","y":"public void ArrayIterator::rewind\n    ( void\n   )","p":null},"seek":{"s":"Avance \u00e0 une position donn\u00e9e","y":"public void ArrayIterator::seek\n    ( int $position\n   )","p":[{"t":"position","d":"La position d\u00e9sir\u00e9e."}]},"serialize":{"s":"Lin\u00e9arisation","y":"public string ArrayIterator::serialize\n    ( void\n   )","p":null},"setFlags":{"s":"D\u00e9finit des comportements","y":"public void ArrayIterator::setFlags\n    ( string $flags\n   )","p":[{"t":"flags","d":"Un masque, comme suit :\n       \n        \n         0 = Les propri\u00e9t\u00e9s d&#039;un objet ont leur fonctionnalit\u00e9 normale\n         lorsqu&#039;on y acc\u00e8de comme des listes (var_dump, foreach, etc.).\n        \n        \n         1 = Les indices d&#039;un tableau peuvent \u00eatre acc\u00e9d\u00e9s comme des\n         propri\u00e9t\u00e9s en mode lecture\/\u00e9criture."}]},"uasort":{"s":"Tri d\u00e9fini par l&#039;utilisateur","y":"public void ArrayIterator::uasort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de comparaison \u00e0 utiliser pour le tri."}]},"uksort":{"s":"Trie d\u00e9fini par l&#039;utilisateur","y":"public void ArrayIterator::uksort\n    ( string $cmp_function\n   )","p":[{"t":"cmp_function","d":"La fonction de comparaison pour le tri."}]},"unserialize":{"s":"D\u00e9lin\u00e9arisation","y":"public string ArrayIterator::unserialize\n    ( string $serialized\n   )","p":[{"t":"serialized","d":"L&#039;objet ArrayIterator lin\u00e9aris\u00e9."}]},"valid":{"s":"V\u00e9rifie si un tableau contient d&#039;autres entr\u00e9es","y":"public bool ArrayIterator::valid\n    ( void\n   )","p":null}},"RegexIterator":{"accept":{"s":"R\u00e9cup\u00e8re le statut d&#039;acceptation","y":"public bool RegexIterator::accept\n    ( void\n   )","p":null},"__construct":{"s":"Cr\u00e9e un nouvel objet RegexIterator","y":"","p":[{"t":"iterator","d":"L&#039;it\u00e9rateur sur lequel l&#039;expression rationnelle sera appliqu\u00e9e."},{"t":"regex","d":"L&#039;expression rationnelle."},{"t":"mode","d":"Le mode de l&#039;op\u00e9ration, voir la m\u00e9thode\n       RegexIterator::setMode() pour une liste des modes."},{"t":"flags","d":"Drapeaux sp\u00e9ciaux, voir la m\u00e9thode\n       RegexIterator::setFlags() pour une liste des\n       drapeaux disponibles."},{"t":"preg_flags","d":"Les drapeaux de l&#039;expression rationnelle. Ils d\u00e9pendant du mode de l&#039;op\u00e9ration :"}]},"getFlags":{"s":"R\u00e9cup\u00e8re les drapeaux","y":"public int RegexIterator::getFlags\n    ( void\n   )","p":null},"getMode":{"s":"Retourne le mode de l&#039;op\u00e9ration","y":"public int RegexIterator::getMode\n    ( void\n   )","p":null},"getPregFlags":{"s":"Retourne les drapeaux de l&#039;expression rationnelle","y":"public int RegexIterator::getPregFlags\n    ( void\n   )","p":null},"getRegex":{"s":"Retourne l&#039;expression rationnelle courante","y":"public string RegexIterator::getRegex\n    ( void\n   )","p":null},"setFlags":{"s":"D\u00e9finit les drapeaux","y":"public void RegexIterator::setFlags\n    ( int $flags\n   )","p":[{"t":"flags","d":"Les drapeaux \u00e0 d\u00e9finir, un masque de constantes de classe."}]},"setMode":{"s":"D\u00e9finit le mode de l&#039;op\u00e9ration","y":"public void RegexIterator::setMode\n    ( int $mode\n   )","p":[{"t":"mode","d":"Le mode de l&#039;op\u00e9ration."}]},"setPregFlags":{"s":"D\u00e9finit les drapeaux de l&#039;expression rationnelle","y":"public void RegexIterator::setPregFlags\n    ( int $preg_flags\n   )","p":[{"t":"preg_flags","d":"Les drapeaux de l&#039;expression rationnelle. Voir la m\u00e9thode\n       RegexIterator::__construct() pour une liste de\n       tous les drapeaux disponibles."}]}},"Exception":{"__construct":{"s":"Construit l&#039;exception","y":"","p":[{"t":"message","d":"Le message de l&#039;exception \u00e0 lancer."},{"t":"code","d":"Le code de l&#039;exception."},{"t":"previous","d":"L&#039;exception pr\u00e9c\u00e9dente, utilis\u00e9e pour le cha\u00eenage d&#039;exception."}]},"getMessage":{"s":"R\u00e9cup\u00e8re le message de l&#039;exception","y":"final public string Exception::getMessage\n    ( void\n   )","p":null},"getPrevious":{"s":"Retourne l&#039;exception pr\u00e9c\u00e9dente","y":"final public Exception Exception::getPrevious\n    ( void\n   )","p":null},"getCode":{"s":"R\u00e9cup\u00e8re le code de l&#039;exception","y":"final public mixed Exception::getCode\n    ( void\n   )","p":null},"getFile":{"s":"R\u00e9cup\u00e8re le fichier dans lequel l&#039;exception est survenue","y":"final public string Exception::getFile\n    ( void\n   )","p":null},"getLine":{"s":"R\u00e9cup\u00e8re la ligne dans laquelle l&#039;exception est survenue","y":"final public int Exception::getLine\n    ( void\n   )","p":null},"getTrace":{"s":"R\u00e9cup\u00e8re la trace de la pile","y":"final public array Exception::getTrace\n    ( void\n   )","p":null},"getTraceAsString":{"s":"R\u00e9cup\u00e8re la trace de la pile en tant que cha\u00eene","y":"final public string Exception::getTraceAsString\n    ( void\n   )","p":null},"__toString":{"s":"Repr\u00e9sente l&#039;exception sous la forme d&#039;une cha\u00eene","y":"public string  Exception::__toString\n    ( void\n   )","p":null},"__clone":{"s":"Clone l&#039;exception","y":"final private void Exception::__clone\n    ( void\n   )","p":null}},"ErrorException":{"__construct":{"s":"Construit l&#039;exception","y":"","p":[{"t":"message","d":"Le message de l&#039;exception \u00e0 lancer."},{"t":"code","d":"Le code de l&#039;exception."},{"t":"severity","d":"Le degr\u00e9 de s\u00e9v\u00e9rit\u00e9 de l&#039;exception."},{"t":"filename","d":"Le fichier depuis lequel l&#039;exception est lanc\u00e9e."},{"t":"lineno","d":"Le num\u00e9ro de ligne depuis laquelle l&#039;exception est lanc\u00e9e."},{"t":"previous","d":"La pr\u00e9c\u00e9dente exception utilis\u00e9e pour le cha\u00eenage des\n       exceptions."}]},"getSeverity":{"s":"R\u00e9cup\u00e8re la s\u00e9v\u00e9rit\u00e9 de l&#039;exception","y":"final public int ErrorException::getSeverity\n    ( void\n   )","p":null}},"Closure":{"__construct":{"s":"Constructeur emp\u00eachant l&#039;instanciation","y":"Closure::__construct\n    ( void\n   )","p":null},"bind":{"s":"Duplique une fermeture avec un nouvel objet li\u00e9 et un nouveau contexte de classe.","y":"public static Closure Closure::bind\n    ( Closure $closure\n   , object $newthis\n   [, mixed $newscope\n    = &quot;static&quot;\n  ] )","p":[{"t":"closure","d":"La fonction anonyme \u00e0 lier."},{"t":"newthis","d":"L&#039;objet auquel lier la fonction anonyme ou NULL pour d\u00e9lier"},{"t":"newscope","d":"Le contexte de classe \u00e0 associer \u00e0 la fermeture, ou &#039;static&#039; pour conserver le\n      contexte actuel. Si un objet est utilis\u00e9, son type sera utilis\u00e9.\n      Ceci d\u00e9termine les acc\u00e8s prot\u00e9g\u00e9s et priv\u00e9s de l&#039;objet li\u00e9."}]},"bindTo":{"s":"Duplique la fermeture avec un nouvel objet li\u00e9 et un nouveau contexte de classe.","y":"public Closure Closure::bindTo\n    ( object $newthis\n   [, mixed $newscope\n    = &quot;static&quot;\n  ] )","p":[{"t":"newthis","d":"L&#039;objet auquel lier la fonction anonyme, ou NULL pour une fermeture statique."},{"t":"newscope","d":"Le contexte de classe \u00e0 associer \u00e0 la fermeture, ou &#039;static&#039; pour conserver le\n      contexte actuel. Si un objet est pass\u00e9, son type sera utilis\u00e9.\n      Ceci determine la visibilit\u00e9 des m\u00e9thodes prot\u00e9g\u00e9es et priv\u00e9es de l&#039;objet li\u00e9."}]}},"DateTimeZone":{"__construct":{"s":"Cr\u00e9e un nouvel objet DateTimeZone","y":"","p":[{"t":"timezone","d":"Un des fuseaux horaires."}]},"getLocation":{"s":"Retourne les informations g\u00e9ographiques d&#039;un fuseau horaire","y":"public array DateTimeZone::getLocation\n    ( void\n   )","p":[{"t":"object","d":"Seulement en style proc\u00e9dural : un DateTimeZone objet\nretourn\u00e9 par timezone_open()"}]},"getName":{"s":"Retourne le nom du fuseau horaire","y":"public string DateTimeZone::getName\n    ( void\n   )","p":[{"t":"object","d":"L&#039;objet DateTimeZone utilis\u00e9 pour r\u00e9cup\u00e9rer\n      le nom du fuseau horaire."}]},"getOffset":{"s":"Retourne le d\u00e9calage GMT d&#039;un fuseau horaire","y":"public int DateTimeZone::getOffset\n    ( DateTime $datetime\n   )","p":[{"t":"object","d":"Seulement en style proc\u00e9dural : un DateTimeZone objet\nretourn\u00e9 par timezone_open()"},{"t":"datetime","d":"Objet DateTime qui contient la date\n       dont il faut calculer le d\u00e9calage."}]},"getTransitions":{"s":"Retourne toutes les transitions d&#039;un fuseau horaire","y":"public array DateTimeZone::getTransitions\n    ([ int $timestamp_begin\n   [, int $timestamp_end\n  ]] )","p":[{"t":"object","d":"Seulement en style proc\u00e9dural : un DateTimeZone objet\nretourn\u00e9 par timezone_open()"},{"t":"timestamp_begin","d":"D\u00e9but du timestamp."},{"t":"timestamp_end","d":"Fin du timestamp."}]},"listAbbreviations":{"s":"Retourne un tableau associatif, d\u00e9crivant un fuseau horaire","y":"public static array DateTimeZone::listAbbreviations\n    ( void\n   )","p":null},"listIdentifiers":{"s":"Retourne un tableau num\u00e9rique contenant tous les identifiants de fuseaux horaires d\u00e9finis","y":"public static array DateTimeZone::listIdentifiers\n    ([ int $what = DateTimeZone::ALL\n   [, string $country = NULL\n  ]] )","p":[{"t":"what","d":"Une des constantes de classe DateTimeZone."},{"t":"country","d":"Un code de pays en deux lettres, compatible ISO 3166-1."}]}},"DateInterval":{"__construct":{"s":"Cr\u00e9e un nouvel objet DateInterval","y":"","p":[{"t":"interval_spec","d":"Une sp\u00e9cification d&#039;intervalle."}]},"createFromDateString":{"s":"Configure un objet DateInterval \u00e0 partir des parties d&#039;une cha\u00eene","y":"public static DateInterval DateInterval::createFromDateString\n    ( string $time\n   )","p":[{"t":"time","d":"Une date avec des parties relatives. Sp\u00e9cifiquement, le\n       format relatif\n       support\u00e9 par l&#039;analyseur utilis\u00e9 pour la fonction\n       strtotime() et la fonction\n       DateTime sera utilis\u00e9 pour construire le\n       DateInterval."}]},"format":{"s":"Formate l&#039;intervalle","y":"public string DateInterval::format\n    ( string $format\n   )","p":[{"t":"format","d":"Les caract\u00e8res suivants sont reconnus dans la cha\u00eene\n         format.\n         Chaque caract\u00e8re utilis\u00e9 pour le format doit \u00eatre\n         pr\u00e9fix\u00e9 par un signe de pourcentage\n         (%).\n        \n        \n         \n          \n           Caract\u00e8re de format\n           Description\n           Valeur d&#039;exemple\n          \n\n         \n\n         \n          \n           %\n           Caract\u00e8re % litt\u00e9ral\n           %\n          \n\n          \n           Y\n           Ann\u00e9e, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03\n          \n\n          \n           y\n           Ann\u00e9e, num\u00e9rique\n           1, 3\n          \n\n          \n           M\n           Mois, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03, 12\n          \n\n          \n           m\n           Mois, num\u00e9rique\n           1, 3, 12\n          \n\n          \n           D\n           Jour, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03, 31\n          \n\n          \n           d\n           Jour, num\u00e9rique\n           1, 3, 31\n          \n\n          \n           a\n           Nombre total de jours, provenant de la m\u00e9thode DateTime::diff()\n            ou (unknown) sinon\n           4, 18, 8123\n          \n\n          \n           H\n           Heure, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03, 23\n          \n\n          \n           h\n           Heure, num\u00e9rique\n           1, 3, 23\n          \n\n          \n           I\n           Minute, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03, 59\n          \n\n          \n           i\n           Minute, num\u00e9rique\n           1, 3, 59\n          \n\n          \n           S\n           Seconde, num\u00e9rique, au moins 2 chiffres avec z\u00e9ros initiaux\n           01, 03, 57\n          \n\n          \n           s\n           Seconde, num\u00e9rique\n           1, 3, 57\n          \n\n          \n           R\n           Signe &quot;-&quot; lorsque n\u00e9gatif, &quot;+&quot; si positif\n           -, +\n          \n\n          \n           r\n           Signe &quot;-&quot; lorsque n\u00e9gatif, vide si positif\n           -,"}]}},"DatePeriod":{"__construct":{"s":"Cr\u00e9e un nouvel objet DatePeriod","y":"","p":[{"t":"start","d":"La date de d\u00e9but de la p\u00e9riode."},{"t":"interval","d":"L&#039;intervalle entre les r\u00e9currences de la p\u00e9riode."},{"t":"recurrences","d":"Le nombre de r\u00e9currences."},{"t":"end","d":"La date de fin de la p\u00e9riode."},{"t":"isostr","d":"Une sp\u00e9cification ISO 8601 de la r\u00e9p\u00e9tition de l&#039;intervalle."},{"t":"options","d":"Peut \u00eatre configur\u00e9 \u00e0 DatePeriod::EXCLUDE_START_DATE\n       pour exclure la date de d\u00e9but du jeu de dates de r\u00e9cursion dans\n       la p\u00e9riode."}]}},"LibXMLError":[],"DOMException":[],"LogicException":[],"IteratorIterator":{"__construct":{"s":"Cr\u00e9e un it\u00e9rateur \u00e0 partir d&#039;un objet traversable","y":"public IteratorIterator::__construct\n    ( Traversable $iterator\n   )","p":[{"t":"iterator","d":"L&#039;it\u00e9rateur traversable."}]},"current":{"s":"Lit la valeur courante","y":"public mixed IteratorIterator::current\n    ( void\n   )","p":null},"getInnerIterator":{"s":"Retourne l&#039;it\u00e9rateur interne","y":"public Traversable IteratorIterator::getInnerIterator\n    ( void\n   )","p":null},"key":{"s":"Lit la cl\u00e9 de l&#039;\u00e9l\u00e9ment courant","y":"public scalar IteratorIterator::key\n    ( void\n   )","p":null},"next":{"s":"Avance au prochain \u00e9l\u00e9ment","y":"public void IteratorIterator::next\n    ( void\n   )","p":null},"rewind":{"s":"Retourne au premier \u00e9l\u00e9ment","y":"public void IteratorIterator::rewind\n    ( void\n   )","p":null},"valid":{"s":"V\u00e9rifie si un it\u00e9rateur est valide","y":"public bool IteratorIterator::valid\n    ( void\n   )","p":null}},"FilterIterator":{"accept":{"s":"V\u00e9rifie si l&#039;\u00e9l\u00e9ment courant de l&#039;it\u00e9rateur est acceptable","y":"public\n   abstract\n   bool FilterIterator::accept\n    ( void\n   )","p":null},"__construct":{"s":"Construit un filterIterator","y":"public\n   FilterIterator::__construct\n    ( Iterator $iterator\n   )","p":[{"t":"iterator","d":"L&#039;it\u00e9rateur \u00e0 filtrer."}]},"current":{"s":"R\u00e9cup\u00e8re la valeur de l&#039;\u00e9l\u00e9ment courant","y":"public mixed FilterIterator::current\n    ( void\n   )","p":null},"getInnerIterator":{"s":"R\u00e9cup\u00e8re l&#039;it\u00e9rateur interne","y":"public Iterator FilterIterator::getInnerIterator\n    ( void\n   )","p":null},"key":{"s":"R\u00e9cup\u00e8re la cl\u00e9 courante","y":"public mixed FilterIterator::key\n    ( void\n   )","p":null},"next":{"s":"D\u00e9place l&#039;it\u00e9rateur \u00e0 la position suivante","y":"public void FilterIterator::next\n    ( void\n   )","p":null},"rewind":{"s":"Replace l&#039;it\u00e9rateur au d\u00e9but","y":"public void FilterIterator::rewind\n    ( void\n   )","p":null},"valid":{"s":"V\u00e9rifie si l&#039;\u00e9l\u00e9ment courant est valide","y":"public bool FilterIterator::valid\n    ( void\n   )","p":null}},"XMLReader":{"close":{"s":"Ferme l&#039;entr\u00e9e XMLReader","y":"public bool XMLReader::close\n    ( void\n   )","p":null},"expand":{"s":"Retourne une copie du noeud courant comme un noeud d&#039;objet DOM","y":"public\n   DOMNode \n   XMLReader::expand\n    ([ DOMNode $basenode\n  ] )","p":null},"getAttribute":{"s":"R\u00e9cup\u00e8re la valeur d&#039;un attribut par nom","y":"public\n   string \n   XMLReader::getAttribute\n    ( string $name\n   )","p":[{"t":"name","d":"Le nom de l&#039;attribut."}]},"getAttributeNo":{"s":"R\u00e9cup\u00e8re la valeur d&#039;un attribut par index","y":"public\n   string \n   XMLReader::getAttributeNo\n    ( int $index\n   )","p":[{"t":"index","d":"La position de l&#039;attribut."}]},"getAttributeNs":{"s":"R\u00e9cup\u00e8re la valeur d&#039;un attribut par nom local et URI","y":"public string XMLReader::getAttributeNs\n    ( string $localName\n   , string $namespaceURI\n   )","p":[{"t":"localName","d":"Le nom local."},{"t":"namespaceURI","d":"L&#039;espace de nom URI."}]},"getParserProperty":{"s":"Indique si la propri\u00e9t\u00e9 sp\u00e9cifi\u00e9e a \u00e9t\u00e9 fix\u00e9e","y":"public bool XMLReader::getParserProperty\n    ( int $property\n   )","p":[{"t":"property","d":"Une des constantes\n       d&#039;analyseur."}]},"isValid":{"s":"Indique si le document analys\u00e9 est valide","y":"public bool XMLReader::isValid\n    ( void\n   )","p":null},"lookupNamespace":{"s":"Consulte l&#039;espace de nom pour un pr\u00e9fixe","y":"public\n   bool \n   XMLReader::lookupNamespace\n    ( string $prefix\n   )","p":[{"t":"prefix","d":"Cha\u00eenes de caract\u00e8res contenant le pr\u00e9fixe."}]},"moveToAttribute":{"s":"D\u00e9place un curseur \u00e0 un attribut nomm\u00e9","y":"public\n   bool \n   XMLReader::moveToAttribute\n    ( string $name\n   )","p":[{"t":"name","d":"Le nom de l&#039;attribut."}]},"moveToAttributeNo":{"s":"D\u00e9place le curseur \u00e0 un attribut par index","y":"public\n   bool \n   XMLReader::moveToAttributeNo\n    ( int $index\n   )","p":[{"t":"index","d":"La position de l&#039;attribut."}]},"moveToAttributeNs":{"s":"D\u00e9place le curseur \u00e0 un attribut d&#039;espace de nom","y":"public\n   bool \n   XMLReader::moveToAttributeNs\n    ( string $localName\n   , string $namespaceURI\n   )","p":[{"t":"localName","d":"Le nom local."},{"t":"namespaceURI","d":"L&#039;espace de nom URI."}]},"moveToElement":{"s":"Positionne le curseur sur l&#039;\u00e9l\u00e9ment parent de l&#039;attribut courant","y":"public bool XMLReader::moveToElement\n    ( void\n   )","p":null},"moveToFirstAttribute":{"s":"Positionne le curseur sur le premier attribut","y":"public bool XMLReader::moveToFirstAttribute\n    ( void\n   )","p":null},"moveToNextAttribute":{"s":"Positionne le curseur sur le prochain attribut","y":"public bool XMLReader::moveToNextAttribute\n    ( void\n   )","p":null},"next":{"s":"D\u00e9place le curseur au prochain noeud en sautant tous les sous arbres","y":"public\n   bool \n   XMLReader::next\n    ([ string $localname\n  ] )","p":[{"t":"localname","d":"Le nom du prochaine noeud \u00e0 se d\u00e9placer."}]},"open":{"s":"Fixe le URI contenant le XML \u00e0 analyser","y":"public\n   bool \n   XMLReader::open\n    ( string $URI\n   [, string $encoding\n   [, int $options = 0\n  ]] )","p":[{"t":"URI","d":"URI pointant vers le document."},{"t":"encoding","d":"L&#039;encodage du document, ou NULL."},{"t":"options","d":"Un masque de constante LIBXML_*."}]},"read":{"s":"D\u00e9place le curseur sur le prochain noeud du document","y":"public bool XMLReader::read\n    ( void\n   )","p":null},"readInnerXML":{"s":"Lit le code XML du noeud courant","y":"public string XMLReader::readInnerXML\n    ( void\n   )","p":null},"readOuterXML":{"s":"Lit le code XML du noeud courant, y compris lui-m\u00eame","y":"public string XMLReader::readOuterXML\n    ( void\n   )","p":null},"readString":{"s":"Lit le contenu du noeud courant sous forme de cha\u00eene","y":"public string XMLReader::readString\n    ( void\n   )","p":null},"setParserProperty":{"s":"Fixe des options pour l&#039;analyseur","y":"public\n   bool \n   XMLReader::setParserProperty\n    ( int $property\n   , bool $value\n   )","p":[{"t":"property","d":"Une des constantes\n       d&#039;analyseur."},{"t":"value","d":"Si fix\u00e9e \u00e0 TRUE, l&#039;option sera activ\u00e9e sinon elle sera d\u00e9sactiv\u00e9e."}]},"setRelaxNGSchema":{"s":"Fixe le nom du fichier ou l&#039;URI pour le Sch\u00e9ma RelaxNG","y":"public\n   bool \n   XMLReader::setRelaxNGSchema\n    ( string $filename\n   )","p":[{"t":"filename","d":"Nom du fichier ou URI pointant vers le Sch\u00e9ma RelaxNG."}]},"setRelaxNGSchemaSource":{"s":"Sp\u00e9cifie le sch\u00e9ma RelaxNG","y":"public\n   bool \n   XMLReader::setRelaxNGSchemaSource\n    ( string $source\n   )","p":[{"t":"source","d":"Cha\u00eene de caract\u00e8res contenant le sch\u00e9ma RelaxNG."}]},"setSchema":{"s":"Valide le document avec XSD","y":"public bool XMLReader::setSchema\n    ( string $filename\n   )","p":[{"t":"filename","d":"Le nom du fichier de sch\u00e9ma XSD."}]},"XML":{"s":"Fixe les donn\u00e9es contenant le XML \u00e0 analyser","y":"public\n   bool \n   XMLReader::xml\n    ( string $source\n   [, string $encoding\n   [, int $options = 0\n  ]] )","p":[{"t":"source","d":"Cha\u00eene de caract\u00e8res contenant le XML \u00e0 analyser."},{"t":"encoding","d":"L&#039;encodage du document, ou NULL."},{"t":"options","d":"Un masque de constantes LIBXML_*."}]}},"XMLWriter":[],"ZipArchive":{"addEmptyDir":{"s":"Ajoute un nouveau dossier \u00e0 une archive Zip","y":"bool ZipArchive::addEmptyDir\n    ( string $dirname\n   )","p":[{"t":"dirname","d":"Le dossier \u00e0 ajouter."}]},"addFile":{"s":"Ajoute un fichier \u00e0 l&#039;archive ZIP depuis le chemin fourni","y":"bool ZipArchive::addFile\n    ( string $filename\n   [, string $localname = NULL\n   [, int $start = 0\n   [, int $length = 0\n  ]]] )","p":[{"t":"filename","d":"Le chemin vers le fichier \u00e0 ajouter"},{"t":"localname","d":"Si fourni, ce sera le nom local dans l&#039;archive ZIP qui \u00e9crasera\n       le contenu du param\u00e8tre filename."},{"t":"start","d":"Ce param\u00e8tre n&#039;est pas utilis\u00e9 mais est n\u00e9cessaire pour\n       \u00e9tendre la classe ZipArchive."},{"t":"length","d":"Ce param\u00e8tre n&#039;est pas utilis\u00e9 mais est n\u00e9cessaire pour\n       \u00e9tendre la classe ZipArchive."}]},"addFromString":{"s":"Ajoute un fichier \u00e0 une archive ZIP en utilisant son contenu","y":"bool ZipArchive::addFromString\n    ( string $localname\n   , string $contents\n   )","p":[{"t":"localname","d":"Le nom de l&#039;entr\u00e9e \u00e0 cr\u00e9er"},{"t":"contents","d":"Le contenu \u00e0 utiliser pour cr\u00e9er l&#039;entr\u00e9e. Ceci est utilis\u00e9 dans un\n       mode binaire s\u00e9curis\u00e9."}]},"addGlob":{"s":"Ajoute des fichiers d&#039;un dossier en utilisant un masque glob","y":"bool ZipArchive::addGlob\n    ( string $pattern\n   [, int $flags = 0\n   [, array $options = array()\n  ]] )","p":[{"t":"pattern","d":"Un masque glob()."},{"t":"flags","d":"Un masque d&#039;octets de drapeaux glob()."},{"t":"options","d":"Un tableau associatif d&#039;options. Les options disponibles sont :\n      \n       \n        \n         &quot;add_path&quot;"}]},"addPattern":{"s":"Ajoute des fichiers d&#039;un dossier en utilisant une expression r\u00e9guli\u00e8re PCRE","y":"bool ZipArchive::addPattern\n    ( string $pattern\n   [, string $path = &quot;.&quot;\n   [, array $options = array()\n  ]] )","p":[{"t":"pattern","d":"Une expression r\u00e9guli\u00e8re PCRE."},{"t":"path","d":"Le dossier \u00e0 analyser. Par d\u00e9faut, ce sera le dossier courant."},{"t":"options","d":"Un tableau associatif d&#039;options accept\u00e9s par la m\u00e9thode\n      ZipArchive::addGlob()."}]},"close":{"s":"Ferme l&#039;archive active","y":"bool ZipArchive::close\n    ( void\n   )","p":null},"deleteIndex":{"s":"Efface une entr\u00e9e de l&#039;archive en utilisant son index","y":"bool ZipArchive::deleteIndex\n    ( int $index\n   )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e \u00e0 effacer"}]},"deleteName":{"s":"Efface une entr\u00e9e dans l&#039;archive en utilisant son nom","y":"bool ZipArchive::deleteName\n    ( string $name\n   )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e \u00e0 effacer"}]},"extractTo":{"s":"Extrait le contenu de l&#039;archive","y":"bool ZipArchive::extractTo\n    ( string $destination\n   [, mixed $entries\n  ] )","p":[{"t":"destination","d":"Endroit o\u00f9 l&#039;on doit extraire les fichiers"},{"t":"entries","d":"Les entr\u00e9es \u00e0 extraire. Ce peut \u00eatre soit le nom d&#039;une entr\u00e9e ou un\n       tableau de noms"}]},"getArchiveComment":{"s":"Retourne le commentaire de l&#039;archive ZIP","y":"string ZipArchive::getArchiveComment\n    ([ int $flags\n  ] )","p":[{"t":"flags","d":"Si ce param\u00e8tre est d\u00e9fini \u00e0 ZipArchive::FL_UNCHANGED,\n       le commentaire original non modifi\u00e9 sera retourn\u00e9."}]},"getCommentIndex":{"s":"Retourne le commentaire d&#039;une entr\u00e9e","y":"string ZipArchive::getCommentIndex\n    ( int $index\n   [, int $flags\n  ] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"},{"t":"flags","d":"Si ce flag est d\u00e9fini \u00e0 ZipArchive::FL_UNCHANGED,\n       le commentaire original est retourn\u00e9."}]},"getCommentName":{"s":"Retourne le commentaire d&#039;une entr\u00e9e en utilisant le nom de l&#039;entr\u00e9e","y":"string ZipArchive::getCommentName\n    ( string $name\n   [, int $flags\n  ] )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e"},{"t":"flags","d":"Si ce flag est d\u00e9fini \u00e0 ZipArchive::FL_UNCHANGED,\n       le commentaire original est retourn\u00e9."}]},"getExternalAttributesIndex":{"s":"R\u00e9cup\u00e8re les attributs \u00e9tendus d&#039;une entr\u00e9e d\u00e9finie par son index","y":"bool \n   ZipArchive::GetExternalAttributesIndex\n    ( int $index\n   , int &$opsys\n   , int &$attr\n   [, int $flags\n  ] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e."},{"t":"opsys","d":"En cas de succ\u00e8s, r\u00e9cup\u00e8re le code du syst\u00e8me d&#039;exploitation d\u00e9fini par une des constantes ZipArchive::OPSYS_."},{"t":"attr","d":"En cas de succ\u00e8s, r\u00e9cup\u00e8re les attributs \u00e9tendus, la valeur d\u00e9pend du syst\u00e8me d&#039;exploitation."},{"t":"flags","d":"Si cet indicateur est positionn\u00e9 \u00e0 ZipArchive::FL_UNCHANGED,\n       les valeurs originales sont retourn\u00e9es."}]},"getExternalAttributesName":{"s":"R\u00e9cup\u00e8re les attributs \u00e9tendus d&#039;une entr\u00e9e d\u00e9finie par son nom","y":"bool \n   ZipArchive::getExternalAttributesName\n    ( string $name\n   , int &$opsys\n   , int &$attr\n   [, int $flags\n  ] )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e."},{"t":"opsys","d":"En cas de succ\u00e8s, r\u00e9cup\u00e8re le code du syst\u00e8me d&#039;exploitation d\u00e9fini par une des constantes ZipArchive::OPSYS_."},{"t":"attr","d":"En cas de succ\u00e8s, r\u00e9cup\u00e8re les attributs \u00e9tendus, la valeur d\u00e9pend du syst\u00e8me d&#039;exploitation."},{"t":"flags","d":"Si cet indicateur est positionn\u00e9 \u00e0 ZipArchive::FL_UNCHANGED,\n       les valeurs originales sont retourn\u00e9es."}]},"getFromIndex":{"s":"Retourne le contenu d&#039;une entr\u00e9e en utilisant son index","y":"string ZipArchive::getFromIndex\n    ( int $index\n   [, int $length = 0\n   [, int $flags\n  ]] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"},{"t":"length","d":"La longueur \u00e0 lire depuis l&#039;entr\u00e9e. Si vaut 0,\n       alors toute l&#039;entr\u00e9e sera lue."},{"t":"flags","d":"Le flag \u00e0 utiliser pour ouvrir l&#039;archive.\n       \n        \n         \n          ZipArchive::FL_UNCHANGED"}]},"getFromName":{"s":"Retourne le contenu de l&#039;entr\u00e9e en utilisant son nom","y":"string ZipArchive::getFromName\n    ( string $name\n   [, int $length = 0\n   [, int $flags\n  ]] )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e"},{"t":"length","d":"La longueur \u00e0 lire depuis l&#039;entr\u00e9e. Si vaut 0,\n       alors toute l&#039;entr\u00e9e sera lue."},{"t":"flags","d":"Le flag \u00e0 utiliser pour ouvrir l&#039;archive.\n       \n        \n         \n          ZipArchive::FL_UNCHANGED"}]},"getNameIndex":{"s":"Retourne le nom d&#039;une entr\u00e9e en utilisant son index","y":"string ZipArchive::getNameIndex\n    ( int $index\n   [, int $flags\n  ] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"},{"t":"flags","d":"Si ce param\u00e8tre est d\u00e9fini \u00e0 ZipArchive::FL_UNCHANGED,\n       le nom original non modifi\u00e9 sera retourn\u00e9."}]},"getStatusString":{"s":"Retourne le message du statut de l&#039;erreur, du syst\u00e8me ou de zip","y":"string ZipArchive::getStatusString\n    ( void\n   )","p":null},"getStream":{"s":"R\u00e9cup\u00e8re un gestionnaire de fichier pour l&#039;entr\u00e9e d\u00e9finie par son nom (lecture seule)","y":"resource ZipArchive::getStream\n    ( string $name\n   )","p":[{"t":"name","d":"Le nom de l&#039;entr\u00e9e \u00e0 utiliser"}]},"locateName":{"s":"Retourne l&#039;index d&#039;une entr\u00e9e de l&#039;archive","y":"int ZipArchive::locateName\n    ( string $name\n   [, int $flags\n  ] )","p":[{"t":"name","d":"Le nom de l&#039;entr\u00e9e \u00e0 chercher"},{"t":"flags","d":"La fonction retourne l&#039;index du fichier dans l&#039;archive.\n       Le flag est sp\u00e9cifi\u00e9 par les valeurs suivantes ou par 0 pour aucun\n       d&#039;entre eux.\n       \n        \n         \n          ZipArchive::FL_NOCASE"}]},"open":{"s":"Ouvre une archive ZIP","y":"mixed ZipArchive::open\n    ( string $filename\n   [, int $flags\n  ] )","p":[{"t":"filename","d":"Le nom du fichier ZIP \u00e0 ouvrir."},{"t":"flags","d":"Le mode \u00e0 utiliser pour ouvrir l&#039;archive.\n       \n        \n         \n          ZipArchive::OVERWRITE"}]},"renameIndex":{"s":"Renomme une entr\u00e9e d\u00e9finie par son index","y":"bool ZipArchive::renameIndex\n    ( int $index\n   , string $newname\n   )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e \u00e0 renommer"},{"t":"newname","d":"Nouveau nom"}]},"renameName":{"s":"Renomme une entr\u00e9e d\u00e9finie par son nom","y":"bool ZipArchive::renameName\n    ( string $name\n   , string $newname\n   )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e \u00e0 renommer"},{"t":"newname","d":"Nouveau nom"}]},"setArchiveComment":{"s":"D\u00e9finit le commentaire d&#039;une archive ZIP","y":"bool ZipArchive::setArchiveComment\n    ( string $comment\n   )","p":[{"t":"comment","d":"Le contenu du commentaire"}]},"setCommentIndex":{"s":"D\u00e9finit le commentaire d&#039;une entr\u00e9e d\u00e9finie par son index","y":"bool ZipArchive::setCommentIndex\n    ( int $index\n   , string $comment\n   )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"},{"t":"comment","d":"Le contenu du commentaire"}]},"setCommentName":{"s":"D\u00e9finit le commentaire d&#039;une entr\u00e9e sp\u00e9cifi\u00e9e par son nom","y":"bool ZipArchive::setCommentName\n    ( string $name\n   , string $comment\n   )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e"},{"t":"comment","d":"Le contenu du commentaire"}]},"setExternalAttributesIndex":{"s":"D\u00e9finit les attributs \u00e9tendus d&#039;une entr\u00e9e d\u00e9finie par son index","y":"bool \n   ZipArchive::setExternalAttributesIndex\n    ( int $index\n   , int $opsys\n   , int $attr\n   [, int $flags\n  ] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e."},{"t":"opsys","d":"Code du syst\u00e8me d&#039;exploitation, d\u00e9finie par une des constantes ZipArchive::OPSYS_."},{"t":"attr","d":"Attributs \u00e9tendus, la valeur d\u00e9pend du syst\u00e8me d&#039;exploitation."},{"t":"flags","d":"Indicateurs optionnels, valeur non utilis\u00e9e actuellement."}]},"setExternalAttributesName":{"s":"D\u00e9finit les attributs \u00e9tendus d&#039;une entr\u00e9e d\u00e9finie par son nom","y":"bool \n   ZipArchive::setExternalAttributesName\n    ( string $name\n   , int $opsys\n   , int $attr\n   [, int $flags\n  ] )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e."},{"t":"opsys","d":"Code du syst\u00e8me d&#039;exploitation, d\u00e9finie par une des constantes ZipArchive::OPSYS_."},{"t":"attr","d":"Attributs \u00e9tendus, la valeur d\u00e9pend du syst\u00e8me d&#039;exploitation."},{"t":"flags","d":"Indicateurs optionnels, valeur non utilis\u00e9e actuellement."}]},"statIndex":{"s":"R\u00e9cup\u00e8re les d\u00e9tails d&#039;une entr\u00e9e d\u00e9finie par son index","y":"array ZipArchive::statIndex\n    ( int $index\n   [, int $flags\n  ] )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"},{"t":"flags","d":"ZipArchive::FL_UNCHANGED\n       permet d&#039;obtenir les informations du fichier original de l&#039;archive,\n       ignorant toutes les modifications effectu\u00e9es"}]},"statName":{"s":"R\u00e9cup\u00e8re les d\u00e9tails de l&#039;entr\u00e9e d\u00e9finie par son nom","y":"array ZipArchive::statName\n    ( string $name\n   [, int $flags\n  ] )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e"},{"t":"flags","d":"Le flag sp\u00e9cifie comment la recherche sur le nom doit s&#039;effectuer.\n       ZipArchive::FL_UNCHANGED doit \u00eatre utilis\u00e9\n       pour r\u00e9cup\u00e9rer les informations sur le fichier original de l&#039;archive,\n       ignorant toutes les modifications effectu\u00e9es.\n       \n        \n         \n          ZipArchive::FL_NOCASE"}]},"unchangeAll":{"s":"Annule toutes les modifications faites sur l&#039;archive","y":"bool ZipArchive::unchangeAll\n    ( void\n   )","p":null},"unchangeArchive":{"s":"Annule toutes les modifications globales faites sur l&#039;archive","y":"bool ZipArchive::unchangeArchive\n    ( void\n   )","p":null},"unchangeIndex":{"s":"Annule toutes les modifications faites sur une entr\u00e9e, d\u00e9finie par nom index","y":"bool ZipArchive::unchangeIndex\n    ( int $index\n   )","p":[{"t":"index","d":"Index de l&#039;entr\u00e9e"}]},"unchangeName":{"s":"Annule toutes les modifications faites sur une entr\u00e9e, d\u00e9finie par son nom","y":"bool ZipArchive::unchangeName\n    ( string $name\n   )","p":[{"t":"name","d":"Nom de l&#039;entr\u00e9e"}]}}}