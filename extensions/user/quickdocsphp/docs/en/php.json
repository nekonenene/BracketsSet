{"abs":{"s":"Absolute value","y":"number abs\n     ( mixed $number\n    )","r":"The absolute value of number. If the\n   argument number is\n   of type float, the return type is also float,\n   otherwise it is integer (as float usually has a\n   bigger value range than integer).","p":[{"t":"number","d":"The numeric value to process"}]},"acos":{"s":"Arc cosine","y":"float acos\n     ( float $arg\n    )","r":"The arc cosine of arg in radians.","p":[{"t":"arg","d":"The argument to process"}]},"acosh":{"s":"Inverse hyperbolic cosine","y":"float acosh\n     ( float $arg\n    )","r":"The inverse hyperbolic cosine of arg","p":[{"t":"arg","d":"The value to process"}]},"addcslashes":{"s":"Quote string with slashes in a C style","y":"string addcslashes\n    ( string $str\n   , string $charlist\n   )","r":"Returns the escaped string.","p":[{"t":"str","d":"The string to be escaped."},{"t":"charlist","d":"A list of characters to be escaped. If\n       charlist contains characters\n       \\n, \\r etc., they are\n       converted in C-like style, while other non-alphanumeric characters\n       with ASCII codes lower than 32 and higher than 126 converted to\n       octal representation."}]},"addslashes":{"s":"Quote string with slashes","y":"string addslashes\n    ( string $str\n   )","r":"Returns the escaped string.","p":[{"t":"str","d":"The string to be escaped."}]},"aggregate":{"s":"Dynamic class and object aggregation of methods and properties","y":"void aggregate\n    ( object $object\n   , string $class_name\n   )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""}]},"aggregate_info":{"s":"Gets aggregation information for a given object","y":"array aggregate_info\n    ( object $object\n   )","r":"Returns the aggregation information as an associative array of arrays of\n   methods and properties. The key for the main array is the name of the\n   aggregated class.","p":[{"t":"object","d":""}]},"aggregate_methods":{"s":"Dynamic class and object aggregation of methods","y":"void aggregate_methods\n    ( object $object\n   , string $class_name\n   )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""}]},"aggregate_methods_by_list":{"s":"Selective dynamic class methods aggregation to an object","y":"void aggregate_methods_by_list\n    ( object $object\n   , string $class_name\n   , array $methods_list\n   [, bool $exclude = false\n  ] )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""},{"t":"methods_list","d":""},{"t":"exclude","d":"The optional parameter exclude is used to\n       decide whether the list contains the names of methods to include in\n       the aggregation (i.e. exclude is FALSE),\n       or to exclude from the aggregation\n       (exclude is TRUE)."}]},"aggregate_methods_by_regexp":{"s":"Selective class methods aggregation to an object using a regular\n   expression","y":"void aggregate_methods_by_regexp\n    ( object $object\n   , string $class_name\n   , string $regexp\n   [, bool $exclude = false\n  ] )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""},{"t":"regexp","d":""},{"t":"exclude","d":"The optional parameter exclude is used to\n       decide whether the regular expression will select the names of methods\n       to include in the aggregation (i.e. exclude is\n       FALSE), or to exclude from the\n       aggregation (exclude is TRUE)."}]},"aggregate_properties":{"s":"Dynamic aggregation of  class properties to an object","y":"void aggregate_properties\n    ( object $object\n   , string $class_name\n   )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""}]},"aggregate_properties_by_list":{"s":"Selective dynamic class properties aggregation to an object","y":"void aggregate_properties_by_list\n    ( object $object\n   , string $class_name\n   , array $properties_list\n   [, bool $exclude = false\n  ] )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""},{"t":"properties_list","d":""},{"t":"exclude","d":"The optional parameter exclude is used to\n       decide whether the list contains the names of class properties to\n       include in the aggregation (i.e. exclude is\n       FALSE), or to exclude from the\n       aggregation (exclude is TRUE)."}]},"aggregate_properties_by_regexp":{"s":"Selective class properties aggregation to an object using a regular\n   expression","y":"void aggregate_properties_by_regexp\n    ( object $object\n   , string $class_name\n   , string $regexp\n   [, bool $exclude = false\n  ] )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":""},{"t":"regexp","d":""},{"t":"exclude","d":"The optional parameter exclude is used to\n       decide whether the regular expression will select the names of class\n       properties to include in the aggregation (i.e. \n       exclude is FALSE),\n       or to exclude from the aggregation\n       (exclude is TRUE)."}]},"aggregation_info":{"s":"Alias of aggregate_info()","y":"","r":"","p":null},"apache_child_terminate":{"s":"Terminate apache process after this request","y":"bool apache_child_terminate\n    ( void\n   )","r":"Returns TRUE if PHP is running as an Apache 1 module, the Apache version\n   is non-multithreaded, and the \n   child_terminate PHP directive is \n   enabled (disabled by default). If these conditions are not met, FALSE is \n   returned and an error of level E_WARNING is generated.","p":null},"apache_getenv":{"s":"Get an Apache subprocess_env variable","y":"string apache_getenv\n    ( string $variable\n   [, bool $walk_to_top = false\n  ] )","r":"The value of the Apache environment variable on success, or FALSE on\n   failure","p":[{"t":"variable","d":"The Apache environment variable"},{"t":"walk_to_top","d":"Whether to get the top-level variable available to all Apache layers."}]},"apache_get_modules":{"s":"Get a list of loaded Apache modules","y":"array apache_get_modules\n    ( void\n   )","r":"An array of loaded Apache modules.","p":null},"apache_get_version":{"s":"Fetch Apache version","y":"string apache_get_version\n    ( void\n   )","r":"Returns the Apache version on success or FALSE on failure.","p":null},"apache_lookup_uri":{"s":"Perform a partial request for the specified URI and return all info about it","y":"object apache_lookup_uri\n    ( string $filename\n   )","r":"An object of related URI information. The properties of\n   this object are:","p":[{"t":"filename","d":"The filename (URI) that&#039;s being requested."}]},"apache_note":{"s":"Get and set apache request notes","y":"string apache_note\n    ( string $note_name\n   [, string $note_value = &quot;&quot;\n  ] )","r":"If called with one argument, it returns the current value of note\n   note_name. If called with two arguments, it\n   sets the value of note note_name to\n   note_value and returns the previous value of\n   note note_name.\n   If the note cannot be retrieved, FALSE is returned.","p":[{"t":"note_name","d":"The name of the note."},{"t":"note_value","d":"The value of the note."}]},"apache_request_headers":{"s":"Fetch all HTTP request headers","y":"array apache_request_headers\n    ( void\n   )","r":"An associative array of all the HTTP headers in the current request, or\n   FALSE on failure.","p":null},"apache_reset_timeout":{"s":"Reset the Apache write timer","y":"bool apache_reset_timeout\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"apache_response_headers":{"s":"Fetch all HTTP response headers","y":"array apache_response_headers\n    ( void\n   )","r":"An array of all Apache response headers on success or FALSE on failure.","p":null},"apache_setenv":{"s":"Set an Apache subprocess_env variable","y":"bool apache_setenv\n    ( string $variable\n   , string $value\n   [, bool $walk_to_top = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"variable","d":"The environment variable that&#039;s being set."},{"t":"value","d":"The new variable value."},{"t":"walk_to_top","d":"Whether to set the top-level variable available to all Apache layers."}]},"apc_add":{"s":"Cache a new variable in the data store","y":"bool apc_add\n    ( string $key\n   , mixed $var\n   [, int $ttl = 0\n  ] )","r":"Returns TRUE if something has effectively been added into the cache, FALSE otherwise.\n   Second syntax returns array with error keys.","p":[{"t":"key","d":"Store the variable using this name. keys are\n       cache-unique, so attempting to use apc_add() to\n       store data with a key that already exists will not overwrite the\n       existing data, and will instead return FALSE. (This is the only\n       difference between apc_add() and\n       apc_store().)"},{"t":"var","d":"The variable to store"},{"t":"ttl","d":"Time To Live; store var in the cache for\n       ttl seconds. After the\n       ttl has passed, the stored variable will be\n       expunged from the cache (on the next request). If no ttl\n       is supplied (or if the ttl is\n       0), the value will persist until it is removed from\n       the cache manually, or otherwise fails to exist in the cache (clear,\n       restart, etc.)."},{"t":"values","d":"Names in key, variables in value."}]},"apc_bin_dump":{"s":"Get a binary dump of the given files and user variables","y":"string apc_bin_dump\n    ([ array $files = NULL\n   [, array $user_vars = NULL\n  ]] )","r":"Returns a binary dump of the given files and user variables from the APC cache,\n   FALSE if APC is not enabled, or NULL if an unknown error is encountered.","p":[{"t":"files","d":"The files. Passing in NULL signals a dump of every entry, while\n      passing in array() will dump nothing."},{"t":"user_vars","d":"The user vars. Passing in NULL signals a dump of every entry, while\n      passing in array() will dump nothing."}]},"apc_bin_dumpfile":{"s":"Output a binary dump of cached files and user variables to a file","y":"int apc_bin_dumpfile\n    ( array $files\n   , array $user_vars\n   , string $filename\n   [, int $flags = 0\n   [, resource $context = NULL\n  ]] )","r":"The number of bytes written to the file, otherwise\n   FALSE if APC is not enabled, filename is an invalid file name,\n   filename can&#039;t be opened, the file dump can&#039;t be completed\n   (e.g., the hard drive is out of disk space), or an unknown error was encountered.","p":[{"t":"files","d":"The file names being dumped."},{"t":"user_vars","d":"The user variables being dumped."},{"t":"filename","d":"The filename where the dump is being saved."},{"t":"flags","d":"Flags passed to the filename stream. See the\n      file_put_contents() documentation for details."},{"t":"context","d":"The context passed to the filename stream. See the\n      file_put_contents() documentation for details."}]},"apc_bin_load":{"s":"Load a binary dump into the APC file\/user cache","y":"bool apc_bin_load\n    ( string $data\n   [, int $flags = 0\n  ] )","r":"Returns TRUE if the binary dump data was loaded\n   with success, otherwise FALSE is returned. FALSE is returned if APC\n   is not enabled, or if the data is not a valid APC\n   binary dump (e.g., unexpected size).","p":[{"t":"data","d":"The binary dump being loaded, likely from\n      apc_bin_dump()."},{"t":"flags","d":"Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5,\n      or both."}]},"apc_bin_loadfile":{"s":"Load a binary dump from a file into the APC file\/user cache","y":"bool apc_bin_loadfile\n    ( string $filename\n   [, resource $context = NULL\n   [, int $flags = 0\n  ]] )","r":"Returns TRUE on success, otherwise FALSE Reasons it may return FALSE include\n   APC is not enabled, filename is an invalid file name or empty,\n   filename can&#039;t be opened, the file dump can&#039;t be completed, or\n   if the data is not a valid APC binary dump (e.g., unexpected\n   size).","p":[{"t":"filename","d":"The file name containing the dump, likely from\n      apc_bin_dumpfile()."},{"t":"context","d":"The files context."},{"t":"flags","d":"Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5,\n      or both."}]},"apc_cache_info":{"s":"Retrieves cached information from APC&#039;s data store","y":"array apc_cache_info\n    ([ string $cache_type = &quot;&quot;\n   [, bool $limited = false\n  ]] )","r":"Array of cached data (and meta-data) or FALSE on failure","p":[{"t":"cache_type","d":"If cache_type is &quot;user&quot;,\n       information about the user cache will be returned."},{"t":"limited","d":"If limited is TRUE, the\n       return value will exclude the individual list of cache entries.  This\n       is useful when trying to optimize calls for statistics gathering."}]},"apc_cas":{"s":"Updates an old value with a new value","y":"bool apc_cas\n    ( string $key\n   , int $old\n   , int $new\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key of the value being updated."},{"t":"old","d":"The old value (the value currently stored)."},{"t":"new","d":"The new value to update to."}]},"apc_clear_cache":{"s":"Clears the APC cache","y":"bool apc_clear_cache\n    ([ string $cache_type = &quot;&quot;\n  ] )","r":"Returns TRUE always","p":[{"t":"cache_type","d":"If cache_type is &quot;user&quot;, the\n       user cache will be cleared; otherwise, the system cache (cached files)\n       will be cleared."}]},"apc_compile_file":{"s":"Stores a file in the bytecode cache, bypassing all filters.","y":"mixed apc_compile_file\n    ( string $filename\n   [, bool $atomic = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Full or relative path to a PHP file that will be compiled and stored in\n       the bytecode cache."}]},"apc_dec":{"s":"Decrease a stored number","y":"int apc_dec\n    ( string $key\n   [, int $step = 1\n   [, bool &$success\n  ]] )","r":"Returns the current value of key&#039;s value on success,\n    or FALSE on failure","p":[{"t":"key","d":"The key of the value being decreased."},{"t":"step","d":"The step, or value to decrease."},{"t":"success","d":"Optionally pass the success or fail boolean value to\n      this referenced variable."}]},"apc_define_constants":{"s":"Defines a set of constants for retrieval and mass-definition ","y":"bool apc_define_constants\n    ( string $key\n   , array $constants\n   [, bool $case_sensitive = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key serves as the name of the constant set\n       being stored. This key is used to retrieve the\n       stored constants in apc_load_constants()."},{"t":"constants","d":"An associative array of constant_name =&gt; value\n       pairs. The constant_name must follow the normal\n       constant naming rules.\n       value must evaluate to a scalar value."},{"t":"case_sensitive","d":"The default behaviour for constants is to be declared case-sensitive;\n       i.e. CONSTANT and Constant\n       represent different values. If this parameter evaluates to FALSE the\n       constants will be declared as case-insensitive symbols."}]},"apc_delete":{"s":"Removes a stored variable from the cache","y":"mixed apc_delete\n    ( string $key\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key used to store the value (with\n       apc_store())."}]},"apc_delete_file":{"s":"Deletes files from the opcode cache","y":"mixed apc_delete_file\n    ( mixed $keys\n   )","r":"Returns TRUE on success or FALSE on failure.\n   Or if keys is an array, then\n   an empty array is returned on success, or an array of failed files\n   is returned.","p":[{"t":"keys","d":"The files to be deleted. Accepts a string,\n      array of strings, or an APCIterator\n      object."}]},"apc_exists":{"s":"Checks if APC key exists","y":"mixed apc_exists\n    ( mixed $keys\n   )","r":"Returns TRUE if the key exists, otherwise FALSE Or if an\n   array was passed to keys, then\n   an array is returned that contains all existing keys, or an empty\n   array if none exist.","p":[{"t":"keys","d":"A string, or an array of strings, that\n      contain keys."}]},"apc_fetch":{"s":"Fetch a stored variable from the cache","y":"mixed apc_fetch\n    ( mixed $key\n   [, bool &$success\n  ] )","r":"The stored variable or array of variables on success; FALSE on failure","p":[{"t":"key","d":"The key used to store the value (with\n       apc_store()). If an array is passed then each\n       element is fetched and returned."},{"t":"success","d":"Set to TRUE in success and FALSE in failure."}]},"apc_load_constants":{"s":"Loads a set of constants from the cache","y":"bool apc_load_constants\n    ( string $key\n   [, bool $case_sensitive = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The name of the constant set (that was stored with\n       apc_define_constants()) to be retrieved."},{"t":"case_sensitive","d":"The default behaviour for constants is to be declared case-sensitive;\n       i.e. CONSTANT and Constant\n       represent different values. If this parameter evaluates to FALSE the\n       constants will be declared as case-insensitive symbols."}]},"apc_sma_info":{"s":"Retrieves APC&#039;s Shared Memory Allocation information","y":"array apc_sma_info\n    ([ bool $limited = false\n  ] )","r":"Array of Shared Memory Allocation data; FALSE on failure.","p":[{"t":"limited","d":"When set to FALSE (default) apc_sma_info() will\n       return a detailed information about each segment."}]},"apc_store":{"s":"Cache a variable in the data store","y":"bool apc_store\n    ( string $key\n   , mixed $var\n   [, int $ttl = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.\n   Second syntax returns array with error keys.","p":[{"t":"key","d":"Store the variable using this name. keys are\n       cache-unique, so storing a second value with the same\n       key will overwrite the original value."},{"t":"var","d":"The variable to store"},{"t":"ttl","d":"Time To Live; store var in the cache for\n       ttl seconds. After the\n       ttl has passed, the stored variable will be\n       expunged from the cache (on the next request). If no ttl\n       is supplied (or if the ttl is\n       0), the value will persist until it is removed from\n       the cache manually, or otherwise fails to exist in the cache (clear,\n       restart, etc.)."},{"t":"values","d":"Names in key, variables in value."}]},"apd_breakpoint":{"s":"Stops the interpreter and waits on a CR from the socket","y":"bool apd_breakpoint\n    ( int $debug_level\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"debug_level","d":"An integer which is formed by adding\ntogether the XXX_TRACE constants."}]},"apd_callstack":{"s":"Returns the current call stack as an array","y":"array apd_callstack\n    ( void\n   )","r":"An array containing the current call stack.","p":null},"apd_clunk":{"s":"Throw a warning and a callstack","y":"void apd_clunk\n    ( string $warning\n   [, string $delimiter = &quot;&lt;BR \/&gt;&quot;\n  ] )","r":"No value is returned.","p":[{"t":"warning","d":"The warning to throw."},{"t":"delimiter","d":"The delimiter. Default to &lt;BR \/&gt;."}]},"apd_continue":{"s":"Restarts the interpreter","y":"bool apd_continue\n    ( int $debug_level\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"debug_level","d":"An integer which is formed by adding\ntogether the XXX_TRACE constants."}]},"apd_croak":{"s":"Throw an error, a callstack and then exit","y":"void apd_croak\n    ( string $warning\n   [, string $delimiter = &quot;&lt;BR \/&gt;&quot;\n  ] )","r":"No value is returned.","p":[{"t":"warning","d":"The warning to throw."},{"t":"delimiter","d":"The delimiter. Default to &lt;BR \/&gt;."}]},"apd_dump_function_table":{"s":"Outputs the current function table","y":"void apd_dump_function_table\n    ( void\n   )","r":"No value is returned.","p":null},"apd_dump_persistent_resources":{"s":"Return all persistent resources as an array","y":"array apd_dump_persistent_resources\n    ( void\n   )","r":"An array containing the current call stack.","p":null},"apd_dump_regular_resources":{"s":"Return all current regular resources as an array","y":"array apd_dump_regular_resources\n    ( void\n   )","r":"An array containing the current regular resources.","p":null},"apd_echo":{"s":"Echo to the debugging socket","y":"bool apd_echo\n    ( string $output\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"output","d":"The debugged variable."}]},"apd_get_active_symbols":{"s":"Get an array of the current variables names in the local scope","y":"array apd_get_active_symbols\n    ( void\n   )","r":"A multidimensional array with all the variables.","p":null},"apd_set_pprof_trace":{"s":"Starts the session debugging","y":"string apd_set_pprof_trace\n    ([ string $dump_directory = ini_get(&quot;apd.dumpdir&quot;)\n   [, string $fragment = &quot;pprof&quot;\n  ]] )","r":"Returns path of the destination file.","p":[{"t":"dump_directory","d":"The directory in which the profile dump file is written. If not set, \n       the apd.dumpdir\n setting from the php.ini file is used."},{"t":"fragment","d":""}]},"apd_set_session":{"s":"Changes or sets the current debugging level","y":"void apd_set_session\n    ( int $debug_level\n   )","r":"No value is returned.","p":[{"t":"debug_level","d":"An integer which is formed by adding\ntogether the XXX_TRACE constants."}]},"apd_set_session_trace":{"s":"Starts the session debugging","y":"void apd_set_session_trace\n    ( int $debug_level\n   [, string $dump_directory = ini_get(&quot;apd.dumpdir&quot;)\n  ] )","r":"No value is returned.","p":[{"t":"debug_level","d":"An integer which is formed by adding\ntogether the XXX_TRACE constants."},{"t":"dump_directory","d":"The directory in which the profile dump file is written. If not set, \n       the apd.dumpdir setting from the php.ini file is used."}]},"apd_set_session_trace_socket":{"s":"Starts the remote session debugging","y":"bool apd_set_session_trace_socket\n    ( string $tcp_server\n   , int $socket_type\n   , int $port\n   , int $debug_level\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"tcp_server","d":"IP or Unix Domain socket (like a file) of the TCP server."},{"t":"socket_type","d":"Can be AF_UNIX for file based sockets or \n       APD_AF_INET for standard tcp\/ip."},{"t":"port","d":"You can use any port, but higher numbers are better as most of the\n       lower numbers may be used by other system services."},{"t":"debug_level","d":"An integer which is formed by adding\ntogether the XXX_TRACE constants."}]},"array":{"s":"Create an array","y":"array array\n    ([ mixed $...\n  ] )","r":"Returns an array of the parameters.  The parameters can be given\n   an index with the =&gt; operator.  Read the section\n   on the array type for more\n   information on what an array is.","p":[{"t":"...","d":"Syntax &quot;index =&gt; values&quot;, separated by commas, define index\n       and values. index may be of type string or integer. When index is\n       omitted, an integer index is automatically generated, starting\n       at 0. If index is an integer, next generated index will\n       be the biggest integer index + 1. Note that when two identical\n       index are defined, the last overwrite the first."}]},"array_change_key_case":{"s":"Changes the case of all keys in an array","y":"array array_change_key_case\n    ( array $array\n   [, int $case = CASE_LOWER\n  ] )","r":"Returns an array with its keys lower or uppercased, or FALSE if\n   array is not an array.","p":[{"t":"array","d":"The array to work on"},{"t":"case","d":"Either CASE_UPPER or\n       CASE_LOWER (default)"}]},"array_chunk":{"s":"Split an array into chunks","y":"array array_chunk\n    ( array $array\n   , int $size\n   [, bool $preserve_keys = false\n  ] )","r":"Returns a multidimensional numerically indexed array, starting with zero,\n   with each dimension containing size elements.","p":[{"t":"array","d":"The array to work on"},{"t":"size","d":"The size of each chunk"},{"t":"preserve_keys","d":"When set to TRUE keys will be preserved.\n       Default is FALSE which will reindex the chunk numerically"}]},"array_column":{"s":"Return the values from a single column in the input array","y":"array array_column\n    ( array $array\n   , mixed $column_key\n   [, mixed $index_key = null\n  ] )","r":"Returns an array of values representing a single column from the input array.","p":[{"t":"array","d":"A multi-dimensional array (record set) from which to pull a column of\n       values."},{"t":"column_key","d":"The column of values to return. This value may be the integer key of the\n       column you wish to retrieve, or it may be the string key name for an\n       associative array. It may also be NULL to return complete arrays\n       (useful together with index_key to reindex the\n       array)."},{"t":"index_key","d":"The column to use as the index\/keys for the returned array. This value\n       may be the integer key of the column, or it may be the string key name."}]},"array_combine":{"s":"Creates an array by using one array for keys and another for its values","y":"array array_combine\n    ( array $keys\n   , array $values\n   )","r":"Returns the combined array, FALSE if the number of elements\n   for each array isn&#039;t equal.","p":[{"t":"keys","d":"Array of keys to be used. Illegal values for key will be\n       converted to string."},{"t":"values","d":"Array of values to be used"}]},"array_diff":{"s":"Computes the difference of arrays","y":"array array_diff\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.","p":[{"t":"array1","d":"The array to compare from"},{"t":"array2","d":"An array to compare against"},{"t":"...","d":"More arrays to compare against"}]},"array_diff_assoc":{"s":"Computes the difference of arrays with additional index check","y":"array array_diff_assoc\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array containing all the values from\n   array1 that are not present in any of the other arrays.","p":[{"t":"array1","d":"The array to compare from"},{"t":"array2","d":"An array to compare against"},{"t":"...","d":"More arrays to compare against"}]},"array_diff_key":{"s":"Computes the difference of arrays using keys for comparison","y":"array array_diff_key\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array containing all the entries from\n   array1 whose keys are not present in any of the\n   other arrays.","p":[{"t":"array1","d":"The array to compare from"},{"t":"array2","d":"An array to compare against"},{"t":"...","d":"More arrays to compare against"}]},"array_diff_uassoc":{"s":"Computes the difference of arrays with additional index check which is performed by a user supplied callback function","y":"array array_diff_uassoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $key_compare_func\n   )","r":"Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.","p":[{"t":"array1","d":"The array to compare from"},{"t":"array2","d":"An array to compare against"},{"t":"...","d":"More arrays to compare against"},{"t":"key_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_diff_ukey":{"s":"Computes the difference of arrays using a callback function on the keys for comparison","y":"array array_diff_ukey\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $key_compare_func\n   )","r":"Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.","p":[{"t":"array1","d":"The array to compare from"},{"t":"array2","d":"An array to compare against"},{"t":"...","d":"More arrays to compare against"},{"t":"key_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_fill":{"s":"Fill an array with values","y":"array array_fill\n    ( int $start_index\n   , int $num\n   , mixed $value\n   )","r":"Returns the filled array","p":[{"t":"start_index","d":"The first index of the returned array."},{"t":"num","d":"Number of elements to insert.\n       Must be greater than zero."},{"t":"value","d":"Value to use for filling"}]},"array_fill_keys":{"s":"Fill an array with values, specifying keys","y":"array array_fill_keys\n    ( array $keys\n   , mixed $value\n   )","r":"Returns the filled array","p":[{"t":"keys","d":"Array of values that will be used as keys. Illegal values\n       for key will be converted to string."},{"t":"value","d":"Value to use for filling"}]},"array_filter":{"s":"Filters elements of an array using a callback function","y":"array array_filter\n    ( array $array = array()\n   [, callable $callback = Function()\n  ] )","r":"Returns the filtered array.","p":[{"t":"array","d":"The array to iterate over"},{"t":"callback","d":"The callback function to use"}]},"array_flip":{"s":"Exchanges all keys with their associated values in an array","y":"array array_flip\n    ( array $array\n   )","r":"Returns the flipped array on success and NULL on failure.","p":[{"t":"array","d":"An array of key\/value pairs to be flipped."}]},"array_intersect":{"s":"Computes the intersection of arrays","y":"array array_intersect\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array containing all of the values in \n   array1 whose values exist in all of the parameters.","p":[{"t":"array1","d":"The array with master values to check."},{"t":"array2","d":"An array to compare values against."},{"t":"...","d":"A variable list of arrays to compare."}]},"array_intersect_assoc":{"s":"Computes the intersection of arrays with additional index check","y":"array array_intersect_assoc\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an associative array containing all the values in \n   array1 that are present in all of the arguments.","p":[{"t":"array1","d":"The array with master values to check."},{"t":"array2","d":"An array to compare values against."},{"t":"...","d":"A variable list of arrays to compare."}]},"array_intersect_key":{"s":"Computes the intersection of arrays using keys for comparison","y":"array array_intersect_key\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an associative array containing all the entries of \n   array1 which have keys that are present in all\n   arguments.","p":[{"t":"array1","d":"The array with master keys to check."},{"t":"array2","d":"An array to compare keys against."},{"t":"...","d":"A variable list of arrays to compare."}]},"array_intersect_uassoc":{"s":"Computes the intersection of arrays with additional index check, compares indexes by a callback function","y":"array array_intersect_uassoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $key_compare_func\n   )","r":"Returns the values of array1 whose values exist\n   in all of the arguments.","p":[{"t":"array1","d":"Initial array for comparison of the arrays."},{"t":"array2","d":"First array to compare keys against."},{"t":"...","d":"Variable list of array arguments to compare values against."},{"t":"key_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_intersect_ukey":{"s":"Computes the intersection of arrays using a callback function on the keys for comparison","y":"array array_intersect_ukey\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $key_compare_func\n   )","r":"Returns the values of array1 whose keys exist\n   in all the arguments.","p":[{"t":"array1","d":"Initial array for comparison of the arrays."},{"t":"array2","d":"First array to compare keys against."},{"t":"...","d":"Variable list of array arguments to compare keys against."},{"t":"key_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_keys":{"s":"Return all the keys or a subset of the keys of an array","y":"array array_keys\n    ( array $array\n   [, mixed $search_value = &quot;&quot;\n   [, bool $strict = false\n  ]] )","r":"Returns an array of all the keys in array.","p":[{"t":"array","d":"An array containing keys to return."},{"t":"search_value","d":"If specified, then only keys containing these values are returned."},{"t":"strict","d":"Determines if strict comparison (===) should be used during the search."}]},"array_key_exists":{"s":"Checks if the given key or index exists in the array","y":"bool array_key_exists\n    ( mixed $key\n   , array $array\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"Value to check."},{"t":"array","d":"An array with keys to check."}]},"array_map":{"s":"Applies the callback to the elements of the given arrays","y":"array array_map\n    ( callable $callback\n   , array $array1\n   [, array $...\n  ] )","r":"Returns an array containing all the elements of array1\n   after applying the callback function to each one.","p":[{"t":"callback","d":"Callback function to run for each element in each array."},{"t":"array1","d":"An array to run through the callback function."},{"t":"...","d":"Variable list of array arguments to run through the\n       callback function."}]},"array_merge":{"s":"Merge one or more arrays","y":"array array_merge\n    ( array $array1\n   [, array $...\n  ] )","r":"Returns the resulting array.","p":[{"t":"array1","d":"Initial array to merge."},{"t":"...","d":"Variable list of arrays to merge."}]},"array_merge_recursive":{"s":"Merge two or more arrays recursively","y":"array array_merge_recursive\n    ( array $array1\n   [, array $...\n  ] )","r":"An array of values resulted from merging the arguments together.","p":[{"t":"array1","d":"Initial array to merge."},{"t":"...","d":"Variable list of arrays to recursively merge."}]},"array_multisort":{"s":"Sort multiple or multi-dimensional arrays","y":"bool array_multisort\n    ( array &$array1\n   [, mixed $array1_sort_order = SORT_ASC\n   [, mixed $array1_sort_flags = SORT_REGULAR\n   [, mixed $...\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array1","d":"An array being sorted."},{"t":"array1_sort_order","d":"The order used to sort the previous array argument. Either\n       SORT_ASC to sort ascendingly or SORT_DESC\n       to sort descendingly."},{"t":"array1_sort_flags","d":"Sort options for the previous array argument:"},{"t":"...","d":"More arrays, optionally followed by sort order and flags."}]},"array_pad":{"s":"Pad array to the specified length with a value","y":"array array_pad\n    ( array $array\n   , int $size\n   , mixed $value\n   )","r":"Returns a copy of the array padded to size specified\n   by size with value \n   value. If size is \n   positive then the array is padded on the right, if it&#039;s negative then \n   on the left. If the absolute value of size is less\n   than or equal to the length of the array then no\n   padding takes place.","p":[{"t":"array","d":"Initial array of values to pad."},{"t":"size","d":"New size of the array."},{"t":"value","d":"Value to pad if array is less than\n       size."}]},"array_pop":{"s":"Pop the element off the end of array","y":"mixed array_pop\n    ( array &$array\n   )","r":"Returns the last value of array.\n   If array is empty (or is not an array),\n   NULL will be returned.","p":[{"t":"array","d":"The array to get the value from."}]},"array_product":{"s":"Calculate the product of values in an array","y":"number array_product\n    ( array $array\n   )","r":"Returns the product as an integer or float.","p":[{"t":"array","d":"The array."}]},"array_push":{"s":"Push one or more elements onto the end of array","y":"int array_push\n    ( array &$array\n   , mixed $value1\n   [, mixed $...\n  ] )","r":"Returns the new number of elements in the array.","p":[{"t":"array","d":"The input array."},{"t":"value1","d":"The first value to push onto the end of the array."}]},"array_rand":{"s":"Pick one or more random entries out of an array","y":"mixed array_rand\n    ( array $array\n   [, int $num = 1\n  ] )","r":"When picking only one entry, array_rand() returns\n   the key for a random entry. Otherwise, an array of keys for the random\n   entries is returned. This is done so that random keys can be picked\n   from the array as well as random values. Trying to pick more elements\n   than there are in the array will result in an\n   E_WARNING level error, and NULL will be returned.","p":[{"t":"array","d":"The input array."},{"t":"num","d":"Specifies how many entries should be picked."}]},"array_reduce":{"s":"Iteratively reduce the array to a single value using a callback function","y":"mixed array_reduce\n    ( array $array\n   , callable $callback\n   [, mixed $initial = NULL\n  ] )","r":"Returns the resulting value.","p":[{"t":"array","d":"The input array."},{"t":"callback","d":""}]},"array_replace":{"s":"Replaces elements from passed arrays into the first array","y":"array array_replace\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array, or NULL if an error occurs.","p":[{"t":"array1","d":"The array in which elements are replaced."},{"t":"array2","d":"The array from which elements will be extracted."},{"t":"...","d":"More arrays from which elements will be extracted.\n       Values from later arrays overwrite the previous values."}]},"array_replace_recursive":{"s":"Replaces elements from passed arrays into the first array recursively","y":"array array_replace_recursive\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )","r":"Returns an array, or NULL if an error occurs.","p":[{"t":"array1","d":"The array in which elements are replaced."},{"t":"array2","d":"The array from which elements will be extracted."},{"t":"...","d":"Optional. More arrays from which elements will be extracted."}]},"array_reverse":{"s":"Return an array with elements in reverse order","y":"array array_reverse\n    ( array $array\n   [, bool $preserve_keys = false\n  ] )","r":"Returns the reversed array.","p":[{"t":"array","d":"The input array."},{"t":"preserve_keys","d":"If set to TRUE numeric keys are preserved. \n       Non-numeric keys are not affected by this setting and will always be preserved."}]},"array_search":{"s":"Searches the array for a given value and returns the corresponding key if successful","y":"mixed array_search\n    ( mixed $needle\n   , array $haystack\n   [, bool $strict = false\n  ] )","r":"Returns the key for needle if it is found in the\n   array, FALSE otherwise.","p":[{"t":"needle","d":"The searched value."},{"t":"haystack","d":"The array."},{"t":"strict","d":"If the third parameter strict is set to TRUE\n       then the array_search() function will search for\n       identical elements in the\n       haystack. This means it will also check the\n       types of the\n       needle in the haystack,\n       and objects must be the same instance."}]},"array_shift":{"s":"Shift an element off the beginning of array","y":"mixed array_shift\n    ( array &$array\n   )","r":"Returns the shifted value, or NULL if array is\n   empty or is not an array.","p":[{"t":"array","d":"The input array."}]},"array_slice":{"s":"Extract a slice of the array","y":"array array_slice\n    ( array $array\n   , int $offset\n   [, int $length = NULL\n   [, bool $preserve_keys = false\n  ]] )","r":"Returns the slice.","p":[{"t":"array","d":"The input array."},{"t":"offset","d":"If offset is non-negative, the sequence will\n       start at that offset in the array.  If\n       offset is negative, the sequence will\n       start that far from the end of the array."},{"t":"length","d":"If length is given and is positive, then\n       the sequence will have up to that many elements in it. If the array\n       is shorter than the length, then only the\n       available array elements will be present. If\n       length is given and is negative then the\n       sequence will stop that many elements from the end of the\n       array. If it is omitted, then the sequence will have everything\n       from offset up until the end of the\n       array."},{"t":"preserve_keys","d":"Note that array_slice() will reorder and reset the\n       numeric array indices by default. You can change this behaviour by setting\n       preserve_keys to TRUE."}]},"array_splice":{"s":"Remove a portion of the array and replace it with something else","y":"array array_splice\n    ( array &$input\n   , int $offset\n   [, int $length = int\n   [, mixed $replacement = array()\n  ]] )","r":"Returns the array consisting of the extracted elements.","p":[{"t":"input","d":"The input array."},{"t":"offset","d":"If offset is positive then the start of removed\n       portion is at that offset from the beginning of the\n       input array.  If offset\n       is negative then it starts that far from the end of the\n       input array."},{"t":"length","d":"If length is omitted, removes everything\n       from offset to the end of the array.  If\n       length is specified and is positive, then\n       that many elements will be removed. If\n       length is specified and is negative then\n       the end of the removed portion will be that many elements from\n       the end of the array.  Tip: to remove everything from\n       offset to the end of the array when\n       replacement is also specified, use\n       count($input) for\n       length."},{"t":"replacement","d":"If replacement array is specified, then the\n       removed elements are replaced with elements from this array."}]},"array_sum":{"s":"Calculate the sum of values in an array","y":"number array_sum\n    ( array $array\n   )","r":"Returns the sum of values as an integer or float.","p":[{"t":"array","d":"The input array."}]},"array_udiff":{"s":"Computes the difference of arrays by using a callback function for data comparison","y":"array array_udiff\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   )","r":"Returns an array containing all the values of array1\n   that are not present in any of the other arguments.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The callback comparison function."}]},"array_udiff_assoc":{"s":"Computes the difference of arrays with additional index check, compares data by a callback function","y":"array array_udiff_assoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   )","r":"array_udiff_assoc() returns an array\n   containing all the values from array1\n   that are not present in any of the other arguments.\n   Note that the keys are used in the comparison unlike\n   array_diff() and array_udiff().\n   The comparison of arrays&#039; data is performed by using an user-supplied\n   callback. In this aspect the behaviour is opposite to the behaviour of\n   array_diff_assoc() which uses internal function for\n   comparison.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_udiff_uassoc":{"s":"Computes the difference of arrays with additional index check, compares data and indexes by a callback function","y":"array array_udiff_uassoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   , callable $key_compare_func\n   )","r":"Returns an array containing all the values from\n   array1 that are not present in any of the other\n   arguments.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_uintersect":{"s":"Computes the intersection of arrays, compares data by a callback function","y":"array array_uintersect\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   )","r":"Returns an array containing all the values of array1\n   that are present in all the arguments.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_uintersect_assoc":{"s":"Computes the intersection of arrays with additional index check, compares data by a callback function","y":"array array_uintersect_assoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   )","r":"Returns an array containing all the values of\n   array1 that are present in all the arguments.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_uintersect_uassoc":{"s":"Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions","y":"array array_uintersect_uassoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callable $value_compare_func\n   , callable $key_compare_func\n   )","r":"Returns an array containing all the values of\n   array1 that are present in all the arguments.","p":[{"t":"array1","d":"The first array."},{"t":"array2","d":"The second array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"array_unique":{"s":"Removes duplicate values from an array","y":"array array_unique\n    ( array $array\n   [, int $sort_flags = SORT_STRING\n  ] )","r":"Returns the filtered array.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"The optional second parameter sort_flags\n       may be used to modify the sorting behavior using these values:"}]},"array_unshift":{"s":"Prepend one or more elements to the beginning of an array","y":"int array_unshift\n    ( array &$array\n   , mixed $value1\n   [, mixed $...\n  ] )","r":"Returns the new number of elements in the array.","p":[{"t":"array","d":"The input array."},{"t":"value1","d":"First value to prepend."}]},"array_values":{"s":"Return all the values of an array","y":"array array_values\n    ( array $array\n   )","r":"Returns an indexed array of values.","p":[{"t":"array","d":"The array."}]},"array_walk":{"s":"Apply a user function to every member of an array","y":"bool array_walk\n    ( array &$array\n   , callable $callback\n   [, mixed $userdata = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"callback","d":"Typically, callback takes on two parameters.\n       The array parameter&#039;s value being the first, and\n       the key\/index second."},{"t":"userdata","d":"If the optional userdata parameter is supplied,\n       it will be passed as the third parameter to the\n       callback."}]},"array_walk_recursive":{"s":"Apply a user function recursively to every member of an array","y":"bool array_walk_recursive\n    ( array &$array\n   , callable $callback\n   [, mixed $userdata = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"callback","d":"Typically, callback takes on two parameters.\n       The array parameter&#039;s value being the first, and\n       the key\/index second."},{"t":"userdata","d":"If the optional userdata parameter is supplied,\n       it will be passed as the third parameter to the\n       callback."}]},"arsort":{"s":"Sort an array in reverse order and maintain index association","y":"bool arsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"You may modify the behavior of the sort using the optional parameter\n       sort_flags, for details see\n       sort()."}]},"asin":{"s":"Arc sine","y":"float asin\n     ( float $arg\n    )","r":"The arc sine of arg in radians","p":[{"t":"arg","d":"The argument to process"}]},"asinh":{"s":"Inverse hyperbolic sine","y":"float asinh\n     ( float $arg\n    )","r":"The inverse hyperbolic sine of arg ","p":[{"t":"arg","d":"The argument to process"}]},"asort":{"s":"Sort an array and maintain index association","y":"bool asort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details\n       see sort()."}]},"assert":{"s":"Checks if assertion is FALSE","y":"bool assert\n    ( mixed $assertion\n   [, string $description\n  ] )","r":"FALSE if the assertion is false, TRUE otherwise.","p":[{"t":"assertion","d":"The assertion."},{"t":"description","d":"An optional description that will be included in the failure message if\n       the assertion fails."}]},"assert_options":{"s":"Set\/get the various assert flags","y":"mixed assert_options\n    ( int $what\n   [, mixed $value\n  ] )","r":"Returns the original setting of any option or FALSE on errors.","p":[{"t":"what","d":"Assert Options\n        \n         \n          \n           Option\n           INI Setting\n           Default value\n           Description\n          \n\n         \n\n         \n          \n           ASSERT_ACTIVE\n           assert.active\n           1\n           enable assert() evaluation\n          \n\n          \n           ASSERT_WARNING\n           assert.warning\n           1\n           issue a PHP warning for each failed assertion\n          \n\n          \n           ASSERT_BAIL\n           assert.bail\n           0\n           terminate execution on failed assertions\n          \n\n          \n           ASSERT_QUIET_EVAL\n           assert.quiet_eval\n           0\n           \n            disable error_reporting during assertion expression\n            evaluation\n           \n          \n\n          \n           ASSERT_CALLBACK\n           assert.callback\n           (NULL)\n           Callback to call on failed assertions"},{"t":"value","d":"An optional new value for the option."}]},"atan":{"s":"Arc tangent","y":"float atan\n     ( float $arg\n    )","r":"The arc tangent of arg in radians.","p":[{"t":"arg","d":"The argument to process"}]},"atan2":{"s":"Arc tangent of two variables","y":"float atan2\n     ( float $y\n    , float $x\n    )","r":"The arc tangent of y\/x \n   in radians.","p":[{"t":"y","d":"Dividend parameter"},{"t":"x","d":"Divisor parameter"}]},"atanh":{"s":"Inverse hyperbolic tangent","y":"float atanh\n     ( float $arg\n    )","r":"Inverse hyperbolic tangent of arg ","p":[{"t":"arg","d":"The argument to process"}]},"base64_decode":{"s":"Decodes data encoded with MIME base64","y":"string base64_decode\n    ( string $data\n   [, bool $strict = false\n  ] )","r":"Returns the original data or FALSE on failure. The returned data may be\n   binary.","p":[{"t":"data","d":"The encoded data."},{"t":"strict","d":"Returns FALSE if input contains character from outside the base64\n       alphabet."}]},"base64_encode":{"s":"Encodes data with MIME base64","y":"string base64_encode\n    ( string $data\n   )","r":"The encoded data, as a string or FALSE on failure.","p":[{"t":"data","d":"The data to encode."}]},"basename":{"s":"Returns trailing name component of path","y":"string basename\n    ( string $path\n   [, string $suffix\n  ] )","r":"Returns the base name of the given path.","p":[{"t":"path","d":"A path."},{"t":"suffix","d":"If the name component ends in suffix this will also\n       be cut off."}]},"base_convert":{"s":"Convert a number between arbitrary bases","y":"string base_convert\n     ( string $number\n    , int $frombase\n    , int $tobase\n    )","r":"number converted to base tobase","p":[{"t":"number","d":"The number to convert"},{"t":"frombase","d":"The base number is in"},{"t":"tobase","d":"The base to convert number to"}]},"bbcode_add_element":{"s":"Adds a bbcode element","y":"bool bbcode_add_element\n    ( resource $bbcode_container\n   , string $tag_name\n   , array $tag_rules\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource, returned by bbcode_create()."},{"t":"tag_name","d":"The new tag to add to the BBCode_Container tag_set."},{"t":"tag_rules","d":"An associative array containing the parsing rules; see\n       bbcode_create() for the available keys."}]},"bbcode_add_smiley":{"s":"Adds a smiley to the parser","y":"bool bbcode_add_smiley\n    ( resource $bbcode_container\n   , string $smiley\n   , string $replace_by\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource, returned by bbcode_create()."},{"t":"smiley","d":"The string that will be replaced when found."},{"t":"replace_by","d":"The string that replace smiley when found."}]},"bbcode_create":{"s":"Create a BBCode Resource","y":"resource bbcode_create\n    ([ array $bbcode_initial_tags = NULL\n  ] )","r":"Returns a BBCode_Container","p":[{"t":"bbcode_initial_tags","d":"An associative array containing the tag names as keys and parameters\n       required to correctly parse BBCode as their value. The following key\/value\n       pairs are supported:\n        \n         \n          \n           flags optional - a flag\n           set based on the BBCODE_FLAGS_* constants.\n          \n         \n         \n          \n           type required - an int\n           indicating the type of tag. Use the BBCODE_TYPE_* constants.\n          \n         \n         \n          \n           open_tag required - the HTML\n           replacement string for the open tag.\n          \n         \n         \n          \n           close_tag required - the HTML\n           replacement string for the close tag.\n          \n         \n         \n          \n           default_arg optional - \n           use this value as the default argument if none is provided and \n           tag_type is of type OPTARG.\n          \n         \n         \n          \n           content_handling optional - \n           Gives the callback used for modification of the content. Object\n           Oriented Notation supported only since 0.10.1 \n           callback prototype is string name(string $content, string $argument)\n          \n         \n         \n          \n           param_handling optional - \n           Gives the callback used for modification of the argument. Object\n           Oriented Notation supported only since 0.10.1 \n           callback prototype is string name(string $content, string $argument)\n          \n         \n         \n          \n           childs optional - List of\n           accepted children for the tag. The format of the list is a comma\n           separated string. If the list starts with ! it will be the list of\n           rejected children for the tag.\n          \n         \n         \n          \n           parent optional - List of\n           accepted parents for the tag. The format of the list is a comma\n           separated string."}]},"bbcode_destroy":{"s":"Close BBCode_container resource","y":"bool bbcode_destroy\n    ( resource $bbcode_container\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource returned by bbcode_create()."}]},"bbcode_parse":{"s":"Parse a string following a given rule set","y":"string bbcode_parse\n    ( resource $bbcode_container\n   , string $to_parse\n   )","r":"Returns the parsed string,  or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource returned by bbcode_create()."},{"t":"to_parse","d":"The string we need to parse."}]},"bbcode_set_arg_parser":{"s":"Attach another parser in order to use another rule set for argument parsing","y":"bool bbcode_set_arg_parser\n    ( resource $bbcode_container\n   , resource $bbcode_arg_parser\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource, returned by bbcode_create()."},{"t":"bbcode_arg_parser","d":"BBCode_Container resource, returned by bbcode_create().\n       It will be used only for parsed arguments"}]},"bcadd":{"s":"Add two arbitrary precision numbers","y":"string bcadd\n    ( string $left_operand\n   , string $right_operand\n   [, int $scale\n  ] )","r":"The sum of the two operands, as a string.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bccomp":{"s":"Compare two arbitrary precision numbers","y":"int bccomp\n    ( string $left_operand = &quot;&quot;\n   , string $right_operand = &quot;&quot;\n   [, int $scale = int\n  ] )","r":"Returns 0 if the two operands are equal, 1 if the\n   left_operand is larger than the \n   right_operand, -1 otherwise.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"The optional scale parameter is used to set the\n       number of digits after the decimal place which will be used in the\n       comparison."}]},"bcdiv":{"s":"Divide two arbitrary precision numbers","y":"string bcdiv\n    ( string $left_operand = &quot;&quot;\n   , string $right_operand = &quot;&quot;\n   [, int $scale = int\n  ] )","r":"Returns the result of the division as a string, or NULL if \n   right_operand is 0.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bcmod":{"s":"Get modulus of an arbitrary precision number","y":"string bcmod\n    ( string $left_operand\n   , string $modulus\n   )","r":"Returns the modulus as a string, or NULL if \n   modulus is 0.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"modulus","d":"The modulus, as a string."}]},"bcmul":{"s":"Multiply two arbitrary precision numbers","y":"string bcmul\n    ( string $left_operand = &quot;&quot;\n   , string $right_operand = &quot;&quot;\n   [, int $scale = int\n  ] )","r":"Returns the result as a string.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bcompiler_load":{"s":"Reads and creates classes from a bz compressed file","y":"bool bcompiler_load\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The bzcompressed file path, as a string."}]},"bcompiler_load_exe":{"s":"Reads and creates classes from a bcompiler exe file","y":"bool bcompiler_load_exe\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The exe file path, as a string."}]},"bcompiler_parse_class":{"s":"Reads the bytecodes of a class and calls back to a user function","y":"bool bcompiler_parse_class\n    ( string $class\n   , string $callback\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"class","d":"The class name, as a string."},{"t":"callback","d":""}]},"bcompiler_read":{"s":"Reads and creates classes from a filehandle","y":"bool bcompiler_read\n    ( resource $filehandle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."}]},"bcompiler_write_class":{"s":"Writes a defined class as bytecodes","y":"bool bcompiler_write_class\n    ( resource $filehandle\n   , string $className\n   [, string $extends\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"className","d":"The class name, as a string."},{"t":"extends","d":""}]},"bcompiler_write_constant":{"s":"Writes a defined constant as bytecodes","y":"bool bcompiler_write_constant\n    ( resource $filehandle\n   , string $constantName\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"constantName","d":"The name of the defined constant, as a string."}]},"bcompiler_write_exe_footer":{"s":"Writes the start pos, and sig to the end of a exe type file","y":"bool bcompiler_write_exe_footer\n    ( resource $filehandle\n   , int $startpos\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"startpos","d":"The file position at which the Bytecodes start, and can be obtained\n       using ftell()."}]},"bcompiler_write_file":{"s":"Writes a php source file as bytecodes","y":"bool bcompiler_write_file\n    ( resource $filehandle\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"filename","d":"The source file path, as a string."}]},"bcompiler_write_footer":{"s":"Writes the single character \\x00 to indicate End of compiled data","y":"bool bcompiler_write_footer\n    ( resource $filehandle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."}]},"bcompiler_write_function":{"s":"Writes a defined function as bytecodes","y":"bool bcompiler_write_function\n    ( resource $filehandle\n   , string $functionName\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"functionName","d":"The function name, as a string."}]},"bcompiler_write_functions_from_file":{"s":"Writes all functions defined in a file as bytecodes","y":"bool bcompiler_write_functions_from_file\n    ( resource $filehandle\n   , string $fileName\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"fileName","d":"The file to be compiled.\n       You must always include or require the file you intend to compile."}]},"bcompiler_write_header":{"s":"Writes the bcompiler header","y":"bool bcompiler_write_header\n    ( resource $filehandle\n   [, string $write_ver\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filehandle","d":"A file handle as returned by fopen()."},{"t":"write_ver","d":"Can be used to write bytecode in a previously used format, so that you\n       can use it with older versions of bcompiler."}]},"bcompiler_write_included_filename":{"s":"Writes an included file as bytecodes","y":"bool bcompiler_write_included_filename\n    ( resource $filehandle\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"bcpow":{"s":"Raise an arbitrary precision number to another","y":"string bcpow\n    ( string $left_operand\n   , string $right_operand\n   [, int $scale\n  ] )","r":"Returns the result as a string.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bcpowmod":{"s":"Raise an arbitrary precision number to another, reduced by a specified modulus","y":"string bcpowmod\n    ( string $left_operand = &quot;&quot;\n   , string $right_operand = &quot;&quot;\n   , string $modulus = &quot;&quot;\n   [, int $scale = int\n  ] )","r":"Returns the result as a string, or NULL if modulus\n   is 0.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"modulus","d":"The modulus, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bcscale":{"s":"Set default scale parameter for all bc math functions","y":"bool bcscale\n    ( int $scale\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"scale","d":"The scale factor."}]},"bcsqrt":{"s":"Get the square root of an arbitrary precision number","y":"string bcsqrt\n    ( string $operand\n   [, int $scale\n  ] )","r":"Returns the square root as a string, or NULL if \n   operand is negative. ","p":[{"t":"operand","d":"The operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"bin2hex":{"s":"Convert binary data into hexadecimal representation","y":"string bin2hex\n    ( string $str\n   )","r":"Returns the hexadecimal representation of the given string.","p":[{"t":"str","d":"A string."}]},"bindec":{"s":"Binary to decimal","y":"number bindec\n     ( string $binary_string\n    )","r":"The decimal value of binary_string","p":[{"t":"binary_string","d":"The binary string to convert"}]},"bindtextdomain":{"s":"Sets the path for a domain","y":"string bindtextdomain\n    ( string $domain\n   , string $directory\n   )","r":"The full pathname for the domain currently being set.","p":[{"t":"domain","d":"The domain"},{"t":"directory","d":"The directory path"}]},"bind_textdomain_codeset":{"s":"Specify the character encoding in which the messages from the DOMAIN message catalog will be returned","y":"string bind_textdomain_codeset\n    ( string $domain\n   , string $codeset\n   )","r":"A string on success.","p":[{"t":"domain","d":"The domain"},{"t":"codeset","d":"The code set"}]},"blenc_encrypt":{"s":"Encrypt a PHP script with BLENC.","y":"string blenc_encrypt\n    ( string $plaintext\n   , string $encodedfile\n   [, string $encryption_key\n  ] )","r":"BLENC will return the redistributable key that must be saved into key_file:\n   the path of key_file is specified at runtime with the option blenc.key_file","p":[{"t":"plaintext","d":"A source code to encrypt. Does not need to contain opening\/closing PHP tags"},{"t":"encodedfile","d":"The filename where BLENC will save the encoded source."},{"t":"encryption_key","d":"The key that BLENC will use to encrypt plaintext content. If not given\n       BLENC will create a valid key."}]},"boolval":{"s":"Get the boolean value of a variable","y":"boolean boolval\n    ( mixed $var\n   )","r":"The boolean value of var.","p":[{"t":"var","d":"The scalar value being converted to a boolean."}]},"bson_decode":{"s":"Deserializes a BSON object into a PHP array","y":"array bson_decode\n    ( string $bson\n   )","r":"Returns the deserialized BSON object.","p":[{"t":"bson","d":"The BSON to be deserialized."}]},"bson_encode":{"s":"Serializes a PHP variable into a BSON string","y":"string bson_encode\n    ( mixed $anything\n   )","r":"Returns the serialized string.","p":[{"t":"anything","d":"The variable to be serialized."}]},"bzclose":{"s":"Close a bzip2 file","y":"int bzclose\n    ( resource $bz\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."}]},"bzcompress":{"s":"Compress a string into bzip2 encoded data","y":"mixed bzcompress\n    ( string $source\n   [, int $blocksize = 4\n   [, int $workfactor = 0\n  ]] )","r":"The compressed string, or an error number if an error occurred.","p":[{"t":"source","d":"The string to compress."},{"t":"blocksize","d":"Specifies the blocksize used during compression and should be a number \n       from 1 to 9 with 9 giving the best compression, but using more \n       resources to do so."},{"t":"workfactor","d":"Controls how the compression phase behaves when presented with worst\n       case, highly repetitive, input data.  The value can be between 0 and\n       250 with 0 being a special case."}]},"bzdecompress":{"s":"Decompresses bzip2 encoded data","y":"mixed bzdecompress\n    ( string $source\n   [, int $small = 0\n  ] )","r":"The decompressed string, or an error number if an error occurred.","p":[{"t":"source","d":"The string to decompress."},{"t":"small","d":"If TRUE, an alternative decompression algorithm will be used which\n       uses less memory (the maximum memory requirement drops to around 2300K) \n       but works at roughly half the speed."}]},"bzerrno":{"s":"Returns a bzip2 error number","y":"int bzerrno\n    ( resource $bz\n   )","r":"Returns the error number as an integer.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."}]},"bzerror":{"s":"Returns the bzip2 error number and error string in an array","y":"array bzerror\n    ( resource $bz\n   )","r":"Returns an associative array, with the error code in the \n   errno entry, and the error message in the\n   errstr entry.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."}]},"bzerrstr":{"s":"Returns a bzip2 error string","y":"string bzerrstr\n    ( resource $bz\n   )","r":"Returns a string containing the error message.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."}]},"bzflush":{"s":"Force a write of all buffered data","y":"int bzflush\n    ( resource $bz\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."}]},"bzopen":{"s":"Opens a bzip2 compressed file","y":"resource bzopen\n    ( string $filename\n   , string $mode\n   )","r":"If the open fails, bzopen() returns FALSE, otherwise\n   it returns a pointer to the newly opened file.","p":[{"t":"filename","d":"The name of the file to open, or an existing stream resource."},{"t":"mode","d":"Similar to the fopen() function, only &#039;r&#039; (read)\n       and &#039;w&#039; (write) are supported. Everything else will cause bzopen\n       to return FALSE."}]},"bzread":{"s":"Binary safe bzip2 file read","y":"string bzread\n    ( resource $bz\n   [, int $length = 1024\n  ] )","r":"Returns the uncompressed data, or FALSE on error.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."},{"t":"length","d":"If not specified, bzread() will read 1024 \n       (uncompressed) bytes at a time. A maximum of 8192\n       uncompressed bytes will be read at a time."}]},"cairo_create":{"s":"Returns a new CairoContext object on the requested surface.","y":"CairoContext cairo_create\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_font_face_get_type":{"s":"Description","y":"int cairo_font_face_get_type\n    ( CairoFontFace $fontface\n   )","r":"What is returned on success and failure","p":[{"t":"fontface","d":"Description..."}]},"cairo_font_face_status":{"s":"Description","y":"int cairo_font_face_status\n    ( CairoFontFace $fontface\n   )","r":"What is returned on success and failure","p":[{"t":"fontface","d":"Description..."}]},"cairo_font_options_create":{"s":"Description","y":"CairoFontOptions cairo_font_options_create\n    ( void\n   )","r":"What is returned on success and failure","p":null},"cairo_font_options_equal":{"s":"Description","y":"bool cairo_font_options_equal\n    ( CairoFontOptions $options\n   , CairoFontOptions $other\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"other","d":"Description..."}]},"cairo_font_options_get_antialias":{"s":"Description","y":"int cairo_font_options_get_antialias\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"cairo_font_options_get_hint_style":{"s":"Description","y":"int cairo_font_options_get_hint_style\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"cairo_font_options_get_subpixel_order":{"s":"Description","y":"int cairo_font_options_get_subpixel_order\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"cairo_font_options_hash":{"s":"Description","y":"int cairo_font_options_hash\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"cairo_font_options_merge":{"s":"Description","y":"void cairo_font_options_merge\n    ( CairoFontOptions $options\n   , CairoFontOptions $other\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"other","d":"Description..."}]},"cairo_font_options_set_antialias":{"s":"Description","y":"void cairo_font_options_set_antialias\n    ( CairoFontOptions $options\n   , int $antialias\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"antialias","d":"Description..."}]},"cairo_font_options_set_hint_metrics":{"s":"Description","y":"void cairo_font_options_set_hint_metrics\n    ( CairoFontOptions $options\n   , int $hint_metrics\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"hint_metrics","d":"Description..."}]},"cairo_font_options_set_hint_style":{"s":"Description","y":"void cairo_font_options_set_hint_style\n    ( CairoFontOptions $options\n   , int $hint_style\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"hint_style","d":"Description..."}]},"cairo_font_options_set_subpixel_order":{"s":"Description","y":"void cairo_font_options_set_subpixel_order\n    ( CairoFontOptions $options\n   , int $subpixel_order\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."},{"t":"subpixel_order","d":"Description..."}]},"cairo_format_stride_for_width":{"s":"Description","y":"int cairo_format_stride_for_width\n    ( int $format\n   , int $width\n   )","r":"What is returned on success and failure","p":[{"t":"format","d":"Description..."},{"t":"width","d":"Description..."}]},"cairo_image_surface_create":{"s":"Description","y":"CairoImageSurface cairo_image_surface_create\n    ( int $format\n   , int $width\n   , int $height\n   )","r":"What is returned on success and failure","p":[{"t":"format","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_image_surface_create_for_data":{"s":"Description","y":"CairoImageSurface cairo_image_surface_create_for_data\n    ( string $data\n   , int $format\n   , int $width\n   , int $height\n   [, int $stride = -1\n  ] )","r":"What is returned on success and failure","p":[{"t":"data","d":"Description..."},{"t":"format","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."},{"t":"stride","d":"Description..."}]},"cairo_image_surface_create_from_png":{"s":"Description","y":"CairoImageSurface cairo_image_surface_create_from_png\n    ( string $file\n   )","r":"What is returned on success and failure","p":[{"t":"file","d":"Description..."}]},"cairo_image_surface_get_data":{"s":"Description","y":"string cairo_image_surface_get_data\n    ( CairoImageSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_image_surface_get_format":{"s":"Description","y":"int cairo_image_surface_get_format\n    ( CairoImageSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_image_surface_get_height":{"s":"Description","y":"int cairo_image_surface_get_height\n    ( CairoImageSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_image_surface_get_stride":{"s":"Description","y":"int cairo_image_surface_get_stride\n    ( CairoImageSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_image_surface_get_width":{"s":"Description","y":"int cairo_image_surface_get_width\n    ( CairoImageSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_matrix_create_scale":{"s":"Alias of CairoMatrix::initScale()","y":"","r":"","p":null},"cairo_matrix_create_translate":{"s":"Alias of CairoMatrix::initTranslate()","y":"","r":"","p":null},"cairo_matrix_invert":{"s":"Description","y":"void cairo_matrix_invert\n    ( CairoMatrix $matrix\n   )","r":"What is returned on success and failure","p":[{"t":"matrix","d":"Description..."}]},"cairo_matrix_multiply":{"s":"Description","y":"CairoMatrix cairo_matrix_multiply\n    ( CairoMatrix $matrix1\n   , CairoMatrix $matrix2\n   )","r":"What is returned on success and failure","p":[{"t":"matrix1","d":"Description..."},{"t":"matrix2","d":"Description..."}]},"cairo_matrix_rotate":{"s":"Description","y":"void cairo_matrix_rotate\n    ( CairoMatrix $matrix\n   , float $radians\n   )","r":"What is returned on success and failure","p":[{"t":"matrix","d":"Description..."},{"t":"radians","d":"Description..."}]},"cairo_matrix_transform_distance":{"s":"Description","y":"array cairo_matrix_transform_distance\n    ( CairoMatrix $matrix\n   , float $dx\n   , float $dy\n   )","r":"What is returned on success and failure","p":[{"t":"matrix","d":"Description..."},{"t":"dx","d":"Description..."},{"t":"dy","d":"Description..."}]},"cairo_matrix_transform_point":{"s":"Description","y":"array cairo_matrix_transform_point\n    ( CairoMatrix $matrix\n   , float $dx\n   , float $dy\n   )","r":"What is returned on success and failure","p":[{"t":"matrix","d":"Description..."},{"t":"dx","d":"Description..."},{"t":"dy","d":"Description..."}]},"cairo_matrix_translate":{"s":"Description","y":"void cairo_matrix_translate\n    ( CairoMatrix $matrix\n   , float $tx\n   , float $ty\n   )","r":"What is returned on success and failure","p":[{"t":"matrix","d":"Description..."},{"t":"tx","d":"Description..."},{"t":"ty","d":"Description..."}]},"cairo_pattern_add_color_stop_rgb":{"s":"Description","y":"void cairo_pattern_add_color_stop_rgb\n    ( CairoGradientPattern $pattern\n   , float $offset\n   , float $red\n   , float $green\n   , float $blue\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"offset","d":"Description..."},{"t":"red","d":"Description..."},{"t":"green","d":"Description..."},{"t":"blue","d":"Description..."}]},"cairo_pattern_add_color_stop_rgba":{"s":"Description","y":"void cairo_pattern_add_color_stop_rgba\n    ( CairoGradientPattern $pattern\n   , float $offset\n   , float $red\n   , float $green\n   , float $blue\n   , float $alpha\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"offset","d":"Description..."},{"t":"red","d":"Description..."},{"t":"green","d":"Description..."},{"t":"blue","d":"Description..."},{"t":"alpha","d":"Description..."}]},"cairo_pattern_create_for_surface":{"s":"Description","y":"CairoPattern cairo_pattern_create_for_surface\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_pattern_create_linear":{"s":"Description","y":"CairoPattern cairo_pattern_create_linear\n    ( float $x0\n   , float $y0\n   , float $x1\n   , float $y1\n   )","r":"What is returned on success and failure","p":[{"t":"x0","d":"Description..."},{"t":"y0","d":"Description..."},{"t":"x1","d":"Description..."},{"t":"y1","d":"Description..."}]},"cairo_pattern_create_radial":{"s":"Description","y":"CairoPattern cairo_pattern_create_radial\n    ( float $x0\n   , float $y0\n   , float $r0\n   , float $x1\n   , float $y1\n   , float $r1\n   )","r":"What is returned on success and failure","p":[{"t":"x0","d":"Description..."},{"t":"y0","d":"Description..."},{"t":"r0","d":"Description..."},{"t":"x1","d":"Description..."},{"t":"y1","d":"Description..."},{"t":"r1","d":"Description..."}]},"cairo_pattern_create_rgb":{"s":"Description","y":"CairoPattern cairo_pattern_create_rgb\n    ( float $red\n   , float $green\n   , float $blue\n   )","r":"What is returned on success and failure","p":[{"t":"red","d":"Description..."},{"t":"green","d":"Description..."},{"t":"blue","d":"Description..."}]},"cairo_pattern_create_rgba":{"s":"Description","y":"CairoPattern cairo_pattern_create_rgba\n    ( float $red\n   , float $green\n   , float $blue\n   , float $alpha\n   )","r":"What is returned on success and failure","p":[{"t":"red","d":"Description..."},{"t":"green","d":"Description..."},{"t":"blue","d":"Description..."},{"t":"alpha","d":"Description..."}]},"cairo_pattern_get_color_stop_count":{"s":"Description","y":"int cairo_pattern_get_color_stop_count\n    ( CairoGradientPattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_color_stop_rgba":{"s":"Description","y":"array cairo_pattern_get_color_stop_rgba\n    ( CairoGradientPattern $pattern\n   , int $index\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"index","d":"Description..."}]},"cairo_pattern_get_extend":{"s":"Description","y":"int cairo_pattern_get_extend\n    ( string $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_filter":{"s":"Description","y":"int cairo_pattern_get_filter\n    ( CairoSurfacePattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_linear_points":{"s":"Description","y":"array cairo_pattern_get_linear_points\n    ( CairoLinearGradient $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_matrix":{"s":"Description","y":"CairoMatrix cairo_pattern_get_matrix\n    ( CairoPattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_radial_circles":{"s":"Description","y":"array cairo_pattern_get_radial_circles\n    ( CairoRadialGradient $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_rgba":{"s":"Description","y":"array cairo_pattern_get_rgba\n    ( CairoSolidPattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_surface":{"s":"Description","y":"CairoSurface cairo_pattern_get_surface\n    ( CairoSurfacePattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_get_type":{"s":"Description","y":"int cairo_pattern_get_type\n    ( CairoPattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pattern_set_extend":{"s":"Description","y":"void cairo_pattern_set_extend\n    ( string $pattern\n   , string $extend\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"extend","d":"Description..."}]},"cairo_pattern_set_filter":{"s":"Description","y":"void cairo_pattern_set_filter\n    ( CairoSurfacePattern $pattern\n   , int $filter\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"filter","d":"Description..."}]},"cairo_pattern_set_matrix":{"s":"Description","y":"void cairo_pattern_set_matrix\n    ( CairoPattern $pattern\n   , CairoMatrix $matrix\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."},{"t":"matrix","d":"Description..."}]},"cairo_pattern_status":{"s":"Description","y":"int cairo_pattern_status\n    ( CairoPattern $pattern\n   )","r":"What is returned on success and failure","p":[{"t":"pattern","d":"Description..."}]},"cairo_pdf_surface_create":{"s":"Description","y":"CairoPdfSurface cairo_pdf_surface_create\n    ( string $file\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"file","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_pdf_surface_set_size":{"s":"Description","y":"void cairo_pdf_surface_set_size\n    ( CairoPdfSurface $surface\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_ps_level_to_string":{"s":"Description","y":"string cairo_ps_level_to_string\n    ( int $level\n   )","r":"What is returned on success and failure","p":[{"t":"level","d":"Description..."}]},"cairo_ps_surface_create":{"s":"Description","y":"CairoPsSurface cairo_ps_surface_create\n    ( string $file\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"file","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_ps_surface_dsc_begin_setup":{"s":"Description","y":"void cairo_ps_surface_dsc_begin_setup\n    ( CairoPsSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_ps_surface_dsc_comment":{"s":"Description","y":"void cairo_ps_surface_dsc_comment\n    ( CairoPsSurface $surface\n   , string $comment\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"comment","d":"Description..."}]},"cairo_ps_surface_get_eps":{"s":"Description","y":"bool cairo_ps_surface_get_eps\n    ( CairoPsSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_ps_surface_restrict_to_level":{"s":"Description","y":"void cairo_ps_surface_restrict_to_level\n    ( CairoPsSurface $surface\n   , int $level\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"level","d":"Description..."}]},"cairo_ps_surface_set_eps":{"s":"Description","y":"void cairo_ps_surface_set_eps\n    ( CairoPsSurface $surface\n   , bool $level\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"level","d":"Description..."}]},"cairo_ps_surface_set_size":{"s":"Description","y":"void cairo_ps_surface_set_size\n    ( CairoPsSurface $surface\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_scaled_font_create":{"s":"Description","y":"CairoScaledFont cairo_scaled_font_create\n    ( CairoFontFace $fontface\n   , CairoMatrix $matrix\n   , CairoMatrix $ctm\n   , CairoFontOptions $fontoptions\n   )","r":"What is returned on success and failure","p":[{"t":"fontface","d":"Description..."},{"t":"matrix","d":"Description..."},{"t":"ctm","d":"Description..."},{"t":"fontoptions","d":"Description..."}]},"cairo_scaled_font_extents":{"s":"Description","y":"array cairo_scaled_font_extents\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_ctm":{"s":"Description","y":"CairoMatrix cairo_scaled_font_get_ctm\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_font_face":{"s":"Description","y":"CairoFontFace cairo_scaled_font_get_font_face\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_font_matrix":{"s":"Description","y":"CairoFontOptions cairo_scaled_font_get_font_matrix\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_font_options":{"s":"Description","y":"CairoFontOptions cairo_scaled_font_get_font_options\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_scale_matrix":{"s":"Description","y":"CairoMatrix cairo_scaled_font_get_scale_matrix\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_get_type":{"s":"Description","y":"int cairo_scaled_font_get_type\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_glyph_extents":{"s":"Description","y":"array cairo_scaled_font_glyph_extents\n    ( CairoScaledFont $scaledfont\n   , array $glyphs\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."},{"t":"glyphs","d":"Description..."}]},"cairo_scaled_font_status":{"s":"Description","y":"int cairo_scaled_font_status\n    ( CairoScaledFont $scaledfont\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."}]},"cairo_scaled_font_text_extents":{"s":"Description","y":"array cairo_scaled_font_text_extents\n    ( CairoScaledFont $scaledfont\n   , string $text\n   )","r":"What is returned on success and failure","p":[{"t":"scaledfont","d":"Description..."},{"t":"text","d":"Description..."}]},"cairo_surface_copy_page":{"s":"Description","y":"void cairo_surface_copy_page\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_create_similar":{"s":"Description","y":"CairoSurface cairo_surface_create_similar\n    ( CairoSurface $surface\n   , int $content\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"content","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_surface_finish":{"s":"Description","y":"void cairo_surface_finish\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_flush":{"s":"Description","y":"void cairo_surface_flush\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_get_device_offset":{"s":"Description","y":"array cairo_surface_get_device_offset\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_get_type":{"s":"Description","y":"int cairo_surface_get_type\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_mark_dirty":{"s":"Description","y":"void cairo_surface_mark_dirty\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_mark_dirty_rectangle":{"s":"Description","y":"void cairo_surface_mark_dirty_rectangle\n    ( CairoSurface $surface\n   , float $x\n   , float $y\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"x","d":"Description..."},{"t":"y","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_surface_set_device_offset":{"s":"Description","y":"void cairo_surface_set_device_offset\n    ( CairoSurface $surface\n   , float $x\n   , float $y\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"x","d":"Description..."},{"t":"y","d":"Description..."}]},"cairo_surface_set_fallback_resolution":{"s":"Description","y":"void cairo_surface_set_fallback_resolution\n    ( CairoSurface $surface\n   , float $x\n   , float $y\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"x","d":"Description..."},{"t":"y","d":"Description..."}]},"cairo_surface_show_page":{"s":"Description","y":"void cairo_surface_show_page\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_status":{"s":"Description","y":"int cairo_surface_status\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"cairo_surface_write_to_png":{"s":"Description","y":"void cairo_surface_write_to_png\n    ( CairoSurface $surface\n   , resource $stream\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"stream","d":"Description..."}]},"cairo_svg_surface_create":{"s":"Description","y":"CairoSvgSurface cairo_svg_surface_create\n    ( string $file\n   , float $width\n   , float $height\n   )","r":"What is returned on success and failure","p":[{"t":"file","d":"Description..."},{"t":"width","d":"Description..."},{"t":"height","d":"Description..."}]},"cairo_svg_surface_restrict_to_version":{"s":"Description","y":"void cairo_svg_surface_restrict_to_version\n    ( CairoSvgSurface $surface\n   , int $version\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."},{"t":"version","d":"Description..."}]},"cairo_svg_version_to_string":{"s":"Description","y":"string cairo_svg_version_to_string\n    ( int $version\n   )","r":"What is returned on success and failure","p":[{"t":"version","d":"Description..."}]},"calculhmac":{"s":"Obtain a hmac key (needs 2 arguments)","y":"string calculhmac\n    ( string $clent\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"calcul_hmac":{"s":"Obtain a hmac key (needs 8 arguments)","y":"string calcul_hmac\n    ( string $clent\n   , string $siretcode\n   , string $price\n   , string $reference\n   , string $validity\n   , string $taxation\n   , string $devise\n   , string $language\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"call_user_func":{"s":"Call the callback given by the first parameter","y":"mixed call_user_func\n    ( callable $callback\n   [, mixed $parameter\n   [, mixed $...\n  ]] )","r":"Returns the return value of the callback, or FALSE on error.","p":[{"t":"callback","d":"The callable to be called."},{"t":"parameter","d":"Zero or more parameters to be passed to the callback."}]},"call_user_func_array":{"s":"Call a callback with an array of parameters","y":"mixed call_user_func_array\n    ( callable $callback\n   , array $param_arr\n   )","r":"Returns the return value of the callback, or FALSE on error.","p":[{"t":"callback","d":"The callable to be called."},{"t":"param_arr","d":"The parameters to be passed to the callback, as an indexed array."}]},"call_user_method":{"s":"Call a user method on an specific object [deprecated]","y":"mixed call_user_method\n    ( string $method_name\n   , object &$obj\n   [, mixed $parameter\n   [, mixed $...\n  ]] )","r":"","p":[{"t":"method_name","d":"The method name being called."},{"t":"obj","d":"The object that method_name\n       is being called on."},{"t":"parameter ...","d":"The optional parameters."}]},"call_user_method_array":{"s":"Call a user method given with an array of parameters [deprecated]","y":"mixed call_user_method_array\n    ( string $method_name\n   , object &$obj\n   , array $params\n   )","r":"","p":[{"t":"method_name","d":"The method name being called."},{"t":"obj","d":"The object that method_name\n       is being called on."},{"t":"params","d":"An array of parameters."}]},"cal_days_in_month":{"s":"Return the number of days in a month for a given year and calendar","y":"int cal_days_in_month\n    ( int $calendar\n   , int $month\n   , int $year\n   )","r":"The length in days of the selected month in the given calendar","p":[{"t":"calendar","d":"Calendar to use for calculation"},{"t":"month","d":"Month in the selected calendar"},{"t":"year","d":"Year in the selected calendar"}]},"cal_from_jd":{"s":"Converts from Julian Day Count to a supported calendar","y":"array cal_from_jd\n    ( int $jd\n   , int $calendar\n   )","r":"Returns an array containing calendar information like month, day, year,\n   day of week, abbreviated and full names of weekday and month and the\n   date in string form &quot;month\/day\/year&quot;.","p":[{"t":"jd","d":"Julian day as integer"},{"t":"calendar","d":"Calendar to convert to"}]},"cal_info":{"s":"Returns information about a particular calendar","y":"array cal_info\n    ([ int $calendar = -1\n  ] )","r":"","p":[{"t":"calendar","d":"Calendar to return information for. If no calendar is specified\n       information about all calendars is returned."}]},"cal_to_jd":{"s":"Converts from a supported calendar to Julian Day Count","y":"int cal_to_jd\n    ( int $calendar\n   , int $month\n   , int $day\n   , int $year\n   )","r":"A Julian Day number.","p":[{"t":"calendar","d":"Calendar to convert from, one of \n       CAL_GREGORIAN,\n       CAL_JULIAN,\n       CAL_JEWISH or\n       CAL_FRENCH."},{"t":"month","d":"The month as a number, the valid range depends \n       on the calendar"},{"t":"day","d":"The day as a number, the valid range depends \n       on the calendar"},{"t":"year","d":"The year as a number, the valid range depends \n       on the calendar"}]},"ceil":{"s":"Round fractions up","y":"float ceil\n     ( float $value\n    )","r":"value rounded up to the next highest\n   integer.\n   The return value of ceil() is still of type\n   float as the value range of float is \n   usually bigger than that of integer.","p":[{"t":"value","d":"The value to round"}]},"chdb_create":{"s":"Creates a chdb file","y":"bool chdb_create\n    ( string $pathname\n   , array $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pathname","d":"The name of the file to create."},{"t":"data","d":"An array containing the key-value pairs to store in the chdb file."}]},"chdir":{"s":"Change directory","y":"bool chdir\n    ( string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"directory","d":"The new current directory"}]},"checkdate":{"s":"Validate a Gregorian date","y":"bool checkdate\n    ( int $month\n   , int $day\n   , int $year\n   )","r":"Returns TRUE if the date given is valid; otherwise returns FALSE.","p":[{"t":"month","d":"The month is between 1 and 12 inclusive."},{"t":"day","d":"The day is within the allowed number of days for the given \n       month.  Leap years \n       are taken into consideration."},{"t":"year","d":"The year is between 1 and 32767 inclusive."}]},"checkdnsrr":{"s":"Check DNS records corresponding to a given Internet host name or IP address","y":"bool checkdnsrr\n    ( string $host\n   [, string $type = &quot;MX&quot;\n  ] )","r":"Returns TRUE if any records are found; returns FALSE if no records\n   were found or if an error occurred.","p":[{"t":"host","d":"host may either be the IP address in\n       dotted-quad notation or the host name."},{"t":"type","d":"type may be any one of: A, MX, NS, SOA,\n       PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY."}]},"chgrp":{"s":"Changes file group","y":"bool chgrp\n    ( string $filename\n   , mixed $group\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."},{"t":"group","d":"A group name or number."}]},"chmod":{"s":"Changes file mode","y":"bool chmod\n    ( string $filename\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."},{"t":"mode","d":"Note that mode is not automatically\n       assumed to be an octal value, so to ensure the expected operation,\n       you need to prefix mode with a zero (0). \n       Strings such as &quot;g+w&quot; will not work properly."}]},"chop":{"s":"Alias of rtrim()","y":"","r":"","p":null},"chown":{"s":"Changes file owner","y":"bool chown\n    ( string $filename\n   , mixed $user\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."},{"t":"user","d":"A user name or number."}]},"chr":{"s":"Return a specific character","y":"string chr\n    ( int $ascii\n   )","r":"Returns the specified character.","p":[{"t":"ascii","d":"The ascii code."}]},"chroot":{"s":"Change the root directory","y":"bool chroot\n    ( string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"directory","d":"The path to change the root directory to."}]},"chunk_split":{"s":"Split a string into smaller chunks","y":"string chunk_split\n    ( string $body\n   [, int $chunklen = 76\n   [, string $end = &quot;\\r\\n&quot;\n  ]] )","r":"Returns the chunked string.","p":[{"t":"body","d":"The string to be chunked."},{"t":"chunklen","d":"The chunk length."},{"t":"end","d":"The line ending sequence."}]},"classkit_import":{"s":"Import new class method definitions from a file","y":"array classkit_import\n    ( string $filename\n   )","r":"Associative array of imported methods","p":[{"t":"filename","d":"The filename of the class method definitions to import"}]},"classkit_method_add":{"s":"Dynamically adds a new method to a given class","y":"bool classkit_method_add\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = CLASSKIT_ACC_PUBLIC\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class to which this method will be added"},{"t":"methodname","d":"The name of the method to add"},{"t":"args","d":"Comma-delimited list of arguments for the newly-created method"},{"t":"code","d":"The code to be evaluated when methodname\n       is called"},{"t":"flags","d":"The type of method to create, can be\n       CLASSKIT_ACC_PUBLIC,\n       CLASSKIT_ACC_PROTECTED or\n       CLASSKIT_ACC_PRIVATE"}]},"classkit_method_copy":{"s":"Copies a method from class to another","y":"bool classkit_method_copy\n    ( string $dClass\n   , string $dMethod\n   , string $sClass\n   [, string $sMethod\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dClass","d":"Destination class for copied method"},{"t":"dMethod","d":"Destination method name"},{"t":"sClass","d":"Source class of the method to copy"},{"t":"sMethod","d":"Name of the method to copy from the source class. If this parameter is\n       omitted, the value of dMethod is assumed."}]},"classkit_method_redefine":{"s":"Dynamically changes the code of the given method","y":"bool classkit_method_redefine\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = CLASSKIT_ACC_PUBLIC\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to redefine the method"},{"t":"methodname","d":"The name of the method to redefine"},{"t":"args","d":"Comma-delimited list of arguments for the redefined method"},{"t":"code","d":"The new code to be evaluated when methodname\n       is called"},{"t":"flags","d":"The redefined method can be\n       CLASSKIT_ACC_PUBLIC,\n       CLASSKIT_ACC_PROTECTED or\n       CLASSKIT_ACC_PRIVATE"}]},"classkit_method_remove":{"s":"Dynamically removes the given method","y":"bool classkit_method_remove\n    ( string $classname\n   , string $methodname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to remove the method"},{"t":"methodname","d":"The name of the method to remove"}]},"classkit_method_rename":{"s":"Dynamically changes the name of the given method","y":"bool classkit_method_rename\n    ( string $classname\n   , string $methodname\n   , string $newname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to rename the method"},{"t":"methodname","d":"The name of the method to rename"},{"t":"newname","d":"The new name to give to the renamed method"}]},"class_alias":{"s":"Creates an alias for a class","y":"bool class_alias\n    ( string $original\n   , string $alias\n   [, bool $autoload = TRUE\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"original","d":"The original class."},{"t":"alias","d":"The alias name for the class."},{"t":"autoload","d":"Whether to autoload if the original class is not found."}]},"class_exists":{"s":"Checks if the class has been defined","y":"bool class_exists\n    ( string $class_name\n   [, bool $autoload = true\n  ] )","r":"Returns TRUE if class_name is a defined class,\n   FALSE otherwise.","p":[{"t":"class_name","d":"The class name. The name is matched in a case-insensitive manner."},{"t":"autoload","d":"Whether or not to call __autoload by default."}]},"class_implements":{"s":"Return the interfaces which are implemented by the given class","y":"array class_implements\n    ( mixed $class\n   [, bool $autoload = true\n  ] )","r":"An array on success, or FALSE on error.","p":[{"t":"class","d":"An object (class instance) or a string (class name)."},{"t":"autoload","d":"Whether to allow this function to load the class automatically through\n       the __autoload() magic method."}]},"class_parents":{"s":"Return the parent classes of the given class","y":"array class_parents\n    ( mixed $class\n   [, bool $autoload = true\n  ] )","r":"An array on success, or FALSE on error.","p":[{"t":"class","d":"An object (class instance) or a string (class name)."},{"t":"autoload","d":"Whether to allow this function to load the class automatically through\n       the __autoload() magic method."}]},"class_uses":{"s":"Return the traits used by the given class","y":"array class_uses\n    ( mixed $class\n   [, bool $autoload = true\n  ] )","r":"An array on success, or FALSE on error.","p":[{"t":"class","d":"An object (class instance) or a string (class name)."},{"t":"autoload","d":"Whether to allow this function to load the class automatically through\n       the __autoload() magic method."}]},"clearstatcache":{"s":"Clears file status cache","y":"void clearstatcache\n    ([ bool $clear_realpath_cache = false\n   [, string $filename\n  ]] )","r":"No value is returned.","p":[{"t":"clear_realpath_cache","d":"Whether to clear the realpath cache or not."},{"t":"filename","d":"Clear the realpath and the stat cache for a specific filename only; only\n       used if clear_realpath_cache is TRUE."}]},"cli_get_process_title":{"s":"Returns the current process title","y":"string cli_get_process_title\n    ( void\n   )","r":"Return a string with the current process title or NULL on error.","p":null},"cli_set_process_title":{"s":"Sets the process title","y":"bool cli_set_process_title\n    ( string $title\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"title","d":"The new title."}]},"closedir":{"s":"Close directory handle","y":"void closedir\n    ([ resource $dir_handle\n  ] )","r":"","p":[{"t":"dir_handle","d":"The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed."}]},"closelog":{"s":"Close connection to system logger","y":"bool closelog\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"compact":{"s":"Create array containing variables and their values","y":"array compact\n    ( mixed $varname1\n   [, mixed $...\n  ] )","r":"Returns the output array with all the variables added to it.","p":[{"t":"varname1","d":"compact() takes a variable number of parameters.\n       Each parameter can be either a string containing the name of the\n       variable, or an array of variable names.  The array can contain other\n       arrays of variable names inside it; compact()\n       handles it recursively."}]},"com_addref":{"s":"Increases the components reference counter [deprecated]","y":"void com_addref\n     ( void\n   )","r":"No value is returned.","p":null},"com_create_guid":{"s":"Generate a globally unique identifier (GUID)","y":"string com_create_guid\n    ( void\n   )","r":"Returns the GUID as a string.","p":null},"com_event_sink":{"s":"Connect events from a COM object to a PHP object","y":"bool com_event_sink\n    ( variant $comobject\n   , object $sinkobject\n   [, mixed $sinkinterface\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"comobject","d":""},{"t":"sinkobject","d":"sinkobject should be an instance of a class with\n       methods named after those of the desired dispinterface; you may use\n       com_print_typeinfo() to help generate a template class\n       for this purpose."},{"t":"sinkinterface","d":"PHP will attempt to use the default dispinterface type specified by\n       the typelibrary associated with comobject, but\n       you may override this choice by setting\n       sinkinterface to the name of the dispinterface\n       that you want to use."}]},"com_get":{"s":"Gets the value of a COM Component&#039;s property [deprecated]","y":"","r":"","p":null},"com_get_active_object":{"s":"Returns a handle to an already running instance of a COM object","y":"variant com_get_active_object\n    ( string $progid\n   [, int $code_page\n  ] )","r":"If the requested object is running, it will be returned to your script\n   just like any other COM object.","p":[{"t":"progid","d":"progid must be either the ProgID or CLSID for\n       the object that you want to access (for example\n       Word.Application)."},{"t":"code_page","d":"Acts in precisely the same way that it does for the COM class."}]},"com_invoke":{"s":"Calls a COM component&#039;s method [deprecated]","y":"","r":"","p":null},"com_isenum":{"s":"Indicates if a COM object has an IEnumVariant interface for iteration [deprecated]","y":"bool com_isenum\n    ( variant $com_module\n   )","r":"Returns TRUE if the object can be enumerated, FALSE otherwise.","p":[{"t":"com_module","d":"The COM object."}]},"com_load":{"s":"Creates a new reference to a COM component [deprecated]","y":"","r":"","p":null},"com_load_typelib":{"s":"Loads a Typelib","y":"bool com_load_typelib\n    ( string $typelib_name\n   [, bool $case_insensitive = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"typelib_name","d":"typelib_name can be one of the following:\n       \n        \n         \n          The filename of a .tlb file or the executable module\n          that contains the type library."},{"t":"case_insensitive","d":"The case_insensitive behaves in the same way as\n       the parameter with the same name in the define()\n       function."}]},"com_message_pump":{"s":"Process COM messages, sleeping for up to timeoutms milliseconds","y":"bool com_message_pump\n    ([ int $timeoutms = 0\n  ] )","r":"If a message or messages arrives before the timeout, they will be\n   dispatched, and the function will return TRUE. If the timeout occurs and\n   no messages were processed, the return value will be FALSE.","p":[{"t":"timeoutms","d":"The timeout, in milliseconds."}]},"com_print_typeinfo":{"s":"Print out a PHP class definition for a dispatchable interface","y":"bool com_print_typeinfo\n    ( object $comobject\n   [, string $dispinterface\n   [, bool $wantsink = false\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"comobject","d":"comobject should be either an instance of a COM\n       object, or be the name of a typelibrary (which will be resolved according\n       to the rules set out in com_load_typelib())."},{"t":"dispinterface","d":"The name of an IDispatch descendant interface that you want to display."},{"t":"wantsink","d":"If set to TRUE, the corresponding sink interface will be displayed\n       instead."}]},"com_propget":{"s":"Alias of com_get()","y":"","r":"","p":null},"com_propput":{"s":"Alias of com_set()","y":"","r":"","p":null},"com_propset":{"s":"Alias of com_set()","y":"","r":"","p":null},"com_release":{"s":"Decreases the components reference counter [deprecated]","y":"void com_release\n    ( void\n   )","r":"No value is returned.","p":null},"com_set":{"s":"Assigns a value to a COM component&#039;s property","y":"","r":"","p":null},"connection_aborted":{"s":"Check whether client disconnected","y":"int connection_aborted\n    ( void\n   )","r":"Returns 1 if client disconnected, 0 otherwise.","p":null},"connection_status":{"s":"Returns connection status bitfield","y":"int connection_status\n    ( void\n   )","r":"Returns the connection status bitfield, which can be used against the\n   CONNECTION_XXX constants to determine the connection\n   status.","p":null},"connection_timeout":{"s":"Check if the script timed out","y":"int connection_timeout\n    ( void\n   )","r":"Returns 1 if the script timed out, 0 otherwise.","p":null},"constant":{"s":"Returns the value of a constant","y":"mixed constant\n    ( string $name\n   )","r":"Returns the value of the constant, or NULL if the constant is not\n   defined.","p":[{"t":"name","d":"The constant name."}]},"convert_cyr_string":{"s":"Convert from one Cyrillic character set to another","y":"string convert_cyr_string\n    ( string $str\n   , string $from\n   , string $to\n   )","r":"Returns the converted string.","p":[{"t":"str","d":"The string to be converted."},{"t":"from","d":"The source Cyrillic character set, as a single character."},{"t":"to","d":"The target Cyrillic character set, as a single character."}]},"convert_uudecode":{"s":"Decode a uuencoded string","y":"string convert_uudecode\n    ( string $data\n   )","r":"Returns the decoded data as a string  or FALSE on failure.","p":[{"t":"data","d":"The uuencoded data."}]},"convert_uuencode":{"s":"Uuencode a string","y":"string convert_uuencode\n    ( string $data\n   )","r":"Returns the uuencoded data.","p":[{"t":"data","d":"The data to be encoded  or FALSE on failure."}]},"copy":{"s":"Copies file","y":"bool copy\n    ( string $source\n   , string $dest\n   [, resource $context\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"Path to the source file."},{"t":"dest","d":"The destination path. If dest is a URL, the\n       copy operation may fail if the wrapper does not support overwriting of\n       existing files."}]},"cosh":{"s":"Hyperbolic cosine","y":"float cosh\n     ( float $arg\n    )","r":"The hyperbolic cosine of arg","p":[{"t":"arg","d":"The argument to process"}]},"count":{"s":"Count all elements in an array, or something in an object","y":"int count\n    ( mixed $array_or_countable\n   [, int $mode = COUNT_NORMAL\n  ] )","r":"Returns the number of elements in array_or_countable.\n   If the parameter is not an array or not an object with\n   implemented Countable interface,\n   1 will be returned.\n   There is one exception, if array_or_countable is NULL,\n   0 will be returned.","p":[{"t":"array_or_countable","d":"An array or Countable object."},{"t":"mode","d":"If the optional mode parameter is set to\n       COUNT_RECURSIVE (or 1), count()\n       will recursively count the array.  This is particularly useful for\n       counting all the elements of a multidimensional array."}]},"count_chars":{"s":"Return information about characters used in a string","y":"mixed count_chars\n    ( string $string\n   [, int $mode = 0\n  ] )","r":"Depending on mode\n   count_chars() returns one of the following:\n   \n    \n     \n      0 - an array with the byte-value as key and the frequency of\n      every byte as value.\n     \n    \n    \n     \n      1 - same as 0 but only byte-values with a frequency greater\n      than zero are listed.\n     \n    \n    \n     \n      2 - same as 0 but only byte-values with a frequency equal to\n      zero are listed.\n     \n    \n    \n     \n      3 - a string containing all unique characters is returned.\n     \n    \n    \n     \n      4 - a string containing all not used characters is returned.","p":[{"t":"string","d":"The examined string."},{"t":"mode","d":"See return values."}]},"crack_check":{"s":"Performs an obscure check with the given password","y":"bool crack_check\n    ( resource $dictionary\n   , string $password\n   )","r":"Returns TRUE if password is strong, or FALSE otherwise.","p":[{"t":"dictionary","d":"The crack lib dictionary. If not specified, the last opened dictionary\n       is used."},{"t":"password","d":"The tested password."}]},"crack_closedict":{"s":"Closes an open CrackLib dictionary ","y":"bool crack_closedict\n    ([ resource $dictionary\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary","d":"The dictionary to close. If not specified, the current dictionary is\n       closed."}]},"crack_getlastmessage":{"s":"Returns the message from the last obscure check","y":"string crack_getlastmessage\n    ( void\n   )","r":"The message from the last obscure check or FALSE if there was no obscure\n   checks made so far.","p":null},"crack_opendict":{"s":"Opens a new CrackLib dictionary","y":"resource crack_opendict\n    ( string $dictionary\n   )","r":"Returns a dictionary resource identifier on success or FALSE on failure.","p":[{"t":"dictionary","d":"The path to the Cracklib dictionary."}]},"crc32":{"s":"Calculates the crc32 polynomial of a string","y":"int crc32\n    ( string $str\n   )","r":"Returns the crc32 checksum of str as an integer.","p":[{"t":"str","d":"The data."}]},"create_function":{"s":"Create an anonymous (lambda-style) function","y":"string create_function\n    ( string $args\n   , string $code\n   )","r":"Returns a unique function name as a string, or FALSE on error.","p":[{"t":"args","d":"The function arguments."},{"t":"code","d":"The function code."}]},"ctype_alnum":{"s":"Check for alphanumeric character(s)","y":"bool ctype_alnum\n    ( string $text\n   )","r":"Returns TRUE if every character in text is either\n   a letter or a digit, FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"ctype_alpha":{"s":"Check for alphabetic character(s)","y":"bool ctype_alpha\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   a letter from the current locale, FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"ctype_cntrl":{"s":"Check for control character(s)","y":"bool ctype_cntrl\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   a control character from the current locale, FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"ctype_digit":{"s":"Check for numeric character(s)","y":"bool ctype_digit\n    ( string $text\n   )","r":"Returns TRUE if every character in the string\n   text is a decimal digit, FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"ctype_graph":{"s":"Check for any printable character(s) except space","y":"bool ctype_graph\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   printable and actually creates visible output (no white space), FALSE\n   otherwise.","p":[{"t":"text","d":"The tested string."}]},"ctype_lower":{"s":"Check for lowercase character(s)","y":"bool ctype_lower\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   a lowercase letter in the current locale.","p":[{"t":"text","d":"The tested string."}]},"ctype_print":{"s":"Check for printable character(s)","y":"bool ctype_print\n    ( string $text\n   )","r":"Returns TRUE if every character in text \n   will actually create output (including blanks). Returns FALSE if \n   text contains control characters or characters \n   that do not have any output or control function at all.","p":[{"t":"text","d":"The tested string."}]},"ctype_space":{"s":"Check for whitespace character(s)","y":"bool ctype_space\n    ( string $text\n   )","r":"Returns TRUE if every character in text \n   creates some sort of white space, FALSE otherwise. Besides the \n   blank character this also includes tab, vertical tab, line feed,\n   carriage return and form feed characters.","p":[{"t":"text","d":"The tested string."}]},"ctype_upper":{"s":"Check for uppercase character(s)","y":"bool ctype_upper\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   an uppercase letter in the current locale.","p":[{"t":"text","d":"The tested string."}]},"ctype_xdigit":{"s":"Check for character(s) representing a hexadecimal digit","y":"bool ctype_xdigit\n    ( string $text\n   )","r":"Returns TRUE if every character in text is \n   a hexadecimal &#039;digit&#039;, that is a decimal digit or a character from \n   [A-Fa-f] , FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"cubrid_affected_rows":{"s":"Return the number of rows affected by the last SQL statement","y":"int cubrid_affected_rows\n    ([ resource $conn_identifier\n  ] )","r":"Number of rows affected by the SQL statement, when process is successful.","p":[{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not\n      specified, the last link opend by cubrid_connect() is\n    assumed."},{"t":"req_identifier","d":"Request Identifier, could be returned from either cubrid_prepare() or cubrid_execute(). \n        If the request identifier is not specified, the last identifier requested by \n        cubrid_prepare() or cubrid_execute() is assumed."}]},"cubrid_bind":{"s":"Bind variables to a prepared statement as parameters","y":"bool cubrid_bind\n    ( resource $req_identifier\n   , int $bind_index\n   , mixed $bind_value\n   [, string $bind_value_type\n  ] )","r":"TRUE, when process is successful.","p":[{"t":"req_identifier","d":"Request identifier as a result of\n    cubrid_prepare()."},{"t":"bind_index","d":"Location of binding parameters. It starts with 1."},{"t":"bind_value","d":"Actual value for binding."},{"t":"bind_value_type","d":"A type of the value to bind. (It is omitted by default.\n    Thus, the system internally uses string by default. However, you need to\n    specify the exact type of the value as an argument when they are NCHAR,\n    BIT, or BLOB\/CLOB)."}]},"cubrid_client_encoding":{"s":"Return the current CUBRID connection charset","y":"string cubrid_client_encoding\n    ([ resource $conn_identifier  \n  ] )","r":"A string that represents the CUBRID connection charset; on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified, the last link opened by cubrid_connect() is assumed."}]},"cubrid_close":{"s":"Close CUBRID connection","y":"bool cubrid_close\n    ([ resource $conn_identifier  \n  ] )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"The CUBRID connection identifier. If the connection identifier is not specified, the last connection opened by cubrid_connect() is assumed."}]},"cubrid_close_prepare":{"s":"Close the request handle ","y":"bool cubrid_close_prepare\n    ( resource $req_identifier\n   )","r":"Return TRUE on success.","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_close_request":{"s":"Close the request handle ","y":"bool cubrid_close_request\n    ( resource $req_identifier\n   )","r":"Return TRUE on success.","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_column_names":{"s":"Get the column names in result","y":"array cubrid_column_names\n    ( resource $req_identifier\n   )","r":"Array of string values containing the column names, when process is successful. ","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_column_types":{"s":"Get column types in result","y":"array cubrid_column_types\n     ( resource $req_identifier\n   )","r":"Array of string values containing the column names, when process is successful.","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_col_get":{"s":"Get contents of collection type column using OID","y":"array cubrid_col_get\n    ( resource $conn_identifier\n   , string $oid\n   , string $attr_name\n   )","r":"Array (0-based numerical array) containing the elements you requested,\n    when process is successful;","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to read."},{"t":"attr_name","d":"Attribute name that you want to read from the instance."}]},"cubrid_col_size":{"s":"Get the number of elements in collection type column using OID","y":"int cubrid_col_size\n        ( resource $conn_identifier\n       , string $oid\n       , string $attr_name\n   )","r":"Number of elements, when process is successful. ","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID the instance that you want to work with."},{"t":"attr_name","d":"Name of the attribute that you want to work with."}]},"cubrid_commit":{"s":"Commit a transaction","y":"bool cubrid_commit\n    ( resource $conn_identifier )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."}]},"cubrid_connect":{"s":"Open a connection to a CUBRID Server","y":"resource cubrid_connect\n    ( string $host  \n   , int $port  \n   , string $dbname  \n   [, string $userid  \n   [, string $passwd  \n   [, bool $new_link = false  \n  ]]] )","r":"Connection identifier, when process is successful. ","p":[{"t":"host","d":"Host name or IP address of CUBRID CAS server."},{"t":"port","d":"Port number of CUBRID CAS server (BROKER_PORT configured in $CUBRID\/conf\/cubrid_broker.conf)."},{"t":"dbname","d":"Name of database."},{"t":"userid","d":"User name for the database. If not given, the default\n      value is &quot;public&quot;."},{"t":"passwd","d":"User password. If not given, the default value is &quot;&quot;."},{"t":"new_link","d":"If a second call is made to\n      cubrid_connect() with the same arguments, no new\n      connection will be established, but instead, the connection identifier\n      of the already opened connection will be returned. The\n      new_link parameter modifies this behavior and\n      makes cubrid_connect() always open a new connection,\n      even if cubrid_connect() was called before with the\n      same parameters."}]},"cubrid_connect_with_url":{"s":"Establish the environment for connecting to CUBRID server","y":"resource cubrid_connect_with_url\n    ( string $conn_url  \n   [, string $userid  \n   [, string $passwd  \n   [, bool $new_link = false\n  ]]] )","r":"Connection identifier, when process is successful. ","p":[{"t":"conn_url","d":"A character string that contains server connection information."},{"t":"userid","d":"User name for the database."},{"t":"passwd","d":"User password."},{"t":"new_link","d":"If a second call is made to\n       cubrid_connect_with_url() with the same arguments,\n       no new connection will be established, but instead, the connection\n       identifier of the already opened connection will be returned. The\n       new_link parameter modifies this behavior and\n       makes cubrid_connect_with_url() always open a new\n       connection, even if cubrid_connect_with_url() was\n       called before with the same parameters."}]},"cubrid_current_oid":{"s":"Get OID of the current cursor location","y":"string cubrid_current_oid\n    ( resource $req_identifier\n   )","r":"Oid of current cursor location, when process is successful","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_data_seek":{"s":"Move the internal row pointer of the CUBRID result","y":"bool cubrid_data_seek\n    ( resource $result\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result."},{"t":"row_number","d":"This is the desired row number of the new result pointer."}]},"cubrid_db_name":{"s":"Get db name from results of cubrid_list_dbs","y":"string cubrid_db_name\n    ( array $result\n   , int $index\n   )","r":"Returns the database name on success, and FALSE on failure. If FALSE\n   is returned, use cubrid_error() to determine the nature\n   of the error.","p":[{"t":"result","d":"The result pointer from a call to cubrid_list_dbs()."},{"t":"index","d":"The index into the result set."}]},"cubrid_disconnect":{"s":"Close a database connection","y":"bool cubrid_disconnect\n    ([ resource $conn_identifier\n  ] )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."}]},"cubrid_drop":{"s":"Delete an instance using OID","y":"bool cubrid_drop\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"Oid of the instance that you want to delete."}]},"cubrid_errno":{"s":"Return the numerical value of the error message from previous CUBRID operation","y":"int cubrid_errno\n    ([ resource $conn_identifier\n  ] )","r":"Returns the error number from the last CUBRID function, or 0 (zero) if no error occurred.","p":[{"t":"conn_identifier","d":"The CUBRID connection identifier. If the connection identifier is not\n       specified, the last connection opened by\n       cubrid_connect() is assumed."}]},"cubrid_error":{"s":"Get the error message","y":"string cubrid_error\n    ([ resource $connection\n  ] )","r":"Error message that occurred.","p":[{"t":"connection","d":"The CUBRID connection."}]},"cubrid_error_code":{"s":"Get error code for the most recent function call","y":"int cubrid_error_code\n    ( void\n   )","r":"Error code of the error that occurred, or 0 (zero) if no\n   error occurred. ","p":null},"cubrid_error_code_facility":{"s":"Get the facility code of error","y":"int cubrid_error_code_facility\n    ( void\n   )","r":"Facility code of the error code that occurred: CUBRID_FACILITY_DBMS, CUBRID_FACILITY_CAS, CUBRID_FACILITY_CCI, CUBRID_FACILITY_CLIENT","p":null},"cubrid_error_msg":{"s":"Get last error message for the most recent function call","y":"string cubrid_error_msg\n    ( void\n   )","r":"Error message that occurred.","p":null},"cubrid_execute":{"s":"Execute a prepared SQL statement","y":"resource cubrid_execute\n    ( resource $conn_identifier  \n   , string $sql  \n   [, int $option  \n  ] )","r":"Request identifier, when process is successful and first param is\n    conn_identifier; TRUE, when process is successful and first argument is\n    request_identifier.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"sql","d":"SQL to be executed."},{"t":"option","d":"Query execution option CUBRID_INCLUDE_OID, CUBRID_ASYNC, CUBRID_EXEC_QUERY_ALL."},{"t":"request_identifier","d":"cubrid_prepare() identifier."}]},"cubrid_fetch":{"s":"Fetch the next row from a result set","y":"mixed cubrid_fetch\n    ( resource $result  \n   [, int $type = CUBRID_BOTH  \n  ] )","r":"Result array or object, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"type","d":"Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\n    CUBRID_BOTH, CUBRID_OBJECT. If you want to operate the lob object, you can\n    use CUBRID_LOB."}]},"cubrid_fetch_array":{"s":"Fetch a result row as an associative array, a numeric array, or both","y":"array cubrid_fetch_array\n    ( resource $result  \n   [, int $type = CUBRID_BOTH\n  ] )","r":"Returns an array of strings that corresponds to the fetched row, when process is successful.","p":[{"t":"result","d":"Result comes from a call to cubrid_execute()"},{"t":"type","d":"Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC,\n      CUBRID_BOTH. If you need to operate the lob object, you can use CUBRID_LOB."}]},"cubrid_fetch_assoc":{"s":"Return the associative array that corresponds to the fetched row","y":"array cubrid_fetch_assoc\n    ( resource $result\n   [, int $type\n  ] )","r":"Associative array, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"type","d":"Type can only be CUBRID_LOB, this parameter will be used\n      only when you need to operate the lob object."}]},"cubrid_fetch_field":{"s":"Get column information from a result and return as an object","y":"object cubrid_fetch_field\n    ( resource $result\n   [, int $field_offset = 0\n  ] )","r":"Object with certain properties of the specific column, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"field_offset","d":"The numerical field offset. If the field offset is not specified, the\n     next field (that was not yet retrieved by this function) is retrieved.\n     The field_offset starts at 0."}]},"cubrid_fetch_lengths":{"s":"Return an array with the lengths of the values of each field from the current row","y":"array cubrid_fetch_lengths\n    ( resource $result\n   )","r":"An numeric array, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"}]},"cubrid_fetch_object":{"s":"Fetche the next row and returns it as an object","y":"object cubrid_fetch_object\n    ( resource $result\n   [, string $class_name\n   [, array $params\n   [, int $type\n  ]]] )","r":"An object, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"class_name","d":"The name of the class to instantiate. If not specified, a\n        stdClass (stdClass is PHP&#039;s generic empty class\n        that&#039;s used when casting other types to objects) object is returned."},{"t":"params","d":"An optional array of parameters to pass to the constructor\n        for class_name objects."},{"t":"type","d":"Type can only be CUBRID_LOB, this parameter will be used only when you\n        need to operate the lob object."}]},"cubrid_fetch_row":{"s":"Return a numerical array with the values of the current row","y":"array cubrid_fetch_row\n    ( resource $result\n   [, int $type\n  ] )","r":"A numerical array, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"type","d":"Type can only be CUBRID_LOB, this parameter will be used\n      only when you need to operate the lob object."}]},"cubrid_field_flags":{"s":"Return a string with the flags of the given field offset","y":"string cubrid_field_flags\n    ( resource $result\n   , int $field_offset\n   )","r":"A string with flags, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"field_offset","d":"The numerical field offset. The field_offset\n     starts at 0. If field_offset does not exist, an\n     error of level E_WARNING is also issued."}]},"cubrid_field_len":{"s":"Get the maximum length of the specified field","y":"int cubrid_field_len\n    ( resource $result\n   , int $field_offset\n   )","r":"Maximum length, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"field_offset","d":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."}]},"cubrid_field_name":{"s":"Return the name of the specified field index","y":"string cubrid_field_name\n    ( resource $result\n   , int $field_offset\n   )","r":"Name of specified field index, on success.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"field_offset","d":"The numerical field offset. The field_offset\n     starts at 0. If field_offset does not exist, an\n     error of level E_WARNING is also issued."}]},"cubrid_field_seek":{"s":"Move the result set cursor to the specified field offset","y":"bool cubrid_field_seek\n    ( resource $result\n   [, int $field_offset = 0\n  ] )","r":"TRUE on success.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"field_offset","d":"The numerical field offset. The field_offset\n       starts at 0. If field_offset does not exist, an\n       error of level E_WARNING is also issued."}]},"cubrid_field_table":{"s":"Return the name of the table of the specified field","y":"string cubrid_field_table\n    ( resource $result\n   , int $field_offset\n   )","r":"Name of the table of the specified field, on success.","p":[{"t":"result","d":"Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC, CUBRID_BOTH."},{"t":"field_offset","d":"The numerical field offset. The field_offset\n      starts at 0. If field_offset does not exist, an\n      error of level E_WARNING is also issued."}]},"cubrid_field_type":{"s":"Return the type of the column corresponding to the given field offset","y":"string cubrid_field_type\n     ( resource $result\n   , int $field_offset\n   )","r":"Type of the column, on success.","p":[{"t":"result","d":"Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC, CUBRID_BOTH."},{"t":"field_offset","d":"The numerical field offset. The field_offset\n     starts at 0. If field_offset does not exist, an\n     error of level E_WARNING is also issued."}]},"cubrid_free_result":{"s":"Free the memory occupied by the result data","y":"bool cubrid_free_result\n    ( resource $req_identifier  \n   )","r":"TRUE on success.","p":[{"t":"req_identifier","d":"This is the request identifier."}]},"cubrid_get":{"s":"Get a column using OID","y":"mixed cubrid_get\n    ( resource $conn_identifier  \n   , string $oid  \n   [, mixed $attr  \n  ] )","r":"Content of the requested attribute, when process is successful; When\n   attr is set with string data type, the result is\n   returned as a string; when attr is set with array\n   data type (0-based numerical array), then the result is returned in\n   associative array. When attr is omitted, then all\n   attributes are received in array form.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to read."},{"t":"attr","d":"Name of the attribute that you want to read."}]},"cubrid_get_autocommit":{"s":"Get auto-commit mode of the connection","y":"bool cubrid_get_autocommit\n    ( resource $conn_identifier\n   )","r":"TRUE, when auto-commit is on.","p":[{"t":"conn_identifier","d":"Connection identifier."}]},"cubrid_get_charset":{"s":"Return the current CUBRID connection charset","y":"string cubrid_get_charset\n    ( resource $conn_identifier  \n   )","r":"A string that represents the CUBRID connection charset; on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection."}]},"cubrid_get_class_name":{"s":"Get the class name using OID","y":"string cubrid_get_class_name\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"Class name when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to check the existence."}]},"cubrid_get_client_info":{"s":"Return the client library version","y":"string cubrid_get_client_info\n    ( void\n   )","r":"A string that represents the client library version; on success.","p":null},"cubrid_get_db_parameter":{"s":"Returns the CUBRID database parameters","y":"array cubrid_get_db_parameter\n    ( resource $conn_identifier  \n   )","r":"An associative array with CUBRID database parameters; on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified,\n      the last link opened by cubrid_connect() is assumed."}]},"cubrid_get_query_timeout":{"s":"Get the query timeout value of the request","y":"int cubrid_get_query_timeout\n    ( resource $req_identifier\n   )","r":"Success: the query timeout value of the current request. Units of msec.","p":[{"t":"req_identifier","d":"Request identifier."}]},"cubrid_get_server_info":{"s":"Return the CUBRID server version","y":"string cubrid_get_server_info\n    ( resource $conn_identifier  \n   )","r":"A string that represents the CUBRID server version; on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection."}]},"cubrid_insert_id":{"s":"Return the ID generated for the last updated AUTO_INCREMENT column","y":"string cubrid_insert_id\n    ([ resource $conn_identifier\n  ] )","r":"A string representing the ID generated for an AUTO_INCREMENT column by the\n   previous query, on success.","p":[{"t":"conn_identifier","d":"The connection identifier previously obtained by a call to\n      cubrid_connect()."}]},"cubrid_is_instance":{"s":"Check whether the instance pointed by OID exists","y":"int cubrid_is_instance\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"1, if such instance exists; ","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to check the existence."}]},"cubrid_list_dbs":{"s":"Return an array with the list of all existing CUBRID databases","y":"array cubrid_list_dbs\n    ([ resource $conn_identifier  \n  ] )","r":"An numeric array with all existing Cubrid databases; on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection."}]},"cubrid_lob2_bind":{"s":"Bind a lob object or a string as a lob object to a prepared statement as parameters.","y":"bool cubrid_lob2_bind\n    ( resource $req_identifier\n   , int $bind_index\n   , mixed $bind_value\n   [, string $bind_value_type\n  ] )","r":"TRUE, when process is successful.","p":[{"t":"req_identifier","d":"Request identifier as a result of cubrid_prepare()."},{"t":"bind_index","d":"Location of binding parameters. It starts with 1."},{"t":"bind_value","d":"Actual value for binding."},{"t":"bind_value_type","d":"It must be &quot;BLOB&quot; or &quot;CLOB&quot; and it won&#039;t be case-sensitive. If it not be given, the default value is &quot;BLOB&quot;."}]},"cubrid_lob2_close":{"s":"Close LOB object.","y":"bool cubrid_lob2_close\n    ( resource $lob_identifier\n   )","r":"TRUE, on success.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."}]},"cubrid_lob2_export":{"s":"Export the lob object to a file.","y":"bool cubrid_lob2_export\n    ( resource $lob_identifier\n   , string $file_name\n   )","r":"TRUE if the process is successful and FALSE for failure.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"filename","d":"File name you want to store BLOB\/CLOB data. It also supports the path of the file."}]},"cubrid_lob2_import":{"s":"Import BLOB\/CLOB data from a file.","y":"bool cubrid_lob2_import\n    ( resource $lob_identifier\n   , string $file_name\n   )","r":"TRUE if the process is successful and FALSE for failure.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"filename","d":"File name you want to import BLOB\/CLOB data. It also supports the path of the file."}]},"cubrid_lob2_new":{"s":"Create a lob object.","y":"resource cubrid_lob2_new\n    ([ resource $conn_identifier\n   [, string $type = &quot;BLOB&quot;  \n  ]] )","r":"Lob identifier when it is successful.","p":[{"t":"conn_identifier","d":"Connection identifier. If the connection identifier is not specified, \n      the last connection opened by cubrid_connect() or \n      cubrid_connect_with_url() is assumed."},{"t":"type","d":"It may be &quot;BLOB&quot; or &quot;CLOB&quot;, it won&#039;t be case-sensitive. The default value is &quot;BLOB&quot;."}]},"cubrid_lob2_read":{"s":"Read from BLOB\/CLOB data.","y":"string cubrid_lob2_read\n    ( resource $lob_identifier\n   , int $len\n   )","r":"Returns the contents as a string.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"len","d":"Length from buffer you want to read from the lob data."}]},"cubrid_lob2_seek":{"s":"Move the cursor of a lob object.","y":"bool cubrid_lob2_seek\n    ( resource $lob_identifier\n   , int $offset\n   [, int $origin = CUBRID_CURSOR_CURRENT\n  ] )","r":"TRUE if the process is successful and FALSE for failure.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"offset","d":"Number of units you want to move the cursor."},{"t":"origin","d":"This parameter can be the following values:"}]},"cubrid_lob2_seek64":{"s":"Move the cursor of a lob object.","y":"bool cubrid_lob2_seek64\n    ( resource $lob_identifier\n   , string $offset\n   [, int $origin = CUBRID_CURSOR_CURRENT\n  ] )","r":"TRUE if the process is successful and FALSE for failure.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"offset","d":"Number of units you want to move the cursor."},{"t":"origin","d":"This parameter can be the following values:"}]},"cubrid_lob2_size":{"s":"Get a lob object&#039;s size.","y":"int cubrid_lob2_size\n    ( resource $lob_identifier\n   )","r":"It will return the size of the LOB object when it processes successfully.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."}]},"cubrid_lob2_size64":{"s":"Get a lob object&#039;s size.","y":"string cubrid_lob2_size64\n    ( resource $lob_identifier\n   )","r":"It will return the size of the LOB object as a string when it processes successfully.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."}]},"cubrid_lob2_tell":{"s":"Tell the cursor position of the LOB object.","y":"int cubrid_lob2_tell\n    ( resource $lob_identifier\n   )","r":"It will return the cursor position on the LOB object when it processes successfully.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."}]},"cubrid_lob2_tell64":{"s":"Tell the cursor position of the LOB object.","y":"string cubrid_lob2_tell64\n    ( resource $lob_identifier\n   )","r":"It will return the cursor position on the LOB object as a string when it processes successfully.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."}]},"cubrid_lob2_write":{"s":"Write to a lob object.","y":"bool cubrid_lob2_write\n    ( resource $lob_identifier\n   , string $buf\n   )","r":"TRUE if the process is successful and FALSE for failure.","p":[{"t":"lob_identifier","d":"Lob identifier as a result of cubrid_lob2_new() or get from the result set."},{"t":"buf","d":"Data that need to be written to the lob object."}]},"cubrid_lob_export":{"s":"Export BLOB\/CLOB data to file","y":"bool cubrid_lob_export\n    ( resource $conn_identifier  \n   , resource $lob_identifier  \n   , string $path_name  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"lob_identifier","d":"LOB identifier."},{"t":"path_name","d":"Path name of the file."}]},"cubrid_lob_get":{"s":"Get BLOB\/CLOB data","y":"array cubrid_lob_get\n    ( resource $conn_identifier  \n   , string $sql  \n   )","r":"Return an array of LOB resources, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"sql","d":"SQL statement to be executed."}]},"cubrid_lob_send":{"s":"Read BLOB\/CLOB data and send straight to browser","y":"bool cubrid_lob_send\n    ( resource $conn_identifier  \n   , resource $lob_identifier  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"lob_identifier","d":"LOB identifier."}]},"cubrid_lob_size":{"s":"Get BLOB\/CLOB data size","y":"string cubrid_lob_size\n    ( resource $lob_identifier  \n   )","r":"A string representing LOB data size, when process is successful.","p":[{"t":"lob_identifier","d":"LOB identifier."}]},"cubrid_lock_read":{"s":"Set a read lock on the given OID","y":"bool cubrid_lock_read\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to put read lock on."}]},"cubrid_lock_write":{"s":"Set a write lock on the given OID","y":"bool cubrid_lock_write\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to put write lock on."}]},"cubrid_move_cursor":{"s":"Move the cursor in the result","y":"int cubrid_move_cursor\n    ( resource $req_identifier  \n   , int $offset  \n   [, int $origin = CUBRID_CURSOR_CURRENT  \n  ] )","r":"TRUE, when process is successful.","p":[{"t":"req_identifier","d":"Request identifier."},{"t":"offset","d":"Number of units you want to move the cursor."},{"t":"origin","d":"Location where you want to move the cursor from CUBRID_CURSOR_FIRST, CUBRID_CURSOR_CURRENT, CUBRID_CURSOR_LAST."}]},"cubrid_new_glo":{"s":"Create a glo instance","y":"string cubrid_new_glo\n    ( resource $conn_identifier  \n   , string $class_name  \n   , string $file_name  \n   )","r":"Oid of the instance created, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"class_name","d":"Name of the class that you want to create a glo in."},{"t":"file_name","d":"The file name that you want to save in the newly created glo."}]},"cubrid_next_result":{"s":"Get result of next query when executing multiple SQL statements","y":"bool cubrid_next_result\n    ( resource $result  \n   )","r":"TRUE, when process is successful.","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"}]},"cubrid_num_cols":{"s":"Return the number of columns in the result set","y":"int cubrid_num_cols\n    ( resource $result  \n   )","r":"Number of columns, when process is successful.","p":[{"t":"result","d":"Result."}]},"cubrid_num_fields":{"s":"Return the number of columns in the result set","y":"int cubrid_num_fields\n    ( resource $result\n   )","r":"Number of columns, on success.","p":[{"t":"result","d":"result comes from a call to\n      cubrid_execute(), cubrid_query()\n      and cubrid_prepare()"}]},"cubrid_num_rows":{"s":"Get the number of rows in the result set","y":"int cubrid_num_rows\n    ( resource $result  \n   )","r":"Number of rows, when process is successful.","p":[{"t":"result","d":"result comes from a call to\n    cubrid_execute(), cubrid_query() and\n    cubrid_prepare()"}]},"cubrid_pconnect":{"s":"Open a persistent connection to a CUBRID server","y":"resource cubrid_pconnect\n    ( string $host  \n   , int $port  \n   , string $dbname  \n   [, string $userid  \n   [, string $passwd  \n  ]] )","r":"Connection identifier, when process is successful. ","p":[{"t":"host","d":"Host name or IP address of CUBRID CAS server."},{"t":"port","d":"Port number of CUBRID CAS server (BROKER_PORT configured in $CUBRID\/conf\/cubrid_broker.conf)."},{"t":"dbname","d":"Name of database."},{"t":"userid","d":"User name for the database."},{"t":"passwd","d":"User password."}]},"cubrid_pconnect_with_url":{"s":"Open a persistent connection to CUBRID server","y":"resource cubrid_pconnect_with_url\n    ( string $conn_url  \n   [, string $userid  \n   [, string $passwd  \n  ]] )","r":"Connection identifier, when process is successful. ","p":[{"t":"conn_url","d":"A character string that contains server connection information."},{"t":"userid","d":"User name for the database."},{"t":"passwd","d":"User password."}]},"cubrid_ping":{"s":"Ping a server connection or reconnect if there is no connection","y":"bool cubrid_ping\n    ([ resource $conn_identifier\n  ] )","r":"Returns TRUE if the connection to the server CUBRID server is working, otherwise FALSE.","p":[{"t":"conn_identifier","d":"The CUBRID connection identifier. If the connection identifier is not\n       specified, the last connection opened by\n       cubrid_connect() is assumed."}]},"cubrid_prepare":{"s":"Prepare a SQL statement for execution","y":"resource cubrid_prepare\n    ( resource $conn_identifier  \n   , string $prepare_stmt  \n   [, int $option = 0  \n  ] )","r":"Request identifier, if process is successful; ","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"prepare_stmt","d":"Prepare query."},{"t":"option","d":"OID return option CUBRID_INCLUDE_OID."}]},"cubrid_put":{"s":"Update a column using OID","y":"int cubrid_put\n    ( resource $conn_identifier  \n   , string $oid  \n   [, string $attr \n   ], mixed $value  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance that you want to update."},{"t":"attr","d":"Name of the attribute that you want to update."},{"t":"value","d":"New value that you want to assign to the attribute."}]},"cubrid_query":{"s":"Send a CUBRID query","y":"resource cubrid_query\n    ( string $query\n   [, resource $conn_identifier\n  ] )","r":"For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,\n   cubrid_query() returns a resource on success, or FALSE on error.","p":[{"t":"query","d":"An SQL query"},{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified,\n       the last connection opened by cubrid_connect() is\n       assumed."}]},"cubrid_real_escape_string":{"s":"Escape special characters in a string for use in an SQL statement","y":"string cubrid_real_escape_string\n    ( string $unescaped_string\n   [, resource $conn_identifier\n  ] )","r":"Escaped string version of the given string, on success.","p":[{"t":"unescaped_string","d":"The string that is to be escaped."},{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified, the\n     last connection opened by cubrid_connect() is assumed."}]},"cubrid_result":{"s":"Return the value of a specific field in a specific row","y":"string cubrid_result\n    ( resource $result\n   , int $row\n   [, mixed $field = 0\n  ] )","r":"Value of a specific field, on success (NULL if value if null).","p":[{"t":"result","d":"result comes from a call to cubrid_execute()"},{"t":"row","d":"The row number from the result that is being retrieved. Row numbers start at 0."},{"t":"field","d":"The name or offset of the field being retrieved. It\n    can be the field&#039;s offset, the field&#039;s name, or the field&#039;s table dot\n    field name (tablename.fieldname). If the column name has been aliased\n    (&#039;select foo as bar from...&#039;), use the alias instead of the column name.\n    If undefined, the first field is retrieved."}]},"cubrid_rollback":{"s":"Roll back a transaction","y":"bool cubrid_rollback\n    ( resource $conn_identifier  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."}]},"cubrid_save_to_glo":{"s":"Save requested file in a GLO instance","y":"int cubrid_save_to_glo\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $file_name  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"Oid of the glo instance that you want to save a file in."},{"t":"file_name","d":"The name of the file that you want to save."}]},"cubrid_schema":{"s":"Get the requested schema information","y":"array cubrid_schema\n    ( resource $conn_identifier  \n   , int $schema_type  \n   [, string $class_name \n   [, string $attr_name  \n  ]] )","r":"Array containing the schema information, when process is successful; ","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"schema_type","d":"Schema data that you want to know."},{"t":"class_name","d":"Class you want to know the schema of."},{"t":"attr_name","d":"Attribute you want to know the schema of."}]},"cubrid_send_glo":{"s":"Read data from glo and send it to std output","y":"int cubrid_send_glo\n    ( resource $conn_identifier  \n   , string $oid  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"Oid of the glo instance that you want to read data from."}]},"cubrid_seq_drop":{"s":"Delete an element from sequence type column using OID","y":"bool cubrid_seq_drop\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $attr_name  \n   , int $index  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance you want to work with."},{"t":"attr_name","d":"Name of the attribute that you want to delete an element from."},{"t":"index","d":"Index of the element that you want to delete (1-based)."}]},"cubrid_seq_insert":{"s":"Insert an element to a sequence type column using OID","y":"bool cubrid_seq_insert\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $attr_name  \n   , int $index  \n   , string $seq_element  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance you want to work with."},{"t":"attr_name","d":"Name of the attribute you want to insert an instance to."},{"t":"index","d":"Location of the element, you want to insert the element to (1-based)."},{"t":"seq_element","d":"Content of the element that you want to insert."}]},"cubrid_seq_put":{"s":"Update the element value of sequence type column using OID","y":"bool cubrid_seq_put\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $attr_name  \n   , int $index  \n   , string $seq_element  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance you want to work with."},{"t":"attr_name","d":"Name of the attribute that you want to update an element."},{"t":"index","d":"Index (1-based) of the element that you want to update."},{"t":"seq_element","d":"New content that you want to use for the update."}]},"cubrid_set_add":{"s":"Insert a single element to set type column using OID","y":"bool cubrid_set_add\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $attr_name  \n   , string $set_element \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance you want to work with."},{"t":"attr_name","d":"Name of the attribute you want to insert an element."},{"t":"set_element","d":"Content of the element you want to insert."}]},"cubrid_set_autocommit":{"s":"Set autocommit mode of the connection","y":"bool cubrid_set_autocommit\n    ( resource $conn_identifier\n   , bool $mode  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"mode","d":"Auto-commit mode. The following constants can be used:"}]},"cubrid_set_db_parameter":{"s":"Sets the CUBRID database parameters","y":"bool cubrid_set_db_parameter\n    ( resource $conn_identifier  \n   , int $param_type  \n   , int $param_value  \n   )","r":"TRUE on success.","p":[{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified,\n      the last link opened by cubrid_connect() is assumed."},{"t":"param_type","d":"Database parameter type."},{"t":"param_value","d":"Isolation level value (1-6) or lock timeout (in seconds) value."}]},"cubrid_set_drop":{"s":"Delete an element from set type column using OID","y":"bool cubrid_set_drop\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $attr_name  \n   , string $set_element \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"OID of the instance you want to work with."},{"t":"attr_name","d":"Name of the attribute you want to delete an element from."},{"t":"set_element","d":"Content of the element you want to delete."}]},"cubrid_set_query_timeout":{"s":"Set the timeout time of query execution","y":"bool cubrid_set_query_timeout\n    ( resource $req_identifier\n   , int $timeout  \n   )","r":"TRUE, when process is successful.","p":[{"t":"req_identifier","d":"Request identifier."},{"t":"timeout","d":"Timeout time, unit of msec."}]},"cubrid_unbuffered_query":{"s":"Perform a query without fetching the results into memory","y":"resource cubrid_unbuffered_query\n    ( string $query\n   [, resource $conn_identifier\n  ] )","r":"For SELECT, SHOW, DESCRIBE or EXPLAIN statements returns a request identifier resource on success.","p":[{"t":"query","d":"A SQL query."},{"t":"conn_identifier","d":"The CUBRID connection. If the connection identifier is not specified, the last connection opened by cubrid_connect() is assumed."}]},"cubrid_version":{"s":"Get the CUBRID PHP module&#039;s version","y":"string cubrid_version\n    ( void\n   )","r":"Version information (eg. &quot;8.3.1.0001&quot;).","p":null},"curl_close":{"s":"Close a cURL session","y":"void curl_close\n    ( resource $ch\n   )","r":"No value is returned.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_copy_handle":{"s":"Copy a cURL handle along with all of its preferences","y":"resource curl_copy_handle\n    ( resource $ch\n   )","r":"Returns a new cURL handle.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_errno":{"s":"Return the last error number","y":"int curl_errno\n    ( resource $ch\n   )","r":"Returns the error number or 0 (zero) if no error\n   occurred.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_error":{"s":"Return a string containing the last error for the current session","y":"string curl_error\n    ( resource $ch\n   )","r":"Returns the error message or &#039;&#039; (the empty string) if no\n   error occurred.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_escape":{"s":"URL encodes the given string","y":"string curl_escape\n    ( resource $ch\n   , string $str\n   )","r":"Returns escaped string or FALSE on failure.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"str","d":"The string to be encoded."}]},"curl_exec":{"s":"Perform a cURL session","y":"mixed curl_exec\n    ( resource $ch\n   )","r":"Returns TRUE on success or FALSE on failure. However, if the CURLOPT_RETURNTRANSFER\n   option is set, it will return\n   the result on success, FALSE on failure.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_file_create":{"s":"Create a CURLFile object","y":"","r":"","p":null},"curl_getinfo":{"s":"Get information regarding a specific transfer","y":"mixed curl_getinfo\n    ( resource $ch\n   [, int $opt = 0\n  ] )","r":"If opt is given, returns its value.\n   Otherwise, returns an associative array with the following elements \n   (which correspond to opt), or FALSE on failure:\n   \n    \n     \n      &quot;url&quot;\n     \n    \n    \n     \n      &quot;content_type&quot;\n     \n    \n    \n     \n      &quot;http_code&quot;\n     \n    \n    \n     \n      &quot;header_size&quot;\n     \n    \n    \n     \n      &quot;request_size&quot;\n     \n    \n    \n     \n      &quot;filetime&quot;\n     \n    \n    \n     \n      &quot;ssl_verify_result&quot;\n     \n    \n    \n     \n      &quot;redirect_count&quot;\n     \n    \n    \n     \n      &quot;total_time&quot;\n     \n    \n    \n     \n      &quot;namelookup_time&quot;\n     \n    \n    \n     \n      &quot;connect_time&quot;\n     \n    \n    \n     \n      &quot;pretransfer_time&quot;\n     \n    \n    \n     \n      &quot;size_upload&quot;\n     \n    \n    \n     \n      &quot;size_download&quot;\n     \n    \n    \n     \n      &quot;speed_download&quot;\n     \n    \n    \n     \n      &quot;speed_upload&quot;\n     \n    \n    \n     \n      &quot;download_content_length&quot;\n     \n    \n    \n     \n      &quot;upload_content_length&quot;\n     \n    \n    \n     \n      &quot;starttransfer_time&quot;\n     \n    \n    \n     \n      &quot;redirect_time&quot;\n     \n    \n    \n     \n      &quot;certinfo&quot;\n     \n    \n    \n     \n      &quot;request_header&quot; (This is only set if the CURLINFO_HEADER_OUT \n      is set by a previous call to curl_setopt())","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"opt","d":"This may be one of the following constants:\n       \n        \n         \n          CURLINFO_EFFECTIVE_URL - Last effective URL\n         \n        \n        \n         \n          CURLINFO_HTTP_CODE - Last received HTTP code\n         \n        \n        \n         \n          CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown\n         \n        \n        \n         \n          CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer\n         \n        \n        \n         \n          CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete\n         \n        \n        \n         \n          CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection\n         \n        \n        \n         \n          CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins\n         \n        \n        \n         \n          CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred\n         \n        \n        \n         \n          CURLINFO_REDIRECT_COUNT - Number of redirects\n         \n        \n        \n         \n          CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started\n         \n        \n        \n         \n          CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded\n         \n        \n        \n         \n          CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded\n         \n        \n        \n         \n          CURLINFO_SPEED_DOWNLOAD - Average download speed\n         \n        \n        \n         \n          CURLINFO_SPEED_UPLOAD - Average upload speed\n         \n        \n        \n         \n          CURLINFO_HEADER_SIZE - Total size of all headers received\n         \n        \n        \n         \n          CURLINFO_HEADER_OUT - The request string sent. For this to \n          work, add the CURLINFO_HEADER_OUT option to the handle by calling \n          curl_setopt()\n         \n        \n        \n         \n        CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests\n         \n        \n        \n         \n          CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER\n         \n        \n        \n         \n          CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field\n         \n        \n        \n         \n          CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload\n         \n        \n        \n         \n          CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header"}]},"curl_init":{"s":"Initialize a cURL session","y":"resource curl_init\n    ([ string $url = NULL\n  ] )","r":"Returns a cURL handle on success, FALSE on errors.","p":[{"t":"url","d":"If provided, the CURLOPT_URL option will be set\n       to its value. You can manually set this using the \n       curl_setopt() function."}]},"curl_multi_add_handle":{"s":"Add a normal cURL handle to a cURL multi handle","y":"int curl_multi_add_handle\n    ( resource $mh\n   , resource $ch\n   )","r":"Returns 0 on success, or one of the CURLM_XXX errors\n   code.","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."},{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_multi_close":{"s":"Close a set of cURL handles","y":"void curl_multi_close\n    ( resource $mh\n   )","r":"No value is returned.","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."}]},"curl_multi_exec":{"s":"Run the sub-connections of the current cURL handle","y":"int curl_multi_exec\n    ( resource $mh\n   , int &$still_running\n   )","r":"A cURL code defined in the cURL Predefined Constants.","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."},{"t":"still_running","d":"A reference to a flag to tell whether the operations are still running."}]},"curl_multi_getcontent":{"s":"Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set","y":"string curl_multi_getcontent\n    ( resource $ch\n   )","r":"Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_multi_info_read":{"s":"Get information about the current transfers","y":"array curl_multi_info_read\n    ( resource $mh\n   [, int &$msgs_in_queue = NULL\n  ] )","r":"On success, returns an associative array for the message, FALSE on failure.","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."},{"t":"msgs_in_queue","d":"Number of messages that are still in the queue"}]},"curl_multi_remove_handle":{"s":"Remove a multi handle from a set of cURL handles","y":"int curl_multi_remove_handle\n    ( resource $mh\n   , resource $ch\n   )","r":"Returns 0 on success, or one of the CURLM_XXX error\n   codes.","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."},{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_multi_select":{"s":"Wait for activity on any curl_multi connection","y":"int curl_multi_select\n    ( resource $mh\n   [, float $timeout = 1.0\n  ] )","r":"On success, returns the number of descriptors contained in \n   the descriptor sets.  On failure, this function will return -1 on a select failure or timeout (from the underlying select system call).","p":[{"t":"mh","d":"A cURL multi handle returned by\ncurl_multi_init()."},{"t":"timeout","d":"Time, in seconds, to wait for a response."}]},"curl_multi_setopt":{"s":"Set an option for the cURL multi handle","y":"bool curl_multi_setopt\n    ( resource $mh\n   , int $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mh","d":""},{"t":"option","d":"One of the CURLMOPT_* constants."},{"t":"value","d":"The value to be set on option."}]},"curl_multi_strerror":{"s":"Return string describing error code","y":"string curl_multi_strerror\n    ( int $errornum\n   )","r":"Returns error string for valid error code, NULL otherwise.","p":[{"t":"errornum","d":"One of the &raquo;&nbsp;CURLM error codes constants."}]},"curl_pause":{"s":"Pause and unpause a connection","y":"int curl_pause\n    ( resource $ch\n   , int $bitmask\n   )","r":"Returns an error code (CURLE_OK for no error).","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"bitmask","d":"One of CURLPAUSE_* constants."}]},"curl_reset":{"s":"Reset all options of a libcurl session handle","y":"void curl_reset\n    ( resource $ch\n   )","r":"No value is returned.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."}]},"curl_setopt":{"s":"Set an option for a cURL transfer","y":"bool curl_setopt\n    ( resource $ch\n   , int $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"option","d":"The CURLOPT_XXX option to set."},{"t":"value","d":"The value to be set on option."}]},"curl_setopt_array":{"s":"Set multiple options for a cURL transfer","y":"bool curl_setopt_array\n    ( resource $ch\n   , array $options\n   )","r":"Returns TRUE if all options were successfully set. If an option could\n   not be successfully set, FALSE is immediately returned, ignoring any\n   future options in the options array.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"options","d":"An array specifying which options to set and their values.\n       The keys should be valid curl_setopt() constants or\n       their integer equivalents."}]},"curl_share_close":{"s":"Close a cURL share handle","y":"void curl_share_close\n    ( resource $sh\n   )","r":"No value is returned.","p":[{"t":"sh","d":"A cURL share handle returned by curl_share_init()"}]},"curl_share_setopt":{"s":"Set an option for a cURL share handle.","y":"bool curl_share_setopt\n    ( resource $sh\n   , int $option\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sh","d":"A cURL share handle returned by curl_share_init()."},{"t":"option","d":"Option\n           Description\n          \n\n         \n\n         \n          \n           CURLSHOPT_SHARE\n           \n               Specifies a type of data that should be shared.\n           \n          \n\n          \n           CURLSHOPT_UNSHARE\n           \n               Specifies a type of data that will be no longer shared."},{"t":"value","d":"Value\n           Description\n          \n\n         \n\n         \n          \n           CURL_LOCK_DATA_COOKIE\n           \n               Shares cookie data.\n           \n          \n\n          \n           CURL_LOCK_DATA_DNS\n           \n               Shares DNS cache. Note that when you use cURL multi handles,\n               all handles added to the same multi handle will share DNS cache\n               by default.\n           \n          \n\n          \n           CURL_LOCK_DATA_SSL_SESSION\n           \n               Shares SSL session IDs, reducing the time spent on the SSL\n               handshake when reconnecting to the same server. Note that SSL\n               session IDs are reused withing the same handle by default."}]},"curl_strerror":{"s":"Return string describing the given error code","y":"string curl_strerror\n    ( int $errornum\n   )","r":"Returns error description or NULL for invalid error code.","p":[{"t":"errornum","d":"One of the &raquo;&nbsp;cURL error codes constants."}]},"curl_unescape":{"s":"Decodes the given URL encoded string","y":"string curl_unescape\n    ( resource $ch\n   , string $str\n   )","r":"Returns decoded string  or FALSE on failure.","p":[{"t":"ch","d":"A cURL handle returned by\ncurl_init()."},{"t":"str","d":"The URL encoded string to be decoded."}]},"curl_version":{"s":"Gets cURL version information","y":"array curl_version\n    ([ int $age = CURLVERSION_NOW\n  ] )","r":"Returns an associative array with the following elements: \n   \n    \n     \n      \n       Indice\n       Value description\n      \n\n     \n\n     \n      \n       version_number\n       cURL 24 bit version number\n      \n\n      \n       version\n       cURL version number, as a string\n      \n\n      \n       ssl_version_number\n       OpenSSL 24 bit version number\n      \n\n      \n       ssl_version\n       OpenSSL version number, as a string\n      \n\n      \n       libz_version\n       zlib version number, as a string\n      \n\n      \n       host\n       Information about the host where cURL was built\n      \n\n      \n       age\n       &nbsp;\n      \n\n      \n       features\n       A bitmask of the CURL_VERSION_XXX constants\n      \n\n      \n       protocols\n       An array of protocols names supported by cURL","p":[{"t":"age","d":""}]},"current":{"s":"Return the current element in an array","y":"mixed current\n    ( array &$array\n   )","r":"The current() function simply returns the\n   value of the array element that&#039;s currently being pointed to by the\n   internal pointer.  It does not move the pointer in any way.  If the\n   internal pointer points beyond the end of the elements list or the array is \n   empty, current() returns FALSE.","p":[{"t":"array","d":"The array."}]},"cyrus_authenticate":{"s":"Authenticate against a Cyrus IMAP server","y":"void cyrus_authenticate\n    ( resource $connection\n   [, string $mechlist\n   [, string $service\n   [, string $user\n   [, int $minssf\n   [, int $maxssf\n   [, string $authname\n   [, string $password\n  ]]]]]]] )","r":"No value is returned.","p":null},"cyrus_bind":{"s":"Bind callbacks to a Cyrus IMAP connection","y":"bool cyrus_bind\n    ( resource $connection\n   , array $callbacks\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"The connection handle."},{"t":"callbacks","d":"An array of callbacks."}]},"cyrus_close":{"s":"Close connection to a Cyrus IMAP server","y":"bool cyrus_close\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"The connection handle."}]},"cyrus_connect":{"s":"Connect to a Cyrus IMAP server","y":"resource cyrus_connect\n    ([ string $host\n   [, string $port\n   [, int $flags\n  ]]] )","r":"Returns a connection handler on success or FALSE on failure.","p":[{"t":"host","d":"The Cyrus IMAP host name."},{"t":"port","d":"The port number."},{"t":"flags","d":""}]},"cyrus_query":{"s":"Send a query to a Cyrus IMAP server","y":"array cyrus_query\n    ( resource $connection\n   , string $query\n   )","r":"Returns an associative array with the following keys:\n   text, msgno,\n   and keyword.","p":[{"t":"connection","d":"The connection handle."},{"t":"query","d":"The query string."}]},"cyrus_unbind":{"s":"Unbind ...","y":"bool cyrus_unbind\n    ( resource $connection\n   , string $trigger_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"The connection handle."},{"t":"trigger_name","d":"The trigger name."}]},"date":{"s":"Format a local time\/date","y":"string date\n    ( string $format\n   [, int $timestamp = time()\n  ] )","r":"Returns a formatted date string. If a non-numeric value is used for \n   timestamp, FALSE is returned and an \n   E_WARNING level error is emitted.","p":[{"t":"format","d":"The format of the outputted date string. See the formatting\n       options below. There are also several\n       predefined date constants\n       that may be used instead, so for example DATE_RSS\n       contains the format string &#039;D, d M Y H:i:s&#039;."},{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."}]},"date_add":{"s":"Alias of DateTime::add()","y":"","r":"","p":null},"date_create":{"s":"Alias of DateTime::__construct()","y":"","r":"","p":null},"date_create_from_format":{"s":"Alias of DateTime::createFromFormat()","y":"","r":"","p":null},"date_create_immutable":{"s":"Alias of DateTimeImmutable::__construct()","y":"","r":"","p":null},"date_create_immutable_from_format":{"s":"Alias of DateTimeImmutable::createFromFormat()","y":"","r":"","p":null},"date_date_set":{"s":"Alias of DateTime::setDate()","y":"","r":"","p":null},"date_default_timezone_set":{"s":"Sets the default timezone used by all date\/time functions in a script","y":"bool date_default_timezone_set\n    ( string $timezone_identifier\n   )","r":"This function returns FALSE if the\n   timezone_identifier isn&#039;t valid, or TRUE\n   otherwise.","p":[{"t":"timezone_identifier","d":"The timezone identifier, like UTC or\n       Europe\/Lisbon. The list of valid identifiers is\n       available in the List of Supported Timezones."}]},"date_diff":{"s":"Alias of DateTime::diff()","y":"","r":"","p":null},"date_format":{"s":"Alias of DateTime::format()","y":"","r":"","p":null},"date_get_last_errors":{"s":"Alias of DateTime::getLastErrors()","y":"","r":"","p":null},"date_interval_create_from_date_string":{"s":"Alias of DateInterval::createFromDateString()","y":"","r":"","p":null},"date_interval_format":{"s":"Alias of DateInterval::format()","y":"","r":"","p":null},"date_isodate_set":{"s":"Alias of DateTime::setISODate()","y":"","r":"","p":null},"date_modify":{"s":"Alias of DateTime::modify()","y":"","r":"","p":null},"date_offset_get":{"s":"Alias of DateTime::getOffset()","y":"","r":"","p":null},"date_parse":{"s":"Returns associative array with detailed info about given date","y":"array date_parse\n    ( string $date\n   )","r":"Returns array with information about the parsed date\n   on success or FALSE on failure.","p":[{"t":"date","d":"Date in format accepted by strtotime()."}]},"date_parse_from_format":{"s":"Get info about given date formatted according to the specified format","y":"array date_parse_from_format\n    ( string $format\n   , string $date\n   )","r":"Returns associative array with detailed info about given date.","p":[{"t":"format","d":"Format accepted by DateTime::createFromFormat()."},{"t":"date","d":"String representing the date."}]},"date_sub":{"s":"Alias of DateTime::sub()","y":"","r":"","p":null},"date_sunrise":{"s":"Returns time of sunrise for a given day and location","y":"mixed date_sunrise\n    ( int $timestamp\n   [, int $format = SUNFUNCS_RET_STRING\n   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)\n   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)\n   [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;)\n   [, float $gmt_offset = 0\n  ]]]]] )","r":"Returns the sunrise time in a specified format on\n   success or FALSE on failure.","p":[{"t":"timestamp","d":"The timestamp of the day from which the sunrise\n       time is taken."},{"t":"format","d":"format constants\n        \n         \n          \n           constant\n           description\n           example\n          \n\n         \n\n         \n          \n           SUNFUNCS_RET_STRING\n           returns the result as string\n           16:46\n          \n\n          \n           SUNFUNCS_RET_DOUBLE\n           returns the result as float\n           16.78243132\n          \n\n          \n           SUNFUNCS_RET_TIMESTAMP\n           returns the result as integer (timestamp)\n           1095034606"},{"t":"latitude","d":"Defaults to North, pass in a negative value for South.\n       See also: date.default_latitude"},{"t":"longitude","d":"Defaults to East, pass in a negative value for West.\n       See also: date.default_longitude"},{"t":"zenith","d":"Default: date.sunrise_zenith"},{"t":"gmtoffset","d":"Specified in hours."}]},"date_sunset":{"s":"Returns time of sunset for a given day and location","y":"mixed date_sunset\n    ( int $timestamp\n   [, int $format = SUNFUNCS_RET_STRING\n   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)\n   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)\n   [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;)\n   [, float $gmt_offset = 0\n   ]]]]] )","r":"Returns the sunset time in a specified format on\n   success or FALSE on failure.","p":[{"t":"timestamp","d":"The timestamp of the day from which the sunset\n       time is taken."},{"t":"format","d":"format constants\n        \n         \n          \n           constant\n           description\n           example\n          \n\n         \n\n         \n          \n           SUNFUNCS_RET_STRING\n           returns the result as string\n           16:46\n          \n\n          \n           SUNFUNCS_RET_DOUBLE\n           returns the result as float\n           16.78243132\n          \n\n          \n           SUNFUNCS_RET_TIMESTAMP\n           returns the result as integer (timestamp)\n           1095034606"},{"t":"latitude","d":"Defaults to North, pass in a negative value for South.\n       See also: date.default_latitude"},{"t":"longitude","d":"Defaults to East, pass in a negative value for West.\n       See also: date.default_longitude"},{"t":"zenith","d":"Default: date.sunset_zenith"},{"t":"gmtoffset","d":"Specified in hours."}]},"date_sun_info":{"s":"Returns an array with information about sunset\/sunrise and twilight begin\/end","y":"array date_sun_info\n    ( int $time\n   , float $latitude\n   , float $longitude\n   )","r":"Returns array on success or FALSE on failure.","p":[{"t":"time","d":"Timestamp."},{"t":"latitude","d":"Latitude in degrees."},{"t":"longitude","d":"Longitude in degrees."}]},"date_timestamp_get":{"s":"Alias of DateTime::getTimestamp()","y":"","r":"","p":null},"date_timestamp_set":{"s":"Alias of DateTime::setTimestamp()","y":"","r":"","p":null},"date_timezone_get":{"s":"Alias of DateTime::getTimezone()","y":"","r":"","p":null},"date_timezone_set":{"s":"Alias of DateTime::setTimezone()","y":"","r":"","p":null},"date_time_set":{"s":"Alias of DateTime::setTime()","y":"","r":"","p":null},"db2_autocommit":{"s":"Returns or sets the AUTOCOMMIT state for a database connection","y":"mixed db2_autocommit\n    ( resource $connection\n   [, bool $value\n  ] )","r":"When db2_autocommit() receives only the\n   connection parameter, it returns the current state\n   of AUTOCOMMIT for the requested connection as an integer value. A value of\n   0 indicates that AUTOCOMMIT is off, while a value of 1 indicates that\n   AUTOCOMMIT is on.","p":[{"t":"connection","d":"A valid database connection resource variable as returned from\n       db2_connect() or db2_pconnect()."},{"t":"value","d":""},{"t":"","d":"Turns AUTOCOMMIT off."},{"t":"","d":"Turns AUTOCOMMIT on."}]},"db2_bind_param":{"s":"Binds a PHP variable to an SQL statement parameter","y":"bool db2_bind_param\n    ( resource $stmt\n   , int $parameter-number\n   , string $variable-name\n   [, int $parameter-type\n   [, int $data-type = 0\n   [, int $precision = -1\n   [, int $scale = 0\n  ]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"A prepared statement returned from db2_prepare()."},{"t":"parameter-number","d":"Specifies the 1-indexed position of the parameter in the prepared\n       statement."},{"t":"variable-name","d":"A string specifying the name of the PHP variable to bind to the\n       parameter specified by parameter-number."},{"t":"parameter-type","d":"A constant specifying whether the PHP variable should be bound to the\n       SQL parameter as an input parameter (DB2_PARAM_IN),\n       an output parameter (DB2_PARAM_OUT), or as a\n       parameter that accepts input and returns output\n       (DB2_PARAM_INOUT). To avoid memory overhead, you can\n       also specify DB2_PARAM_FILE to bind the PHP variable\n       to the name of a file that contains large object (BLOB, CLOB, or DBCLOB)\n       data."},{"t":"data-type","d":"A constant specifying the SQL data type that the PHP variable should be\n       bound as: one of DB2_BINARY,\n       DB2_CHAR, DB2_DOUBLE, or\n       DB2_LONG ."},{"t":"precision","d":"Specifies the precision with which the variable should be bound to the\n       database. This parameter can also be used for retrieving XML output values \n       from stored procedures. A non-negative value specifies the maximum size of \n       the XML data that will be retrieved from the database. If this parameter \n       is not used, a default of 1MB will be assumed for retrieving the XML \n       output value from the stored procedure."},{"t":"scale","d":"Specifies the scale with which the variable should be bound to the\n       database."}]},"db2_client_info":{"s":"Returns an object with properties that describe the DB2 database client","y":"object db2_client_info\n    ( resource $connection\n   )","r":"Returns an object on a successful call. Returns FALSE on failure.","p":[{"t":"connection","d":"Specifies an active DB2 client connection."}]},"db2_columns":{"s":"Returns a result set listing the columns and associated metadata for a table","y":"resource db2_columns\n    ( resource $connection\n   [, string $qualifier\n   [, string $schema\n   [, string $table-name\n   [, string $column-name\n  ]]]] )","r":"Returns a statement resource with a result set containing rows describing\n   the columns matching the specified parameters. The rows are composed of\n   the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        TABLE_CAT\n        Name of the catalog. The value is NULL if this table does not\n         have catalogs.\n       \n\n       \n        TABLE_SCHEM\n        Name of the schema.\n       \n\n       \n        TABLE_NAME\n        Name of the table or view.\n       \n\n       \n        COLUMN_NAME\n        Name of the column.\n       \n\n       \n        DATA_TYPE\n        The SQL data type for the column represented as an integer value.\n       \n\n       \n        TYPE_NAME\n        A string representing the data type for the column.\n       \n\n       \n        COLUMN_SIZE\n        An integer value representing the size of the column.\n       \n\n       \n        BUFFER_LENGTH\n        \n         Maximum number of bytes necessary to store data from this column.\n        \n       \n\n       \n        DECIMAL_DIGITS\n        \n         The scale of the column, or NULL where scale is not applicable.\n        \n       \n\n       \n        NUM_PREC_RADIX\n        \n         An integer value of either 10 (representing\n         an exact numeric data type), 2 (representing an\n         approximate numeric data type), or NULL (representing a data type for\n         which radix is not applicable).\n        \n       \n\n       \n        NULLABLE\n        An integer value representing whether the column is nullable or\n        not.\n       \n\n       \n        REMARKS\n        Description of the column.\n       \n\n       \n        COLUMN_DEF\n        Default value for the column.\n       \n\n       \n        SQL_DATA_TYPE\n        An integer value representing the size of the column.\n       \n\n       \n        SQL_DATETIME_SUB\n        \n         Returns an integer value representing a datetime subtype code,\n         or NULL for SQL data types to which this does not apply.\n        \n       \n\n       \n        CHAR_OCTET_LENGTH\n        \n         Maximum length in octets for a character data type column, which\n         matches COLUMN_SIZE for single-byte character set data, or NULL for\n         non-character data types.\n        \n       \n\n       \n        ORDINAL_POSITION\n        The 1-indexed position of the column in the table.\n       \n\n       \n        IS_NULLABLE\n        \n         A string value where &#039;YES&#039; means that the column is nullable and\n         &#039;NO&#039; means that the column is not nullable.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. To match all schemas, pass\n       &#039;%&#039;."},{"t":"table-name","d":"The name of the table or view. To match all tables in the database,\n       pass NULL or an empty string."},{"t":"column-name","d":"The name of the column. To match all columns in the table, pass NULL\n       or an empty string."}]},"db2_column_privileges":{"s":"Returns a result set listing the columns and associated privileges for a table","y":"resource db2_column_privileges\n    ( resource $connection\n   [, string $qualifier\n   [, string $schema\n   [, string $table-name\n   [, string $column-name\n  ]]]] )","r":"Returns a statement resource with a result set containing rows describing\n   the column privileges for columns matching the specified parameters. The\n   rows are composed of the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        TABLE_CAT\n        Name of the catalog. The value is NULL if this table does not\n         have catalogs.\n       \n\n       \n        TABLE_SCHEM\n        Name of the schema.\n       \n\n       \n        TABLE_NAME\n        Name of the table or view.\n       \n\n       \n        COLUMN_NAME\n        Name of the column.\n       \n\n       \n        GRANTOR\n        Authorization ID of the user who granted the privilege.\n       \n\n       \n        GRANTEE\n        Authorization ID of the user to whom the privilege was\n         granted.\n       \n\n       \n        PRIVILEGE\n        The privilege for the column.\n       \n\n       \n        IS_GRANTABLE\n        Whether the GRANTEE is permitted to grant this privilege to\n        other users.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. To match all schemas, pass NULL\n       or an empty string."},{"t":"table-name","d":"The name of the table or view. To match all tables in the database,\n       pass NULL or an empty string."},{"t":"column-name","d":"The name of the column. To match all columns in the table, pass NULL\n       or an empty string."}]},"db2_commit":{"s":"Commits a transaction","y":"bool db2_commit\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"A valid database connection resource variable as returned from\n       db2_connect() or db2_pconnect()."}]},"db2_connect":{"s":"Returns a connection to a database","y":"resource db2_connect\n    ( string $database\n   , string $username\n   , string $password\n   [, array $options\n  ] )","r":"Returns a connection handle resource if the connection attempt is\n   successful. If the connection attempt fails, db2_connect()\n   returns FALSE.","p":[{"t":"database","d":"For a cataloged connection to a database, database\n       represents the database alias in the DB2 client catalog."},{"t":"database","d":"The name of the database."},{"t":"hostname","d":"The hostname or IP address of the database server."},{"t":"port","d":"The TCP\/IP port on which the database is listening for\n           requests."},{"t":"username","d":"The username with which you are connecting to the\n           database."},{"t":"password","d":"The password with which you are connecting to the database."},{"t":"username","d":"The username with which you are connecting to the database."},{"t":"password","d":"The password with which you are connecting to the database."},{"t":"options","d":""},{"t":"autocommit","d":"Passing the DB2_AUTOCOMMIT_ON value turns\n           autocommit on for this connection handle."},{"t":"DB2_ATTR_CASE","d":"Passing the DB2_CASE_NATURAL value specifies\n           that column names are returned in natural case."},{"t":"CURSOR","d":"Passing the DB2_FORWARD_ONLY value specifies a\n           forward-only cursor for a statement resource. This is the default\n           cursor type and is supported on all database servers."},{"t":"trustedcontext","d":"Passing the DB2_TRUSTED_CONTEXT_ENABLE value turns trusted context \n           on for this connection handle. This parameter cannot be set using \n           db2_set_option()."},{"t":"i5_lib","d":"A character value that indicates the default library that will be \n           used for resolving unqualified file references. This is not valid \n           if the connection is using system naming mode."},{"t":"i5_naming","d":"DB2_I5_NAMING_ON value turns on DB2 UDB CLI iSeries \n           system naming mode. Files are qualified using the slash (\/) delimiter. \n           Unqualified files are resolved using the library list for the job."},{"t":"i5_commit","d":"The i5_commit attribute should be set before the \n           db2_connect(). If the value is changed after the \n           connection has been established, and the connection is to a remote data \n           source, the change does not take effect until the next successful \n           db2_connect() for the connection handle.\n           Note: \n            \n             The php.ini setting ibm_db2.i5_allow_commit==0 \n             or DB2_I5_TXN_NO_COMMIT is the default, but may be \n             overridden with the i5_commit option."},{"t":"i5_query_optimize","d":"DB2_FIRST_IO All queries are optimized with the goal of \n            returning the first page of output as fast as possible. This goal works well \n            when the output is controlled by a user who is most likely to cancel the query \n            after viewing the first page of output data. Queries coded with an \n            OPTIMIZE FOR nnn ROWS clause honor the goal specified by the clause."},{"t":"i5_dbcs_alloc","d":"DB2_I5_DBCS_ALLOC_ON value turns on DB2 6X allocation scheme \n           for DBCS translation column size growth."},{"t":"i5_date_fmt","d":"DB2_I5_FMT_ISO - The International Organization for Standardization \n           (ISO) date format yyyy-mm-dd is used. This is the default."},{"t":"i5_date_sep","d":"DB2_I5_SEP_SLASH - A slash ( \/ ) is used as the date separator. \n           This is the default."},{"t":"i5_time_fmt","d":"DB2_I5_FMT_ISO - The International Organization for \n           Standardization (ISO) time format hh.mm.ss is used. This is the default."},{"t":"i5_time_sep","d":"DB2_I5_SEP_COLON - A colon ( : ) is used as the time \n           separator. This is the default."},{"t":"i5_decimal_sep","d":"DB2_I5_SEP_PERIOD - A period ( . ) is used as \n           the decimal separator. This is the default."},{"t":"i5_libl","d":"A character value that indicates the library list that will be used for \n           resolving unqualified file references. Specify the library list \n           elements separated by blanks &#039;i5_libl&#039;=&gt;&quot;MYLIB YOURLIB ANYLIB&quot;."}]},"db2_conn_error":{"s":"Returns a string containing the SQLSTATE returned by the last connection attempt","y":"string db2_conn_error\n    ([ resource $connection\n  ] )","r":"Returns the SQLSTATE value resulting from a failed connection attempt.\n   Returns an empty string if there is no error associated with the last\n   connection attempt.","p":[{"t":"connection","d":"A connection resource associated with a connection that initially\n       succeeded, but which over time became invalid."}]},"db2_conn_errormsg":{"s":"Returns the last connection error message and SQLCODE value","y":"string db2_conn_errormsg\n    ([ resource $connection\n  ] )","r":"Returns a string containing the error message and SQLCODE value resulting\n   from a failed connection attempt. If there is no error associated with the last\n   connection attempt, db2_conn_errormsg() returns an empty\n   string.","p":[{"t":"connection","d":"A connection resource associated with a connection that initially\n        succeeded, but which over time became invalid."}]},"db2_cursor_type":{"s":"Returns the cursor type used by a statement resource","y":"int db2_cursor_type\n    ( resource $stmt\n   )","r":"Returns either DB2_FORWARD_ONLY if the statement\n   resource uses a forward-only cursor or DB2_SCROLLABLE if\n   the statement resource uses a scrollable cursor.","p":[{"t":"stmt","d":"A valid statement resource."}]},"db2_escape_string":{"s":"Used to escape certain characters","y":"string db2_escape_string\n    ( string $string_literal\n   )","r":"Returns string_literal with the special characters \n   noted above prepended with backslashes.","p":[{"t":"string_literal","d":"The string that contains special characters that need to be modified. \n       Characters that are prepended with a backslash are \\x00, \n       \\n, \\r, \\, \n       &#039;, &quot; and \\x1a."}]},"db2_exec":{"s":"Executes an SQL statement directly","y":"resource db2_exec\n    ( resource $connection\n   , string $statement\n   [, array $options\n  ] )","r":"Returns a statement resource if the SQL statement was issued successfully,\n   or FALSE if the database failed to execute the SQL statement.","p":[{"t":"connection","d":"A valid database connection resource variable as returned from\n       db2_connect() or db2_pconnect()."},{"t":"statement","d":"An SQL statement. The statement cannot contain any parameter markers."},{"t":"options","d":"An associative array containing statement options. You can use this\n       parameter to request a scrollable cursor on database servers that\n       support this functionality."}]},"db2_execute":{"s":"Executes a prepared SQL statement","y":"bool db2_execute\n    ( resource $stmt\n   [, array $parameters\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"A prepared statement returned from db2_prepare()."},{"t":"parameters","d":"An array of input parameters matching any parameter markers contained\n       in the prepared statement."}]},"db2_fetch_array":{"s":"Returns an array, indexed by column position, representing a row in a result set","y":"array db2_fetch_array\n    ( resource $stmt\n   [, int $row_number = -1\n  ] )","r":"Returns a 0-indexed array with column values indexed by the column position\n   representing the next or requested row in the result set. Returns FALSE if\n   there are no rows left in the result set, or if the row requested by\n   row_number does not exist in the result set.","p":[{"t":"stmt","d":"A valid stmt resource containing a result set."},{"t":"row_number","d":"Requests a specific 1-indexed row from the result set. Passing this\n       parameter results in a PHP warning if the result set uses a\n       forward-only cursor."}]},"db2_fetch_both":{"s":"Returns an array, indexed by both column name and position, representing a row in a result set","y":"array db2_fetch_both\n    ( resource $stmt\n   [, int $row_number = -1\n  ] )","r":"Returns an associative array with column values indexed by both the column\n   name and 0-indexed column number. The array represents the next or\n   requested row in the result set. Returns FALSE if there are no rows left\n   in the result set, or if the row requested by\n   row_number does not exist in the result set.","p":[{"t":"stmt","d":"A valid stmt resource containing a result set."},{"t":"row_number","d":"Requests a specific 1-indexed row from the result set. Passing this\n       parameter results in a PHP warning if the result set uses a\n       forward-only cursor."}]},"db2_fetch_object":{"s":"Returns an object with properties representing columns in the fetched row","y":"object db2_fetch_object\n    ( resource $stmt\n   [, int $row_number = -1\n  ] )","r":"Returns an object representing a single row in the result set. The\n   properties of the object map to the names of the columns in the result set.","p":[{"t":"stmt","d":"A valid stmt resource containing a result set."},{"t":"row_number","d":"Requests a specific 1-indexed row from the result set. Passing this\n       parameter results in a PHP warning if the result set uses a\n       forward-only cursor."}]},"db2_fetch_row":{"s":"Sets the result set pointer to the next row or requested row","y":"bool db2_fetch_row\n    ( resource $stmt\n   [, int $row_number\n  ] )","r":"Returns TRUE if the requested row exists in the result set. Returns\n   FALSE if the requested row does not exist in the result set.","p":[{"t":"stmt","d":"A valid stmt resource."},{"t":"row_number","d":"With scrollable cursors, you can request a specific row number in the\n       result set. Row numbering is 1-indexed."}]},"db2_field_display_size":{"s":"Returns the maximum number of bytes required to display a column","y":"int db2_field_display_size\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns an integer value with the maximum number of bytes required to\n   display the specified column. If the column does not exist in the result\n   set, db2_field_display_size() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_name":{"s":"Returns the name of the column in the result set","y":"string db2_field_name\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns a string containing the name of the specified column. If the\n   specified column does not exist in the result\n   set, db2_field_name() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_num":{"s":"Returns the position of the named column in a result set","y":"int db2_field_num\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns an integer containing the 0-indexed position of the named column in\n   the result set. If the specified column does not exist in the result set,\n   db2_field_num() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_precision":{"s":"Returns the precision of the indicated column in a result set","y":"int db2_field_precision\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns an integer containing the precision of the specified column. If the\n   specified column does not exist in the result set,\n   db2_field_precision() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_scale":{"s":"Returns the scale of the indicated column in a result set","y":"int db2_field_scale\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns an integer containing the scale of the specified column. If the\n   specified column does not exist in the result set,\n   db2_field_scale() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_type":{"s":"Returns the data type of the indicated column in a result set","y":"string db2_field_type\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns a string containing the defined data type of the specified column.\n   If the specified column does not exist in the result set,\n   db2_field_type() returns FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_field_width":{"s":"Returns the width of the current value of the indicated column in a result set","y":"int db2_field_width\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns an integer containing the width of the specified character or\n   binary data type column in a result set. If the specified column does not\n   exist in the result set, db2_field_width() returns\n   FALSE.","p":[{"t":"stmt","d":"Specifies a statement resource containing a result set."},{"t":"column","d":"Specifies the column in the result set. This can either be an integer\n        representing the 0-indexed position of the column, or a string\n        containing the name of the column."}]},"db2_foreign_keys":{"s":"Returns a result set listing the foreign keys for a table","y":"resource db2_foreign_keys\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $table-name\n   )","r":"Returns a statement resource with a result set containing rows describing\n   the foreign keys for the specified table. The result set is composed of the\n   following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        PKTABLE_CAT\n        \n         Name of the catalog for the table containing the primary key. The\n         value is NULL if this table does not have catalogs.\n        \n       \n\n       \n        PKTABLE_SCHEM\n        \n         Name of the schema for the table containing the primary key.\n        \n       \n\n       \n        PKTABLE_NAME\n        Name of the table containing the primary key.\n       \n\n       \n        PKCOLUMN_NAME\n        Name of the column containing the primary key.\n       \n\n       \n        FKTABLE_CAT\n        \n         Name of the catalog for the table containing the foreign key. The\n         value is NULL if this table does not have catalogs.\n        \n       \n\n       \n        FKTABLE_SCHEM\n        \n         Name of the schema for the table containing the foreign key.\n        \n       \n\n       \n        FKTABLE_NAME\n        Name of the table containing the foreign key.\n       \n\n       \n        FKCOLUMN_NAME\n        Name of the column containing the foreign key.\n       \n\n       \n        KEY_SEQ\n        1-indexed position of the column in the key.\n       \n\n       \n        UPDATE_RULE\n        \n         Integer value representing the action applied to the foreign key\n         when the SQL operation is UPDATE.\n        \n       \n\n       \n        DELETE_RULE\n        \n         Integer value representing the action applied to the foreign key\n         when the SQL operation is DELETE.\n        \n       \n\n       \n        FK_NAME\n        The name of the foreign key.\n       \n\n       \n        PK_NAME\n        The name of the primary key.\n       \n\n       \n        DEFERRABILITY\n        \n         An integer value representing whether the foreign key deferrability is\n         SQL_INITIALLY_DEFERRED, SQL_INITIALLY_IMMEDIATE, or\n         SQL_NOT_DEFERRABLE.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. If schema\n       is NULL, db2_foreign_keys() matches the schema for\n       the current connection."},{"t":"table-name","d":"The name of the table."}]},"db2_free_stmt":{"s":"Frees resources associated with the indicated statement resource","y":"bool db2_free_stmt\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"A valid statement resource."}]},"db2_get_option":{"s":"Retrieves an option value for a statement resource or a connection resource","y":"string db2_get_option\n    ( resource $resource      \n   , string $option\n   )","r":"Returns the current setting of the connection attribute provided on success \n   or FALSE on failure.","p":[{"t":"resource","d":"A valid statement resource as returned from\n      db2_prepare() or a valid connection resource as\n      returned from db2_connect() or\n      db2_pconnect()."},{"t":"option","d":"A valid statement or connection options. The following new options are available \n      as of ibm_db2 version 1.6.0. They provide useful tracking information \n      that can be set during execution with db2_get_option().\n      Note: \n       \n        Prior versions of ibm_db2 do not support these new options."},{"t":"userid","d":"SQL_ATTR_INFO_USERID - A pointer to a null-terminated \n           character string used to identify the client user ID sent to the host \n           database server when using DB2 Connect.\n           Note: \n            \n             DB2 for z\/OS and OS\/390 servers support up to a length of 16 characters. \n             This user-id is not to be confused with the authentication user-id, it is for \n             identification purposes only and is not used for any authorization."},{"t":"acctstr","d":"SQL_ATTR_INFO_ACCTSTR - A pointer to a null-terminated \n           character string used to identify the client accounting string sent to the \n           host database server when using DB2 Connect.\n           Note: \n            \n             DB2 for z\/OS and OS\/390 servers support up to a length of 200 characters."},{"t":"applname","d":"SQL_ATTR_INFO_APPLNAME - A pointer to a null-terminated \n           character string used to identify the client application name sent to the \n           host database server when using DB2 Connect.\n           Note: \n            \n             DB2 for z\/OS and OS\/390 servers support up to a length of 32 characters."},{"t":"wrkstnname","d":"SQL_ATTR_INFO_WRKSTNNAME - A pointer to a null-terminated \n           character string used to identify the client workstation name sent to the \n           host database server when using DB2 Connect.\n           Note: \n            \n             DB2 for z\/OS and OS\/390 servers support up to a length of 18 characters."}]},"db2_last_insert_id":{"s":"Returns the auto generated ID of the last insert query that successfully \n  executed on this connection","y":"string db2_last_insert_id\n    ( resource $resource      \n   )","r":"Returns the auto generated ID of last insert query that successfully \n  executed on this connection.","p":[{"t":"resource","d":"A valid connection resource as returned from db2_connect() \n       or db2_pconnect(). The value of this parameter cannot be a \n       statement resource or result set resource."}]},"db2_lob_read":{"s":"Gets a user defined size of LOB files with each invocation","y":"string db2_lob_read\n    ( resource $stmt\n   , int $colnum\n   , int $length\n   )","r":"Returns the amount of data the user specifies. Returns\n   FALSE if the data cannot be retrieved.","p":[{"t":"stmt","d":"A valid stmt resource containing LOB data."},{"t":"colnum","d":"A valid column number in the result set of the stmt resource."},{"t":"length","d":"The size of the LOB data to be retrieved from the stmt resource."}]},"db2_next_result":{"s":"Requests the next result set from a stored procedure","y":"resource db2_next_result\n    ( resource $stmt\n   )","r":"Returns a new statement resource containing the next result set if the\n   stored procedure returned another result set. Returns FALSE if the stored\n   procedure did not return another result set.","p":[{"t":"stmt","d":"A prepared statement returned from db2_exec() or\n       db2_execute()."}]},"db2_num_rows":{"s":"Returns the number of rows affected by an SQL statement","y":"int db2_num_rows\n    ( resource $stmt\n   )","r":"Returns the number of rows affected by the last SQL statement issued by\n   the specified statement handle.","p":[{"t":"stmt","d":"A valid stmt resource containing a result set."}]},"db2_pclose":{"s":"Closes a persistent database connection","y":"bool db2_pclose\n    ( resource $resource      \n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"Specifies an active DB2 client connection."}]},"db2_pconnect":{"s":"Returns a persistent connection to a database","y":"resource db2_pconnect\n    ( string $database\n   , string $username\n   , string $password\n   [, array $options\n  ] )","r":"Returns a connection handle resource if the connection attempt is\n   successful. db2_pconnect() tries to reuse an existing\n   connection resource that exactly matches the\n   database, username, and\n   password parameters. If the connection attempt fails,\n   db2_pconnect() returns FALSE.","p":[{"t":"database","d":"The database alias in the DB2 client catalog."},{"t":"username","d":"The username with which you are connecting to the database."},{"t":"password","d":"The password with which you are connecting to the database."},{"t":"options","d":""},{"t":"autocommit","d":"Passing the DB2_AUTOCOMMIT_ON value turns\n           autocommit on for this connection handle."},{"t":"DB2_ATTR_CASE","d":"Passing the DB2_CASE_NATURAL value specifies\n           that column names are returned in natural case."},{"t":"CURSOR","d":"Passing the DB2_FORWARD_ONLY value specifies a\n           forward-only cursor for a statement resource. This is the default\n           cursor type and is supported on all database servers."},{"t":"trustedcontext","d":"Passing the DB2_TRUSTED_CONTEXT_ENABLE value turns trusted context \n           on for this connection handle. This parameter cannot be set using \n           db2_set_option()."}]},"db2_prepare":{"s":"Prepares an SQL statement to be executed","y":"resource db2_prepare\n    ( resource $connection\n   , string $statement\n   [, array $options\n  ] )","r":"Returns a statement resource if the SQL statement was successfully parsed and\n   prepared by the database server. Returns FALSE if the database server\n   returned an error. You can determine which error was returned by calling\n   db2_stmt_error() or db2_stmt_errormsg().","p":[{"t":"connection","d":"A valid database connection resource variable as returned from\n       db2_connect() or db2_pconnect()."},{"t":"statement","d":"An SQL statement, optionally containing one or more parameter markers.."},{"t":"options","d":"An associative array containing statement options. You can use this\n       parameter to request a scrollable cursor on database servers that\n       support this functionality."}]},"db2_primary_keys":{"s":"Returns a result set listing primary keys for a table","y":"resource db2_primary_keys\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $table-name\n   )","r":"Returns a statement resource with a result set containing rows describing\n   the primary keys for the specified table. The result set is composed of the\n   following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        TABLE_CAT\n        \n         Name of the catalog for the table containing the primary key. The\n         value is NULL if this table does not have catalogs.\n        \n       \n\n       \n        TABLE_SCHEM\n        \n         Name of the schema for the table containing the primary key.\n        \n       \n\n       \n        TABLE_NAME\n        Name of the table containing the primary key.\n       \n\n       \n        COLUMN_NAME\n        Name of the column containing the primary key.\n       \n\n       \n        KEY_SEQ\n        1-indexed position of the column in the key.\n       \n\n       \n        PK_NAME\n        The name of the primary key.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. If schema\n       is NULL, db2_primary_keys() matches the schema for\n       the current connection."},{"t":"table-name","d":"The name of the table."}]},"db2_procedures":{"s":"Returns a result set listing the stored procedures registered in a database","y":"resource db2_procedures\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $procedure\n   )","r":"Returns a statement resource with a result set containing rows describing\n   the stored procedures matching the specified parameters. The rows are\n   composed of the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        PROCEDURE_CAT\n        The catalog that contains the procedure. The value is NULL if\n        this table does not have catalogs.\n       \n\n       \n        PROCEDURE_SCHEM\n        Name of the schema that contains the stored procedure.\n       \n\n       \n        PROCEDURE_NAME\n        Name of the procedure.\n       \n\n       \n        NUM_INPUT_PARAMS\n        Number of input (IN) parameters for the stored procedure.\n       \n\n       \n        NUM_OUTPUT_PARAMS\n        Number of output (OUT) parameters for the stored procedure.\n       \n\n       \n        NUM_RESULT_SETS\n        Number of result sets returned by the stored procedure.\n       \n\n       \n        REMARKS\n        Any comments about the stored procedure.\n       \n\n       \n        PROCEDURE_TYPE\n        Always returns 1, indicating that the stored\n        procedure does not return a return value.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the procedures. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."},{"t":"procedure","d":"The name of the procedure. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."}]},"db2_procedure_columns":{"s":"Returns a result set listing stored procedure parameters","y":"resource db2_procedure_columns\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $procedure\n   , string $parameter\n   )","r":"Returns a statement resource with a result set containing rows describing\n   the parameters for the stored procedures matching the specified parameters.\n   The rows are composed of the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n       \n        PROCEDURE_CAT\n        The catalog that contains the procedure. The value is NULL if\n        this table does not have catalogs.\n       \n\n       \n        PROCEDURE_SCHEM\n        Name of the schema that contains the stored procedure.\n       \n\n       \n        PROCEDURE_NAME\n        Name of the procedure.\n       \n\n       \n        COLUMN_NAME\n        Name of the parameter.\n       \n\n       \n        COLUMN_TYPE\n        \n         \n          An integer value representing the type of the parameter:\n          \n           \n            \n             \n              Return value\n              Parameter type\n             \n\n            \n\n            \n             \n              1 (SQL_PARAM_INPUT)\n              Input (IN) parameter.\n             \n\n             \n              2 (SQL_PARAM_INPUT_OUTPUT)\n              Input\/output (INOUT) parameter.\n             \n\n             \n              3 (SQL_PARAM_OUTPUT)\n              Output (OUT) parameter.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the procedures. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."},{"t":"procedure","d":"The name of the procedure. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."},{"t":"parameter","d":"The name of the parameter. This parameter accepts a search pattern\n       containing _ and % as wildcards.\n       If this parameter is NULL, all parameters for the specified stored\n       procedures are returned."}]},"db2_result":{"s":"Returns a single column from a row in the result set","y":"mixed db2_result\n    ( resource $stmt\n   , mixed $column\n   )","r":"Returns the value of the requested field if the field exists in the result\n   set. Returns NULL if the field does not exist, and issues a warning.","p":[{"t":"stmt","d":"A valid stmt resource."},{"t":"column","d":"Either an integer mapping to the 0-indexed field in the result set, or\n        a string matching the name of the column."}]},"db2_rollback":{"s":"Rolls back a transaction","y":"bool db2_rollback\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"A valid database connection resource variable as returned from\n       db2_connect() or db2_pconnect()."}]},"db2_server_info":{"s":"Returns an object with properties that describe the DB2 database server","y":"object db2_server_info\n    ( resource $connection\n   )","r":"Returns an object on a successful call. Returns FALSE on failure.","p":[{"t":"connection","d":"Specifies an active DB2 client connection."}]},"db2_set_option":{"s":"Set options for connection or statement resources","y":"bool db2_set_option\n       ( resource $resource      \n      , array $options\n      , int $type\n     )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"resource","d":"A valid statement resource as returned from\n             db2_prepare() or a valid connection resource as\n             returned from db2_connect() or\n             db2_pconnect()."},{"t":"options","d":""},{"t":"autocommit","d":"Passing DB2_AUTOCOMMIT_ON turns\n                     autocommit on for the specified connection resource."},{"t":"cursor","d":"Passing DB2_FORWARD_ONLY specifies a\n                     forward-only cursor for a statement resource. This is the\n                     default cursor type, and is supported by all database\n                     servers."},{"t":"binmode","d":"Passing DB2_BINARY specifies that\n                     binary data will be returned as is. This is the default\n                     mode. This is the equivalent of setting\n                     ibm_db2.binmode=1 in php.ini."},{"t":"db2_attr_case","d":"Passing DB2_CASE_LOWER specifies that\n                     column names of the result set are returned in lower case."},{"t":"deferred_prepare","d":"Passing DB2_DEFERRED_PREPARE_ON turns deferred \n                   prepare on for the specified statement resource."},{"t":"i5_fetch_only","d":"DB2_I5_FETCH_ON - Cursors are read-only \n                     and cannot be used for positioned updates or deletes. This \n                     is the default unless SQL_ATTR_FOR_FETCH_ONLY \n                     environment has been set to SQL_FALSE."},{"t":"rowcount","d":"DB2_ROWCOUNT_PREFETCH_ON - Client can request \n                     the full row count prior to fetching, which means that \n                     db2_num_rows() returns the number of rows selected \n                     even when a ROLLFORWARD_ONLY cursor is used."},{"t":"trusted_user","d":"To switch the user to a trusted user, pass the User ID (String) \n                     of the trusted user as the value of this key. This option can \n                     be set on a connection resource only. To use this option, trusted\n                     context must be enabled on the connection resource."},{"t":"trusted_password","d":"The password (String) that corresponds to the user specified\n                     by the trusted_user key."},{"t":"userid","d":"SQL_ATTR_INFO_USERID - A pointer to a null-terminated \n                 character string used to identify the client user ID sent to the host \n                 database server when using DB2 Connect.\n                 Note: \n                  \n                   DB2 for z\/OS and OS\/390 servers support up to a length of 16 characters. \n                   This user-id is not to be confused with the authentication user-id, it is for \n                   identification purposes only and is not used for any authorization."},{"t":"acctstr","d":"SQL_ATTR_INFO_ACCTSTR - A pointer to a null-terminated \n                 character string used to identify the client accounting string sent to the \n                 host database server when using DB2 Connect.\n                 Note: \n                  \n                   DB2 for z\/OS and OS\/390 servers support up to a length of 200 characters."},{"t":"applname","d":"SQL_ATTR_INFO_APPLNAME - A pointer to a null-terminated \n                 character string used to identify the client application name sent to the \n                 host database server when using DB2 Connect.\n                 Note: \n                  \n                   DB2 for z\/OS and OS\/390 servers support up to a length of 32 characters."},{"t":"wrkstnname","d":"SQL_ATTR_INFO_WRKSTNNAME - A pointer to a null-terminated \n                 character string used to identify the client workstation name sent to the \n                 host database server when using DB2 Connect.\n                 Note: \n                  \n                   DB2 for z\/OS and OS\/390 servers support up to a length of 18 characters."},{"t":"type","d":"An integer value that specifies the type of resource that was\n             passed into the function. The type of resource and this value\n             must correspond."}]},"db2_statistics":{"s":"Returns a result set listing the index and statistics for a table","y":"resource db2_statistics\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $table-name\n   , bool $unique\n   )","r":"Returns a statement resource with a result set containing rows describing\n   the statistics and indexes for the base tables matching the specified\n   parameters. The rows are composed of the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n      \n       TABLE_CAT\n       The catalog that contains the table. The value is NULL if\n       this table does not have catalogs.\n      \n\n      \n       TABLE_SCHEM\n       Name of the schema that contains the table.\n      \n\n      \n       TABLE_NAME\n       Name of the table.\n      \n\n      \n       NON_UNIQUE\n       \n        \n         An integer value representing whether the index prohibits unique\n         values, or whether the row represents statistics on the table itself:\n         \n          \n           \n            \n             Return value\n             Parameter type\n            \n\n           \n\n           \n            \n             0 (SQL_FALSE)\n             The index allows duplicate values.\n            \n\n            \n             1 (SQL_TRUE)\n             The index values must be unique.\n            \n\n            \n             NULL\n             This row is statistics information for the table itself.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema that contains the targeted table. If this parameter is\n       NULL, the statistics and indexes are returned for the schema of the\n       current user."},{"t":"table_name","d":"The name of the table."},{"t":"unique","d":""},{"t":"0","d":"Return only the information for unique indexes on the table."},{"t":"1","d":"Return the information for all indexes on the table."}]},"db2_stmt_error":{"s":"Returns a string containing the SQLSTATE returned by an SQL statement","y":"string db2_stmt_error\n    ([ resource $stmt\n  ] )","r":"Returns a string containing an SQLSTATE value.","p":[{"t":"stmt","d":"A valid statement resource."}]},"db2_stmt_errormsg":{"s":"Returns a string containing the last SQL statement error message","y":"string db2_stmt_errormsg\n    ([ resource $stmt\n  ] )","r":"Returns a string containing the error message and SQLCODE value for the\n   last error that occurred issuing an SQL statement.","p":[{"t":"stmt","d":"A valid statement resource."}]},"db2_tables":{"s":"Returns a result set listing the tables and associated metadata in a database","y":"resource db2_tables\n    ( resource $connection\n   [, string $qualifier\n   [, string $schema\n   [, string $table-name\n   [, string $table-type\n  ]]]] )","r":"Returns a statement resource with a result set containing rows describing\n   the tables that match the specified parameters. The rows are composed of\n   the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n      \n       TABLE_CAT\n       The catalog that contains the table. The value is NULL if\n       this table does not have catalogs.\n      \n\n      \n       TABLE_SCHEM\n       Name of the schema that contains the table.\n      \n\n      \n       TABLE_NAME\n       Name of the table.\n      \n\n      \n       TABLE_TYPE\n       Table type identifier for the table.\n      \n\n      \n       REMARKS\n       Description of the table.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."},{"t":"table-name","d":"The name of the table.  This parameter accepts a search pattern\n       containing _ and % as wildcards."},{"t":"table-type","d":"A list of comma-delimited table type identifiers. To match all table\n       types, pass NULL or an empty string. Valid table type identifiers\n       include: ALIAS, HIERARCHY TABLE, INOPERATIVE VIEW, NICKNAME,\n       MATERIALIZED QUERY TABLE, SYSTEM TABLE, TABLE, TYPED TABLE, TYPED VIEW,\n       and VIEW."}]},"db2_table_privileges":{"s":"Returns a result set listing the tables and associated privileges in a database","y":"resource db2_table_privileges\n    ( resource $connection\n   [, string $qualifier\n   [, string $schema\n   [, string $table_name\n  ]]] )","r":"Returns a statement resource with a result set containing rows describing\n   the privileges for the tables that match the specified parameters. The rows\n   are composed of the following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n      \n       TABLE_CAT\n       The catalog that contains the table. The value is NULL if\n       this table does not have catalogs.\n      \n\n      \n       TABLE_SCHEM\n       Name of the schema that contains the table.\n      \n\n      \n       TABLE_NAME\n       Name of the table.\n      \n\n      \n       GRANTOR\n       Authorization ID of the user who granted the privilege.\n      \n\n      \n       GRANTEE\n       Authorization ID of the user to whom the privilege was\n        granted.\n      \n\n      \n       PRIVILEGE\n       \n        The privilege that has been granted. This can be one of ALTER,\n        CONTROL, DELETE, INDEX, INSERT, REFERENCES, SELECT, or UPDATE.\n       \n      \n\n      \n       IS_GRANTABLE\n       \n        A string value of &quot;YES&quot; or &quot;NO&quot; indicating whether the grantee\n        can grant the privilege to other users.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables. This parameter accepts a\n       search pattern containing _ and %\n       as wildcards."},{"t":"table_name","d":"The name of the table. This parameter accepts a search pattern\n       containing _ and % as wildcards."}]},"dbase_add_record":{"s":"Adds a record to a database","y":"bool dbase_add_record\n    ( int $dbase_identifier\n   , array $record\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."},{"t":"record","d":"An indexed array of data. The number of items must be equal to the number of \n       fields in the database, otherwise dbase_add_record()\n       will fail."}]},"dbase_close":{"s":"Closes a database","y":"bool dbase_close\n    ( int $dbase_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."}]},"dbase_create":{"s":"Creates a database","y":"int dbase_create\n    ( string $filename\n   , array $fields\n   )","r":"Returns a database link identifier if the database is successfully created,\n   or FALSE if an error occurred.","p":[{"t":"filename","d":"The name of the database. It can be a relative or absolute path to\n       the file where dBase will store your data."},{"t":"fields","d":"An array of arrays, each array describing the format of one field of the\n       database. Each field consists of a name, a character indicating the field\n       type, and optionally, a length, and a precision."}]},"dbase_delete_record":{"s":"Deletes a record from a database","y":"bool dbase_delete_record\n    ( int $dbase_identifier\n   , int $record_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."},{"t":"record_number","d":"An integer which spans from 1 to the number of records in the database\n       (as returned by dbase_numrecords())."}]},"dbase_get_header_info":{"s":"Gets the header info of a database","y":"array dbase_get_header_info\n    ( int $dbase_identifier\n   )","r":"An indexed array with an entry for each column in the database. The array index\n   starts at 0.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."}]},"dbase_get_record":{"s":"Gets a record from a database as an indexed array","y":"array dbase_get_record\n    ( int $dbase_identifier\n   , int $record_number\n   )","r":"An indexed array with the record. This array will also include an associative\n   key named deleted which is set to 1 if the record has been \n   marked for deletion (see dbase_delete_record()).","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."},{"t":"record_number","d":"The index of the record."}]},"dbase_get_record_with_names":{"s":"Gets a record from a database as an associative array","y":"array dbase_get_record_with_names\n    ( int $dbase_identifier\n   , int $record_number\n   )","r":"An associative array with the record. This will also include a key named \n   deleted which is set to 1 if the record has been marked\n   for deletion (see dbase_delete_record()).","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."},{"t":"record_number","d":"The index of the record."}]},"dbase_numfields":{"s":"Gets the number of fields of a database","y":"int dbase_numfields\n    ( int $dbase_identifier\n   )","r":"The number of fields in the database, or FALSE if an error occurs.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."}]},"dbase_numrecords":{"s":"Gets the number of records in a database","y":"int dbase_numrecords\n    ( int $dbase_identifier\n   )","r":"The number of records in the database, or FALSE if an error occurs.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."}]},"dbase_open":{"s":"Opens a database","y":"int dbase_open\n    ( string $filename\n   , int $mode\n   )","r":"Returns a database link identifier if the database is successfully opened,\n   or FALSE if an error occurred.","p":[{"t":"filename","d":"The name of the database. It can be a relative or absolute path to\n       the file where dBase will store your data."},{"t":"mode","d":"An integer which correspond to those for the open() \n       system call (Typically 0 means read-only, 1 means write-only, and 2 \n       means read and write)."}]},"dbase_pack":{"s":"Packs a database","y":"bool dbase_pack\n    ( int $dbase_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."}]},"dbase_replace_record":{"s":"Replaces a record in a database","y":"bool dbase_replace_record\n    ( int $dbase_identifier\n   , array $record\n   , int $record_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dbase_identifier","d":"The database link identifier, returned by dbase_open()\n       or dbase_create()."},{"t":"record","d":"An indexed array of data. The number of items must be equal to the\n       number of fields in the database, otherwise\n       dbase_replace_record() will fail."},{"t":"record_number","d":"An integer which spans from 1 to the number of records in the database\n       (as returned by dbase_numrecords())."}]},"dba_close":{"s":"Close a DBA database","y":"void dba_close\n    ( resource $handle\n   )","r":"No value is returned.","p":[{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_delete":{"s":"Delete DBA entry specified by key","y":"bool dba_delete\n    ( string $key\n   , resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key of the entry which is deleted."},{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_exists":{"s":"Check whether key exists","y":"bool dba_exists\n    ( string $key\n   , resource $handle\n   )","r":"Returns TRUE if the key exists, FALSE otherwise.","p":[{"t":"key","d":"The key the check is performed for."},{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_fetch":{"s":"Fetch data specified by key","y":"string dba_fetch\n    ( string $key\n   , resource $handle\n   )","r":"Returns the associated string if the key\/data pair is found, FALSE \n   otherwise.","p":[{"t":"key","d":"The key the data is specified by."},{"t":"skip","d":"The number of key-value pairs to ignore when using cdb databases. \n       This value is ignored for all other databases which do not support\n       multiple keys with the same name."},{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_firstkey":{"s":"Fetch first key","y":"string dba_firstkey\n    ( resource $handle\n   )","r":"Returns the key on success or FALSE on failure. ","p":[{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_handlers":{"s":"List all the handlers available","y":"array dba_handlers\n    ([ bool $full_info = false\n  ] )","r":"Returns an array of database handlers. If full_info\n   is set to TRUE, the array will be associative with the handlers names as\n   keys, and their version information as value. Otherwise, the result will be\n   an indexed array of handlers names.  ","p":[{"t":"full_info","d":"Turns on\/off full information display in the result."}]},"dba_insert":{"s":"Insert entry","y":"bool dba_insert\n    ( string $key\n   , string $value\n   , resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key of the entry to be inserted. If this key already exist in the \n       database, this function will fail. Use dba_replace()\n       if you need to replace an existent key."},{"t":"value","d":"The value to be inserted."},{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_key_split":{"s":"Splits a key in string representation into array representation","y":"mixed dba_key_split\n    ( mixed $key\n   )","r":"Returns an array of the form array(0 =&gt; group, 1 =&gt; \n   value_name). This function will return FALSE if \n   key is NULL or FALSE.","p":[{"t":"key","d":"The key in string representation."}]},"dba_list":{"s":"List all open database files","y":"array dba_list\n    ( void\n   )","r":"An associative array, in the form resourceid =&gt; filename.","p":null},"dba_nextkey":{"s":"Fetch next key","y":"string dba_nextkey\n    ( resource $handle\n   )","r":"Returns the key on success or FALSE on failure. ","p":[{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_open":{"s":"Open database","y":"resource dba_open\n    ( string $path\n   , string $mode\n   [, string $handler\n   [, mixed $...\n  ]] )","r":"Returns a positive handle on success or FALSE on failure.","p":[{"t":"path","d":"Commonly a regular path in your filesystem."},{"t":"mode","d":"It is r for read access, w for\n       read\/write access to an already existing database, c\n       for read\/write access and database creation if it doesn&#039;t currently exist,\n       and n for create, truncate and read\/write access.\n       The database is created in BTree mode, other modes (like Hash or Queue)\n       are not supported."},{"t":"handler","d":"The name of the handler which\n       shall be used for accessing path. It is passed \n       all optional parameters given to dba_open() and \n       can act on behalf of them."}]},"dba_optimize":{"s":"Optimize database","y":"bool dba_optimize\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_popen":{"s":"Open database persistently","y":"resource dba_popen\n    ( string $path\n   , string $mode\n   [, string $handler\n   [, mixed $...\n  ]] )","r":"Returns a positive handle on success or FALSE on failure.","p":[{"t":"path","d":"Commonly a regular path in your filesystem."},{"t":"mode","d":"It is r for read access, w for\n       read\/write access to an already existing database, c\n       for read\/write access and database creation if it doesn&#039;t currently exist,\n       and n for create, truncate and read\/write access."},{"t":"handler","d":"The name of the handler which\n       shall be used for accessing path. It is passed \n       all optional parameters given to dba_popen() and \n       can act on behalf of them."}]},"dba_replace":{"s":"Replace or insert entry","y":"bool dba_replace\n    ( string $key\n   , string $value\n   , resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key of the entry to be replaced."},{"t":"value","d":"The value to be replaced."},{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dba_sync":{"s":"Synchronize database","y":"bool dba_sync\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The database handler, returned by dba_open() or\n       dba_popen()."}]},"dbplus_add":{"s":"Add a tuple to a relation","y":"int dbplus_add\n    ( resource $relation\n   , array $tuple\n   )","r":"The function will return DBPLUS_ERR_NOERR on success\n   or a db++ error code on failure.","p":[{"t":"relation","d":""},{"t":"tuple","d":"An array of attribute\/value pairs to be inserted into the given\n       relation."}]},"dbplus_aql":{"s":"Perform AQL query","y":"resource dbplus_aql\n    ( string $query\n   [, string $server\n   [, string $dbpath\n  ]] )","r":"Returns a relation handle on success. The result data may be fetched from\n   this relation by calling dbplus_next() and\n   dbplus_curr(). Other relation access functions will\n   not work on a result relation.","p":[{"t":"query","d":"The AQL query to be executed. Further information on the AQL (Algebraic\n       Query Language) is provided in the original db++ manual."},{"t":"server","d":""},{"t":"dbpath","d":""}]},"dbplus_chdir":{"s":"Get\/Set database virtual current directory","y":"string dbplus_chdir\n    ([ string $newdir\n  ] )","r":"Returns the absolute path of the current directory. ","p":[{"t":"newdir","d":"The new directory for relation files. You can omit this parameter to\n       query the current working directory."}]},"dbplus_close":{"s":"Close a relation","y":"mixed dbplus_close\n    ( resource $relation\n   )","r":"Returns TRUE on success or DBPLUS_ERR_UNKNOWN on\n   failure.","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_curr":{"s":"Get current tuple from relation","y":"int dbplus_curr\n    ( resource $relation\n   , array &$tuple\n   )","r":"The function will return zero (aka. DBPLUS_ERR_NOERR) on success\n   or a db++ error code on failure.","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":"The data will be passed back in this parameter, as an associative\n       array."}]},"dbplus_errcode":{"s":"Get error string for given errorcode or last error","y":"string dbplus_errcode\n    ([ int $errno\n  ] )","r":"Returns the error message.","p":[{"t":"errno","d":"The error code. If not provided, the result code of the last db++\n       operation is assumed."}]},"dbplus_find":{"s":"Set a constraint on a relation","y":"int dbplus_find\n    ( resource $relation\n   , array $constraints\n   , mixed $tuple\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"constraints","d":"Constraints are triplets of strings containing of a domain name,\n       a comparison operator and a comparison value. The\n       constraints parameter array may consist of\n       a collection of string arrays, each of which contains a domain, an\n       operator and a value, or of a single string array containing a\n       multiple of three elements."},{"t":"tuple","d":""}]},"dbplus_first":{"s":"Get first tuple from relation","y":"int dbplus_first\n    ( resource $relation\n   , array &$tuple\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_flush":{"s":"Flush all changes made on a relation","y":"int dbplus_flush\n    ( resource $relation\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_freealllocks":{"s":"Free all locks held by this client","y":"int dbplus_freealllocks\n    ( void\n   )","r":"","p":null},"dbplus_freelock":{"s":"Release write lock on tuple","y":"int dbplus_freelock\n    ( resource $relation\n   , string $tuple\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_freerlocks":{"s":"Free all tuple locks on given relation","y":"int dbplus_freerlocks\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_getlock":{"s":"Get a write lock on a tuple","y":"int dbplus_getlock\n    ( resource $relation\n   , string $tuple\n   )","r":"Returns zero on success or a non-zero error code, especially \n   DBPLUS_ERR_WLOCKED on failure.","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_getunique":{"s":"Get an id number unique to a relation","y":"int dbplus_getunique\n    ( resource $relation\n   , int $uniqueid\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"uniqueid","d":""}]},"dbplus_info":{"s":"Get information about a relation","y":"int dbplus_info\n    ( resource $relation\n   , string $key\n   , array &$result\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"key","d":""},{"t":"result","d":""}]},"dbplus_last":{"s":"Get last tuple from relation","y":"int dbplus_last\n    ( resource $relation\n   , array &$tuple\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_lockrel":{"s":"Request write lock on relation","y":"int dbplus_lockrel\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_next":{"s":"Get next tuple from relation","y":"int dbplus_next\n    ( resource $relation\n   , array &$tuple\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_open":{"s":"Open relation file","y":"resource dbplus_open\n    ( string $name\n   )","r":"On success a relation file resource (cursor) is returned which must\n   be used in any subsequent commands referencing the relation.\n   Failure leads to a zero return value, the actual error code may\n   be asked for by calling dbplus_errno().","p":[{"t":"name","d":"Can be either a file name or a relative or absolute path name. This\n       will be mapped in any case to an absolute relation file path on a\n       specific host machine and server."}]},"dbplus_prev":{"s":"Get previous tuple from relation","y":"int dbplus_prev\n    ( resource $relation\n   , array &$tuple\n   )","r":"Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. ","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_rchperm":{"s":"Change relation permissions","y":"int dbplus_rchperm\n    ( resource $relation\n   , int $mask\n   , string $user\n   , string $group\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"mask","d":""},{"t":"user","d":""},{"t":"group","d":""}]},"dbplus_rcreate":{"s":"Creates a new DB++ relation","y":"resource dbplus_rcreate\n    ( string $name\n   , mixed $domlist\n   [, bool $overwrite\n  ] )","r":"","p":[{"t":"name","d":""},{"t":"domlist","d":"A combination of domains. May be passed as a single domain name string\n       or as an array of domain names."},{"t":"overwrite","d":""}]},"dbplus_rcrtexact":{"s":"Creates an exact but empty copy of a relation including indices","y":"mixed dbplus_rcrtexact\n    ( string $name\n   , resource $relation\n   [, bool $overwrite\n  ] )","r":"Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.","p":[{"t":"name","d":""},{"t":"relation","d":"The copied relation, opened by dbplus_open()."},{"t":"overwrite","d":"An existing relation by the same name will only\n       be overwritten if this parameter is set to TRUE and no other process\n       is currently using the relation."}]},"dbplus_rcrtlike":{"s":"Creates an empty copy of a relation with default indices","y":"mixed dbplus_rcrtlike\n    ( string $name\n   , resource $relation\n   [, int $overwrite\n  ] )","r":"Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.","p":[{"t":"name","d":""},{"t":"relation","d":"The copied relation, opened by dbplus_open()."},{"t":"overwrite","d":"An existing relation by the same name will only\n       be overwritten if this parameter is set to TRUE and no other process\n       is currently using the relation."}]},"dbplus_resolve":{"s":"Resolve host information for relation","y":"array dbplus_resolve\n    ( string $relation_name\n   )","r":"Returns an array containing these values under the keys\n   sid, host and\n   host_path or FALSE on error.","p":[{"t":"relation_name","d":"The relation name."}]},"dbplus_restorepos":{"s":"Restore position","y":"int dbplus_restorepos\n    ( resource $relation\n   , array $tuple\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""}]},"dbplus_rkeys":{"s":"Specify new primary key for a relation","y":"mixed dbplus_rkeys\n    ( resource $relation\n   , mixed $domlist\n   )","r":"Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"domlist","d":"A combination of domains. May be passed as a single domain name\n        string or as an array of domain names."}]},"dbplus_ropen":{"s":"Open relation file local","y":"resource dbplus_ropen\n    ( string $name\n   )","r":"","p":[{"t":"name","d":""}]},"dbplus_rquery":{"s":"Perform local (raw) AQL query","y":"resource dbplus_rquery\n    ( string $query\n   [, string $dbpath\n  ] )","r":"","p":[{"t":"query","d":""},{"t":"dbpath","d":""}]},"dbplus_rrename":{"s":"Rename a relation","y":"int dbplus_rrename\n    ( resource $relation\n   , string $name\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"name","d":""}]},"dbplus_rsecindex":{"s":"Create a new secondary index for a relation","y":"mixed dbplus_rsecindex\n    ( resource $relation\n   , mixed $domlist\n   , int $type\n   )","r":"Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"domlist","d":"A combination of domains. May be passed as a single domain name\n       string or as an array of domain names."},{"t":"type","d":""}]},"dbplus_runlink":{"s":"Remove relation from filesystem","y":"int dbplus_runlink\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_rzap":{"s":"Remove all tuples from relation","y":"int dbplus_rzap\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_savepos":{"s":"Save position","y":"int dbplus_savepos\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_setindex":{"s":"Set index","y":"int dbplus_setindex\n    ( resource $relation\n   , string $idx_name\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"idx_name","d":""}]},"dbplus_sql":{"s":"Perform SQL query","y":"resource dbplus_sql\n    ( string $query\n   [, string $server\n   [, string $dbpath\n  ]] )","r":"","p":[{"t":"query","d":""},{"t":"server","d":""},{"t":"dbpath","d":""}]},"dbplus_tcl":{"s":"Execute TCL code on server side","y":"string dbplus_tcl\n    ( int $sid\n   , string $script\n   )","r":"","p":[{"t":"sid","d":""},{"t":"script","d":""}]},"dbplus_tremove":{"s":"Remove tuple and return new current tuple","y":"int dbplus_tremove\n    ( resource $relation\n   , array $tuple\n   [, array &$current\n  ] )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"tuple","d":""},{"t":"current","d":""}]},"dbplus_undo":{"s":"Undo","y":"int dbplus_undo\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_undoprepare":{"s":"Prepare undo","y":"int dbplus_undoprepare\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_unlockrel":{"s":"Give up write lock on relation","y":"int dbplus_unlockrel\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_unselect":{"s":"Remove a constraint from relation","y":"int dbplus_unselect\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_update":{"s":"Update specified tuple in relation","y":"int dbplus_update\n    ( resource $relation\n   , array $old\n   , array $new\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"old","d":"The old tuple."},{"t":"new","d":"The new tuple."}]},"dbplus_xlockrel":{"s":"Request exclusive lock on relation","y":"int dbplus_xlockrel\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbplus_xunlockrel":{"s":"Free exclusive lock on relation","y":"int dbplus_xunlockrel\n    ( resource $relation\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."}]},"dbx_close":{"s":"Close an open connection\/database","y":"int dbx_close\n    ( object $link_identifier\n   )","r":"Returns 1 on success and 0 on errors.","p":[{"t":"link_identifier","d":"The DBX link object to close."}]},"dbx_compare":{"s":"Compare two rows for sorting purposes","y":"int dbx_compare\n    ( array $row_a\n   , array $row_b\n   , string $column_key\n   [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE\n  ] )","r":"Returns 0 if the row_a[$column_key]\n   is equal to row_b[$column_key], and 1\n   or -1 if the former is greater or is smaller than the \n   latter one, respectively, or vice versa if the flag \n   is set to DBX_CMP_DESC.","p":[{"t":"row_a","d":"First row"},{"t":"row_b","d":"Second row"},{"t":"column_key","d":"The compared column"},{"t":"flags","d":"The flags can be set to specify comparison\n       direction: \n       \n        \n         \n          DBX_CMP_ASC - ascending order\n         \n        \n        \n         \n          DBX_CMP_DESC - descending order\n         \n        \n       \n       and the preferred comparison type:\n       \n        \n         \n          DBX_CMP_NATIVE - no type conversion\n         \n        \n        \n         \n          DBX_CMP_TEXT - compare items as strings\n         \n        \n        \n         \n          DBX_CMP_NUMBER - compare items numerically\n         \n        \n       \n       One of the direction and one of the type constant can be combined with\n       bitwise OR operator (|)."}]},"dbx_connect":{"s":"Open a connection\/database","y":"object dbx_connect\n    ( mixed $module\n   , string $host\n   , string $database\n   , string $username\n   , string $password\n   [, int $persistent\n  ] )","r":"Returns an object on success, FALSE on error. If a connection has been\n   made but the database could not be selected, the connection is closed and\n   FALSE is returned. ","p":[{"t":"module","d":"The module parameter can be either a string or a\n       constant, though the latter form is preferred. The possible values are \n       given below, but keep in mind that they only work if the module is \n       actually loaded."},{"t":"host","d":"The SQL server host"},{"t":"database","d":"The database name"},{"t":"username","d":"The username"},{"t":"password","d":"The password"},{"t":"persistent","d":"The persistent parameter can be set to \n       DBX_PERSISTENT, if so, a persistent connection\n       will be created."}]},"dbx_error":{"s":"Report the error message of the latest function call in the module","y":"string dbx_error\n    ( object $link_identifier\n   )","r":"Returns a string containing the error message from the last function call\n   of the abstracted module (e.g. mysql module). If there are multiple \n   connections in the same module, just the last error is given. If there are\n   connections on different modules, the latest error is returned for the \n   module specified by the link_identifier parameter.","p":[{"t":"link_identifier","d":"The DBX link object returned by dbx_connect()"}]},"dbx_escape_string":{"s":"Escape a string so it can safely be used in an sql-statement","y":"string dbx_escape_string\n    ( object $link_identifier\n   , string $text\n   )","r":"Returns the text, escaped where necessary (such as quotes, backslashes\n   etc). On error, NULL is returned.","p":[{"t":"link_identifier","d":"The DBX link object returned by dbx_connect()"},{"t":"text","d":"The string to escape."}]},"dbx_fetch_row":{"s":"Fetches rows from a query-result that had the \n  DBX_RESULT_UNBUFFERED flag set","y":"mixed dbx_fetch_row\n    ( object $result_identifier\n   )","r":"Returns an object on success that contains the same information as any row\n   would have in the dbx_query() result \n   data property, including columns accessible by index \n   or fieldname when the flags for dbx_query() were set\n   that way.","p":[{"t":"result_identifier","d":"A result set returned by dbx_query()."}]},"dbx_query":{"s":"Send a query and fetch all results (if any)","y":"mixed dbx_query\n    ( object $link_identifier\n   , string $sql_statement\n   [, int $flags\n  ] )","r":"dbx_query() returns an object or 1 \n   on success, and 0 on failure. The result object is \n   returned only if the query given in sql_statement\n   produces a result set (i.e. a SELECT query, even if the result set is\n   empty). ","p":[{"t":"link_identifier","d":"The DBX link object returned by dbx_connect()"},{"t":"sql_statement","d":"SQL statement."},{"t":"flags","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"flags","d":""}]},"dbx_sort":{"s":"Sort a result from a dbx_query by a custom sort function","y":"bool dbx_sort\n    ( object $result\n   , string $user_compare_function\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"A result set returned by dbx_query()."},{"t":"user_compare_function","d":"The user-defined comparison function. It must accept two arguments and\n       return an integer less than, equal to, or greater than zero if the \n       first argument is considered to be respectively less than, equal to, \n       or greater than the second."}]},"dcgettext":{"s":"Overrides the domain for a single lookup","y":"string dcgettext\n    ( string $domain\n   , string $message\n   , int $category\n   )","r":"A string on success.","p":[{"t":"domain","d":"The domain"},{"t":"message","d":"The message"},{"t":"category","d":"The category"}]},"dcngettext":{"s":"Plural version of dcgettext","y":"string dcngettext\n    ( string $domain\n   , string $msgid1\n   , string $msgid2\n   , int $n\n   , int $category\n   )","r":"A string on success.","p":[{"t":"domain","d":"The domain"},{"t":"msgid1","d":""},{"t":"msgid2","d":""},{"t":"n","d":""},{"t":"category","d":""}]},"deaggregate":{"s":"Removes the aggregated methods and properties from an object","y":"void deaggregate\n    ( object $object\n   [, string $class_name\n  ] )","r":"No value is returned.","p":[{"t":"object","d":""},{"t":"class_name","d":"If the optional class_name parameters is passed,\n       only those methods and properties defined in that class are removed,\n       otherwise all aggregated methods and properties are eliminated."}]},"debug_backtrace":{"s":"Generates a backtrace","y":"array debug_backtrace\n    ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT\n   [, int $limit = 0\n  ]] )","r":"Returns an array of associative arrays. The possible returned elements\n   are as follows:","p":[{"t":"options","d":"As of 5.3.6, this parameter is a bitmask for the following options:\n       \n        debug_backtrace() options\n        \n         \n          \n           DEBUG_BACKTRACE_PROVIDE_OBJECT\n           \n            Whether or not to populate the &quot;object&quot; index.\n           \n          \n\n          \n           DEBUG_BACKTRACE_IGNORE_ARGS\n           \n            Whether or not to omit the &quot;args&quot; index, and thus all the function\/method arguments,\n            to save memory.\n           \n          \n\n         \n        \n       \n\n       Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as \n       setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively."},{"t":"limit","d":"As of 5.4.0, this parameter can be used to limit the number of stack frames returned.\n       By default (limit=0) it returns all stack frames."}]},"debug_print_backtrace":{"s":"Prints a backtrace","y":"void debug_print_backtrace\n      ([ int $options = 0\n     [, int $limit = 0\n    ]] )","r":"No value is returned.","p":[{"t":"options","d":"As of 5.3.6, this parameter is a bitmask for the following options:\n       \n        debug_print_backtrace() options\n        \n         \n          \n           DEBUG_BACKTRACE_IGNORE_ARGS\n           \n            Whether or not to omit the &quot;args&quot; index, and thus all the function\/method arguments,\n            to save memory."},{"t":"limit","d":"As of 5.4.0, this parameter can be used to limit the number of stack frames printed.\n       By default (limit=0) it prints all stack frames."}]},"debug_zval_dump":{"s":"Dumps a string representation of an internal zend value to output","y":"void debug_zval_dump\n    ( mixed $variable\n   [, mixed $...\n  ] )","r":"No value is returned.","p":[{"t":"variable","d":"The variable being evaluated."}]},"decbin":{"s":"Decimal to binary","y":"string decbin\n    ( int $number\n   )","r":"Binary string representation of number","p":[{"t":"number","d":"Decimal value to convert"}]},"dechex":{"s":"Decimal to hexadecimal","y":"string dechex\n     ( int $number\n    )","r":"Hexadecimal string representation of number.","p":[{"t":"number","d":"The decimal value to convert."}]},"decoct":{"s":"Decimal to octal","y":"string decoct\n     ( int $number\n    )","r":"Octal string representation of number","p":[{"t":"number","d":"Decimal value to convert"}]},"define":{"s":"Defines a named constant","y":"bool define\n    ( string $name\n   , mixed $value\n   [, bool $case_insensitive = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"name","d":"The name of the constant."},{"t":"value","d":"The value of the constant; only scalar and null values are allowed. \n       Scalar values are integer, \n       float, string or boolean values. It is \n       possible to define resource constants, however it is not recommended \n       and may cause unpredictable behavior."},{"t":"case_insensitive","d":"If set to TRUE, the constant will be defined case-insensitive. \n       The default behavior is case-sensitive; i.e. \n       CONSTANT and Constant represent\n       different values."}]},"defined":{"s":"Checks whether a given named constant exists","y":"bool defined\n    ( string $name\n   )","r":"Returns TRUE if the named constant given by name\n   has been defined, FALSE otherwise.","p":[{"t":"name","d":"The constant name."}]},"delete":{"s":"See unlink()","y":"","r":"No value is returned.","p":null},"dgettext":{"s":"Override the current domain","y":"string dgettext\n    ( string $domain\n   , string $message\n   )","r":"A string on success.","p":[{"t":"domain","d":"The domain"},{"t":"message","d":"The message"}]},"dio_close":{"s":"Closes the file descriptor given by fd","y":"void dio_close\n    ( resource $fd\n   )","r":"No value is returned.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."}]},"dio_fcntl":{"s":"Performs a c library fcntl on fd","y":"mixed dio_fcntl\n    ( resource $fd\n   , int $cmd\n   [, mixed $args\n  ] )","r":"Returns the result of the C call.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"cmd","d":"Can be one of the following operations:\n       \n        \n         \n          F_SETLK - Lock is set or cleared. If the lock\n          is held by someone else dio_fcntl() returns\n          -1."},{"t":"args","d":"args is an associative array, when\n       cmd is F_SETLK or\n       F_SETLLW, with the following keys:\n       \n        \n         \n          start - offset where lock begins"}]},"dio_open":{"s":"Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow.","y":"resource dio_open\n    ( string $filename\n   , int $flags\n   [, int $mode = 0\n   ] )","r":"A file descriptor or FALSE on error.","p":[{"t":"filename","d":"The pathname of the file to open."},{"t":"flags","d":"The flags parameter is a bitwise-ORed\n       value comprising flags from the following list. This value\n       must include one of\n       O_RDONLY, O_WRONLY,\n       or O_RDWR. Additionally, it may include\n       any combination of the other flags from this list.\n       \n        \n         \n          O_RDONLY - opens the file for read access."},{"t":"mode","d":"If flags contains\n       O_CREAT, mode will\n       set the permissions of the file (creation\n       permissions). Mode is required for\n       correct operation when O_CREAT is\n       specified in mode and is ignored\n       otherwise."}]},"dio_read":{"s":"Reads bytes from a file descriptor","y":"string dio_read\n    ( resource $fd\n   [, int $len = 1024\n  ] )","r":"The bytes read from fd.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"len","d":"The number of bytes to read. If not specified,\n       dio_read() reads 1K sized block."}]},"dio_seek":{"s":"Seeks to pos on fd from whence","y":"int dio_seek\n    ( resource $fd\n   , int $pos\n   [, int $whence = SEEK_SET\n  ] )","r":"","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"pos","d":"The new position."},{"t":"whence","d":"Specifies how the position pos should be \n       interpreted:\n       \n        \n         \n          SEEK_SET (default) - specifies that \n          pos is specified from the beginning of the \n          file."}]},"dio_stat":{"s":"Gets stat information about the file descriptor fd","y":"array dio_stat\n    ( resource $fd\n   )","r":"Returns an associative array with the following keys:\n   \n    \n     \n      &quot;device&quot; - device","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."}]},"dio_tcsetattr":{"s":"Sets terminal attributes and baud rate for a serial port","y":"bool dio_tcsetattr\n    ( resource $fd\n   , array $options\n   )","r":"No value is returned.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"options","d":"The currently available options are: \n       \n        \n         \n          &#039;baud&#039; - baud rate of the port - can be 38400,19200,9600,4800,2400,1800,\n          1200,600,300,200,150,134,110,75 or 50, default value is 9600."}]},"dio_truncate":{"s":"Truncates file descriptor fd to offset bytes ","y":"bool dio_truncate\n    ( resource $fd\n   , int $offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"offset","d":"The offset in bytes."}]},"dio_write":{"s":"Writes data to fd with optional truncation at length ","y":"int dio_write\n    ( resource $fd\n   , string $data\n   [, int $len = 0\n  ] )","r":"Returns the number of bytes written to fd.","p":[{"t":"fd","d":"The file descriptor returned by dio_open()."},{"t":"data","d":"The written data."},{"t":"len","d":"The length of data to write in bytes. If not specified, the \n       function writes all the data to the specified file."}]},"dir":{"s":"Return an instance of the Directory class","y":"Directory dir\n    ( string $directory\n   [, resource $context\n  ] )","r":"Returns an instance of Directory, or NULL with\n   wrong parameters, or FALSE in case of another error.","p":[{"t":"directory","d":"Directory to open"},{"t":"context","d":"Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStreams."}]},"dirname":{"s":"Returns parent directory&#039;s path","y":"string dirname\n    ( string $path\n   )","r":"Returns the path of the parent directory. If there are no slashes in\n   path, a dot (&#039;.&#039;) is returned,\n   indicating the current directory. Otherwise, the returned string is\n   path with any trailing\n   \/component removed.","p":[{"t":"path","d":"A path."}]},"diskfreespace":{"s":"Alias of disk_free_space()","y":"","r":"","p":null},"disk_free_space":{"s":"Returns available space on filesystem or disk partition","y":"float disk_free_space\n    ( string $directory\n   )","r":"Returns the number of available bytes as a float\n    or FALSE on failure.","p":[{"t":"directory","d":"A directory of the filesystem or disk partition."}]},"disk_total_space":{"s":"Returns the total size of a filesystem or disk partition","y":"float disk_total_space\n    ( string $directory\n   )","r":"Returns the total number of bytes as a float\n    or FALSE on failure.","p":[{"t":"directory","d":"A directory of the filesystem or disk partition."}]},"dl":{"s":"Loads a PHP extension at runtime","y":"bool dl\n    ( string $library\n   )","r":"Returns TRUE on success or FALSE on failure. If the functionality of loading modules is not available\n   or has been disabled (either by setting\n   enable_dl off or by enabling safe mode\n   in php.ini) an E_ERROR is emitted\n   and execution is stopped. If dl() fails because the\n   specified library couldn&#039;t be loaded, in addition to FALSE an\n   E_WARNING message is emitted.","p":[{"t":"library","d":"This parameter is only the filename of the\n       extension to load which also depends on your platform. For example,\n       the sockets extension (if compiled\n       as a shared module, not the default!) would be called \n       sockets.so on Unix platforms whereas it is called\n       php_sockets.dll on the Windows platform."}]},"dngettext":{"s":"Plural version of dgettext","y":"string dngettext\n    ( string $domain\n   , string $msgid1\n   , string $msgid2\n   , int $n\n   )","r":"A string on success.","p":[{"t":"domain","d":"The domain"},{"t":"msgid1","d":""},{"t":"msgid2","d":""},{"t":"n","d":""}]},"dns_check_record":{"s":"Alias of checkdnsrr()","y":"","r":"","p":null},"dns_get_mx":{"s":"Alias of getmxrr()","y":"","r":"","p":null},"dns_get_record":{"s":"Fetch DNS Resource Records associated with a hostname","y":"array dns_get_record\n    ( string $hostname\n   [, int $type = DNS_ANY\n   [, array &$authns\n   [, array &$addtl\n   [, bool &$raw = false\n  ]]]] )","r":"This function returns an array of associative arrays,\n    or FALSE on failure. Each associative array contains\n   at minimum the following keys:\n   \n    Basic DNS attributes\n    \n     \n      \n       Attribute\n       Meaning\n      \n\n     \n\n     \n      \n       host\n       \n        The record in the DNS namespace to which the rest of the associated data refers.\n       \n      \n\n      \n       class\n       \n        dns_get_record() only returns Internet class records and as\n        such this parameter will always return IN.\n       \n      \n\n      \n       type\n       \n        String containing the record type.  Additional attributes will also be contained\n        in the resulting array dependant on the value of type. See table below.\n       \n      \n\n      \n       ttl\n       \n        &quot;Time To Live&quot; remaining for this record. This will not equal\n        the record&#039;s original ttl, but will rather equal the original ttl minus whatever\n        length of time has passed since the authoritative name server was queried.","p":[{"t":"hostname","d":"hostname should be a valid DNS hostname such\n       as &quot;www.example.com&quot;. Reverse lookups can be generated\n       using in-addr.arpa notation, but\n       gethostbyaddr() is more suitable for\n       the majority of reverse lookups."},{"t":"type","d":"By default, dns_get_record() will search for any\n       resource records associated with hostname. \n       To limit the query, specify the optional type\n       parameter. May be any one of the following:\n       DNS_A, DNS_CNAME,\n       DNS_HINFO, DNS_MX,\n       DNS_NS, DNS_PTR,\n       DNS_SOA, DNS_TXT,\n       DNS_AAAA, DNS_SRV,\n       DNS_NAPTR, DNS_A6,\n       DNS_ALL or DNS_ANY."},{"t":"authns","d":"Passed by reference and, if given, will be populated with Resource\n       Records for the Authoritative Name Servers."},{"t":"addtl","d":"Passed by reference and, if given, will be populated with any\n       Additional Records."},{"t":"raw","d":"In case of raw mode, we query only the requestd type instead of looping\n       type by type before going with the additional info stuff."}]},"dom_import_simplexml":{"s":"Gets a DOMElement object from a\n   SimpleXMLElement object","y":"DOMElement dom_import_simplexml\n    ( SimpleXMLElement $node\n   )","r":"The DOMElement node added or FALSE if any errors occur.","p":[{"t":"node","d":"The SimpleXMLElement node."}]},"dotnet_load":{"s":"Loads a DOTNET module","y":"int dotnet_load\n    ( string $assembly_name\n   [, string $datatype_name\n   [, int $codepage\n  ]] )","r":"","p":null},"doubleval":{"s":"Alias of floatval()","y":"","r":"","p":null},"each":{"s":"Return the current key and value pair from an array and advance the array cursor","y":"array each\n    ( array &$array\n   )","r":"Returns the current key and value pair from the array\n   array. This pair is returned in a four-element\n   array, with the keys 0, 1,\n   key, and value. Elements\n   0 and key contain the key name of\n   the array element, and 1 and value\n   contain the data.","p":[{"t":"array","d":"The input array."}]},"easter_days":{"s":"Get number of days after March 21 on which Easter falls for a given year","y":"int easter_days\n    ([ int $year\n   [, int $method = CAL_EASTER_DEFAULT\n  ]] )","r":"The number of days after March 21st that the Easter Sunday\n   is in the given year.","p":[{"t":"year","d":"The year as a positive number"},{"t":"method","d":"Allows Easter dates to be calculated based\n       on the Gregorian calendar during the years 1582 - 1752 when set to\n       CAL_EASTER_ROMAN. See the calendar constants for more valid\n       constants."}]},"echo":{"s":"Output one or more strings","y":"void echo\n    ( string $arg1\n   [, string $...\n  ] )","r":"No value is returned.","p":[{"t":"arg1","d":"The parameter to output."},{"t":"...","d":""}]},"eio_busy":{"s":"Artificially increase load. Could be useful in tests,\n  benchmarking.","y":"resource eio_busy\n    ( int $delay\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_busy() returns request resource on success or FALSE on error.","p":[{"t":"delay","d":"Delay in seconds"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":"This callback is called when all the group requests are done."},{"t":"data","d":"Arbitrary variable passed to callback."}]},"eio_cancel":{"s":"Cancels a request","y":"void eio_cancel\n    ( resource $req\n   )","r":"No value is returned.","p":[{"t":"req","d":"The request resource"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_chmod":{"s":"Change file\/direcrory permissions.","y":"resource eio_chmod\n    ( string $path\n   , int $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_chmod() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path to the target file or directory\n     WarningAvoid relative\npaths"}]},"eio_chown":{"s":"Change file\/direcrory permissions.","y":"resource eio_chown\n    ( string $path\n   , int $uid\n   [, int $gid = -1\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )","r":"eio_chown() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path to file or directory.\n     WarningAvoid relative\npaths"}]},"eio_close":{"s":"Close file","y":"resource eio_close\n    ( mixed $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_close() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_custom":{"s":"Execute custom request like any other eio_* call.","y":"resource eio_custom\n    ( callable $execute\n   , int $pri\n   , callable $callback\n   [, mixed $data = NULL\n  ] )","r":"eio_custom() returns request resource on success or FALSE on error.","p":[{"t":"execute","d":""}]},"eio_dup2":{"s":"Duplicate a file descriptor","y":"resource eio_dup2\n    ( mixed $fd\n   , mixed $fd2\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )","r":"eio_dup2() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Source stream, Socket resource, or numeric file descriptor"},{"t":"fd2","d":"Target stream, Socket resource, or numeric file descriptor"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_event_loop":{"s":"Polls libeio until all requests proceeded","y":"bool eio_event_loop\n    ( void\n   )","r":"eio_event_loop() returns TRUE on success or FALSE on error.","p":null},"eio_fallocate":{"s":"Allows the caller to directly manipulate the allocated disk\n  space for a file","y":"resource eio_fallocate\n    ( mixed $fd\n   , int $mode\n   , int $offset\n   , int $length\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )","r":"eio_fallocate() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor, e.g. returned by eio_open()."},{"t":"mode","d":"Currently only one flag is supported for mode:\n     EIO_FALLOC_FL_KEEP_SIZE (the same as POSIX constant\n       FALLOC_FL_KEEP_SIZE)."},{"t":"offset","d":"Specifies start of the byte range."},{"t":"length","d":"Specifies length the byte range."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_fchmod":{"s":"Change file permissions.","y":"resource eio_fchmod\n    ( mixed $fd\n   , int $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_fchmod() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor, e.g. returned by eio_open()."},{"t":"mode","d":"The new permissions. E.g. 0644."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_fdatasync":{"s":"Synchronize a file&#039;s in-core state with storage device.","y":"resource eio_fdatasync\n    ( mixed $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_fdatasync() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor, e.g. returned by eio_open()."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_fstat":{"s":"Get file status","y":"resource eio_fstat\n    ( mixed $fd\n   , int $pri\n   , callable $callback\n   [, mixed $data\n  ] )","r":"eio_busy() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_fstatvfs":{"s":"Get file system statistics","y":"resource eio_fstatvfs\n    ( mixed $fd\n   , int $pri\n   , callable $callback\n   [, mixed $data\n  ] )","r":"eio_fstatvfs() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"A file descriptor of a file within the mounted file system."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_fsync":{"s":"Synchronize a file&#039;s in-core state with storage device","y":"resource eio_fsync\n    ( mixed $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_fsync() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_futime":{"s":"Change file last access and modification times","y":"resource eio_futime\n    ( mixed $fd\n   , float $atime\n   , float $mtime\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )","r":"eio_futime() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor, e.g. returned by eio_open()"},{"t":"atime","d":"Access time"},{"t":"mtime","d":"Modification time"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_get_event_stream":{"s":"Get stream representing a variable used in internal communications with libeio.","y":"mixed eio_get_event_stream\n    ( void\n   )","r":"eio_get_event_stream() returns stream on success;\n   otherwise, NULL","p":null},"eio_get_last_error":{"s":"Returns string describing the last error associated with a request resource","y":"string eio_get_last_error\n    ( resource $req\n   )","r":"eio_get_last_error() returns string describing the last error associated with the request resource specified by req.","p":[{"t":"req","d":"The request resource"}]},"eio_grp":{"s":"Createsa request group.","y":"resource eio_grp\n    ( callable $callback\n   [, string $data = NULL\n  ] )","r":"eio_grp() returns request group resource on success or FALSE on error.","p":[{"t":"callback","d":""}]},"eio_grp_add":{"s":"Adds a request to the request group.","y":"void eio_grp_add\n    ( resource $grp\n   , resource $req\n   )","r":"eio_grp_add() doesn&#039;t return a value.","p":[{"t":"grp","d":"The request group resource returned by eio_grp()"},{"t":"req","d":"The request resource"}]},"eio_grp_cancel":{"s":"Cancels a request group","y":"void eio_grp_cancel\n    ( resource $grp\n   )","r":"No value is returned.","p":[{"t":"grp","d":"The request group resource returned by eio_grp()."}]},"eio_grp_limit":{"s":"Set group limit","y":"void eio_grp_limit\n    ( resource $grp\n   , int $limit\n   )","r":"No value is returned.","p":[{"t":"grp","d":"The request group resource."},{"t":"limit","d":"Number of requests in the group."}]},"eio_init":{"s":"(Re-)initialize Eio","y":"void eio_init\n    ( void\n   )","r":"No value is returned.","p":null},"eio_link":{"s":"Create a hardlink for file","y":"resource eio_link\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"","p":[{"t":"path","d":"Source file path."},{"t":"new_path","d":"Target file path."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_lstat":{"s":"Get file status","y":"resource eio_lstat\n    ( string $path\n   , int $pri\n   , callable $callback\n   [, mixed $data = NULL\n  ] )","r":"eio_lstat() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"The file path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_mkdir":{"s":"Create directory","y":"resource eio_mkdir\n    ( string $path\n   , int $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_mkdir() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path for the new directory."},{"t":"mode","d":"Access mode, e.g. 0755"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_mknod":{"s":"Create a special or ordinary file.","y":"resource eio_mknod\n    ( string $path\n   , int $mode\n   , int $dev\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )","r":"eio_mknod() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path for the new node(file)."},{"t":"mode","d":"Specifies both the permissions to use and the type of node to be\n      created. It should be a combination (using bitwise OR) of one of the\n      file types listed below and the permissions for the new node(e.g. 0640).\n\n      Possible file types are: EIO_S_IFREG(regular file),\n      EIO_S_IFCHR(character file),\n      EIO_S_IFBLK(block special file),\n      EIO_S_IFIFO(FIFO - named pipe) and\n      EIO_S_IFSOCK(UNIX domain socket).\n\n      To specify permissions EIO_S_I* constants could be\n      used."},{"t":"dev","d":"If  the  file type is EIO_S_IFCHR or\n     EIO_S_IFBLK then dev specifies the major and minor\n     numbers of the newly created device special file. Otherwise\n     dev ignored. See mknod(2) man page for\n     details."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_nop":{"s":"Does nothing, except go through the whole request cycle.","y":"resource eio_nop\n    ([ int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_nop() returns request resource on success or FALSE on error.","p":[{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_npending":{"s":"Returns number of finished, but unhandled requests","y":"int eio_npending\n    ( void\n   )","r":"eio_npending() returns number of finished, but unhandled\n   requests.","p":null},"eio_nready":{"s":"Returns number of not-yet handled requests","y":"int eio_nready\n    ( void\n   )","r":"eio_nready() returns number of not-yet handled requests","p":null},"eio_nreqs":{"s":"Returns number of requests to be processed","y":"int eio_nreqs\n    ( void\n   )","r":"eio_nreqs() returns number of requests to be processed.","p":null},"eio_nthreads":{"s":"Returns number of threads currently in use","y":"int eio_nthreads\n    ( void\n   )","r":"eio_nthreads() returns number of threads currently in\n   use.","p":null},"eio_open":{"s":"Opens a file","y":"resource eio_open\n    ( string $path\n   , int $flags\n   , int $mode\n   , int $pri\n   , callable $callback\n   [, mixed $data = NULL\n  ] )","r":"eio_open() returns file descriptor in\n   result argument of callback\n   on success; otherwise, result is equal to -1.","p":[{"t":"path","d":"Path of the file to be opened.\n     Warning\n     In some SAPIs(e.g. PHP-FPM) it could fail, if you\n     don&#039;t specify full path."}]},"eio_poll":{"s":"Can be to be called whenever there are pending requests that need finishing.","y":"int eio_poll\n    ( void\n   )","r":"If any request invocation returns a non-zero value, returns that value.\n  Otherwise, it returns 0.","p":null},"eio_read":{"s":"Read from a file descriptor at given offset.","y":"resource eio_read\n    ( mixed $fd\n   , int $length\n   , int $offset\n   , int $pri\n   , callable $callback\n   [, mixed $data = NULL\n  ] )","r":"eio_read() stores read bytes in\n  result argument of callback\n  function.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor"},{"t":"length","d":"Maximum number of bytes to read."},{"t":"offset","d":"Offset within the file."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_readahead":{"s":"Perform file readahead into page cache","y":"resource eio_readahead\n    ( mixed $fd\n   , int $offset\n   , int $length\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_readahead() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor"},{"t":"offset","d":"Starting point from which data is to be read."},{"t":"length","d":"Number of bytes to be read."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_readdir":{"s":"Reads through a whole directory","y":"resource eio_readdir\n    ( string $path\n   , int $flags\n   , int $pri\n   , callable $callback\n   [, string $data = NULL\n  ] )","r":"eio_readdir() returns request resource on success, or\n   FALSE on error. Sets result argument of\n   callback function according to\n   flags:","p":[{"t":"path","d":"Directory path."},{"t":"flags","d":"Combination of EIO_READDIR_* constants."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_readlink":{"s":"Read value of a symbolic link.","y":"resource eio_readlink\n    ( string $path\n   , int $pri\n   , callable $callback\n   [, string $data = NULL\n  ] )","r":"eio_readlink() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Source symbolic link path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_realpath":{"s":"Get the canonicalized absolute pathname.","y":"resource eio_realpath\n    ( string $path\n   , int $pri\n   , callable $callback\n   [, string $data = NULL\n  ] )","r":"","p":[{"t":"path","d":"Short pathname"},{"t":"pri","d":""},{"t":"callback","d":""},{"t":"data","d":""}]},"eio_rename":{"s":"Change the name or location of a file.","y":"resource eio_rename\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_rename() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Source path"},{"t":"new_path","d":"Target path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_rmdir":{"s":"Remove a directory","y":"resource eio_rmdir\n    ( string $path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_rmdir() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Directory path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_seek":{"s":"Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence","y":"resource eio_seek\n    ( mixed $fd\n   , int $offset\n   , int $whence\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_seek() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor"},{"t":"offset","d":"Starting point from which data is to be read."},{"t":"length","d":"Number of bytes to be read."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_sendfile":{"s":"Transfer data between file descriptors","y":"resource eio_sendfile\n    ( mixed $out_fd\n   , mixed $in_fd\n   , int $offset\n   , int $length\n   [, int $pri\n   [, callable $callback\n   [, string $data\n  ]]] )","r":"eio_sendfile() returns request resource on success or FALSE on error.","p":[{"t":"out_fd","d":"Output stream, Socket resource, or file descriptor. Should be opened for writing."},{"t":"in_fd","d":"Input stream, Socket resource, or file descriptor. Should be opened for reading."},{"t":"offset","d":"Offset within the source file."},{"t":"length","d":"Number of bytes to copy."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_set_max_idle":{"s":"Set maximum number of idle threads.","y":"void eio_set_max_idle\n    ( int $nthreads\n   )","r":"No value is returned.","p":[{"t":"nthreads","d":"Number of idle threads."}]},"eio_set_max_parallel":{"s":"Set maximum parallel threads","y":"void eio_set_max_parallel\n    ( int $nthreads\n   )","r":"No value is returned.","p":[{"t":"nthreads","d":"Number of parallel threads"}]},"eio_set_max_poll_reqs":{"s":"Set maximum number of requests processed in a poll.","y":"void eio_set_max_poll_reqs\n    ( int $nreqs\n   )","r":"No value is returned.","p":[{"t":"nreqs","d":"Number of requests"}]},"eio_set_max_poll_time":{"s":"Set maximum poll time","y":"void eio_set_max_poll_time\n    ( float $nseconds\n   )","r":"No value is returned.","p":[{"t":"nseconds","d":"Number of seconds"}]},"eio_set_min_parallel":{"s":"Set minimum parallel thread number","y":"void eio_set_min_parallel\n    ( string $nthreads\n   )","r":"No value is returned.","p":[{"t":"nthreads","d":"Number of parallel threads."}]},"eio_stat":{"s":"Get file status","y":"resource eio_stat\n    ( string $path\n   , int $pri\n   , callable $callback\n   [, mixed $data = NULL\n  ] )","r":"eio_stat() returns request resource on success or\n   FALSE on error. On success assigns result argument of\n   callback to an array.","p":[{"t":"path","d":"The file path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_statvfs":{"s":"Get file system statistics","y":"resource eio_statvfs\n    ( string $path\n   , int $pri\n   , callable $callback\n   [, mixed $data\n  ] )","r":"eio_statvfs() returns request resource on success or\n  FALSE on error. On success assigns result argument of\n  callback to an array.","p":[{"t":"path","d":"Pathname of any file within the mounted file system"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_symlink":{"s":"Create a symbolic link","y":"resource eio_symlink\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )","r":"eio_symlink() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Source path"},{"t":"new_path","d":"Target path"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_sync":{"s":"Commit buffer cache to disk","y":"resource eio_sync\n    ([ int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_sync() returns request resource on success or FALSE on error.","p":null},"eio_syncfs":{"s":"Calls Linux&#039; syncfs syscall, if available","y":"resource eio_syncfs\n    ( mixed $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_syncfs() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"File descriptor"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_sync_file_range":{"s":"Sync a file segment with disk","y":"resource eio_sync_file_range\n    ( mixed $fd\n   , int $offset\n   , int $nbytes\n   , int $flags\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_sync_file_range() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"File descriptor"},{"t":"offset","d":"The starting byte of the file range to be synchronized"},{"t":"nbytes","d":"Specifies the length of the range to be synchronized, in bytes. If\n     nbytes is zero, then all bytes from offset through\n     to the end of file are synchronized."},{"t":"flags","d":"A bit-mask. Can include any of the following values:\n     EIO_SYNC_FILE_RANGE_WAIT_BEFORE,\n     EIO_SYNC_FILE_RANGE_WRITE,\n     EIO_SYNC_FILE_RANGE_WAIT_AFTER. These flags have\n     the same meaning as their SYNC_FILE_RANGE_*\n     counterparts(see SYNC_FILE_RANGE(2) man page)."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_truncate":{"s":"Truncate a file","y":"resource eio_truncate\n    ( string $path\n   [, int $offset = 0\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )","r":"eio_busy() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"File path"},{"t":"offset","d":"Offset from beginning of the file."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_unlink":{"s":"Delete a name and possibly the file it refers to","y":"resource eio_unlink\n    ( string $path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_unlink() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path to file"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_utime":{"s":"Change file last access and modification times.","y":"resource eio_utime\n    ( string $path\n   , float $atime\n   , float $mtime\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]] )","r":"eio_utime() returns request resource on success or FALSE on error.","p":[{"t":"path","d":"Path to the file."},{"t":"atime","d":"Access time"},{"t":"mtime","d":"Modification time"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"eio_write":{"s":"Write to file","y":"resource eio_write\n    ( mixed $fd\n   , string $str\n   [, int $length = 0\n   [, int $offset = 0\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]]]] )","r":"eio_write() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor, e.g. returned by eio_open()"},{"t":"str","d":"Source string"},{"t":"length","d":"Maximum number of bytes to write."},{"t":"offset","d":"Offset from the beginning of file."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"empty":{"s":"Determine whether a variable is empty","y":"bool empty\n    ( mixed $var\n   )","r":"Returns FALSE if var exists and has a non-empty, non-zero value.\n   Otherwise returns TRUE.","p":[{"t":"var","d":"Variable to be checked"}]},"enchant_broker_describe":{"s":"Enumerates the Enchant providers","y":"array enchant_broker_describe\n    ( resource $broker\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"}]},"enchant_broker_dict_exists":{"s":"Whether a dictionary exists or not. Using non-empty tag","y":"bool enchant_broker_dict_exists\n    ( resource $broker\n   , string $tag\n   )","r":"Returns TRUE when the tag exist or FALSE when not.","p":[{"t":"broker","d":"Broker resource"},{"t":"tag","d":"non-empty tag in the LOCALE format, ex: us_US, ch_DE, etc."}]},"enchant_broker_free":{"s":"Free the broker resource and its dictionnaries","y":"bool enchant_broker_free\n    ( resource $broker\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"}]},"enchant_broker_free_dict":{"s":"Free a dictionary resource","y":"bool enchant_broker_free_dict\n    ( resource $dict\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dict","d":"Dictionary resource."}]},"enchant_broker_get_error":{"s":"Returns the last error of the broker","y":"string enchant_broker_get_error\n    ( resource $broker\n   )","r":"Return the msg string if an error was found or FALSE","p":[{"t":"broker","d":"Broker resource."}]},"enchant_broker_init":{"s":"create a new broker object capable of requesting","y":"resource enchant_broker_init\n    ( void\n   )","r":"Returns a broker resource on success or FALSE.","p":null},"enchant_broker_list_dicts":{"s":"Returns a list of available dictionaries","y":"mixed enchant_broker_list_dicts\n    ( resource $broker\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"}]},"enchant_broker_request_dict":{"s":"create a new dictionary using a tag","y":"resource enchant_broker_request_dict\n    ( resource $broker\n   , string $tag\n   )","r":"Returns a dictionary resource on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"},{"t":"tag","d":"A tag describing the locale, for example en_US, de_DE"}]},"enchant_broker_request_pwl_dict":{"s":"creates a dictionary using a PWL file","y":"resource enchant_broker_request_pwl_dict\n    ( resource $broker\n   , string $filename\n   )","r":"Returns a dictionary resource on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"},{"t":"filename","d":"Path to the PWL file."}]},"enchant_broker_set_ordering":{"s":"Declares a preference of dictionaries to use for the language","y":"bool enchant_broker_set_ordering\n    ( resource $broker\n   , string $tag\n   , string $ordering\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"broker","d":"Broker resource"},{"t":"tag","d":"Language tag. The special &quot;*&quot; tag can be used as a language tag\n       to declare a default ordering for any language that does not\n       explicitly declare an ordering."},{"t":"ordering","d":"Comma delimited list of provider names"}]},"enchant_dict_add_to_personal":{"s":"add a word to personal word list","y":"void enchant_dict_add_to_personal\n    ( resource $dict\n   , string $word\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"The word to add"}]},"enchant_dict_add_to_session":{"s":"add &#039;word&#039; to this spell-checking session","y":"void enchant_dict_add_to_session\n    ( resource $dict\n   , string $word\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"The word to add"}]},"enchant_dict_check":{"s":"Check whether a word is correctly spelled or not","y":"bool enchant_dict_check\n    ( resource $dict\n   , string $word\n   )","r":"Returns TRUE if the word is spelled correctly, FALSE if not.","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"The word to check"}]},"enchant_dict_describe":{"s":"Describes an individual dictionary","y":"mixed enchant_dict_describe\n    ( resource $dict\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dict","d":"Dictionary resource"}]},"enchant_dict_get_error":{"s":"Returns the last error of the current spelling-session","y":"string enchant_dict_get_error\n    ( resource $dict\n   )","r":"Returns the error message as string or FALSE if no error occurred.","p":[{"t":"dict","d":"Dictinaray resource"}]},"enchant_dict_is_in_session":{"s":"whether or not &#039;word&#039; exists in this spelling-session","y":"bool enchant_dict_is_in_session\n    ( resource $dict\n   , string $word\n   )","r":"Returns TRUE if the word exists or FALSE","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"The word to lookup"}]},"enchant_dict_quick_check":{"s":"Check the word is correctly spelled and provide suggestions","y":"bool enchant_dict_quick_check\n    ( resource $dict\n   , string $word\n   [, array &$suggestions\n  ] )","r":"Returns TRUE if the word is correctly spelled or FALSE","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"The word to check"},{"t":"suggestions","d":"If the word is not correctly spelled, this variable will\n       contain an array of suggestions."}]},"enchant_dict_store_replacement":{"s":"Add a correction for a word","y":"void enchant_dict_store_replacement\n    ( resource $dict\n   , string $mis\n   , string $cor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dict","d":"Dictionary resource"},{"t":"mis","d":"The work to fix"},{"t":"cor","d":"The correct word"}]},"enchant_dict_suggest":{"s":"Will return a list of values if any of those pre-conditions are not met","y":"array enchant_dict_suggest\n    ( resource $dict\n   , string $word\n   )","r":"Will returns an array of suggestions if the word is bad spelled.","p":[{"t":"dict","d":"Dictionary resource"},{"t":"word","d":"Word to use for the suggestions."}]},"ereg":{"s":"Regular expression match","y":"int ereg\n    ( string $pattern\n   , string $string\n   [, array &$regs\n  ] )","r":"Returns the length of the matched string if a match for\n   pattern was found in string,\n   or FALSE if no matches were found or an error occurred.","p":[{"t":"pattern","d":"Case sensitive regular expression."},{"t":"string","d":"The input string."},{"t":"regs","d":"If matches are found for parenthesized substrings of\n       pattern and the function is called with the\n       third argument regs, the matches will be stored\n       in the elements of the array regs."}]},"eregi":{"s":"Case insensitive regular expression match","y":"int eregi\n    ( string $pattern\n   , string $string\n   [, array &$regs\n  ] )","r":"Returns the length of the matched string if a match for\n   pattern was found in string,\n   or FALSE if no matches were found or an error occurred.","p":[{"t":"pattern","d":"Case insensitive regular expression."},{"t":"string","d":"The input string."},{"t":"regs","d":"If matches are found for parenthesized substrings of\n       pattern and the function is called with the\n       third argument regs, the matches will be stored\n       in the elements of the array regs."}]},"ereg_replace":{"s":"Replace regular expression","y":"string ereg_replace\n    ( string $pattern\n   , string $replacement\n   , string $string\n   )","r":"The modified string is returned. If no matches are found in \n   string, then it will be returned unchanged.","p":[{"t":"pattern","d":"A POSIX extended regular expression."},{"t":"replacement","d":"If pattern contains parenthesized substrings,\n       replacement may contain substrings of the form\n       \\digit, which will be\n       replaced by the text matching the digit&#039;th parenthesized substring; \n       \\0 will produce the entire contents of string.\n       Up to nine substrings may be used. Parentheses may be nested, in which\n       case they are counted by the opening parenthesis."},{"t":"string","d":"The input string."}]},"error_get_last":{"s":"Get the last occurred error","y":"array error_get_last\n    ( void\n   )","r":"Returns an associative array describing the last error with keys &quot;type&quot;,\n   &quot;message&quot;, &quot;file&quot; and &quot;line&quot;. If the error has been caused by a PHP\n   internal function then the &quot;message&quot; begins with its name.\n   Returns NULL if there hasn&#039;t been an error yet.","p":null},"error_log":{"s":"Send an error message to the defined error handling routines","y":"bool error_log\n    ( string $message\n   [, int $message_type = 0\n   [, string $destination\n   [, string $extra_headers\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"message","d":"The error message that should be logged."},{"t":"message_type","d":"Says where the error should go. The possible message types are as \n       follows:"},{"t":"destination","d":"The destination. Its meaning depends on the \n       message_type parameter as described above."},{"t":"extra_headers","d":"The extra headers. It&#039;s used when the message_type\n       parameter is set to 1.\n       This message type uses the same internal function as \n       mail() does."}]},"error_reporting":{"s":"Sets which PHP errors are reported","y":"int error_reporting\n    ([ int $level\n  ] )","r":"Returns the old error_reporting\n   level or the current level if no level parameter is\n   given.","p":[{"t":"level","d":"The new error_reporting\n       level. It takes on either a bitmask, or named constants. Using named \n       constants is strongly encouraged to ensure compatibility for future \n       versions. As error levels are added, the range of integers increases, \n       so older integer-based error levels will not always behave as expected."}]},"escapeshellarg":{"s":"Escape a string to be used as a shell argument","y":"string escapeshellarg\n    ( string $arg\n   )","r":"The escaped string.","p":[{"t":"arg","d":"The argument that will be escaped."}]},"escapeshellcmd":{"s":"Escape shell metacharacters","y":"string escapeshellcmd\n    ( string $command\n   )","r":"The escaped string.","p":[{"t":"command","d":"The command that will be escaped."}]},"eval":{"s":"Evaluate a string as PHP code","y":"mixed eval\n    ( string $code\n   )","r":"eval() returns NULL unless \n   return is called in the evaluated code, in which case\n   the value passed to return is returned. If there is a\n   parse error in the evaluated code, eval() returns\n   FALSE and execution of the following code continues normally. It is\n   not possible to catch a parse error in eval()\n   using set_error_handler().","p":[{"t":"code","d":"Valid PHP code to be evaluated."}]},"event_add":{"s":"Add an event to the set of monitored events","y":"bool event_add\n    ( resource $event\n   [, int $timeout = -1\n  ] )","r":"event_add() returns TRUE on success or FALSE on error.","p":[{"t":"event","d":"Valid event resource."},{"t":"timeout","d":"Optional timeout (in microseconds)."}]},"event_base_free":{"s":"Destroy event base","y":"void event_base_free\n    ( resource $event_base\n   )","r":"","p":[{"t":"event_base","d":"Valid event base resource."}]},"event_base_loop":{"s":"Handle events","y":"int event_base_loop\n    ( resource $event_base\n   [, int $flags = 0\n  ] )","r":"event_base_loop() returns 0 on success, -1 on error and\n   1 if no events were registered.","p":[{"t":"event_base","d":"Valid event base resource."},{"t":"flags","d":"Optional parameter, which can take any combination of \n       EVLOOP_ONCE and EVLOOP_NONBLOCK."}]},"event_base_loopbreak":{"s":"Abort event loop","y":"bool event_base_loopbreak\n    ( resource $event_base\n   )","r":"event_base_loopbreak() returns TRUE on success or FALSE on error.","p":[{"t":"event_base","d":"Valid event base resource."}]},"event_base_loopexit":{"s":"Exit loop after a time","y":"bool event_base_loopexit\n    ( resource $event_base\n   [, int $timeout = -1\n  ] )","r":"event_base_loopexit() returns TRUE on success or FALSE on error.","p":[{"t":"event_base","d":"Valid event base resource."},{"t":"timeout","d":"Optional timeout parameter (in microseconds)."}]},"event_base_new":{"s":"Create and initialize new event base","y":"resource event_base_new\n    ( void\n   )","r":"event_base_new() returns valid event base resource on\n   success or FALSE on error.","p":null},"event_base_priority_init":{"s":"Set the number of event priority levels","y":"bool event_base_priority_init\n    ( resource $event_base\n   , int $npriorities\n   )","r":"event_base_priority_init() returns TRUE on success or FALSE on error.","p":[{"t":"event_base","d":"Valid event base resource."},{"t":"npriorities","d":"The number of event priority levels."}]},"event_base_set":{"s":"Associate event base with an event","y":"bool event_base_set\n    ( resource $event\n   , resource $event_base\n   )","r":"event_base_set() returns TRUE on success or FALSE on error.","p":[{"t":"event","d":"Valid event resource."},{"t":"event_base","d":"Valid event base resource."}]},"event_buffer_base_set":{"s":"Associate buffered event with an event base","y":"bool event_buffer_base_set\n    ( resource $bevent\n   , resource $event_base\n   )","r":"event_buffer_base_set() returns TRUE on success or FALSE on error.","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"event_base","d":"Valid event base resource."}]},"event_buffer_disable":{"s":"Disable a buffered event","y":"bool event_buffer_disable\n    ( resource $bevent\n   , int $events\n   )","r":"event_buffer_disable() returns TRUE on success or FALSE on error.","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"events","d":"Any combination of EV_READ and\n       EV_WRITE."}]},"event_buffer_enable":{"s":"Enable a buffered event","y":"bool event_buffer_enable\n    ( resource $bevent\n   , int $events\n   )","r":"event_buffer_enable() returns TRUE on success or FALSE on error.","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"events","d":"Any combination of EV_READ and\n       EV_WRITE."}]},"event_buffer_fd_set":{"s":"Change a buffered event file descriptor","y":"void event_buffer_fd_set\n    ( resource $bevent\n   , resource $fd\n   )","r":"","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"fd","d":"Valid PHP stream, must be castable to file descriptor."}]},"event_buffer_free":{"s":"Destroy buffered event","y":"void event_buffer_free\n    ( resource $bevent\n   )","r":"","p":[{"t":"bevent","d":"Valid buffered event resource."}]},"event_buffer_new":{"s":"Create new buffered event","y":"resource event_buffer_new\n    ( resource $stream\n   , mixed $readcb\n   , mixed $writecb\n   , mixed $errorcb\n   [, mixed $arg\n  ] )","r":"event_buffer_new() returns new buffered event resource\n   on success or FALSE on error.","p":[{"t":"stream","d":"Valid PHP stream resource. Must be castable to file descriptor."},{"t":"readcb","d":"Callback to invoke where there is data to read, or NULL if\n       no callback is desired."},{"t":"writecb","d":"Callback to invoke where the descriptor is ready for writing, \n       or NULL if no callback is desired."},{"t":"errorcb","d":"Callback to invoke where there is an error on the descriptor, cannot be\n       NULL."},{"t":"arg","d":"An argument that will be passed to each of the callbacks (optional)."}]},"event_buffer_priority_set":{"s":"Assign a priority to a buffered event","y":"bool event_buffer_priority_set\n    ( resource $bevent\n   , int $priority\n   )","r":"event_buffer_priority_set() returns TRUE on success or FALSE on error.","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"priority","d":"Priority level. Cannot be less than zero and cannot exceed maximum\n       priority level of the event base (see event_base_priority_init())."}]},"event_buffer_read":{"s":"Read data from a buffered event","y":"string event_buffer_read\n    ( resource $bevent\n   , int $data_size\n   )","r":"","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"data_size","d":"Data size in bytes."}]},"event_buffer_set_callback":{"s":"Set or reset callbacks for a buffered event","y":"bool event_buffer_set_callback\n    ( resource $event\n   , mixed $readcb\n   , mixed $writecb\n   , mixed $errorcb\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"event","d":"Valid buffered event resource."},{"t":"readcb","d":"Callback to invoke where there is data to read, or NULL if\n       no callback is desired."},{"t":"writecb","d":"Callback to invoke where the descriptor is ready for writing, \n       or NULL if no callback is desired."},{"t":"errorcb","d":"Callback to invoke where there is an error on the descriptor, cannot be\n       NULL."},{"t":"arg","d":"An argument that will be passed to each of the callbacks (optional)."}]},"event_buffer_timeout_set":{"s":"Set read and write timeouts for a buffered event","y":"void event_buffer_timeout_set\n    ( resource $bevent\n   , int $read_timeout\n   , int $write_timeout\n   )","r":"","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"read_timeout","d":"Read timeout (in seconds)."},{"t":"write_timeout","d":"Write timeout (in seconds)."}]},"event_buffer_watermark_set":{"s":"Set the watermarks for read and write events","y":"void event_buffer_watermark_set\n    ( resource $bevent\n   , int $events\n   , int $lowmark\n   , int $highmark\n   )","r":"","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"events","d":"Any combination of EV_READ and\n       EV_WRITE."},{"t":"lowmark","d":"Low watermark."},{"t":"highmark","d":"High watermark."}]},"event_del":{"s":"Remove an event from the set of monitored events","y":"bool event_del\n    ( resource $event\n   )","r":"event_del() returns TRUE on success or FALSE on error.","p":[{"t":"event","d":"Valid event resource."}]},"event_new":{"s":"Create new event","y":"resource event_new\n    ( void\n   )","r":"event_new() returns a new event resource on success or FALSE on error.","p":null},"event_set":{"s":"Prepare an event","y":"bool event_set\n    ( resource $event\n   , mixed $fd\n   , int $events\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"event_set() returns TRUE on success or FALSE on error.","p":[{"t":"event","d":"Valid event resource."},{"t":"fd","d":"Valid PHP stream resource. The stream must be castable to file\n       descriptor, so you most likely won&#039;t be able to use any of filtered\n       streams."},{"t":"events","d":"A set of flags indicating the desired event, can be\n       EV_READ and\/or EV_WRITE.\n       The additional flag EV_PERSIST makes the event\n       to persist until event_del() is called, otherwise\n       the callback is invoked only once."},{"t":"callback","d":"Callback function to be called when the matching event occurs."},{"t":"arg","d":"Optional callback parameter."}]},"exec":{"s":"Execute an external program","y":"string exec\n    ( string $command\n   [, array &$output\n   [, int &$return_var\n  ]] )","r":"The last line from the result of the command.  If you need to execute a \n   command and have all the data from the command passed directly back without \n   any interference, use the passthru() function.","p":[{"t":"command","d":"The command that will be executed."},{"t":"output","d":"If the output argument is present, then the\n       specified array will be filled with every line of output from the\n       command.  Trailing whitespace, such as \\n, is not\n       included in this array.  Note that if the array already contains some\n       elements, exec() will append to the end of the array.\n       If you do not want the function to append elements, call\n       unset() on the array before passing it to\n       exec()."},{"t":"return_var","d":"If the return_var argument is present\n       along with the output argument, then the\n       return status of the executed command will be written to this\n       variable."}]},"exif_imagetype":{"s":"Determine the type of an image","y":"int exif_imagetype\n     ( string $filename\n    )","r":"When a correct signature is found, the appropriate constant value will be\n    returned otherwise the return value is FALSE. The return value is the\n    same value that getimagesize() returns in index 2 but\n    exif_imagetype() is much faster.","p":[{"t":"filename","d":""}]},"exif_read_data":{"s":"Reads the EXIF headers from JPEG or TIFF","y":"array exif_read_data\n    ( string $filename\n   [, string $sections = NULL\n   [, bool $arrays = false\n   [, bool $thumbnail = false\n  ]]] )","r":"It returns an associative array where the array indexes are \n   the header names and the array values are the values associated with \n   those headers. If no data can be returned, \n   exif_read_data() will return FALSE.","p":[{"t":"filename","d":"The name of the image file being read.  This cannot be an\n       URL."},{"t":"sections","d":"Is a comma separated list of sections that need to be present in file \n       to produce a result array.  If none of the requested \n       sections could be found the return value is FALSE.\n       \n        \n         \n          \n           FILE\n           FileName, FileSize, FileDateTime, SectionsFound\n          \n\n          \n           COMPUTED\n           \n            html, Width, Height, IsColor, and more if available.  Height and \n            Width are computed the same way getimagesize()\n            does so their values must not be part of any header returned. \n            Also, html is a height\/width text string to be used inside normal \n            HTML.\n           \n          \n\n          \n           ANY_TAG\n           Any information that has a Tag e.g. IFD0, EXIF, ...\n          \n\n          \n           IFD0\n           \n            All tagged data of IFD0. In normal imagefiles this contains\n            image size and so forth.\n           \n          \n\n          \n           THUMBNAIL\n           \n            A file is supposed to contain a thumbnail if it has a second IFD.\n            All tagged information about the embedded thumbnail is stored in \n            this section.\n           \n          \n\n          \n           COMMENT\n           Comment headers of JPEG images.\n          \n\n          \n           EXIF\n           \n            The EXIF section is a sub section of IFD0. It contains\n            more detailed information about an image. Most of these entries\n            are digital camera related."},{"t":"arrays","d":"Specifies whether or not each section becomes an array. The \n       sections COMPUTED,\n       THUMBNAIL, and COMMENT \n       always become arrays as they may contain values whose names conflict\n       with other sections."},{"t":"thumbnail","d":"When set to TRUE the thumbnail itself is read.  Otherwise, only the\n       tagged data is read."}]},"exif_thumbnail":{"s":"Retrieve the embedded thumbnail of a TIFF or JPEG image","y":"string exif_thumbnail\n    ( string $filename\n   [, int &$width\n   [, int &$height\n   [, int &$imagetype\n  ]]] )","r":"Returns the embedded thumbnail, or FALSE if the image contains no \n   thumbnail.","p":[{"t":"filename","d":"The name of the image file being read.  This image contains an\n       embedded thumbnail."},{"t":"width","d":"The return width of the returned thumbnail."},{"t":"height","d":"The returned height of the returned thumbnail."},{"t":"imagetype","d":"The returned image type of the returned thumbnail.  This is either\n       TIFF or JPEG."}]},"exit":{"s":"Output a message and terminate the current script","y":"void exit\n    ([ string $status\n  ] )","r":"No value is returned.","p":[{"t":"status","d":"If status is a string, this function prints the\n       status just before exiting."}]},"exp":{"s":"Calculates the exponent of e","y":"float exp\n     ( float $arg\n    )","r":"&#039;e&#039; raised to the power of arg","p":[{"t":"arg","d":"The argument to process"}]},"expect_expectl":{"s":"Waits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an EOF is seen","y":"int expect_expectl\n    ( resource $expect\n   , array $cases\n   [, array &$match\n  ] )","r":"Returns value associated with the pattern that was matched.","p":[{"t":"expect","d":"An Expect stream, previously opened with\n       expect_popen()."},{"t":"cases","d":"An array of expect cases. Each expect case is an indexed array,\n       as described in the following table:\n       \n        Expect Case Array\n        \n         \n          \n           Index Key\n           Value Type\n           Description\n           Is Mandatory\n           Default Value\n          \n\n         \n\n         \n          \n           0\n           string\n           pattern, that will be matched against the output from the stream\n           yes\n           &nbsp;\n          \n\n          \n           1\n           mixed\n           value, that will be returned by this function, if the pattern matches\n           yes\n           &nbsp;\n          \n\n          \n           2\n           integer\n           \n            pattern type, one of:\n            EXP_GLOB,\n            EXP_EXACT\n            or\n            EXP_REGEXP\n           \n           no\n           EXP_GLOB"}]},"expect_popen":{"s":"Execute command via Bourne shell, and open the PTY stream to\n  the process","y":"resource expect_popen\n    ( string $command\n   )","r":"Returns an open PTY stream to the processes stdio,\n   stdout, and stderr.","p":[{"t":"command","d":"Command to execute."}]},"explode":{"s":"Split a string by string","y":"array explode\n    ( string $delimiter\n   , string $string\n   [, int $limit\n  ] )","r":"Returns an array of strings\n   created by splitting the string parameter on\n   boundaries formed by the delimiter.","p":[{"t":"delimiter","d":"The boundary string."},{"t":"string","d":"The input string."},{"t":"limit","d":"If limit is set and positive, the returned array will contain\n       a maximum of limit elements with the last\n       element containing the rest of string."}]},"expm1":{"s":"Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero","y":"float expm1\n    ( float $arg\n   )","r":"&#039;e&#039; to the power of arg minus one","p":[{"t":"arg","d":"The argument to process"}]},"extract":{"s":"Import variables into the current symbol table from an array","y":"int extract\n    ( array &$array\n   [, int $flags = EXTR_OVERWRITE\n   [, string $prefix = NULL\n  ]] )","r":"Returns the number of variables successfully imported into the symbol\n   table.","p":[{"t":"array","d":"An associative array. This function treats keys as variable names and\n       values as variable values.  For each key\/value pair it will create a\n       variable in the current symbol table, subject to\n       flags and prefix parameters."},{"t":"flags","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"prefix","d":""},{"t":"prefix","d":""},{"t":"prefix","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"array","d":""},{"t":"prefix","d":"Note that prefix is only required if\n       flags is EXTR_PREFIX_SAME,\n       EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID\n       or EXTR_PREFIX_IF_EXISTS. If\n       the prefixed result is not a valid variable name, it is not\n       imported into the symbol table. Prefixes are automatically separated from\n       the array key by an underscore character."}]},"ezmlm_hash":{"s":"Calculate the hash value needed by EZMLM","y":"int ezmlm_hash\n    ( string $addr\n   )","r":"The hash value of addr.","p":[{"t":"addr","d":"The email address that&#039;s being hashed."}]},"fam_cancel_monitor":{"s":"Terminate monitoring","y":"bool fam_cancel_monitor\n    ( resource $fam\n   , resource $fam_monitor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"fam_monitor","d":"A resource returned by one of the fam_monitor_XXX\n       functions"}]},"fam_close":{"s":"Close FAM connection","y":"void fam_close\n    ( resource $fam\n   )","r":"No value is returned.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"}]},"fam_monitor_collection":{"s":"Monitor a collection of files in a directory for changes","y":"resource fam_monitor_collection\n    ( resource $fam\n   , string $dirname\n   , int $depth\n   , string $mask\n   )","r":"Returns a monitoring resource or FALSE on errors.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"dirname","d":"Directory path to the monitored files"},{"t":"depth","d":"The maximum search depth starting from this\n       directory"},{"t":"mask","d":"A shell pattern mask restricting the file names\n       to look for"}]},"fam_monitor_directory":{"s":"Monitor a directory for changes","y":"resource fam_monitor_directory\n    ( resource $fam\n   , string $dirname\n   )","r":"Returns a monitoring resource or FALSE on errors.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"dirname","d":"Path to the monitored directory"}]},"fam_monitor_file":{"s":"Monitor a regular file for changes","y":"resource fam_monitor_file\n    ( resource $fam\n   , string $filename\n   )","r":"Returns a monitoring resource or FALSE on errors.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"filename","d":"Path to the monitored file"}]},"fam_next_event":{"s":"Get next pending FAM event","y":"array fam_next_event\n    ( resource $fam\n   )","r":"Returns an array that contains a FAM event code in the\n   &#039;code&#039; element, the path of the file this event applies\n   to in the &#039;filename&#039; element and optionally a hostname\n   in the &#039;hostname&#039; element.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"}]},"fam_pending":{"s":"Check for pending FAM events","y":"int fam_pending\n    ( resource $fam\n   )","r":"Returns non-zero if events are available to be fetched using\n   fam_next_event(), zero otherwise.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"}]},"fam_resume_monitor":{"s":"Resume suspended monitoring","y":"bool fam_resume_monitor\n    ( resource $fam\n   , resource $fam_monitor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"fam_monitor","d":"A resource returned by one of the fam_monitor_XXX\n       functions"}]},"fam_suspend_monitor":{"s":"Temporarily suspend monitoring","y":"bool fam_suspend_monitor\n    ( resource $fam\n   , resource $fam_monitor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fam","d":"A resource representing a connection to the FAM service returned by\n       fam_open()"},{"t":"fam_monitor","d":"A resource returned by one of the fam_monitor_XXX\n       functions"}]},"fann_cascadetrain_on_data":{"s":"Trains on an entire dataset, for a period of time using the Cascade2 training algorithm","y":"bool fann_cascadetrain_on_data\n    ( resource $ann\n   , resource $data\n   , int $max_neurons\n   , int $neurons_between_reports\n   , float $desired_error\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"data","d":"Neural network training data resource."},{"t":"max_neurons","d":"The maximum number of neurons to be added to neural network."},{"t":"neurons_between_reports","d":"The number of neurons between printing a status report. A value of zero means no reports should be printed."},{"t":"desired_error","d":"The desired fann_get_MSE() or fann_get_bit_fail(),\n      depending on which stop function is chosen by fann_set_train_stop_function()"}]},"fann_cascadetrain_on_file":{"s":"Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm.","y":"bool fann_cascadetrain_on_file\n    ( resource $ann\n   , string $filename\n   , int $max_neurons\n   , int $neurons_between_reports\n   , float $desired_error\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"filename","d":"The maximum number of neurons to be added to neural network"},{"t":"max_neurons","d":"The number of neurons between printing a status report to stdout.\n      A value of zero means no reports should be printed."},{"t":"neurons_between_reports","d":"The number of neurons between printing a status report. A value of zero means no reports should be printed."},{"t":"desired_error","d":"The desired fann_get_MSE() or fann_get_bit_fail(),\n      depending on which stop function is chosen by fann_set_train_stop_function()."}]},"fann_clear_scaling_params":{"s":"Clears scaling parameters","y":"bool fann_clear_scaling_params\n    ( resource $ann\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_create_from_file":{"s":"Constructs a backpropagation neural network from a configuration file","y":"resource fann_create_from_file\n    ( string $configuration_file\n   )","r":" Returns a neural network resource on success, or FALSE on error.","p":[{"t":"configuration_file","d":"The configuration file path."}]},"fann_create_shortcut":{"s":"Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections","y":"reference fann_create_shortcut\n    ( int $num_layers\n   , int $num_neurons1\n   , int $num_neurons2\n   [, int $...\n  ] )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"num_neurons1","d":"Number of neurons in the first layer."},{"t":"num_neurons2","d":"Number of neurons in the second layer."},{"t":"...","d":"Number of neurons in other layers."}]},"fann_create_shortcut_array":{"s":"Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections","y":"resource fann_create_shortcut_array\n    ( int $num_layers\n   , array $layers\n   )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"layers","d":"An array of layers sizes."}]},"fann_create_sparse":{"s":"Creates a standard backpropagation neural network, which is not fully connected","y":"ReturnType fann_create_sparse\n    ( float $connection_rate\n   , int $num_layers\n   , int $num_neurons1\n   , int $num_neurons2\n   [, int $...\n  ] )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"connection_rate","d":"The connection rate controls how many connections there will be in the network. If the connection rate\n      is set to 1, the network will be fully connected, but if it is set to 0.5 only half of the connections\n      will be set. A connection rate of 1 will yield the same result as fann_create_standard()."},{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"num_neurons1","d":"Number of neurons in the first layer."},{"t":"num_neurons2","d":"Number of neurons in the second layer."},{"t":"...","d":"Number of neurons in other layers."}]},"fann_create_sparse_array":{"s":"Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes","y":"ReturnType fann_create_sparse_array\n    ( float $connection_rate\n   , int $num_layers\n   , array $layers\n   )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"connection_rate","d":"The connection rate controls how many connections there will be in the network. If the connection rate\n      is set to 1, the network will be fully connected, but if it is set to 0.5 only half of the connections\n      will be set. A connection rate of 1 will yield the same result as fann_create_standard()."},{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"layers","d":"An array of layer sizes."}]},"fann_create_standard":{"s":"Creates a standard fully connected backpropagation neural network","y":"resource fann_create_standard\n    ( int $num_layers\n   , int $num_neurons1\n   , int $num_neurons2\n   [, int $...\n  ] )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"num_neurons1","d":"Number of neurons in the first layer."},{"t":"num_neurons2","d":"Number of neurons in the second layer."},{"t":"...","d":"Number of neurons in other layers."}]},"fann_create_standard_array":{"s":"Creates a standard fully connected backpropagation neural network using an array of layer sizes","y":"resource fann_create_standard_array\n    ( int $num_layers\n   , array $layers\n   )","r":"Returns a neural network resource on success, or FALSE on error.","p":[{"t":"num_layers","d":"The total number of layers including the input and the output layer."},{"t":"layers","d":"An array of layer sizes."}]},"fann_create_train":{"s":"Creates an empty training data struct","y":"resource fann_create_train\n    ( int $num_data\n   , int $num_input\n   , int $num_output\n   )","r":" Returns a train data resource on success, or FALSE on error.","p":[{"t":"num_data","d":"The number of training data"},{"t":"num_input","d":"The number of inputs per training data"},{"t":"num_output","d":"The number of ouputs per training data"}]},"fann_create_train_from_callback":{"s":"Creates the training data struct from a user supplied function","y":"resource fann_create_train_from_callback\n    ( int $num_data\n   , int $num_input\n   , int $num_output\n   , collable $user_function\n   )","r":" Returns a train data resource on success, or FALSE on error.","p":[{"t":"num_data","d":"The number of training data"},{"t":"num_input","d":"The number of inputs per training data"},{"t":"num_output","d":"The number of ouputs per training data"},{"t":"user_function","d":"The user supplied function with following parameters:\n      \n       num - The number of the training data set\n       num_input - The number of inputs per training data\n       num - The number of ouputs per training dataThe number of inputs per training data"}]},"fann_descale_input":{"s":"Scale data in input vector after get it from ann based on previously calculated parameters","y":"bool fann_descale_input\n    ( resource $ann\n   , array $input_vector\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"input_vector","d":"Input vector that will be descaled"}]},"fann_descale_output":{"s":"Scale data in output vector after get it from ann based on previously calculated parameters","y":"bool fann_descale_output\n    ( resource $ann\n   , array $output_vector\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"output_vector","d":"Output vector that will be descaled"}]},"fann_descale_train":{"s":"Descale input and output data based on previously calculated parameters","y":"bool fann_descale_train\n    ( resource $ann\n   , resource $train_data\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."}]},"fann_destroy":{"s":"Destroys the entire network and properly freeing all the associated memory","y":"bool fann_destroy\n    ( resource $ann\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_destroy_train":{"s":"Destructs the training data","y":"bool fann_destroy_train\n    ( resource $train_data\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"train_data","d":"Neural network training data resource."}]},"fann_duplicate_train_data":{"s":"Returns an exact copy of a fann train data","y":"resource fann_duplicate_train_data\n    ( resource $data\n   )","r":" Returns a train data resource on success, or FALSE on error.","p":[{"t":"data","d":"Neural network training data resource."}]},"fann_get_activation_function":{"s":"Returns the activation function","y":"int fann_get_activation_function\n    ( resource $ann\n   , int $layer\n   , int $neuron\n   )","r":"Learning functions constant or -1\n   if the neuron is not defined in the neural network, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."},{"t":"layer","d":"Layer number."},{"t":"neuron","d":"Neuron number."}]},"fann_get_activation_steepness":{"s":"Returns the activation steepness for supplied neuron and layer number","y":"float fann_get_activation_steepness\n    ( resource $ann\n   , int $layer\n   , int $neuron\n   )","r":"The activation steepness for the neuron or -1 if the neuron is not defined in the neural network, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."},{"t":"layer","d":"Layer number"},{"t":"neuron","d":"Neuron number"}]},"fann_get_bias_array":{"s":"Get the number of bias in each layer in the network","y":"array fann_get_bias_array\n    ( resource $ann\n   )","r":"An array of numbers of bias in each layer","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_bit_fail":{"s":"The number of fail bits","y":"int fann_get_bit_fail\n    ( resource $ann\n   )","r":"The number of bits fail, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_bit_fail_limit":{"s":"Returns the bit fail limit used during training","y":"float fann_get_bit_fail_limit\n    ( resource $ann\n   )","r":"The bit fail limit, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_activation_functions":{"s":"Returns the cascade activation functions","y":"array fann_get_cascade_activation_functions\n    ( resource $ann\n   )","r":"The cascade activation functions, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_activation_functions_count":{"s":"Returns the number of cascade activation functions","y":"int fann_get_cascade_activation_functions_count\n    ( resource $ann\n   )","r":"The number of cascade activation functions, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_activation_steepnesses":{"s":"Returns the cascade activation steepnesses","y":"array fann_get_cascade_activation_steepnesses\n    ( resource $ann\n   )","r":"The cascade activation steepnesses, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_activation_steepnesses_count":{"s":"The number of activation steepnesses","y":"int fann_get_cascade_activation_steepnesses_count\n    ( resource $ann\n   )","r":"The number of activation steepnesses, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_candidate_change_fraction":{"s":"Returns the cascade candidate change fraction","y":"float fann_get_cascade_candidate_change_fraction\n    ( resource $ann\n   )","r":"The cascade candidate change fraction, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_candidate_limit":{"s":"Return the candidate limit","y":"float fann_get_cascade_candidate_limit\n    ( resource $ann\n   )","r":"The candidate limit, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_candidate_stagnation_epochs":{"s":"Returns the number of cascade candidate stagnation epochs","y":"float fann_get_cascade_candidate_stagnation_epochs\n    ( resource $ann\n   )","r":"The number of cascade candidate stagnation epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_max_out_epochs":{"s":"Returns the maximum out epochs","y":"int fann_get_cascade_max_out_epochs\n    ( resource $ann\n   )","r":"The maximum out epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_min_cand_epochs":{"s":"Returns the minimum candidate epochs","y":"int fann_get_cascade_min_cand_epochs\n    ( resource $ann\n   )","r":"The minimum candidate epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_min_out_epochs":{"s":"Returns the minimum out epochs","y":"int fann_get_cascade_min_out_epochs\n    ( resource $ann\n   )","r":"The minimum out epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_num_candidates":{"s":"Returns the number of candidates used during training","y":"int fann_get_cascade_num_candidates\n    ( resource $ann\n   )","r":"The number of candidates used during training, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_num_candidate_groups":{"s":"Returns the number of candidate groups","y":"int fann_get_cascade_num_candidate_groups\n    ( resource $ann\n   )","r":"The number of candidate groups, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_output_stagnation_epochs":{"s":"Returns the number of cascade output stagnation epochs","y":"int fann_get_cascade_output_stagnation_epochs\n    ( resource $ann\n   )","r":"The number of cascade output stagnation epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_cascade_weight_multiplier":{"s":"Returns the weight multiplier","y":"float fann_get_cascade_weight_multiplier\n    ( resource $ann\n   )","r":"The weight multiplier, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_connection_array":{"s":"Get connections in the network","y":"array fann_get_connection_array\n    ( resource $ann\n   )","r":"An array of connections in the network","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_connection_rate":{"s":"Get the connection rate used when the network was created","y":"float fann_get_connection_rate\n    ( resource $ann\n   )","r":"The connection rate used when the network was created, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_errno":{"s":"Returns the last error number","y":"int fann_get_errno\n    ( resource $errdat\n   )","r":"The error number, or FALSE on error.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."}]},"fann_get_errstr":{"s":"Returns the last errstr","y":"string fann_get_errstr\n    ( resource $errdat\n   )","r":"The last error string, or FALSE on error.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."}]},"fann_get_layer_array":{"s":"Get the number of neurons in each layer in the network","y":"array fann_get_layer_array\n    ( resource $ann\n   )","r":"An array of numbers of neurons in each leayer","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_learning_momentum":{"s":"Returns the learning momentum","y":"float fann_get_learning_momentum\n    ( resource $ann\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_learning_rate":{"s":"Returns the learning rate","y":"float fann_get_learning_rate\n    ( resource $ann\n   )","r":"The learning rate, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_network_type":{"s":"Get the type of neural network it was created as","y":"int fann_get_network_type\n    ( resource $ann\n   )","r":"Network type constant, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_num_input":{"s":"Get the number of input neurons","y":"int fann_get_num_input\n    ( resource $ann\n   )","r":"Number of input neurons, or FALSE on error","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_num_layers":{"s":"Get the number of layers in the neural network","y":"int fann_get_num_layers\n    ( resource $ann\n   )","r":"The number of leayers in the neural network, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_num_output":{"s":"Get the number of output neurons","y":"int fann_get_num_output\n    ( resource $ann\n   )","r":"Number of output neurons, or FALSE on error","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_quickprop_decay":{"s":"Returns the decay which is a factor that weights should decrease in each iteration during quickprop training","y":"float fann_get_quickprop_decay\n    ( resource $ann\n   )","r":"The decay, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_quickprop_mu":{"s":"Returns the mu factor","y":"float fann_get_quickprop_mu\n    ( resource $ann\n   )","r":"The mu factor, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_rprop_decrease_factor":{"s":"Returns the increase factor used during RPROP training","y":"float fann_get_rprop_decrease_factor\n    ( resource $ann\n   )","r":"The decrease factor, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_rprop_delta_max":{"s":"Returns the maximum step-size","y":"float fann_get_rprop_delta_max\n    ( resource $ann\n   )","r":"The maximum step-size, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_rprop_delta_min":{"s":"Returns the minimum step-size","y":"float fann_get_rprop_delta_min\n    ( resource $ann\n   )","r":"The minimum step-size, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_rprop_delta_zero":{"s":"Returns the initial step-size","y":"ReturnType fann_get_rprop_delta_zero\n    ( resource $ann\n   )","r":"The initial step-size, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_rprop_increase_factor":{"s":"Returns the increase factor used during RPROP training","y":"float fann_get_rprop_increase_factor\n    ( resource $ann\n   )","r":"The increase factor, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_sarprop_step_error_shift":{"s":"Returns the sarprop step error shift","y":"float fann_get_sarprop_step_error_shift\n    ( resource $ann\n   )","r":"The sarprop step error shift , or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_sarprop_step_error_threshold_factor":{"s":"Returns the sarprop step error threshold factor","y":"float fann_get_sarprop_step_error_threshold_factor\n    ( resource $ann\n   )","r":"The sarprop step error threshold factor, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_sarprop_temperature":{"s":"Returns the sarprop temperature","y":"float fann_get_sarprop_temperature\n    ( resource $ann\n   )","r":"The sarprop temperature, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_sarprop_weight_decay_shift":{"s":"Returns the sarprop weight decay shift","y":"float fann_get_sarprop_weight_decay_shift\n    ( resource $ann\n   )","r":"The sarprop weight decay shift, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_total_connections":{"s":"Get the total number of connections in the entire network","y":"int fann_get_total_connections\n    ( resource $ann\n   )","r":"Total number of connections in the entire network, or FALSE on error","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_total_neurons":{"s":"Get the total number of neurons in the entire network","y":"int fann_get_total_neurons\n    ( resource $ann\n   )","r":"Total number of neurons in the entire network, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_training_algorithm":{"s":"Returns the training algorithm","y":"int fann_get_training_algorithm\n    ( resource $ann\n   )","r":"Training algorithm constant, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_train_error_function":{"s":"Returns the error function used during training","y":"int fann_get_train_error_function\n    ( resource $ann\n   )","r":"The error function constant, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_get_train_stop_function":{"s":"Returns the stop function used during training","y":"int fann_get_train_stop_function\n    ( resource $ann\n   )","r":"The stop function constant, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"fann_init_weights":{"s":"Initialize the weights using Widrow + Nguyen\u2019s algorithm","y":"bool fann_init_weights\n    ( resource $ann\n   , resource $train_data\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."}]},"fann_length_train_data":{"s":"Returns the number of training patterns in the train data","y":"int fann_length_train_data\n    ( resource $data\n   )","r":"Number of elements in the train data resource, or FALSE on error.","p":[{"t":"data","d":"Neural network training data resource."}]},"fann_merge_train_data":{"s":"Merges the train data","y":"resource fann_merge_train_data\n    ( resource $data1\n   , resource $data2\n   )","r":"New merged train data resource, or FALSE on error.","p":[{"t":"data1","d":"Neural network training data resource."},{"t":"data2","d":"Neural network training data resource."}]},"fann_num_input_train_data":{"s":"Returns the number of inputs in each of the training patterns in the train data","y":"int fann_num_input_train_data\n    ( resource $data\n   )","r":"The number of inputs, or FALSE on error.","p":[{"t":"data","d":"Neural network training data resource."}]},"fann_num_output_train_data":{"s":"Returns the number of outputs in each of the training patterns in the train data","y":"int fann_num_output_train_data\n    ( resource $data\n   )","r":"The number of outputs, or FALSE on error.","p":[{"t":"data","d":"Neural network training data resource."}]},"fann_print_error":{"s":"Prints the error string","y":"void fann_print_error\n    ( string $errdat\n   )","r":"No value is returned.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."}]},"fann_randomize_weights":{"s":"Give each connection a random weight between min_weight and max_weight","y":"bool fann_randomize_weights\n    ( resource $ann\n   , float $min_weight\n   , float $max_weight\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"min_weight","d":"Minimum weight value"},{"t":"max_weight","d":"Maximum weight value"}]},"fann_read_train_from_file":{"s":"Reads a file that stores training data","y":"resource fann_read_train_from_file\n    ( string $filename\n   )","r":" Returns a train data resource on success, or FALSE on error.","p":[{"t":"filename","d":"The input file in the following format:"}]},"fann_reset_errno":{"s":"Resets the last error number","y":"void fann_reset_errno\n    ( resource $errdat\n   )","r":"No value is returned.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."}]},"fann_reset_errstr":{"s":"Resets the last error string","y":"void fann_reset_errstr\n    ( resource $errdat\n   )","r":"No value is returned.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."}]},"fann_run":{"s":"Will run input through the neural network","y":"array fann_run\n    ( resource $ann\n   , array $input\n   )","r":"Array of output values, or FALSE on error","p":[{"t":"ann","d":"Neural network resource."},{"t":"input","d":"Array of input values"}]},"fann_save":{"s":"Saves the entire network to a configuration file","y":"bool fann_save\n    ( resource $ann\n   , string $configuration_file\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"configuration_file","d":"The configuration file path."}]},"fann_save_train":{"s":"Save the training structure to a file","y":"bool fann_save_train\n    ( resource $data\n   , string $file_name\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"data","d":"Neural network training data resource."},{"t":"file_name","d":"The file name of the file where training data is saved to."}]},"fann_scale_input":{"s":"Scale data in input vector before feed it to ann based on previously calculated parameters","y":"bool fann_scale_input\n    ( resource $ann\n   , array $input_vector\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"input_vector","d":"Input vector that will be scaled"}]},"fann_scale_input_train_data":{"s":"Scales the inputs in the training data to the specified range","y":"bool fann_scale_input_train_data\n    ( resource $train_data\n   , float $new_min\n   , float $new_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"train_data","d":"Neural network training data resource."},{"t":"new_min","d":"New minimum after scaling inputs in training data."},{"t":"new_max","d":"New maximum after scaling inputs in training data."}]},"fann_scale_output":{"s":"Scale data in output vector before feed it to ann based on previously calculated parameters","y":"bool fann_scale_output\n    ( resource $ann\n   , array $output_vector\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"output_vector","d":"Output vector that will be scaled"}]},"fann_scale_output_train_data":{"s":"Scales the outputs in the training data to the specified range","y":"bool fann_scale_output_train_data\n    ( resource $train_data\n   , float $new_min\n   , float $new_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"train_data","d":"Neural network training data resource."},{"t":"new_min","d":"New minimum after scaling outputs in training data."},{"t":"new_max","d":"New maximum after scaling outputs in training data."}]},"fann_scale_train_data":{"s":"Scales the inputs and outputs in the training data to the specified range","y":"bool fann_scale_train_data\n    ( resource $train_data\n   , float $new_min\n   , float $new_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"train_data","d":"Neural network training data resource."},{"t":"new_min","d":"New minimum after scaling inputs and outputs in training data."},{"t":"new_max","d":"New maximum after scaling inputs and outputs in training data."}]},"fann_set_activation_function":{"s":"Sets the activation function for supplied neuron and layer","y":"bool fann_set_activation_function\n    ( resource $ann\n   , int $activation_function\n   , int $layer\n   , int $neuron\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_function","d":"The activation functions constant."},{"t":"layer","d":"Layer number."},{"t":"neuron","d":"Neuron number."}]},"fann_set_activation_function_hidden":{"s":"Sets the activation function for all of the hidden layers","y":"bool fann_set_activation_function_hidden\n    ( resource $ann\n   , int $activation_function\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_function","d":"The activation functions constant."}]},"fann_set_activation_function_layer":{"s":"Sets the activation function for all the neurons in the supplied layer.","y":"bool fann_set_activation_function_layer\n    ( resource $ann\n   , int $activation_function\n   , int $layer\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_function","d":"The activation functions constant."},{"t":"layer","d":"Layer number."}]},"fann_set_activation_function_output":{"s":"Sets the activation function for the output layer","y":"bool fann_set_activation_function_output\n    ( resource $ann\n   , int $activation_function\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_function","d":"The activation functions constant."}]},"fann_set_activation_steepness_hidden":{"s":"Sets the steepness of the activation steepness for all neurons in the all hidden layers","y":"bool fann_set_activation_steepness_hidden\n    ( resource $ann\n   , float $activation_steepness\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_steepness","d":"The activation steepness."}]},"fann_set_activation_steepness_layer":{"s":"Sets the activation steepness for all of the neurons in the supplied layer number","y":"bool fann_set_activation_steepness_layer\n    ( resource $ann\n   , float $activation_steepness\n   , int $layer\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_steepness","d":"The activation steepness."},{"t":"layer","d":"Layer number."}]},"fann_set_activation_steepness_output":{"s":"Sets the steepness of the activation steepness in the output layer","y":"bool fann_set_activation_steepness_output\n    ( resource $ann\n   , float $activation_steepness\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_steepness","d":"The activation steepness."}]},"fann_set_bit_fail_limit":{"s":"Set the bit fail limit used during training","y":"bool fann_set_bit_fail_limit\n    ( resource $ann\n   , float $bit_fail_limit\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"bit_fail_limit","d":"The bit fail limit."}]},"fann_set_callback":{"s":"Sets the callback function for use during training","y":"bool fann_set_callback\n    ( resource $ann\n   , collable $callback\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"callback","d":"The supplied callback function takes following parameters:\n      \n       ann - The neural network resource\n       train - The train data resource\n        or NULL if called from fann_train_on_file()\n       max_epochs - The maximum number of epochs the training should continue\n       epochs_between_reports - The number of epochs between calling this function\n       desired_error - The desired fann_get_MSE() or\n        fann_get_bit_fail(), depending on the stop function chosen by\n        fann_set_train_stop_function()\n       epochs - The current epoch"}]},"fann_set_cascade_activation_functions":{"s":"Sets the array of cascade candidate activation functions","y":"bool fann_set_cascade_activation_functions\n    ( resource $ann\n   , array $cascade_activation_functions\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_activation_functions","d":"The array of cascade candidate activation functions."}]},"fann_set_cascade_activation_steepnesses":{"s":"Sets the array of cascade candidate activation steepnesses","y":"bool fann_set_cascade_activation_steepnesses\n    ( resource $ann\n   , array $cascade_activation_steepnesses_count\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_activation_steepnesses_count","d":"The array of cascade candidate activation steepnesses."}]},"fann_set_cascade_candidate_change_fraction":{"s":"Sets the cascade candidate change fraction","y":"bool fann_set_cascade_candidate_change_fraction\n    ( resource $ann\n   , float $cascade_candidate_change_fraction\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_candidate_change_fraction","d":"The cascade candidate change fraction."}]},"fann_set_cascade_candidate_limit":{"s":"Sets the candidate limit","y":"bool fann_set_cascade_candidate_limit\n    ( resource $ann\n   , float $cascade_candidate_limit\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_candidate_limit","d":"The candidate limit."}]},"fann_set_cascade_candidate_stagnation_epochs":{"s":"Sets the number of cascade candidate stagnation epochs","y":"bool fann_set_cascade_candidate_stagnation_epochs\n    ( resource $ann\n   , int $cascade_candidate_stagnation_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_candidate_stagnation_epochs","d":"The number of cascade candidate stagnation epochs."}]},"fann_set_cascade_max_cand_epochs":{"s":"Sets the max candidate epochs","y":"bool fann_set_cascade_max_cand_epochs\n    ( resource $ann\n   , int $cascade_max_cand_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_max_cand_epochs","d":"The max candidate epochs."}]},"fann_set_cascade_max_out_epochs":{"s":"Sets the maximum out epochs","y":"bool fann_set_cascade_max_out_epochs\n    ( resource $ann\n   , int $cascade_max_out_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_max_out_epochs","d":"The maximum out epochs."}]},"fann_set_cascade_min_cand_epochs":{"s":"Sets the min candidate epochs","y":"bool fann_set_cascade_min_cand_epochs\n    ( resource $ann\n   , int $cascade_min_cand_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_min_cand_epochs","d":"The minimum candidate epochs."}]},"fann_set_cascade_min_out_epochs":{"s":"Sets the minimum out epochs","y":"bool fann_set_cascade_min_out_epochs\n    ( resource $ann\n   , int $cascade_min_out_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_min_out_epochs","d":"The minimum out epochs."}]},"fann_set_cascade_num_candidate_groups":{"s":"Sets the number of candidate groups","y":"bool fann_set_cascade_num_candidate_groups\n    ( resource $ann\n   , int $cascade_num_candidate_groups\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_num_candidate_groups","d":"The number of candidate groups."}]},"fann_set_cascade_output_change_fraction":{"s":"Sets the cascade output change fraction","y":"bool fann_set_cascade_output_change_fraction\n    ( resource $ann\n   , float $cascade_output_change_fraction\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_output_change_fraction","d":"The cascade output change fraction."}]},"fann_set_cascade_output_stagnation_epochs":{"s":"Sets the number of cascade output stagnation epochs","y":"bool fann_set_cascade_output_stagnation_epochs\n    ( resource $ann\n   , int $cascade_output_stagnation_epochs\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_output_stagnation_epochs","d":"The number of cascade output stagnation epochs."}]},"fann_set_cascade_weight_multiplier":{"s":"Sets the weight multiplier","y":"bool fann_set_cascade_weight_multiplier\n    ( resource $ann\n   , float $cascade_weight_multiplier\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"cascade_weight_multiplier","d":"The weight multiplier."}]},"fann_set_error_log":{"s":"Sets where the errors are logged to","y":"void fann_set_error_log\n    ( resource $errdat\n   , string $log_file\n   )","r":"No value is returned.","p":[{"t":"errdat","d":"Either neural network resource or neural network trainining data resource."},{"t":"log_file","d":"The log file path."}]},"fann_set_input_scaling_params":{"s":"Calculate input scaling parameters for future use based on training data","y":"bool fann_set_input_scaling_params\n    ( resource $ann\n   , resource $train_data\n   , float $new_input_min\n   , float $new_input_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."},{"t":"new_input_min","d":"The desired lower bound in input data after scaling (not strictly followed)"},{"t":"new_input_max","d":"The desired upper bound in input data after scaling (not strictly followed)"}]},"fann_set_learning_momentum":{"s":"Sets the learning momentum","y":"bool fann_set_learning_momentum\n    ( resource $ann\n   , float $learning_momentum\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"learning_momentum","d":"The learning momentum."}]},"fann_set_learning_rate":{"s":"Sets the learning rate","y":"bool fann_set_learning_rate\n    ( resource $ann\n   , float $learning_rate\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"learning_rate","d":"The learning rate."}]},"fann_set_output_scaling_params":{"s":"Calculate output scaling parameters for future use based on training data","y":"bool fann_set_output_scaling_params\n    ( resource $ann\n   , resource $train_data\n   , float $new_output_min\n   , float $new_output_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."},{"t":"new_output_min","d":"The desired lower bound in output data after scaling (not strictly followed)"},{"t":"new_output_max","d":"The desired upper bound in output data after scaling (not strictly followed)"}]},"fann_set_quickprop_decay":{"s":"Sets the quickprop decay factor","y":"bool fann_set_quickprop_decay\n    ( resource $ann\n   , float $quickprop_decay\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"quickprop_decay","d":"The quickprop decay factor."}]},"fann_set_quickprop_mu":{"s":"Sets the quickprop mu factor","y":"bool fann_set_quickprop_mu\n    ( resource $ann\n   , float $quickprop_mu\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"quickprop_mu","d":"The mu factor."}]},"fann_set_rprop_decrease_factor":{"s":"Sets the decrease factor used during RPROP training","y":"bool fann_set_rprop_decrease_factor\n    ( resource $ann\n   , float $rprop_decrease_factor\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"rprop_decrease_factor","d":"The decrease factor."}]},"fann_set_rprop_delta_max":{"s":"Sets the maximum step-size","y":"bool fann_set_rprop_delta_max\n    ( resource $ann\n   , float $rprop_delta_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"rprop_delta_max","d":"The maximum step-size."}]},"fann_set_rprop_delta_min":{"s":"Sets the minimum step-size","y":"bool fann_set_rprop_delta_min\n    ( resource $ann\n   , float $rprop_delta_min\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"rprop_delta_min","d":"The minimum step-size."}]},"fann_set_rprop_delta_zero":{"s":"Sets the initial step-size","y":"bool fann_set_rprop_delta_zero\n    ( resource $ann\n   , float $rprop_delta_zero\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"rprop_delta_zero","d":"The initial step-size."}]},"fann_set_rprop_increase_factor":{"s":"Sets the increase factor used during RPROP training","y":"bool fann_set_rprop_increase_factor\n    ( resource $ann\n   , float $rprop_increase_factor\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"rprop_increase_factor","d":"The increase factor."}]},"fann_set_sarprop_step_error_shift":{"s":"Sets the sarprop step error shift","y":"bool fann_set_sarprop_step_error_shift\n    ( resource $ann\n   , float $sarprop_step_error_shift\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"sarprop_step_error_shift","d":"The sarprop step error shift."}]},"fann_set_sarprop_step_error_threshold_factor":{"s":"Sets the sarprop step error threshold factor","y":"bool fann_set_sarprop_step_error_threshold_factor\n    ( resource $ann\n   , float $sarprop_step_error_threshold_factor\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"sarprop_step_error_threshold_factor","d":"The sarprop step error threshold factor."}]},"fann_set_sarprop_temperature":{"s":"Sets the sarprop temperature","y":"bool fann_set_sarprop_temperature\n    ( resource $ann\n   , float $sarprop_temperature\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"sarprop_temperature","d":"The sarprop temperature."}]},"fann_set_sarprop_weight_decay_shift":{"s":"Sets the sarprop weight decay shift","y":"bool fann_set_sarprop_weight_decay_shift\n    ( resource $ann\n   , float $sarprop_weight_decay_shift\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"sarprop_weight_decay_shift","d":"The sarprop weight decay shift."}]},"fann_set_scaling_params":{"s":"Calculate input and output scaling parameters for future use based on training data","y":"bool fann_set_scaling_params\n    ( resource $ann\n   , resource $train_data\n   , float $new_input_min\n   , float $new_input_max\n   , float $new_output_min\n   , float $new_output_max\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."},{"t":"new_input_min","d":"The desired lower bound in input data after scaling (not strictly followed)"},{"t":"new_input_max","d":"The desired upper bound in input data after scaling (not strictly followed)"},{"t":"new_output_min","d":"The desired lower bound in output data after scaling (not strictly followed)"},{"t":"new_output_max","d":"The desired upper bound in output data after scaling (not strictly followed)"}]},"fann_set_train_error_function":{"s":"Sets the error function used during training","y":"bool fann_set_train_error_function\n    ( resource $ann\n   , int $error_function\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"error_function","d":"The error function constant"}]},"fann_set_train_stop_function":{"s":"Sets the stop function used during training","y":"bool fann_set_train_stop_function\n    ( resource $ann\n   , int $stop_function\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"stop_function","d":"The stop function constant."}]},"fann_set_weight":{"s":"Set a connection in the network","y":"bool fann_set_weight\n    ( resource $ann\n   , int $from_neuron\n   , int $to_neuron\n   , float $weight\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"from_neuron","d":"The neuron where the connection starts"},{"t":"to_neuron","d":"The neuron where the connection ends"},{"t":"weight","d":"Connection weight"}]},"fann_shuffle_train_data":{"s":"Shuffles training data, randomizing the order","y":"bool fann_shuffle_train_data\n    ( resource $train_data\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"train_data","d":"Neural network training data resource."}]},"fann_subset_train_data":{"s":"Returns an copy of a subset of the train data","y":"resource fann_subset_train_data\n    ( resource $data\n   , int $pos\n   , int $length\n   )","r":" Returns a train data resource on success, or FALSE on error.","p":[{"t":"data","d":"Neural network training data resource."},{"t":"pos","d":"Starting position."},{"t":"length","d":"The number of copied elements."}]},"fann_test":{"s":"Test with a set of inputs, and a set of desired outputs","y":"bool fann_test\n    ( resource $ann\n   , array $input\n   , array $desired_output\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"input","d":"An array of inputs. This array must be exactly fann_get_num_input() long."},{"t":"desired_output","d":"An array of desired outputs. This array must be exactly fann_get_num_output() long."}]},"fann_test_data":{"s":"Test a set of training data and calculates the MSE for the training data","y":"float fann_test_data\n    ( resource $ann\n   , resource $data\n   )","r":"The updated MSE, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."},{"t":"data","d":"Neural network training data resource."}]},"fann_train":{"s":"Train one iteration with a set of inputs, and a set of desired outputs","y":"bool fann_train\n    ( resource $ann\n   , array $input\n   , array $desired_output\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"input","d":"An array of inputs. This array must be exactly fann_get_num_input() long."},{"t":"desired_output","d":"An array of desired outputs. This array must be exactly fann_get_num_output() long."}]},"fann_train_epoch":{"s":"Train one epoch with a set of training data","y":"float fann_train_epoch\n    ( resource $ann\n   , resource $data\n   )","r":"The MSE, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."},{"t":"data","d":"Neural network training data resource."}]},"fann_train_on_data":{"s":"Trains on an entire dataset for a period of time","y":"bool fann_train_on_data\n    ( resource $ann\n   , resource $data\n   , int $max_epochs\n   , int $epochs_between_reports\n   , float $desired_error\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"data","d":"Neural network training data resource."},{"t":"max_epochs","d":"The maximum number of epochs the training should continue"},{"t":"epochs_between_reports","d":"The number of epochs between calling a callback function. A value of zero means that user function is not called."},{"t":"desired_error","d":"The desired fann_get_MSE() or fann_get_bit_fail(), depending on the stop function\n      chosen by fann_set_train_stop_function()"}]},"fann_train_on_file":{"s":"Trains on an entire dataset, which is read from file, for a period of time","y":"bool fann_train_on_file\n    ( resource $ann\n   , string $filename\n   , int $max_epochs\n   , int $epochs_between_reports\n   , float $desired_error\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"filename","d":"The file containing train data"},{"t":"max_epochs","d":"The maximum number of epochs the training should continue"},{"t":"epochs_between_reports","d":"The number of epochs between calling a user function. A value of zero means that user function is not called."},{"t":"desired_error","d":"The desired fann_get_MSE() or fann_get_bit_fail(), depending on the stop function\n      chosen by fann_set_train_stop_function()"}]},"fastcgi_finish_request":{"s":"Flushes all response data to the client","y":"boolean fastcgi_finish_request\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"fbsql_affected_rows":{"s":"Get number of affected rows in previous FrontBase operation","y":"int fbsql_affected_rows\n    ([ resource $link_identifier\n  ] )","r":"If the last query failed, this function will return -1.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_autocommit":{"s":"Enable or disable autocommit","y":"bool fbsql_autocommit\n    ( resource $link_identifier\n   [, bool $OnOff\n  ] )","r":"Returns the current autocommit status, as a boolean.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"OnOff","d":"If this optional parameter is given the auto commit status will be\n       changed."}]},"fbsql_blob_size":{"s":"Get the size of a BLOB","y":"int fbsql_blob_size\n    ( string $blob_handle\n   [, resource $link_identifier\n  ] )","r":"Returns the BLOB size as an integer, or FALSE on error.","p":[{"t":"blob_handle","d":"A BLOB handle, returned by fbsql_create_blob()."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_change_user":{"s":"Change logged in user of the active connection","y":"bool fbsql_change_user\n    ( string $user\n   , string $password\n   [, string $database\n   [, resource $link_identifier\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"user","d":"The new user name."},{"t":"password","d":"The new user password."},{"t":"database","d":"If specified, this will be the default or current database after the\n       user has been changed."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_clob_size":{"s":"Get the size of a CLOB","y":"int fbsql_clob_size\n    ( string $clob_handle\n   [, resource $link_identifier\n  ] )","r":"Returns the CLOB size as an integer, or FALSE on error.","p":[{"t":"clob_handle","d":"A CLOB handle, returned by fbsql_create_clob()."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_close":{"s":"Close FrontBase connection","y":"bool fbsql_close\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_commit":{"s":"Commits a transaction to the database","y":"bool fbsql_commit\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_connect":{"s":"Open a connection to a FrontBase Server","y":"resource fbsql_connect\n    ([ string $hostname = ini_get(&quot;fbsql.default_host&quot;)\n   [, string $username = ini_get(&quot;fbsql.default_user&quot;)\n   [, string $password = ini_get(&quot;fbsql.default_password&quot;)\n  ]]] )","r":"Returns a positive FrontBase link identifier on success, or FALSE on\n   errors.","p":[{"t":"hostname","d":"The server host name."},{"t":"username","d":"The user name for the connection."},{"t":"password","d":"The password for the connection."}]},"fbsql_create_blob":{"s":"Create a BLOB","y":"string fbsql_create_blob\n    ( string $blob_data\n   [, resource $link_identifier\n  ] )","r":"Returns a resource handle to the newly created BLOB, which can be used\n   with insert and update commands to store the BLOB in the database.","p":[{"t":"blob_data","d":"The BLOB data."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_create_clob":{"s":"Create a CLOB","y":"string fbsql_create_clob\n    ( string $clob_data\n   [, resource $link_identifier\n  ] )","r":"Returns a resource handle to the newly created CLOB, which can be used\n   with insert and update commands to store the CLOB in the database.","p":[{"t":"clob_data","d":"The CLOB data."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_create_db":{"s":"Create a FrontBase database","y":"bool fbsql_create_db\n    ( string $database_name\n   [, resource $link_identifier\n   [, string $database_options\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name, as a string."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"database_options","d":""}]},"fbsql_database":{"s":"Get or set the database name used with a connection","y":"string fbsql_database\n    ( resource $link_identifier\n   [, string $database\n  ] )","r":"Returns the name of the database used with this connection.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"database","d":"The database name. If given, the default database of the connexion\n       will be changed to database."}]},"fbsql_data_seek":{"s":"Move internal result pointer","y":"bool fbsql_data_seek\n    ( resource $result\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"row_number","d":"The row number. Starts at 0."}]},"fbsql_db_query":{"s":"Send a FrontBase query","y":"resource fbsql_db_query\n    ( string $database\n   , string $query\n   [, resource $link_identifier\n  ] )","r":"Returns a positive FrontBase result identifier to the query result, or\n   FALSE on error.","p":[{"t":"database","d":"The database to be selected."},{"t":"query","d":"The SQL query to be executed."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_db_status":{"s":"Get the status for a given database","y":"int fbsql_db_status\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns an integer value with the current status. This can be one of the\n   following constants:\n   \n    \n     \n      FALSE - The exec handler for the host was invalid. This error will\n      occur when the link_identifier connects directly\n      to a database by using a port number. FBExec can be available on the\n      server but no connection has been made for it.\n     \n    \n    \n     \n      FBSQL_UNKNOWN - The Status is unknown.\n     \n    \n    \n     \n      FBSQL_STOPPED - The database is not running. Use\n      fbsql_start_db() to start the database.\n     \n    \n    \n     \n      FBSQL_STARTING - The database is starting.\n     \n    \n    \n     \n      FBSQL_RUNNING - The database is running and can be\n      used to perform SQL operations.\n     \n    \n    \n     \n      FBSQL_STOPPING - The database is stopping.\n     \n    \n    \n     \n      FBSQL_NOEXEC - FBExec is not running on the server\n      and it is not possible to get the status of the database.","p":[{"t":"database_name","d":"The database name."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_drop_db":{"s":"Drop (delete) a FrontBase database","y":"bool fbsql_drop_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name, as a string."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_error":{"s":"Returns the error message from previous operation","y":"string fbsql_error\n    ([ resource $link_identifier\n  ] )","r":"Returns the error text from the last fbsql function, or\n   &#039;&#039; (the empty string) if no error occurred.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_fetch_array":{"s":"Fetch a result row as an associative array, a numeric array, or both","y":"array fbsql_fetch_array\n    ( resource $result\n   [, int $result_type\n  ] )","r":"Returns an array that corresponds to the fetched row, or FALSE\n   if there are no more rows.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"result_type","d":"A constant and can take the following values: \n       FBSQL_ASSOC, FBSQL_NUM, or\n       FBSQL_BOTH."}]},"fbsql_fetch_field":{"s":"Get column information from a result and return as an object","y":"object fbsql_fetch_field\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns an object containing field information, or FALSE on errors.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0.\n       If not specified, the next field that wasn&#039;t yet retrieved by \n       fbsql_fetch_field() is retrieved."}]},"fbsql_fetch_lengths":{"s":"Get the length of each output in a result","y":"array fbsql_fetch_lengths\n    ( resource $result\n   )","r":"Returns an array, starting at offset 0, that corresponds to the lengths of\n   each field in the last row fetched by fbsql_fetch_row(),\n   or FALSE on error.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_fetch_object":{"s":"Fetch a result row as an object","y":"object fbsql_fetch_object\n    ( resource $result\n   )","r":"Returns an object with properties that correspond to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_fetch_row":{"s":"Get a result row as an enumerated array","y":"array fbsql_fetch_row\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row where each result\n   column is stored in an offset, starting at offset 0, or FALSE if there\n   are no more rows. ","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_field_flags":{"s":"Get the flags associated with the specified field in a result","y":"string fbsql_field_flags\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns the field flags of the specified field as a single word per flag\n   separated by a single space, so that you can split the returned value\n   using explode().","p":[{"t":"result","d":"A result pointer returned by fbsql_list_fields()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_field_len":{"s":"Returns the length of the specified field","y":"int fbsql_field_len\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns the length of the specified field.","p":[{"t":"result","d":"A result pointer returned by fbsql_list_fields()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_field_name":{"s":"Get the name of the specified field in a result","y":"string fbsql_field_name\n    ( resource $result\n   [, int $field_index\n  ] )","r":"Returns the name as a string, or FALSE if the field doesn&#039;t exist.","p":[{"t":"result","d":"A result pointer returned by fbsql_list_fields()."},{"t":"field_index","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_field_seek":{"s":"Set result pointer to a specified field offset","y":"bool fbsql_field_seek\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_field_table":{"s":"Get name of the table the specified field is in","y":"string fbsql_field_table\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns the name of the table, as a string.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_field_type":{"s":"Get the type of the specified field in a result","y":"string fbsql_field_type\n    ( resource $result\n   [, int $field_offset\n  ] )","r":"Returns the field type, as a string.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"field_offset","d":"The numerical offset of the field. The field index starts at 0."}]},"fbsql_free_result":{"s":"Free result memory","y":"bool fbsql_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_get_autostart_info":{"s":"","y":"\n   array fbsql_get_autostart_info\n    ([ resource $link_identifier\n  ] )","p":[{"t":"\nlink_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_hostname":{"s":"Get or set the host name used with a connection","y":"string fbsql_hostname\n    ( resource $link_identifier\n   [, string $host_name\n  ] )","r":"Returns the current host name used for the connection.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"host_name","d":"If provided, this will be the new connection host name."}]},"fbsql_list_dbs":{"s":"List databases available on a FrontBase server","y":"resource fbsql_list_dbs\n    ([ resource $link_identifier\n  ] )","r":"Returns a result pointer or FALSE on error.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_list_fields":{"s":"List FrontBase result fields","y":"resource fbsql_list_fields\n    ( string $database_name\n   , string $table_name\n   [, resource $link_identifier\n  ] )","r":"Returns a result pointer which can be used with the\n   fbsql_field_xxx functions, or FALSE on error.","p":[{"t":"database_name","d":"The database name."},{"t":"table_name","d":"The table name."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_list_tables":{"s":"List tables in a FrontBase database","y":"resource fbsql_list_tables\n    ( string $database\n   [, resource $link_identifier\n  ] )","r":"Returns a result pointer which can be used with the\n   fbsql_tablename() function to read the actual table\n   names, or FALSE on error.","p":[{"t":"database","d":"The database name."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_next_result":{"s":"Move the internal result pointer to the next result","y":"bool fbsql_next_result\n    ( resource $result\n   )","r":"Returns TRUE if an additional result set was available or FALSE\n   otherwise.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_num_fields":{"s":"Get number of fields in result","y":"int fbsql_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields, as an integer.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_num_rows":{"s":"Get number of rows in result","y":"int fbsql_num_rows\n    ( resource $result\n   )","r":"Returns the number of rows returned by the last SELECT statement.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_password":{"s":"Get or set the user password used with a connection","y":"string fbsql_password\n    ( resource $link_identifier\n   [, string $password\n  ] )","r":"Returns the current password used for the connection.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"password","d":"If provided, this will be the new connection password."}]},"fbsql_pconnect":{"s":"Open a persistent connection to a FrontBase Server","y":"resource fbsql_pconnect\n    ([ string $hostname = ini_get(&quot;fbsql.default_host&quot;)\n   [, string $username = ini_get(&quot;fbsql.default_user&quot;)\n   [, string $password = ini_get(&quot;fbsql.default_password&quot;)\n  ]]] )","r":"Returns a positive FrontBase persistent link identifier on success, or\n   FALSE on error.","p":[{"t":"hostname","d":"The server host name."},{"t":"username","d":"The user name for the connection."},{"t":"password","d":"The password for the connection."}]},"fbsql_query":{"s":"Send a FrontBase query","y":"resource fbsql_query\n    ( string $query\n   [, resource $link_identifier\n   [, int $batch_size\n  ]] )","r":"fbsql_query() returns TRUE (non-zero) or FALSE\n   to indicate whether or not the query succeeded.  A return value\n   of TRUE means that the query was legal and could be executed by\n   the server.  It does not indicate anything about the number of\n   rows affected or returned. It is perfectly possible for a query\n   to succeed but affect no rows or return no rows.","p":[{"t":"query","d":"The SQL query to be executed."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"batch_size","d":""}]},"fbsql_read_blob":{"s":"Read a BLOB from the database","y":"string fbsql_read_blob\n    ( string $blob_handle\n   [, resource $link_identifier\n  ] )","r":"Returns a string containing the specified BLOB data.","p":[{"t":"blob_handle","d":"A BLOB handle, returned by fbsql_create_blob()."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_read_clob":{"s":"Read a CLOB from the database","y":"string fbsql_read_clob\n    ( string $clob_handle\n   [, resource $link_identifier\n  ] )","r":"Returns a string containing the specified CLOB data.","p":[{"t":"clob_handle","d":"A CLOB handle, returned by fbsql_create_clob()."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_result":{"s":"Get result data","y":"mixed fbsql_result\n    ( resource $result\n   [, int $row\n   [, mixed $field\n  ]] )","r":"","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"row","d":""},{"t":"field","d":"Can be the field&#039;s offset, or the field&#039;s name, or the field&#039;s table\n       dot field&#039;s name (tablename.fieldname)."}]},"fbsql_rollback":{"s":"Rollback a transaction to the database","y":"bool fbsql_rollback\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_rows_fetched":{"s":"Get the number of rows affected by the last statement","y":"int fbsql_rows_fetched\n    ( resource $result\n   )","r":"Returns the number of rows, as an integer.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"fbsql_select_db":{"s":"Select a FrontBase database","y":"bool fbsql_select_db\n    ([ string $database_name\n   [, resource $link_identifier\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the database to be selected."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_set_characterset":{"s":"Change input\/output character set","y":"void fbsql_set_characterset\n    ( resource $link_identifier\n   , int $characterset\n   [, int $in_out_both\n  ] )","r":"No value is returned.","p":null},"fbsql_set_password":{"s":"Change the password for a given user","y":"bool fbsql_set_password\n    ( resource $link_identifier\n   , string $user\n   , string $password\n   , string $old_password\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"user","d":"The user name."},{"t":"password","d":"The new password to be set."},{"t":"old_password","d":"The old password to be replaced."}]},"fbsql_set_transaction":{"s":"Set the transaction locking and isolation","y":"void fbsql_set_transaction\n    ( resource $link_identifier\n   , int $locking\n   , int $isolation\n   )","r":"No value is returned.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"locking","d":"The type of locking to be set. It can be one of the following\n       constants: FBSQL_LOCK_DEFERRED, \n       FBSQL_LOCK_OPTIMISTIC,\n       or FBSQL_LOCK_PESSIMISTIC."},{"t":"isolation","d":"The type of isolation to be set. It can be one of the following\n       constants: FBSQL_ISO_READ_UNCOMMITTED, \n       FBSQL_ISO_READ_COMMITTED,\n       FBSQL_ISO_REPEATABLE_READ,\n       FBSQL_ISO_SERIALIZABLE,\n       or FBSQL_ISO_VERSIONED."}]},"fbsql_start_db":{"s":"Start a database on local or remote server","y":"bool fbsql_start_db\n    ( string $database_name\n   [, resource $link_identifier\n   [, string $database_options\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"database_options","d":""}]},"fbsql_stop_db":{"s":"Stop a database on local or remote server","y":"bool fbsql_stop_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name."},{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"fbsql_tablename":{"s":"Alias of fbsql_table_name()","y":"","r":"","p":null},"fbsql_table_name":{"s":"Get table name of field","y":"string fbsql_table_name\n    ( resource $result\n   , int $index\n   )","r":"Returns the name of the table, as a string.","p":[{"t":"result","d":"A result pointer returned by fbsql_list_tables()."},{"t":"index","d":"Integer index for the current table."}]},"fbsql_username":{"s":"Get or set the username for the connection","y":"string fbsql_username\n    ( resource $link_identifier\n   [, string $username\n  ] )","r":"Returns the current username used with the connection, as a string.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"username","d":"If provided, this is the new username to set."}]},"fbsql_warnings":{"s":"Enable or disable FrontBase warnings","y":"bool fbsql_warnings\n    ([ bool $OnOff\n  ] )","r":"Returns  TRUE if warnings is turned on, FALSE otherwise.","p":[{"t":"OnOff","d":"Whether to enable warnings or no."}]},"fclose":{"s":"Closes an open file pointer","y":"bool fclose\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to a file successfully\n       opened by fopen() or fsockopen()."}]},"fdf_add_doc_javascript":{"s":"Adds javascript code to the FDF document","y":"bool fdf_add_doc_javascript\n    ( resource $fdf_document\n   , string $script_name\n   , string $script_code\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"script_name","d":"The script name."},{"t":"script_code","d":"The script code. It is strongly suggested to use \\r\n       for linebreaks within the script code."}]},"fdf_add_template":{"s":"Adds a template into the FDF document","y":"bool fdf_add_template\n    ( resource $fdf_document\n   , int $newpage\n   , string $filename\n   , string $template\n   , int $rename\n   )","r":"","p":null},"fdf_close":{"s":"Close an FDF document","y":"void fdf_close\n    ( resource $fdf_document\n   )","r":"No value is returned.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"fdf_create":{"s":"Create a new FDF document","y":"resource fdf_create\n    ( void\n   )","r":"Returns a FDF document handle, or FALSE on error.","p":null},"fdf_enum_values":{"s":"Call a user defined function for each document value ","y":"bool fdf_enum_values\n    ( resource $fdf_document\n   , callable $function\n   [, mixed $userdata\n  ] )","r":"","p":null},"fdf_errno":{"s":"Return error code for last fdf operation","y":"int fdf_errno\n    ( void\n   )","r":"Returns the error code as an integer, or zero if there was no errors.","p":null},"fdf_error":{"s":"Return error description for FDF error code","y":"string fdf_error\n    ([ int $error_code = -1\n  ] )","r":"Returns the error message as a string, or the string \n   no error if nothing went wrong.","p":[{"t":"error_code","d":"An error code obtained with fdf_errno().\n       If not provided, this function uses the internal error code set by the\n       last operation."}]},"fdf_get_ap":{"s":"Get the appearance of a field","y":"bool fdf_get_ap\n    ( resource $fdf_document\n   , string $field\n   , int $face\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"field","d":""},{"t":"face","d":"The possible values are FDFNormalAP, \n       FDFRolloverAP and FDFDownAP."},{"t":"filename","d":"The appearance will be stored in this parameter."}]},"fdf_get_attachment":{"s":"Extracts uploaded file embedded in the FDF","y":"array fdf_get_attachment\n    ( resource $fdf_document\n   , string $fieldname\n   , string $savepath\n   )","r":"The returned array contains the following fields:\n   \n    \n     path - path were the file got stored\n    \n    \n     size - size of the stored file in bytes\n    \n    \n     type - mimetype if given in the FDF","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":""},{"t":"savepath","d":"May be the name of a plain file or an existing directory in which the\n       file is to be created under its original name. Any existing file under\n       the same name will be overwritten."}]},"fdf_get_encoding":{"s":"Get the value of the \/Encoding key","y":"string fdf_get_encoding\n    ( resource $fdf_document\n   )","r":"Returns the encoding as a string. An empty string is returned if the\n   default PDFDocEncoding\/Unicode scheme is used.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"fdf_get_file":{"s":"Get the value of the \/F key","y":"string fdf_get_file\n    ( resource $fdf_document\n   )","r":"Returns the key value, as a string.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"fdf_get_flags":{"s":"Gets the flags of a field","y":"int fdf_get_flags\n    ( resource $fdf_document\n   , string $fieldname\n   , int $whichflags\n   )","r":"","p":null},"fdf_get_opt":{"s":"Gets a value from the opt array of a field","y":"mixed fdf_get_opt\n    ( resource $fdf_document\n   , string $fieldname\n   [, int $element = -1\n  ] )","r":"","p":null},"fdf_get_status":{"s":"Get the value of the \/STATUS key","y":"string fdf_get_status\n    ( resource $fdf_document\n   )","r":"Returns the key value, as a string.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"fdf_get_value":{"s":"Get the value of a field","y":"mixed fdf_get_value\n    ( resource $fdf_document\n   , string $fieldname\n   [, int $which = -1\n  ] )","r":"Returns the field value.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"which","d":"Elements of an array field can be retrieved by passing this optional\n       parameter, starting at zero. For non-array fields, this parameter will\n       be ignored."}]},"fdf_header":{"s":"Sets FDF-specific output headers","y":"void fdf_header\n    ( void\n   )","r":"No value is returned.","p":null},"fdf_next_field_name":{"s":"Get the next field name","y":"string fdf_next_field_name\n    ( resource $fdf_document\n   [, string $fieldname\n  ] )","r":"Returns the field name as a string.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string. If not given, the first field will\n       be assumed."}]},"fdf_open":{"s":"Open a FDF document","y":"resource fdf_open\n    ( string $filename\n   )","r":"Returns a FDF document handle, or FALSE on error.","p":[{"t":"filename","d":"Path to the FDF file. This file must contain the data as returned from\n       a PDF form or created using fdf_create() and\n       fdf_save()."}]},"fdf_open_string":{"s":"Read a FDF document from a string","y":"resource fdf_open_string\n    ( string $fdf_data\n   )","r":"Returns a FDF document handle, or FALSE on error.","p":[{"t":"fdf_data","d":"The data as returned from a PDF form or created using \n       fdf_create() and \n       fdf_save_string()."}]},"fdf_remove_item":{"s":"Sets target frame for form","y":"bool fdf_remove_item\n    ( resource $fdf_document\n   , string $fieldname\n   , int $item\n   )","r":"","p":null},"fdf_save":{"s":"Save a FDF document","y":"bool fdf_save\n    ( resource $fdf_document\n   [, string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"filename","d":"If provided, the resulting FDF will be written in this parameter.\n       Otherwise, this function will write the FDF to the default PHP output\n       stream."}]},"fdf_save_string":{"s":"Returns the FDF document as a string","y":"string fdf_save_string\n    ( resource $fdf_document\n   )","r":"Returns the document as a string, or FALSE on error.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"fdf_set_ap":{"s":"Set the appearance of a field","y":"bool fdf_set_ap\n    ( resource $fdf_document\n   , string $field_name\n   , int $face\n   , string $filename\n   , int $page_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"field_name","d":""},{"t":"face","d":"The possible values FDFNormalAP,\n       FDFRolloverAP and\n       FDFDownAP."},{"t":"filename","d":""},{"t":"page_number","d":""}]},"fdf_set_encoding":{"s":"Sets FDF character encoding","y":"bool fdf_set_encoding\n    ( resource $fdf_document\n   , string $encoding\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"encoding","d":"The encoding name. The following values are supported: \n       &quot;Shift-JIS&quot;, &quot;UHC&quot;,\n       &quot;GBK&quot; and &quot;BigFive&quot;."}]},"fdf_set_flags":{"s":"Sets a flag of a field","y":"bool fdf_set_flags\n    ( resource $fdf_document\n   , string $fieldname\n   , int $whichFlags\n   , int $newFlags\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"whichFlags","d":""},{"t":"newFlags","d":""}]},"fdf_set_javascript_action":{"s":"Sets an javascript action of a field","y":"bool fdf_set_javascript_action\n    ( resource $fdf_document\n   , string $fieldname\n   , int $trigger\n   , string $script\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"trigger","d":""},{"t":"script","d":""}]},"fdf_set_on_import_javascript":{"s":"Adds javascript code to be executed when Acrobat opens the FDF","y":"bool fdf_set_on_import_javascript\n    ( resource $fdf_document\n   , string $script\n   , bool $before_data_import\n   )","r":"","p":null},"fdf_set_opt":{"s":"Sets an option of a field","y":"bool fdf_set_opt\n    ( resource $fdf_document\n   , string $fieldname\n   , int $element\n   , string $str1\n   , string $str2\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"element","d":""},{"t":"str1","d":""},{"t":"str2","d":""}]},"fdf_set_status":{"s":"Set the value of the \/STATUS key","y":"bool fdf_set_status\n    ( resource $fdf_document\n   , string $status\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"status","d":""}]},"fdf_set_submit_form_action":{"s":"Sets a submit form action of a field","y":"bool fdf_set_submit_form_action\n    ( resource $fdf_document\n   , string $fieldname\n   , int $trigger\n   , string $script\n   , int $flags\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"trigger","d":""},{"t":"script","d":""},{"t":"flags","d":""}]},"fdf_set_target_frame":{"s":"Set target frame for form display","y":"bool fdf_set_target_frame\n    ( resource $fdf_document\n   , string $frame_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"frame_name","d":"The frame name, as a string."}]},"fdf_set_value":{"s":"Set the value of a field","y":"bool fdf_set_value\n    ( resource $fdf_document\n   , string $fieldname\n   , mixed $value\n   [, int $isName\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"fieldname","d":"Name of the FDF field, as a string."},{"t":"value","d":"This parameter will be stored as a string unless it is an array. In\n       this case all array elements will be stored as a value array."},{"t":"isName","d":""}]},"fdf_set_version":{"s":"Sets version number for a FDF file ","y":"bool fdf_set_version\n    ( resource $fdf_document\n   , string $version\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"version","d":"The version number. For the current FDF toolkit 5.0, this may be\n       either 1.2, 1.3 or\n       1.4."}]},"fflush":{"s":"Flushes the output to a file","y":"bool fflush\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."}]},"fgetcsv":{"s":"Gets line from file pointer and parse for CSV fields","y":"array fgetcsv\n    ( resource $handle\n   [, int $length = 0\n   [, string $delimiter = &quot;,&quot;\n   [, string $enclosure = &#039;&quot;&#039;\n   [, string $escape = &quot;\\\\&quot;\n  ]]]] )","r":"Returns an indexed array containing the fields read.","p":[{"t":"handle","d":"A valid file pointer to a file successfully opened by\n       fopen(), popen(), or\n       fsockopen()."},{"t":"length","d":"Must be greater than the longest line (in characters) to be found in\n       the CSV file (allowing for trailing line-end characters). It became\n       optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP\n       5.1.0 and later) the maximum line length is not limited, which is\n       slightly slower."},{"t":"delimiter","d":"Set the field delimiter (one character only)."},{"t":"enclosure","d":"Set the field enclosure character (one character only)."},{"t":"escape","d":"Set the escape character (one character only). Defaults as a backslash."}]},"fgets":{"s":"Gets line from file pointer","y":"string fgets\n    ( resource $handle\n   [, int $length\n  ] )","r":"Returns a string of up to length - 1 bytes read from\n   the file pointed to by handle. If there is no more data \n   to read in the file pointer, then FALSE is returned.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."},{"t":"length","d":"Reading ends when length - 1 bytes have been\n       read, or a newline (which is included in the return value), or an EOF\n       (whichever comes first). If no length is specified, it will keep\n       reading from the stream until it reaches the end of the line."}]},"fgetss":{"s":"Gets line from file pointer and strip HTML tags","y":"string fgetss\n    ( resource $handle\n   [, int $length\n   [, string $allowable_tags\n  ]] )","r":"Returns a string of up to length - 1 bytes read from\n   the file pointed to by handle, with all HTML and PHP\n   code stripped.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."},{"t":"length","d":"Length of the data to be retrieved."},{"t":"allowable_tags","d":"You can use the optional third parameter to specify tags which should\n       not be stripped."}]},"file":{"s":"Reads entire file into an array","y":"array file\n    ( string $filename\n   [, int $flags = 0\n   [, resource $context\n  ]] )","r":"Returns the file in an array. Each element of the array corresponds to a\n   line in the file, with the newline still attached. Upon failure,\n   file() returns FALSE.","p":[{"t":"filename","d":"Path to the file."}]},"fileatime":{"s":"Gets last access time of file","y":"int fileatime\n    ( string $filename\n   )","r":"Returns the time the file was last accessed,  or FALSE on failure.\n   The time is returned as a Unix timestamp.","p":[{"t":"filename","d":"Path to the file."}]},"filectime":{"s":"Gets inode change time of file","y":"int filectime\n    ( string $filename\n   )","r":"Returns the time the file was last changed,  or FALSE on failure.\n   The time is returned as a Unix timestamp.","p":[{"t":"filename","d":"Path to the file."}]},"filegroup":{"s":"Gets file group","y":"int filegroup\n    ( string $filename\n   )","r":"Returns the group ID of the file, or FALSE if\n   an error occurs. The group ID is returned in numerical format, use\n   posix_getgrgid() to resolve it to a group name.\n   Upon failure, FALSE is returned.","p":[{"t":"filename","d":"Path to the file."}]},"fileinode":{"s":"Gets file inode","y":"int fileinode\n    ( string $filename\n   )","r":"Returns the inode number of the file,  or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."}]},"filemtime":{"s":"Gets file modification time","y":"int filemtime\n    ( string $filename\n   )","r":"Returns the time the file was last modified,  or FALSE on failure.\n   The time is returned as a Unix timestamp, which is\n   suitable for the date() function.","p":[{"t":"filename","d":"Path to the file."}]},"fileowner":{"s":"Gets file owner","y":"int fileowner\n    ( string $filename\n   )","r":"Returns the user ID of the owner of the file,  or FALSE on failure.\n   The user ID is returned in numerical format, use\n   posix_getpwuid() to resolve it to a username.","p":[{"t":"filename","d":"Path to the file."}]},"fileperms":{"s":"Gets file permissions","y":"int fileperms\n    ( string $filename\n   )","r":"Returns the file&#039;s permissions as a numeric mode. Lower bits of this mode\n   are the same as the permissions expected by chmod(),\n   however on most platforms the return value will also include information on\n   the type of file given as filename. The examples\n   below demonstrate how to test the return value for specific permissions and\n   file types on POSIX systems, including Linux and Mac OS X.","p":[{"t":"filename","d":"Path to the file."}]},"filepro":{"s":"Read and verify the map file","y":"bool filepro\n    ( string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"directory","d":"The map directory."}]},"filepro_fieldcount":{"s":"Find out how many fields are in a filePro database","y":"int filepro_fieldcount\n    ( void\n   )","r":"Returns the number of fields in the opened filePro database, or FALSE on\n   errors.","p":null},"filepro_fieldname":{"s":"Gets the name of a field","y":"string filepro_fieldname\n    ( int $field_number\n   )","r":"Returns the name of the field as a string, or FALSE on errors.","p":[{"t":"field_number","d":"The field number."}]},"filepro_fieldtype":{"s":"Gets the type of a field","y":"string filepro_fieldtype\n    ( int $field_number\n   )","r":"Returns the edit type of the field as a string, or FALSE on errors.","p":[{"t":"field_number","d":"The field number."}]},"filepro_fieldwidth":{"s":"Gets the width of a field","y":"int filepro_fieldwidth\n    ( int $field_number\n   )","r":"Returns the width of the field as a integer, or FALSE on errors.","p":[{"t":"field_number","d":"The field number."}]},"filepro_retrieve":{"s":"Retrieves data from a filePro database","y":"string filepro_retrieve\n    ( int $row_number\n   , int $field_number\n   )","r":"Returns the specified data, or FALSE on errors.","p":[{"t":"row_number","d":"The row number. Must be between zero and the total number of rows\n       minus one (0..filepro_rowcount() - 1)"},{"t":"field_number","d":"The field number. Accepts values between zero and the total number of\n       fields minus one (0..filepro_fieldcount() - 1)"}]},"filepro_rowcount":{"s":"Find out how many rows are in a filePro database","y":"int filepro_rowcount\n    ( void\n   )","r":"Returns the number of rows in the opened filePro database, or FALSE on\n   errors.","p":null},"filesize":{"s":"Gets file size","y":"int filesize\n    ( string $filename\n   )","r":"Returns the size of the file in bytes, or FALSE (and generates an error\n   of level E_WARNING) in case of an error.","p":[{"t":"filename","d":"Path to the file."}]},"filetype":{"s":"Gets file type","y":"string filetype\n    ( string $filename\n   )","r":"Returns the type of the file. Possible values are fifo, char,\n   dir, block, link, file, socket and unknown.","p":[{"t":"filename","d":"Path to the file."}]},"file_exists":{"s":"Checks whether a file or directory exists","y":"bool file_exists\n    ( string $filename\n   )","r":"Returns TRUE if the file or directory specified by\n   filename exists; FALSE otherwise.","p":[{"t":"filename","d":"Path to the file or directory."}]},"file_get_contents":{"s":"Reads entire file into a string","y":"string file_get_contents\n    ( string $filename\n   [, bool $use_include_path = false\n   [, resource $context\n   [, int $offset = -1\n   [, int $maxlen\n  ]]]] )","r":"The function returns the read data  or FALSE on failure.","p":[{"t":"filename","d":"Name of the file to read."},{"t":"use_include_path","d":""},{"t":"context","d":"A valid context resource created with \n       stream_context_create(). If you don&#039;t need to use a\n       custom context, you can skip this parameter by NULL."},{"t":"offset","d":"The offset where the reading starts on the original stream."},{"t":"maxlen","d":"Maximum length of data read. The default is to read until end\n       of file is reached. Note that this parameter is applied to the \n       stream processed by the filters."}]},"file_put_contents":{"s":"Write a string to a file","y":"int file_put_contents\n    ( string $filename\n   , mixed $data\n   [, int $flags = 0\n   [, resource $context\n  ]] )","r":"This function returns the number of bytes that were written to the file, or\n   FALSE on failure.","p":[{"t":"filename","d":"Path to the file where to write the data."},{"t":"data","d":"The data to write. Can be either a string, an\n       array or a stream resource."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator."},{"t":"context","d":"A valid context resource created with \n       stream_context_create()."}]},"filter_has_var":{"s":"Checks if variable of specified type exists","y":"bool filter_has_var\n    ( int $type\n   , string $variable_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"type","d":"One of INPUT_GET, INPUT_POST,\n       INPUT_COOKIE, INPUT_SERVER, or\n       INPUT_ENV."},{"t":"variable_name","d":"Name of a variable to check."}]},"filter_id":{"s":"Returns the filter ID belonging to a named filter","y":"int filter_id\n    ( string $filtername\n   )","r":"ID of a filter on success or FALSE if filter doesn&#039;t exist.","p":[{"t":"filtername","d":"Name of a filter to get."}]},"filter_input":{"s":"Gets a specific external variable by name and optionally filters it","y":"mixed filter_input\n    ( int $type\n   , string $variable_name\n   [, int $filter = FILTER_DEFAULT\n   [, mixed $options\n  ]] )","r":"Value of the requested variable on success, FALSE if the filter fails,\n   or NULL if the variable_name variable is not set.\n   If the flag FILTER_NULL_ON_FAILURE is used, it\n   returns FALSE if the variable is not set and NULL if the filter fails.","p":[{"t":"type","d":"One of INPUT_GET, INPUT_POST,\n       INPUT_COOKIE, INPUT_SERVER, or\n       INPUT_ENV."},{"t":"variable_name","d":"Name of a variable to get."},{"t":"filter","d":"The ID of the filter to apply. The Types of filters\n       manual page lists the available filters."},{"t":"options","d":"Associative array of options or bitwise disjunction of flags. If filter\n       accepts options, flags can be provided in &quot;flags&quot; field of array."}]},"filter_input_array":{"s":"Gets external variables and optionally filters them","y":"mixed filter_input_array\n    ( int $type\n   [, mixed $definition\n   [, bool $add_empty = true\n  ]] )","r":"An array containing the values of the requested variables on success, or FALSE \n   on failure. An array value will be FALSE if the filter fails, or NULL if \n   the variable is not set. Or if the flag FILTER_NULL_ON_FAILURE\n   is used, it returns FALSE if the variable is not set and NULL if the filter \n   fails.","p":[{"t":"type","d":"One of INPUT_GET, INPUT_POST,\n       INPUT_COOKIE, INPUT_SERVER, or\n       INPUT_ENV."},{"t":"definition","d":"An array defining the arguments. A valid key is a string\n       containing a variable name and a valid value is either a filter type, or an array\n       optionally specifying the filter, flags and options. If the value is an\n       array, valid keys are filter which specifies the\n       filter type,\n       flags which specifies any flags that apply to the\n       filter, and options which specifies any options that\n       apply to the filter. See the example below for a better understanding."},{"t":"add_empty","d":"Add missing keys as NULL to the return value."}]},"filter_list":{"s":"Returns a list of all supported filters","y":"array filter_list\n    ( void\n   )","r":"Returns an array of names of all supported filters, empty array if there\n   are no such filters. Indexes of this array are not filter IDs, they can be\n   obtained with filter_id() from a name instead.","p":null},"filter_var":{"s":"Filters a variable with a specified filter","y":"mixed filter_var\n    ( mixed $variable\n   [, int $filter = FILTER_DEFAULT\n   [, mixed $options\n  ]] )","r":"Returns the filtered data, or FALSE if the filter fails.","p":[{"t":"variable","d":"Value to filter."},{"t":"filter","d":"The ID of the filter to apply. The Types of filters\n       manual page lists the available filters."},{"t":"options","d":"Associative array of options or bitwise disjunction of flags. If filter\n       accepts options, flags can be provided in &quot;flags&quot; field of array. For\n       the &quot;callback&quot; filter, callable type should be passed.  The\n       callback must accept one argument, the value to be filtered, and return\n       the value after filtering\/sanitizing it."}]},"filter_var_array":{"s":"Gets multiple variables and optionally filters them","y":"mixed filter_var_array\n    ( array $data\n   [, mixed $definition\n   [, bool $add_empty = true\n  ]] )","r":"An array containing the values of the requested variables on success, or FALSE \n   on failure. An array value will be FALSE if the filter fails, or NULL if \n   the variable is not set.","p":[{"t":"data","d":"An array with string keys containing the data to filter."},{"t":"definition","d":"An array defining the arguments. A valid key is a string\n       containing a variable name and a valid value is either a\n       filter type, or an\n       array optionally specifying the filter, flags and options.\n       If the value is an array, valid keys are filter\n       which specifies the filter type,\n       flags which specifies any flags that apply to the\n       filter, and options which specifies any options that\n       apply to the filter. See the example below for a better understanding."},{"t":"add_empty","d":"Add missing keys as NULL to the return value."}]},"finfo_buffer":{"s":"Return information about a string buffer","y":"string finfo_buffer\n    ( resource $finfo\n   , string $string = NULL\n   [, int $options = FILEINFO_NONE\n   [, resource $context = NULL\n  ]] )","r":"Returns a textual description of the string\n   argument, or FALSE if an error occurred.","p":[{"t":"finfo","d":"Fileinfo resource returned by finfo_open()."},{"t":"string","d":"Content of a file to be checked."},{"t":"options","d":"One or disjunction of more Fileinfo\n       constants."},{"t":"context","d":""}]},"finfo_close":{"s":"Close fileinfo resource","y":"bool finfo_close\n    ( resource $finfo\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"finfo","d":"Fileinfo resource returned by finfo_open()."}]},"finfo_file":{"s":"Return information about a file","y":"string finfo_file\n    ( resource $finfo\n   , string $file_name = NULL\n   [, int $options = FILEINFO_NONE\n   [, resource $context = NULL\n  ]] )","r":"Returns a textual description of the contents of the\n   filename argument, or FALSE if an error occurred.","p":[{"t":"finfo","d":"Fileinfo resource returned by finfo_open()."},{"t":"file_name","d":"Name of a file to be checked."},{"t":"options","d":"One or disjunction of more Fileinfo\n       constants."},{"t":"context","d":"For a description of contexts, refer to Stream Functions."}]},"finfo_open":{"s":"Create a new fileinfo resource","y":"resource finfo_open\n    ([ int $options = FILEINFO_NONE\n   [, string $magic_file = NULL\n  ]] )","r":"(Procedural style only)\n   Returns a magic database resource on success or FALSE on failure.","p":[{"t":"options","d":"One or disjunction of more Fileinfo\n       constants."},{"t":"magic_file","d":"Name of a magic database file, usually something like\n       \/path\/to\/magic.mime. If not specified, the\n       MAGIC environment variable is used. If the\n       environment variable isn&#039;t set, then PHP&#039;s bundled magic database will\n       be used."}]},"finfo_set_flags":{"s":"Set libmagic configuration options","y":"bool finfo_set_flags\n    ( resource $finfo\n   , int $options\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"finfo","d":"Fileinfo resource returned by finfo_open()."},{"t":"options","d":"One or disjunction of more Fileinfo\n       constants."}]},"floatval":{"s":"Get float value of a variable","y":"float floatval\n    ( mixed $var\n   )","r":"The float value of the given variable. Empty arrays return 0, non-empty\n   arrays return 1.","p":[{"t":"var","d":"May be any scalar type. floatval() should not be used\n       on objects, as doing so will emit an E_NOTICE level\n       error and return 1."}]},"flock":{"s":"Portable advisory file locking","y":"bool flock\n    ( resource $handle\n   , int $operation\n   [, int &$wouldblock\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"operation","d":"operation is one of the following:\n       \n        \n         \n          LOCK_SH to acquire a shared lock (reader).\n         \n        \n        \n         \n          LOCK_EX to acquire an exclusive lock (writer).\n         \n        \n        \n         \n          LOCK_UN to release a lock (shared or exclusive)."},{"t":"wouldblock","d":"The optional third argument is set to 1 if the lock would block\n       (EWOULDBLOCK errno condition). (not supported on Windows)"}]},"floor":{"s":"Round fractions down","y":"float floor\n     ( float $value\n    )","r":"value rounded to the next lowest integer.\n   The return value of floor() is still of type\n   float because the value range of float is \n   usually bigger than that of integer.","p":[{"t":"value","d":"The numeric value to round"}]},"flush":{"s":"Flush the output buffer","y":"void flush\n    ( void\n   )","r":"No value is returned.","p":null},"fmod":{"s":"Returns the floating point remainder (modulo) of the division\n  of the arguments","y":"float fmod\n     ( float $x\n    , float $y\n    )","r":"The floating point remainder of \n   x\/y","p":[{"t":"x","d":"The dividend"},{"t":"y","d":"The divisor"}]},"fnmatch":{"s":"Match filename against a pattern","y":"bool fnmatch\n    ( string $pattern\n   , string $string\n   [, int $flags = 0\n  ] )","r":"Returns TRUE if there is a match, FALSE otherwise.","p":[{"t":"pattern","d":"The shell wildcard pattern."},{"t":"string","d":"The tested string. This function is especially useful for filenames,\n       but may also be used on regular strings."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the\n       binary OR (|) operator.\n       \n        \n         A list of possible flags for fnmatch()\n        \n        \n         \n          \n           Flag\n           Description\n          \n\n         \n\n         \n          \n           FNM_NOESCAPE\n           \n            Disable backslash escaping.\n           \n          \n\n          \n           FNM_PATHNAME\n           \n            Slash in string only matches slash in the given pattern.\n           \n          \n\n          \n           FNM_PERIOD\n           \n            Leading period in string must be exactly matched by period in the given pattern.\n           \n          \n\n          \n           FNM_CASEFOLD\n           \n            Caseless match. Part of the GNU extension."}]},"fopen":{"s":"Opens file or URL","y":"resource fopen\n    ( string $filename\n   , string $mode\n   [, bool $use_include_path = false\n   [, resource $context\n  ]] )","r":"Returns a file pointer resource on success, or FALSE on error.","p":[{"t":"filename","d":"If filename is of the form &quot;scheme:\/\/...&quot;, it\n       is assumed to be a URL and PHP will search for a protocol handler\n       (also known as a wrapper) for that scheme. If no wrappers for that\n       protocol are registered, PHP will emit a notice to help you track\n       potential problems in your script and then continue as though\n       filename specifies a regular file."}]},"forward_static_call":{"s":"Call a static method","y":"mixed forward_static_call\n    ( callable $function\n   [, mixed $parameter\n   [, mixed $...\n  ]] )","r":"Returns the function result, or FALSE on error.","p":[{"t":"function","d":"The function or method to be called. This parameter may be an array,\n       with the name of the class, and the method, or a string, with a function\n       name."},{"t":"parameter","d":"Zero or more parameters to be passed to the function."}]},"fpassthru":{"s":"Output all remaining data on a file pointer","y":"int fpassthru\n    ( resource $handle\n   )","r":"If an error occurs, fpassthru() returns\n   FALSE.  Otherwise, fpassthru() returns\n   the number of characters read from handle\n   and passed through to the output.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."}]},"fprintf":{"s":"Write a formatted string to a stream","y":"int fprintf\n    ( resource $handle\n   , string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","r":"Returns the length of the string written.","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"format","d":"See sprintf() for a description of \n       format."},{"t":"args","d":""},{"t":"...","d":""}]},"fputcsv":{"s":"Format line as CSV and write to file pointer","y":"int fputcsv\n    ( resource $handle\n   , array $fields\n   [, string $delimiter = &quot;,&quot;\n   [, string $enclosure = &#039;&quot;&#039;\n  ]] )","r":"Returns the length of the written string or FALSE on failure.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."},{"t":"fields","d":"An array of values."},{"t":"delimiter","d":"The optional delimiter parameter sets the field\n       delimiter (one character only)."},{"t":"enclosure","d":"The optional enclosure parameter sets the field\n       enclosure (one character only)."}]},"fputs":{"s":"Alias of fwrite()","y":"","r":"","p":null},"fread":{"s":"Binary-safe file read","y":"string fread\n    ( resource $handle\n   , int $length\n   )","r":"Returns the read string  or FALSE on failure.","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"length","d":"Up to length number of bytes read."}]},"fribidi_log2vis":{"s":"Convert a logical string to a visual one","y":"string fribidi_log2vis\n    ( string $str\n   , string $direction\n   , int $charset\n   )","r":"Returns the visual string on success or FALSE on failure.","p":[{"t":"str","d":"The logical string."},{"t":"direction","d":"One of  FRIBIDI_RTL, \n       FRIBIDI_LTR or FRIBIDI_AUTO."},{"t":"charset","d":"One of the FRIBIDI_CHARSET_XXX constants."}]},"fscanf":{"s":"Parses input from a file according to a format","y":"mixed fscanf\n    ( resource $handle\n   , string $format\n   [, mixed &$...\n  ] )","r":"If only two parameters were passed to this function, the values parsed will be\n   returned as an array. Otherwise, if optional parameters are passed, the\n   function will return the number of assigned values. The optional\n   parameters must be passed by reference. ","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"format","d":"The specified format as described in the \n       sprintf() documentation."},{"t":"...","d":"The optional assigned values."}]},"fseek":{"s":"Seeks on a file pointer","y":"int fseek\n    ( resource $handle\n   , int $offset\n   [, int $whence = SEEK_SET\n  ] )","r":"Upon success, returns 0; otherwise, returns -1.","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"offset","d":"The offset."},{"t":"whence","d":"whence values are:\n       \n        SEEK_SET - Set position equal to offset bytes.\n        SEEK_CUR - Set position to current location plus offset.\n        SEEK_END - Set position to end-of-file plus offset."}]},"fsockopen":{"s":"Open Internet or Unix domain socket connection","y":"resource fsockopen\n    ( string $hostname\n   [, int $port = -1\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n  ]]]] )","r":"fsockopen() returns a file pointer which may be used\n   together with the other file functions (such as\n   fgets(), fgetss(),\n   fwrite(), fclose(), and\n   feof()). If the call fails, it will return FALSE","p":[{"t":"hostname","d":"If OpenSSL support is\n       installed, you may prefix the hostname\n       with either ssl:\/\/ or tls:\/\/ to\n       use an SSL or TLS client connection over TCP\/IP to connect to the\n       remote host."},{"t":"port","d":"The port number. This can be omitted and skipped with\n       -1 for transports that do not use ports, such as\n       unix:\/\/."},{"t":"errno","d":"If provided, holds the system level error number that occurred in the\n       system-level connect() call."},{"t":"errstr","d":"The error message as a string."},{"t":"timeout","d":"The connection timeout, in seconds."}]},"fstat":{"s":"Gets information about a file using an open file pointer","y":"array fstat\n    ( resource $handle\n   )","r":"Returns an array with the statistics of the file; the format of the array\n   is described in detail on the stat() manual page.","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."}]},"ftell":{"s":"Returns the current position of the file read\/write pointer","y":"int ftell\n    ( resource $handle\n   )","r":"Returns the position of the file pointer referenced by\n   handle as an integer; i.e., its offset into the file stream.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to a file successfully\n       opened by fopen() or popen().\n       ftell() gives undefined results for append-only streams\n       (opened with &quot;a&quot; flag)."}]},"ftok":{"s":"Convert a pathname and a project identifier to a System V IPC key","y":"int ftok\n    ( string $pathname\n   , string $proj\n   )","r":"On success the return value will be the created key value, otherwise\n   -1 is returned.","p":[{"t":"pathname","d":"Path to an accessible file."},{"t":"proj","d":"Project identifier. This must be a one character string."}]},"ftp_alloc":{"s":"Allocates space for a file to be uploaded","y":"bool ftp_alloc\n    ( resource $ftp_stream\n   , int $filesize\n   [, string &$result\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"filesize","d":"The number of bytes to allocate."},{"t":"result","d":"A textual representation of the servers response will be returned by \n       reference in result if a variable is provided."}]},"ftp_cdup":{"s":"Changes to the parent directory","y":"bool ftp_cdup\n    ( resource $ftp_stream\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."}]},"ftp_chdir":{"s":"Changes the current directory on a FTP server","y":"bool ftp_chdir\n    ( resource $ftp_stream\n   , string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.\n   If changing directory fails, PHP will also throw a warning.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"directory","d":"The target directory."}]},"ftp_chmod":{"s":"Set permissions on a file via FTP","y":"int ftp_chmod\n    ( resource $ftp_stream\n   , int $mode\n   , string $filename\n   )","r":"Returns the new file permissions on success or FALSE on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"mode","d":"The new permissions, given as an octal value."},{"t":"filename","d":"The remote file."}]},"ftp_close":{"s":"Closes an FTP connection","y":"bool ftp_close\n    ( resource $ftp_stream\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."}]},"ftp_connect":{"s":"Opens an FTP connection","y":"resource ftp_connect\n    ( string $host\n   [, int $port = 21\n   [, int $timeout = 90\n  ]] )","r":"Returns a FTP stream on success or FALSE on error.","p":[{"t":"host","d":"The FTP server address. This parameter shouldn&#039;t have any trailing \n       slashes and shouldn&#039;t be prefixed with ftp:\/\/."},{"t":"port","d":"This parameter specifies an alternate port to connect to. If it is\n       omitted or set to zero, then the default FTP port, 21, will be used."},{"t":"timeout","d":"This parameter specifies the timeout for all subsequent network operations.\n       If omitted, the default value is 90 seconds. The timeout can be changed and\n       queried at any time with ftp_set_option() and\n       ftp_get_option()."}]},"ftp_delete":{"s":"Deletes a file on the FTP server","y":"bool ftp_delete\n    ( resource $ftp_stream\n   , string $path\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"path","d":"The file to delete."}]},"ftp_exec":{"s":"Requests execution of a command on the FTP server","y":"bool ftp_exec\n    ( resource $ftp_stream\n   , string $command\n   )","r":"Returns TRUE if the command was successful (server sent response code:\n   200); otherwise returns FALSE.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"command","d":"The command to execute."}]},"ftp_fget":{"s":"Downloads a file from the FTP server and saves to an open file","y":"bool ftp_fget\n    ( resource $ftp_stream\n   , resource $handle\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"handle","d":"An open file pointer in which we store the data."},{"t":"remote_file","d":"The remote file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"resumepos","d":"The position in the remote file to start downloading from."}]},"ftp_fput":{"s":"Uploads from an open file to the FTP server","y":"bool ftp_fput\n    ( resource $ftp_stream\n   , string $remote_file\n   , resource $handle\n   , int $mode\n   [, int $startpos = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The remote file path."},{"t":"handle","d":"An open file pointer on the local file. Reading stops at end of file."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"startpos","d":"The position in the remote file to start uploading to."}]},"ftp_get":{"s":"Downloads a file from the FTP server","y":"bool ftp_get\n    ( resource $ftp_stream\n   , string $local_file\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"local_file","d":"The local file path (will be overwritten if the file already exists)."},{"t":"remote_file","d":"The remote file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"resumepos","d":"The position in the remote file to start downloading from."}]},"ftp_get_option":{"s":"Retrieves various runtime behaviours of the current FTP stream","y":"mixed ftp_get_option\n    ( resource $ftp_stream\n   , int $option\n   )","r":"Returns the value on success or FALSE if the given \n   option is not supported. In the latter case, a\n   warning message is also thrown.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"option","d":"Currently, the following options are supported:\n       \n        Supported runtime FTP options\n        \n         \n          \n           FTP_TIMEOUT_SEC\n           \n            Returns the current timeout used for network related operations.\n           \n          \n\n          \n           FTP_AUTOSEEK\n           \n            Returns TRUE if this option is on, FALSE otherwise."}]},"ftp_login":{"s":"Logs in to an FTP connection","y":"bool ftp_login\n    ( resource $ftp_stream\n   , string $username\n   , string $password\n   )","r":"Returns TRUE on success or FALSE on failure.\n   If login fails, PHP will also throw a warning.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"username","d":"The username (USER)."},{"t":"password","d":"The password (PASS)."}]},"ftp_mdtm":{"s":"Returns the last modified time of the given file","y":"int ftp_mdtm\n    ( resource $ftp_stream\n   , string $remote_file\n   )","r":"Returns the last modified time as a Unix timestamp on success, or -1 on \n   error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The file from which to extract the last modification time."}]},"ftp_nb_continue":{"s":"Continues retrieving\/sending a file (non-blocking)","y":"int ftp_nb_continue\n    ( resource $ftp_stream\n   )","r":"Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."}]},"ftp_nb_fput":{"s":"Stores a file from an open file to the FTP server (non-blocking)","y":"int ftp_nb_fput\n    ( resource $ftp_stream\n   , string $remote_file\n   , resource $handle\n   , int $mode\n   [, int $startpos = 0\n  ] )","r":"Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The remote file path."},{"t":"handle","d":"An open file pointer on the local file. Reading stops at end of file."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"startpos","d":"The position in the remote file to start uploading to."}]},"ftp_nb_get":{"s":"Retrieves a file from the FTP server and writes it to a local file (non-blocking)","y":"int ftp_nb_get\n    ( resource $ftp_stream\n   , string $local_file\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )","r":"Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"local_file","d":"The local file path (will be overwritten if the file already exists)."},{"t":"remote_file","d":"The remote file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"resumepos","d":"The position in the remote file to start downloading from."}]},"ftp_nb_put":{"s":"Stores a file on the FTP server (non-blocking)","y":"int ftp_nb_put\n    ( resource $ftp_stream\n   , string $remote_file\n   , string $local_file\n   , int $mode\n   [, int $startpos = 0\n  ] )","r":"Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The remote file path."},{"t":"local_file","d":"The local file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"startpos","d":"The position in the remote file to start uploading to."}]},"ftp_nlist":{"s":"Returns a list of files in the given directory","y":"array ftp_nlist\n    ( resource $ftp_stream\n   , string $directory\n   )","r":"Returns an array of filenames from the specified directory on success or\n   FALSE on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"directory","d":"The directory to be listed. This parameter can also include arguments, eg.\n       ftp_nlist($conn_id, &quot;-la \/your\/dir&quot;);\n       Note that this parameter isn&#039;t escaped so there may be some issues with\n       filenames containing spaces and other characters."}]},"ftp_pasv":{"s":"Turns passive mode on or off","y":"bool ftp_pasv\n    ( resource $ftp_stream\n   , bool $pasv\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"pasv","d":"If TRUE, the passive mode is turned on, else it&#039;s turned off."}]},"ftp_put":{"s":"Uploads a file to the FTP server","y":"bool ftp_put\n    ( resource $ftp_stream\n   , string $remote_file\n   , string $local_file\n   , int $mode\n   [, int $startpos = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The remote file path."},{"t":"local_file","d":"The local file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"startpos","d":"The position in the remote file to start uploading to."}]},"ftp_pwd":{"s":"Returns the current directory name","y":"string ftp_pwd\n    ( resource $ftp_stream\n   )","r":"Returns the current directory name or FALSE on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."}]},"ftp_quit":{"s":"Alias of ftp_close()","y":"","r":"","p":null},"ftp_raw":{"s":"Sends an arbitrary command to an FTP server","y":"array ftp_raw\n    ( resource $ftp_stream\n   , string $command\n   )","r":"Returns the server&#039;s response as an array of strings.\n   No parsing is performed on the response string, nor does \n   ftp_raw() determine if the command succeeded.  ","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"command","d":"The command to execute."}]},"ftp_rawlist":{"s":"Returns a detailed list of files in the given directory","y":"mixed ftp_rawlist\n    ( resource $ftp_stream\n   , string $directory\n   [, bool $recursive = false\n  ] )","r":"Returns an array where each element corresponds to one line of text. Returns\n   FALSE when passed directory is invalid.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"directory","d":"The directory path. May include arguments for the LIST\n       command."},{"t":"recursive","d":"If set to TRUE, the issued command will be LIST -R."}]},"ftp_rename":{"s":"Renames a file or a directory on the FTP server","y":"bool ftp_rename\n    ( resource $ftp_stream\n   , string $oldname\n   , string $newname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"oldname","d":"The old file\/directory name."},{"t":"newname","d":"The new name."}]},"ftp_rmdir":{"s":"Removes a directory","y":"bool ftp_rmdir\n    ( resource $ftp_stream\n   , string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"directory","d":"The directory to delete. This must be either an absolute or relative\n       path to an empty directory."}]},"ftp_set_option":{"s":"Set miscellaneous runtime FTP options","y":"bool ftp_set_option\n    ( resource $ftp_stream\n   , int $option\n   , mixed $value\n   )","r":"Returns TRUE if the option could be set; FALSE if not. A warning\n   message will be thrown if the option is not\n   supported or the passed value doesn&#039;t match the\n   expected value for the given option.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"option","d":"Currently, the following options are supported:\n       \n        Supported runtime FTP options\n        \n         \n          \n           FTP_TIMEOUT_SEC\n           \n            Changes the timeout in seconds used for all network related \n            functions. value must be an integer that\n            is greater than 0. The default timeout is 90 seconds.\n           \n          \n\n          \n           FTP_AUTOSEEK\n           \n            When enabled, GET or PUT requests with a \n            resumepos or startpos\n            parameter will first seek to the requested position within the file.\n            This is enabled by default."},{"t":"value","d":"This parameter depends on which option is chosen\n       to be altered."}]},"ftp_site":{"s":"Sends a SITE command to the server","y":"bool ftp_site\n    ( resource $ftp_stream\n   , string $command\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"command","d":"The SITE command. Note that this parameter isn&#039;t escaped so there may\n       be some issues with filenames containing spaces and other characters."}]},"ftp_size":{"s":"Returns the size of the given file","y":"int ftp_size\n    ( resource $ftp_stream\n   , string $remote_file\n   )","r":"Returns the file size on success, or -1 on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"remote_file","d":"The remote file."}]},"ftp_ssl_connect":{"s":"Opens an Secure SSL-FTP connection","y":"resource ftp_ssl_connect\n    ( string $host\n   [, int $port = 21\n   [, int $timeout = 90\n  ]] )","r":"Returns a SSL-FTP stream on success or FALSE on error.","p":[{"t":"host","d":"The FTP server address. This parameter shouldn&#039;t have any trailing \n       slashes and shouldn&#039;t be prefixed with ftp:\/\/."},{"t":"port","d":"This parameter specifies an alternate port to connect to. If it is\n       omitted or set to zero, then the default FTP port, 21, will be used."},{"t":"timeout","d":"This parameter specifies the timeout for all subsequent network operations.\n       If omitted, the default value is 90 seconds. The timeout can be changed and\n       queried at any time with ftp_set_option() and\n       ftp_get_option()."}]},"ftp_systype":{"s":"Returns the system type identifier of the remote FTP server","y":"string ftp_systype\n    ( resource $ftp_stream\n   )","r":"Returns the remote system type, or FALSE on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."}]},"ftruncate":{"s":"Truncates a file to a given length","y":"bool ftruncate\n    ( resource $handle\n   , int $size\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The file pointer."},{"t":"size","d":"The size to truncate to."}]},"function_exists":{"s":"Return TRUE if the given function has been defined","y":"bool function_exists\n    ( string $function_name\n   )","r":"Returns TRUE if function_name exists and is a\n   function, FALSE otherwise.","p":[{"t":"function_name","d":"The function name, as a string."}]},"func_get_arg":{"s":"Return an item from the argument list","y":"mixed func_get_arg\n    ( int $arg_num\n   )","r":"Returns the specified argument, or FALSE on error.","p":[{"t":"arg_num","d":"The argument offset. Function arguments are counted starting from\n       zero."}]},"func_get_args":{"s":"Returns an array comprising a function&#039;s argument list","y":"array func_get_args\n    ( void\n   )","r":"Returns an array in which each element is a copy of the corresponding\n   member of the current user-defined function&#039;s argument list. ","p":null},"func_num_args":{"s":"Returns the number of arguments passed to the function","y":"int func_num_args\n    ( void\n   )","r":"Returns the number of arguments passed into the current user-defined\n   function.","p":null},"fwrite":{"s":"Binary-safe file write","y":"int fwrite\n    ( resource $handle\n   , string $string\n   [, int $length\n  ] )","r":"","p":[{"t":"handle","d":"A file system pointer resource\nthat is typically created using fopen()."},{"t":"string","d":"The string that is to be written."},{"t":"length","d":"If the length argument is given, writing will\n       stop after length bytes have been written or\n       the end of string is reached, whichever comes\n       first."}]},"gc_collect_cycles":{"s":"Forces collection of any existing garbage cycles","y":"int gc_collect_cycles\n    ( void\n   )","r":"Returns number of collected cycles.","p":null},"gc_disable":{"s":"Deactivates the circular reference collector","y":"void gc_disable\n    ( void\n   )","r":"No value is returned.","p":null},"gc_enable":{"s":"Activates the circular reference collector","y":"void gc_enable\n    ( void\n   )","r":"No value is returned.","p":null},"gc_enabled":{"s":"Returns status of the circular reference collector","y":"bool gc_enabled\n    ( void\n   )","r":"Returns TRUE if the garbage collector is enabled, FALSE otherwise.","p":null},"gd_info":{"s":"Retrieve information about the currently installed GD library","y":"array gd_info\n    ( void\n   )","r":"Returns an associative array.","p":null},"geoip_continent_code_by_name":{"s":"Get the two letter continent code","y":"string geoip_continent_code_by_name\n    ( string $hostname\n   )","r":"Returns the two letter continent code on success, or FALSE if the\n   address cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose location is to be looked-up."}]},"geoip_country_code3_by_name":{"s":"Get the three letter country code","y":"string geoip_country_code3_by_name\n    ( string $hostname\n   )","r":"Returns the three letter country code on success, or FALSE \n   if the address cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose location is to be looked-up."}]},"geoip_country_code_by_name":{"s":"Get the two letter country code","y":"string geoip_country_code_by_name\n    ( string $hostname\n   )","r":"Returns the two letter ISO country code on success, or FALSE \n   if the address cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose location is to be looked-up."}]},"geoip_country_name_by_name":{"s":"Get the full country name","y":"string geoip_country_name_by_name\n    ( string $hostname\n   )","r":"Returns the country name on success, or FALSE if the address cannot \n   be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose location is to be looked-up."}]},"geoip_database_info":{"s":"Get GeoIP Database information","y":"string geoip_database_info\n    ([ int $database = GEOIP_COUNTRY_EDITION\n  ] )","r":"Returns the corresponding database version, or NULL on error.","p":[{"t":"database","d":"The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION)."}]},"geoip_db_avail":{"s":"Determine if GeoIP Database is available","y":"bool geoip_db_avail\n    ( int $database\n   )","r":"Returns TRUE is database exists, FALSE if not found, or NULL on error.","p":[{"t":"database","d":"The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION)."}]},"geoip_db_filename":{"s":"Returns the filename of the corresponding GeoIP Database","y":"\n   string geoip_db_filename\n    ( int $database\n   )","p":[{"t":"database","d":"The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION)."}]},"geoip_db_get_all_info":{"s":"Returns detailed information about all GeoIP database types","y":"array geoip_db_get_all_info\n    ( void\n   )","r":"Returns the associative array.","p":null},"geoip_id_by_name":{"s":"Get the Internet connection type","y":"int geoip_id_by_name\n    ( string $hostname\n   )","r":"Returns the connection type.","p":[{"t":"hostname","d":"The hostname or IP address whose connection type is to be looked-up."}]},"geoip_org_by_name":{"s":"Get the organization name","y":"string geoip_org_by_name\n    ( string $hostname\n   )","r":"Returns the organization name on success, or FALSE if the address\n   cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address."}]},"geoip_record_by_name":{"s":"Returns the detailed City information found in the GeoIP Database","y":"array geoip_record_by_name\n    ( string $hostname\n   )","r":"Returns the associative array on success, or FALSE if the address \n   cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose record is to be looked-up."}]},"geoip_region_by_name":{"s":"Get the country code and region","y":"array geoip_region_by_name\n    ( string $hostname\n   )","r":"Returns the associative array on success, or FALSE if the address \n   cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address whose region is to be looked-up."}]},"geoip_region_name_by_code":{"s":"Returns the region name for some country and region code combo","y":"string geoip_region_name_by_code\n    ( string $country_code\n   , string $region_code\n   )","r":"Returns the region name on success, or FALSE if the country and region code\n   combo cannot be found.","p":[{"t":"country_code","d":"The two-letter country code (see\n       geoip_country_code_by_name())"},{"t":"region_code","d":"The two-letter (or digit) region code (see \n       geoip_region_by_name())"}]},"geoip_time_zone_by_country_and_region":{"s":"Returns the time zone for some country and region code combo","y":"string geoip_time_zone_by_country_and_region\n    ( string $country_code\n   [, string $region_code\n  ] )","r":"Returns the time zone on success, or FALSE if the country and region code\n   combo cannot be found.","p":[{"t":"country_code","d":"The two-letter country code (see\n       geoip_country_code_by_name())"},{"t":"region_code","d":"The two-letter (or digit) region code (see \n       geoip_region_by_name())"}]},"getallheaders":{"s":"Fetch all HTTP request headers","y":"array getallheaders\n    ( void\n   )","r":"An associative array of all the HTTP headers in the current request, or\n   FALSE on failure.","p":null},"getcwd":{"s":"Gets the current working directory","y":"string getcwd\n    ( void\n   )","r":"Returns the current working directory on success, or FALSE on\n   failure.","p":null},"getdate":{"s":"Get date\/time information","y":"array getdate\n    ([ int $timestamp = time()\n  ] )","r":"Returns an associative array of information related to\n   the timestamp. Elements from the returned \n   associative array are as follows:","p":[{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."}]},"getenv":{"s":"Gets the value of an environment variable","y":"string getenv\n    ( string $varname\n   )","r":"Returns the value of the environment variable\n   varname, or FALSE if the environment\n   variable varname does not exist.","p":[{"t":"varname","d":"The variable name."}]},"gethostbyaddr":{"s":"Get the Internet host name corresponding to a given IP address","y":"string gethostbyaddr\n    ( string $ip_address\n   )","r":"Returns the host name on success, the unmodified ip_address\n   on failure, or FALSE on malformed input.","p":[{"t":"ip_address","d":"The host IP address."}]},"gethostbyname":{"s":"Get the IPv4 address corresponding to a given Internet host name","y":"string gethostbyname\n    ( string $hostname\n   )","r":"Returns the IPv4 address or a string containing the unmodified\n   hostname on failure.","p":[{"t":"hostname","d":"The host name."}]},"gethostbynamel":{"s":"Get a list of IPv4 addresses corresponding to a given Internet host\n   name","y":"array gethostbynamel\n    ( string $hostname\n   )","r":"Returns an array of IPv4 addresses or FALSE if\n   hostname could not be resolved.","p":[{"t":"hostname","d":"The host name."}]},"gethostname":{"s":"Gets the host name","y":"string gethostname\n    ( void\n   )","r":"Returns a string with the hostname on success, otherwise FALSE is \n   returned.","p":null},"getimagesize":{"s":"Get the size of an image","y":"array getimagesize\n    ( string $filename\n   [, array &$imageinfo\n  ] )","r":"Returns an array with up to 7 elements. Not all image types will include\n   the channels and bits elements.","p":[{"t":"filename","d":"This parameter specifies the file you wish to retrieve information\n        about. It can reference a local file or (configuration permitting) a\n        remote file using one of the supported streams."},{"t":"imageinfo","d":"This optional parameter allows you to extract some extended\n       information from the image file. Currently, this will return the\n       different JPG APP markers as an associative array.\n       Some programs use these APP markers to embed text information in \n       images. A very common one is to embed \n       &raquo;&nbsp;IPTC information in the APP13 marker.\n       You can use the iptcparse() function to parse the\n       binary APP13 marker into something readable."}]},"getimagesizefromstring":{"s":"Get the size of an image from a string","y":"array getimagesizefromstring\n    ( string $imagedata\n   [, array &$imageinfo\n  ] )","r":"See getimagesize().","p":[{"t":"imagedata","d":"The image data, as a string."},{"t":"imageinfo","d":"See getimagesize()."}]},"getlastmod":{"s":"Gets time of last page modification","y":"int getlastmod\n    ( void\n   )","r":"Returns the time of the last modification of the current\n   page. The value returned is a Unix timestamp, suitable for\n   feeding to date(). Returns FALSE on error.","p":null},"getmxrr":{"s":"Get MX records corresponding to a given Internet host name","y":"bool getmxrr\n    ( string $hostname\n   , array &$mxhosts\n   [, array &$weight\n  ] )","r":"Returns TRUE if any records are found; returns FALSE if no records\n   were found or if an error occurred.","p":[{"t":"hostname","d":"The Internet host name."},{"t":"mxhosts","d":"A list of the MX records found is placed into the array\n       mxhosts."},{"t":"weight","d":"If the weight array is given, it will be filled\n       with the weight information gathered."}]},"getmygid":{"s":"Get PHP script owner&#039;s GID","y":"int getmygid\n    ( void\n   )","r":"Returns the group ID of the current script, or FALSE on error.","p":null},"getmyinode":{"s":"Gets the inode of the current script","y":"int getmyinode\n    ( void\n   )","r":"Returns the current script&#039;s inode as an integer, or FALSE on error.","p":null},"getmypid":{"s":"Gets PHP&#039;s process ID","y":"int getmypid\n    ( void\n   )","r":"Returns the current PHP process ID, or FALSE on error.","p":null},"getopt":{"s":"Gets options from the command line argument list","y":"array getopt\n    ( string $options\n   [, array $longopts\n  ] )","r":"This function will return an array of option \/ argument pairs or FALSE on\n   failure.","p":[{"t":"options","d":""},{"t":"longopts","d":""}]},"getprotobyname":{"s":"Get protocol number associated with protocol name","y":"int getprotobyname\n    ( string $name\n   )","r":"Returns the protocol number,  or FALSE on failure.","p":[{"t":"name","d":"The protocol name."}]},"getprotobynumber":{"s":"Get protocol name associated with protocol number","y":"string getprotobynumber\n    ( int $number\n   )","r":"Returns the protocol name as a string,  or FALSE on failure.","p":[{"t":"number","d":"The protocol number."}]},"getrandmax":{"s":"Show largest possible random value","y":"int getrandmax\n     ( void\n    )","r":"The largest possible random value returned by rand()","p":null},"getrusage":{"s":"Gets the current resource usages","y":"array getrusage\n    ([ int $who = 0\n  ] )","r":"Returns an associative array containing the data returned from the system\n   call. All entries are accessible by using their documented field names.","p":[{"t":"who","d":"If who is 1, getrusage will be called with\n       RUSAGE_CHILDREN."}]},"getservbyname":{"s":"Get port number associated with an Internet service and protocol","y":"int getservbyname\n    ( string $service\n   , string $protocol\n   )","r":"Returns the port number, or FALSE if service or\n   protocol is not found.","p":[{"t":"service","d":"The Internet service name, as a string."},{"t":"protocol","d":"protocol is either &quot;tcp&quot;\n       or &quot;udp&quot; (in lowercase)."}]},"getservbyport":{"s":"Get Internet service which corresponds to port and protocol","y":"string getservbyport\n    ( int $port\n   , string $protocol\n   )","r":"Returns the Internet service name as a string.","p":[{"t":"port","d":"The port number."},{"t":"protocol","d":"protocol is either &quot;tcp&quot;\n       or &quot;udp&quot; (in lowercase)."}]},"gettext":{"s":"Lookup a message in the current domain","y":"string gettext\n    ( string $message\n   )","r":"Returns a translated string if one is found in the \n   translation table, or the submitted message if not found.","p":[{"t":"message","d":"The message being translated."}]},"gettimeofday":{"s":"Get current time","y":"mixed gettimeofday\n    ([ bool $return_float = false\n  ] )","r":"By default an array is returned. If return_float\n   is set, then a float is returned.","p":[{"t":"return_float","d":"When set to TRUE, a float instead of an array is returned."}]},"gettype":{"s":"Get the type of a variable","y":"string gettype\n    ( mixed $var\n   )","r":"Possible values for the returned string are:\n   \n    \n     \n      &quot;boolean&quot;\n     \n    \n    \n     \n      &quot;integer&quot;\n     \n    \n    \n     \n      &quot;double&quot; (for historical reasons &quot;double&quot; is\n      returned in case of a float, and not simply\n      &quot;float&quot;)\n     \n    \n    \n     \n      &quot;string&quot;\n     \n    \n    \n     \n      &quot;array&quot;\n     \n    \n    \n     \n      &quot;object&quot;\n     \n    \n    \n     \n      &quot;resource&quot;\n     \n    \n    \n     \n      &quot;NULL&quot;\n     \n    \n    \n     \n      &quot;unknown type&quot;","p":[{"t":"var","d":"The variable being type checked."}]},"get_browser":{"s":"Tells what the user&#039;s browser is capable of","y":"mixed get_browser\n    ([ string $user_agent\n   [, bool $return_array = false\n  ]] )","r":"The information is returned in an object or an array which will contain\n   various data elements representing, for instance, the browser&#039;s major and\n   minor version numbers and ID string; TRUE\/FALSE values for features\n   such as frames, JavaScript, and cookies; and so forth.","p":[{"t":"user_agent","d":"The User Agent to be analyzed. By default, the value of HTTP\n       User-Agent header is used; however, you can alter this (i.e., look up\n       another browser&#039;s info) by passing this parameter."},{"t":"return_array","d":"If set to TRUE, this function will return an array\n       instead of an object."}]},"get_called_class":{"s":"the &quot;Late Static Binding&quot; class name","y":"string get_called_class\n    ( void\n   )","r":"Returns the class name.  Returns FALSE if called from outside a class.","p":null},"get_cfg_var":{"s":"Gets the value of a PHP configuration option","y":"string get_cfg_var\n    ( string $option\n   )","r":"Returns the current value of the PHP configuration variable specified by\n   option, or FALSE if an error occurs.","p":[{"t":"option","d":"The configuration option name."}]},"get_class":{"s":"Returns the name of the class of an object","y":"string get_class\n    ([ object $object = NULL\n  ] )","r":"Returns the name of the class of which object is an\n   instance. Returns FALSE if object is not an \n   object.","p":[{"t":"object","d":"The tested object. This parameter may be omitted when inside a class."}]},"get_class_methods":{"s":"Gets the class methods&#039; names","y":"array get_class_methods\n    ( mixed $class_name\n   )","r":"Returns an array of method names defined for the class specified by\n   class_name. In case of an error, it returns NULL.","p":[{"t":"class_name","d":"The class name or an object instance"}]},"get_class_vars":{"s":"Get the default properties of the class","y":"array get_class_vars\n    ( string $class_name\n   )","r":"Returns an associative array of declared properties visible from the\n   current scope, with their default value.\n   The resulting array elements are in the form of \n   varname =&gt; value.\n   In case of an error, it returns FALSE.","p":[{"t":"class_name","d":"The class name"}]},"get_current_user":{"s":"Gets the name of the owner of the current PHP script","y":"string get_current_user\n    ( void\n   )","r":"Returns the username as a string.","p":null},"get_declared_classes":{"s":"Returns an array with the name of the defined classes","y":"array get_declared_classes\n    ( void\n   )","r":"Returns an array of the names of the declared classes in the current\n   script.","p":null},"get_declared_interfaces":{"s":"Returns an array of all declared interfaces","y":"array get_declared_interfaces\n    ( void\n   )","r":"Returns an array of the names of the declared interfaces in the current\n   script.","p":null},"get_declared_traits":{"s":"Returns an array of all declared traits","y":"array get_declared_traits\n    ( void\n   )","r":"Returns an array with names of all declared traits in values.\n   Returns NULL in case of a failure.","p":null},"get_defined_constants":{"s":"Returns an associative array with the names of all the constants and their values","y":"array get_defined_constants\n    ([ bool $categorize = false\n  ] )","r":"Returns an array of constant name =&gt; constant value array, optionally\n   groupped by extension name registering the constant.","p":[{"t":"categorize","d":""}]},"get_defined_functions":{"s":"Returns an array of all defined functions","y":"array get_defined_functions\n    ( void\n   )","r":"Returns a multidimensional array containing a list of all defined\n   functions, both built-in (internal) and user-defined. The internal\n   functions will be accessible via $arr[\"internal\"], and\n   the user defined ones using $arr[\"user\"] (see example\n   below).","p":null},"get_extension_funcs":{"s":"Returns an array with the names of the functions of a module","y":"array get_extension_funcs\n    ( string $module_name\n   )","r":"Returns an array with all the functions, or FALSE if \n   module_name is not a valid extension.","p":[{"t":"module_name","d":"The module name."}]},"get_headers":{"s":"Fetches all the headers sent by the server in response to a HTTP request","y":"array get_headers\n    ( string $url\n   [, int $format = 0\n  ] )","r":"Returns an indexed or associative array with the headers, or FALSE on\n   failure.","p":[{"t":"url","d":"The target URL."},{"t":"format","d":"If the optional format parameter is set to non-zero,\n       get_headers() parses the response and sets the \n       array&#039;s keys."}]},"get_html_translation_table":{"s":"Returns the translation table used by htmlspecialchars()","y":"array get_html_translation_table\n    ([ int $table = HTML_SPECIALCHARS\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $encoding = &quot;UTF-8&quot;\n  ]]] )","r":"Returns the translation table as an array, with the original characters\n   as keys and entities as values.","p":[{"t":"table","d":"Which table to return. Either HTML_ENTITIES or\n       HTML_SPECIALCHARS."},{"t":"flags","d":"A bitmask of one or more of the following flags, which specify which quotes the\n       table will contain as well as which document type the table is for. The default is\n       ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Table will contain entities for double-quotes, but not for single-quotes.\n          \n\n          \n           ENT_QUOTES\n           Table will contain entities for both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Table will neither contain entities for single quotes nor for double quotes.\n          \n\n          \n           ENT_HTML401\n           Table for HTML 4.01.\n          \n\n          \n           ENT_XML1\n           Table for XML 1.\n          \n\n          \n           ENT_XHTML\n           Table for XHTML.\n          \n\n          \n           ENT_HTML5\n           Table for HTML 5."},{"t":"encoding","d":"Encoding to use.\n       If omitted, the default value for this argument is ISO-8859-1 in\n       versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards."}]},"get_included_files":{"s":"Returns an array with the names of included or required files","y":"array get_included_files\n    ( void\n   )","r":"Returns an array of the names of all files.","p":null},"get_include_path":{"s":"Gets the current include_path configuration option","y":"string get_include_path\n    ( void\n   )","r":"Returns the path, as a string.","p":null},"get_loaded_extensions":{"s":"Returns an array with the names of all modules compiled and loaded","y":"array get_loaded_extensions\n    ([ bool $zend_extensions = false\n  ] )","r":"Returns an indexed array of all the modules names.","p":[{"t":"zend_extensions","d":"Only return Zend extensions, if not then regular extensions, like \n       mysqli are listed. Defaults to FALSE (return regular extensions)."}]},"get_magic_quotes_gpc":{"s":"Gets the current configuration setting of magic_quotes_gpc","y":"bool get_magic_quotes_gpc\n    ( void\n   )","r":"Returns 0 if magic_quotes_gpc is off, 1 otherwise. \n   Or always returns FALSE as of PHP 5.4.0. ","p":null},"get_magic_quotes_runtime":{"s":"Gets the current active configuration setting of magic_quotes_runtime","y":"bool get_magic_quotes_runtime\n    ( void\n   )","r":"Returns 0 if magic_quotes_runtime is off, 1 otherwise. \n   Or always returns FALSE as of PHP 5.4.0. ","p":null},"get_meta_tags":{"s":"Extracts all meta tag content attributes from a file and returns an array","y":"array get_meta_tags\n    ( string $filename\n   [, bool $use_include_path = false\n  ] )","r":"Returns an array with all the parsed meta tags.","p":[{"t":"filename","d":"The path to the HTML file, as a string. This can be a local file or an\n       URL."}]},"get_object_vars":{"s":"Gets the properties of the given object","y":"array get_object_vars\n    ( object $object\n   )","r":"Returns an associative array of defined object accessible non-static properties \n   for the specified object in scope. If a property has\n   not been assigned a value, it will be returned with a NULL value.","p":[{"t":"object","d":"An object instance."}]},"get_parent_class":{"s":"Retrieves the parent class name for object or class","y":"string get_parent_class\n    ([ mixed $object\n  ] )","r":"Returns the name of the parent class of the class of which\n   object is an instance or the name.","p":[{"t":"object","d":"The tested object or class name"}]},"get_required_files":{"s":"Alias of get_included_files()","y":"","r":"","p":null},"get_resource_type":{"s":"Returns the resource type","y":"string get_resource_type\n    ( resource $handle\n   )","r":"If the given handle is a resource, this function\n   will return a string representing its type. If the type is not identified\n   by this function, the return value will be the string \n   Unknown.","p":[{"t":"handle","d":"The evaluated resource handle."}]},"glob":{"s":"Find pathnames matching a pattern","y":"array glob\n    ( string $pattern\n   [, int $flags = 0\n  ] )","r":"Returns an array containing the matched files\/directories, an empty array\n   if no file matched or FALSE on error.","p":[{"t":"pattern","d":"The pattern. No tilde expansion or parameter substitution is done."},{"t":"flags","d":"Valid flags:\n       \n        \n         \n          GLOB_MARK - Adds a slash to each directory returned\n         \n        \n        \n         \n          GLOB_NOSORT - Return files as they appear in the\n          directory (no sorting)\n         \n        \n        \n         \n          GLOB_NOCHECK - Return the search pattern if no\n          files matching it were found\n         \n        \n        \n         \n          GLOB_NOESCAPE - Backslashes do not quote\n          metacharacters\n         \n        \n        \n         \n          GLOB_BRACE - Expands {a,b,c} to match &#039;a&#039;, &#039;b&#039;,\n          or &#039;c&#039;\n         \n        \n        \n         \n          GLOB_ONLYDIR - Return only directory entries\n          which match the pattern\n         \n        \n        \n         \n          GLOB_ERR - Stop on read errors (like unreadable\n          directories), by default errors are ignored."}]},"gmdate":{"s":"Format a GMT\/UTC date\/time","y":"string gmdate\n    ( string $format\n   [, int $timestamp = time()\n  ] )","r":"Returns a formatted date string. If a non-numeric value is used for \n   timestamp, FALSE is returned and an \n   E_WARNING level error is emitted.","p":[{"t":"format","d":"The format of the outputted date string. See the formatting\n       options for the date() function."},{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."}]},"gmmktime":{"s":"Get Unix timestamp for a GMT date","y":"int gmmktime\n    ([ int $hour = gmdate(&quot;H&quot;)\n   [, int $minute = gmdate(&quot;i&quot;)\n   [, int $second = gmdate(&quot;s&quot;)\n   [, int $month = gmdate(&quot;n&quot;)\n   [, int $day = gmdate(&quot;j&quot;)\n   [, int $year = gmdate(&quot;Y&quot;)\n   [, int $is_dst = -1\n  ]]]]]]] )","r":"Returns a integer Unix timestamp.","p":[{"t":"hour","d":"The number of the hour relative to the start of the day determined by\n       month, day and year.\n       Negative values reference the hour before midnight of the day in question.\n       Values greater than 23 reference the appropriate hour in the following day(s)."},{"t":"minute","d":"The number of the minute relative to the start of the hour.\n       Negative values reference the minute in the previous hour.\n       Values greater than 59 reference the appropriate minute in the following hour(s)."},{"t":"second","d":"The number of seconds relative to the start of the minute.\n       Negative values reference the second in the previous minute.\n       Values greater than 59 reference the appropriate second in the following minute(s)."},{"t":"month","d":"The number of the month relative to the end of the previous year.\n       Values 1 to 12 reference the normal calendar months of the year in question.\n       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.\n       Values greater than 12 reference the appropriate month in the following year(s)."},{"t":"day","d":"The number of the day relative to the end of the previous month.\n       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.\n       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.\n       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s)."},{"t":"year","d":"The year"},{"t":"is_dst","d":"Parameters always represent a GMT date so is_dst\n       doesn&#039;t influence the result."}]},"gmp_abs":{"s":"Absolute value","y":"resource gmp_abs\n    ( resource $a\n   )","r":"Returns the absolute value of a, as a GMP number.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_add":{"s":"Add numbers","y":"resource gmp_add\n   ( resource $a\n  , resource $b\n   )","r":"A GMP number representing the sum of the arguments.","p":[{"t":"a","d":"A number that will be added."},{"t":"b","d":"A number that will be added."}]},"gmp_and":{"s":"Bitwise AND","y":"resource gmp_and\n    ( resource $a\n   , resource $b\n   )","r":"A GMP number representing the bitwise AND comparison.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_cmp":{"s":"Compare numbers","y":"int gmp_cmp\n    ( resource $a\n   , resource $b\n   )","r":"Returns a positive value if a &gt; b, zero if\n   a = b and a negative value if a &lt;\n   b.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_com":{"s":"Calculates one&#039;s complement","y":"resource gmp_com\n    ( resource $a\n   )","r":"Returns the one&#039;s complement of a, as a GMP number.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_divexact":{"s":"Exact division of numbers","y":"resource gmp_divexact\n    ( resource $n\n   , resource $d\n   )","r":"A GMP number resource.","p":[{"t":"n","d":"The number being divided."},{"t":"d","d":"The number that a is being divided by."}]},"gmp_div_q":{"s":"Divide numbers","y":"resource gmp_div_q\n    ( resource $a\n   , resource $b\n   [, int $round = GMP_ROUND_ZERO\n  ] )","r":"A GMP number resource.","p":[{"t":"a","d":"The number being divided."},{"t":"b","d":"The number that a is being divided by."},{"t":"round","d":"The result rounding is defined by the\n       round, which can have the following\n       values:\n       \n        \n         \n          GMP_ROUND_ZERO: The result is truncated\n          towards 0.\n         \n        \n        \n         \n          GMP_ROUND_PLUSINF: The result is\n          rounded towards +infinity.\n         \n        \n        \n         \n          GMP_ROUND_MINUSINF: The result is\n          rounded towards -infinity."}]},"gmp_div_qr":{"s":"Divide numbers and get quotient and remainder","y":"array gmp_div_qr\n    ( resource $n\n   , resource $d\n   [, int $round = GMP_ROUND_ZERO\n  ] )","r":"Returns an array, with the first\n   element being [n\/d] (the integer result of the\n   division) and the second being (n - [n\/d] * d)\n   (the remainder of the division).","p":[{"t":"n","d":"The number being divided."},{"t":"d","d":"The number that n is being divided by."},{"t":"round","d":"See the gmp_div_q() function for description\n       of the round argument."}]},"gmp_div_r":{"s":"Remainder of the division of numbers","y":"resource gmp_div_r\n   ( resource $n\n  , resource $d\n  [, int $round = GMP_ROUND_ZERO\n  ] )","r":"The remainder, as a GMP number.","p":[{"t":"n","d":"The number being divided."},{"t":"d","d":"The number that n is being divided by."},{"t":"round","d":"See the gmp_div_q() function for description\n       of the round argument."}]},"gmp_fact":{"s":"Factorial","y":"resource gmp_fact\n    ( mixed $a\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"The factorial number."}]},"gmp_gcd":{"s":"Calculate GCD","y":"resource gmp_gcd\n    ( resource $a\n   , resource $b\n   )","r":"A positive GMP number that divides into both\n   a and b.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_gcdext":{"s":"Calculate GCD and multipliers","y":"array gmp_gcdext\n    ( resource $a\n   , resource $b\n   )","r":"An array of GMP numbers.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_hamdist":{"s":"Hamming distance","y":"int gmp_hamdist\n    ( resource $a\n   , resource $b\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_init":{"s":"Create GMP number","y":"resource gmp_init\n    ( mixed $number\n   [, int $base = 0\n  ] )","r":"A GMP number resource.","p":[{"t":"number","d":"An integer or a string. The string representation can be decimal, \n       hexadecimal or octal."},{"t":"base","d":"The base."}]},"gmp_intval":{"s":"Convert GMP number to integer","y":"int gmp_intval\n   ( resource $gmpnumber\n   )","r":"An integer value of gmpnumber.","p":[{"t":"gmpnumber","d":"A GMP number."}]},"gmp_invert":{"s":"Inverse by modulo","y":"resource gmp_invert\n    ( resource $a\n   , resource $b\n   )","r":"A GMP number on success or FALSE if an inverse does not exist.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_jacobi":{"s":"Jacobi symbol","y":"int gmp_jacobi\n    ( resource $a\n   , resource $p\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"p","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_legendre":{"s":"Legendre symbol","y":"int gmp_legendre\n    ( resource $a\n   , resource $p\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"p","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_mod":{"s":"Modulo operation","y":"resource gmp_mod\n    ( resource $n\n   , resource $d\n   )","r":"A GMP number resource.","p":[{"t":"n","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"d","d":"The modulo that is being evaluated."}]},"gmp_mul":{"s":"Multiply numbers","y":"resource gmp_mul\n   ( resource $a\n  , resource $b\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"A number that will be multiplied by b."},{"t":"b","d":"A number that will be multiplied by a."}]},"gmp_neg":{"s":"Negate number","y":"resource gmp_neg\n    ( resource $a\n   )","r":"Returns -a, as a GMP number.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_nextprime":{"s":"Find next prime number","y":"resource gmp_nextprime\n    ( int $a\n   )","r":"Return the next prime number greater than a,\n   as a GMP number.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_or":{"s":"Bitwise OR","y":"resource gmp_or\n    ( resource $a\n   , resource $b\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_perfect_square":{"s":"Perfect square check","y":"bool gmp_perfect_square\n    ( resource $a\n   )","r":"Returns TRUE if a is a perfect square,\n   FALSE otherwise.","p":[{"t":"a","d":"The number being checked as a perfect square."}]},"gmp_popcount":{"s":"Population count","y":"int gmp_popcount\n    ( resource $a\n   )","r":"The population count of a, as an integer.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_pow":{"s":"Raise number into power","y":"resource gmp_pow\n    ( resource $base\n   , int $exp\n   )","r":"The new (raised) number, as a GMP number. The case of \n   0^0 yields 1.","p":[{"t":"base","d":"The base number."},{"t":"exp","d":"The positive power to raise the base."}]},"gmp_powm":{"s":"Raise number into power with modulo","y":"resource gmp_powm\n    ( resource $base\n   , resource $exp\n   , resource $mod\n   )","r":"The new (raised) number, as a GMP number.","p":[{"t":"base","d":"The base number."},{"t":"exp","d":"The positive power to raise the base."},{"t":"mod","d":"The modulo."}]},"gmp_prob_prime":{"s":"Check if number is &quot;probably prime&quot;","y":"int gmp_prob_prime\n    ( resource $a\n   [, int $reps = 10\n  ] )","r":"If this function returns 0, a is\n   definitely not prime. If it returns 1, then\n   a is &quot;probably&quot; prime.  If it returns 2,\n   then a is surely prime. ","p":[{"t":"a","d":"The number being checked as a prime."},{"t":"reps","d":"Reasonable values\n       of reps vary from 5 to 10 (default being\n       10); a higher value lowers the probability for a non-prime to\n       pass as a &quot;probable&quot; prime."}]},"gmp_random":{"s":"Random number","y":"resource gmp_random\n    ([ int $limiter = 20\n  ] )","r":"A random GMP number.","p":[{"t":"limiter","d":"The limiter."}]},"gmp_scan0":{"s":"Scan for 0","y":"int gmp_scan0\n    ( resource $a\n   , int $start\n   )","r":"Returns the index of the found bit, as an integer. The\n   index starts from 0.","p":[{"t":"a","d":"The number to scan."},{"t":"start","d":"The starting bit."}]},"gmp_scan1":{"s":"Scan for 1","y":"int gmp_scan1\n    ( resource $a\n   , int $start\n   )","r":"Returns the index of the found bit, as an integer.\n   If no set bit is found, -1 is returned.","p":[{"t":"a","d":"The number to scan."},{"t":"start","d":"The starting bit."}]},"gmp_setbit":{"s":"Set bit","y":"void gmp_setbit\n    ( resource &$a\n   , int $index\n   [, bool $bit_on = true\n  ] )","r":"A GMP number resource.","p":[{"t":"a","d":"The value to modify."},{"t":"index","d":"The index of the bit to set.  Index 0 represents the least significant bit."},{"t":"bit_on","d":"True to set the bit (set it to 1\/on); false to clear the bit (set it to 0\/off)."}]},"gmp_sign":{"s":"Sign of number","y":"int gmp_sign\n   ( resource $a\n   )","r":"Returns 1 if a is positive,\n   -1 if a is negative,\n   and 0 if a is zero.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_sqrt":{"s":"Calculate square root","y":"resource gmp_sqrt\n   ( resource $a\n   )","r":"The integer portion of the square root, as a GMP number.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmp_sqrtrem":{"s":"Square root with remainder","y":"array gmp_sqrtrem\n    ( resource $a\n   )","r":"Returns array where first element is the integer square root of\n   a and the second is the remainder\n   (i.e., the difference between a and the\n   first element squared).","p":[{"t":"a","d":"The number being square rooted."}]},"gmp_strval":{"s":"Convert GMP number to string","y":"string gmp_strval\n    ( resource $gmpnumber\n   [, int $base = 10\n  ] )","r":"The number, as a string.","p":[{"t":"gmpnumber","d":"The GMP number that will be converted to a string."},{"t":"base","d":"The base of the returned number. The default base is 10. \n       Allowed values for the base are from 2 to 62 and -2 to -36."}]},"gmp_sub":{"s":"Subtract numbers","y":"resource gmp_sub\n   ( resource $a\n  , resource $b\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"The number being subtracted from."},{"t":"b","d":"The number subtracted from a."}]},"gmp_testbit":{"s":"Tests if a bit is set","y":"bool gmp_testbit\n    ( resource $a\n   , int $index\n   )","r":"Returns TRUE if the bit is set in resource $a, \n   otherwise FALSE.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"index","d":"The bit to test"}]},"gmp_xor":{"s":"Bitwise XOR","y":"resource gmp_xor\n    ( resource $a\n   , resource $b\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"b","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."}]},"gmstrftime":{"s":"Format a GMT\/UTC time\/date according to locale settings","y":"string gmstrftime\n    ( string $format\n   [, int $timestamp = time()\n  ] )","r":"Returns a string formatted according to the given format string\n   using the given timestamp or the current\n   local time if no timestamp is given.  Month and weekday names and\n   other language dependent strings respect the current locale set\n   with setlocale().","p":[{"t":"format","d":"See description in strftime()."},{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."}]},"gnupg_adddecryptkey":{"s":"Add a key for decryption","y":"bool gnupg_adddecryptkey\n    ( resource $identifier\n   , string $fingerprint\n   , string $passphrase\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"fingerprint","d":"The fingerprint key."},{"t":"passphrase","d":"The pass phrase."}]},"gnupg_addencryptkey":{"s":"Add a key for encryption","y":"bool gnupg_addencryptkey\n    ( resource $identifier\n   , string $fingerprint\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"fingerprint","d":"The fingerprint key."}]},"gnupg_addsignkey":{"s":"Add a key for signing","y":"bool gnupg_addsignkey\n    ( resource $identifier\n   , string $fingerprint\n   [, string $passphrase\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"fingerprint","d":"The fingerprint key."},{"t":"passphrase","d":"The pass phrase."}]},"gnupg_clearencryptkeys":{"s":"Removes all keys which were set for encryption before","y":"bool gnupg_clearencryptkeys\n    ( resource $identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."}]},"gnupg_clearsignkeys":{"s":"Removes all keys which were set for signing before","y":"bool gnupg_clearsignkeys\n    ( resource $identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."}]},"gnupg_decrypt":{"s":"Decrypts a given text","y":"string gnupg_decrypt\n    ( resource $identifier\n   , string $text\n   )","r":"On success, this function returns the decrypted text.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"text","d":"The text being decrypted."}]},"gnupg_decryptverify":{"s":"Decrypts and verifies a given text","y":"array gnupg_decryptverify\n    ( resource $identifier\n   , string $text\n   , string &$plaintext\n   )","r":"On success, this function returns information about the signature and\n   fills the plaintext parameter with the decrypted text.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"text","d":"The text being decrypted."},{"t":"plaintext","d":"The parameter plaintext gets filled with the decrypted\n       text."}]},"gnupg_encrypt":{"s":"Encrypts a given text","y":"string gnupg_encrypt\n    ( resource $identifier\n   , string $plaintext\n   )","r":"On success, this function returns the encrypted text.\n    On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"plaintext","d":"The text being encrypted."}]},"gnupg_encryptsign":{"s":"Encrypts and signs a given text","y":"string gnupg_encryptsign\n    ( resource $identifier\n   , string $plaintext\n   )","r":"On success, this function returns the encrypted and signed text.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"plaintext","d":"The text being encrypted."}]},"gnupg_export":{"s":"Exports a key","y":"string gnupg_export\n    ( resource $identifier\n   , string $fingerprint\n   )","r":"On success, this function returns the keydata.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"fingerprint","d":"The fingerprint key."}]},"gnupg_geterror":{"s":"Returns the errortext, if a function fails","y":"string gnupg_geterror\n    ( resource $identifier\n   )","r":"Returns an errortext, if an error has occurred, otherwise FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."}]},"gnupg_getprotocol":{"s":"Returns the currently active protocol for all operations","y":"int gnupg_getprotocol\n    ( resource $identifier\n   )","r":"Returns the currently active protocol, which can be one of\n   GNUPG_PROTOCOL_OpenPGP or\n   GNUPG_PROTOCOL_CMS.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."}]},"gnupg_import":{"s":"Imports a key","y":"array gnupg_import\n    ( resource $identifier\n   , string $keydata\n   )","r":"On success, this function returns and info-array about the importprocess.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"keydata","d":"The data key that is being imported."}]},"gnupg_init":{"s":"Initialize a connection","y":"resource gnupg_init\n    ( void\n   )","r":"A GnuPG resource connection used by other GnuPG functions.","p":null},"gnupg_keyinfo":{"s":"Returns an array with information about all keys that matches the given pattern","y":"array gnupg_keyinfo\n    ( resource $identifier\n   , string $pattern\n   )","r":"Returns an array with information about all keys that matches the given\n   pattern or FALSE, if an error has occurred.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"pattern","d":"The pattern being checked against the keys."}]},"gnupg_setarmor":{"s":"Toggle armored output","y":"bool gnupg_setarmor\n    ( resource $identifier\n   , int $armor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"armor","d":"Pass a non-zero integer-value to this function to enable armored-output\n       (default).\n       Pass 0 to disable armored output."}]},"gnupg_seterrormode":{"s":"Sets the mode for error_reporting","y":"void gnupg_seterrormode\n    ( resource $identifier\n   , int $errormode\n   )","r":"No value is returned.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"errormode","d":"The error mode."}]},"gnupg_setsignmode":{"s":"Sets the mode for signing","y":"bool gnupg_setsignmode\n    ( resource $identifier\n   , int $signmode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"sigmode","d":"The mode for signing."}]},"gnupg_sign":{"s":"Signs a given text","y":"string gnupg_sign\n    ( resource $identifier\n   , string $plaintext\n   )","r":"On success, this function returns the signed text or the signature.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"plaintext","d":"The plain text being signed."}]},"gnupg_verify":{"s":"Verifies a signed text","y":"array gnupg_verify\n    ( resource $identifier\n   , string $signed_text\n   , string $signature\n   [, string &$plaintext\n  ] )","r":"On success, this function returns information about the signature.\n   On failure, this function returns FALSE.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."},{"t":"signed_text","d":"The signed text."},{"t":"signature","d":"The signature.\n       To verify a clearsigned text, set signature to FALSE."},{"t":"plaintext","d":"The plain text.\n       If this optional parameter is passed, it is\n       filled with the plain text."}]},"gopher_parsedir":{"s":"Translate a gopher formatted directory entry into an associative array.","y":"array gopher_parsedir\n    ( string $dirent\n   )","r":"Returns an associative array whose components are: \n   \n    \n     \n      type - One of the \n      GOPHER_XXX constants.\n     \n    \n    \n     \n      title - The name of the resource.\n     \n    \n    \n     \n      path - The path of the resource.\n     \n    \n    \n     \n      host - The domain name of the host that has\n      this document (or directory).\n     \n    \n    \n     \n      port - The port at which to connect on\n      host.","p":[{"t":"dirent","d":"The directory entry."}]},"grapheme_extract":{"s":"Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.","y":"string grapheme_extract\n    ( string $haystack\n   , int $size\n   [, int $extract_type\n   [, int $start = 0\n   [, int &$next\n  ]]] )","r":"A string starting at offset $start and ending on a default grapheme cluster\n   boundary that conforms to the $size and $extract_type specified.","p":[{"t":"haystack","d":"String to search."},{"t":"size","d":"Maximum number items - based on the $extract_type - to return."},{"t":"extract_type","d":"Defines the type of units referred to by the $size parameter:"},{"t":"start","d":"Starting position in $haystack in bytes - if given, it must be zero or a\n       positive value that is less than or equal to the length of $haystack in\n       bytes. If $start does not point to the first byte of a UTF-8\n       character, the start position is moved to the next character boundary."},{"t":"next","d":"Reference to a value that will be set to the next starting position.\n       When the call returns, this may point to the first byte position past the end of the string."}]},"grapheme_stripos":{"s":"Find position (in grapheme units) of first occurrence of a case-insensitive string","y":"int grapheme_stripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position as an integer. If needle is not found, grapheme_stripos() will return boolean FALSE.   ","p":[{"t":"haystack","d":"The string to look in. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"offset","d":"The optional $offset parameter allows you to specify where in haystack to\n       start searching as an offset in grapheme units (not bytes or characters).\n       The position returned is still relative to the beginning of haystack\n       regardless of the value of $offset."}]},"grapheme_stristr":{"s":"Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack.","y":"string grapheme_stristr\n    ( string $haystack\n   , string $needle\n   [, bool $before_needle = false\n  ] )","r":"Returns the portion of $haystack, or FALSE if $needle is not found.   ","p":[{"t":"haystack","d":"The input string. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"before_needle","d":"If TRUE, grapheme_strstr() returns the part of the\n       haystack before the first occurrence of the needle (excluding needle)."}]},"grapheme_strlen":{"s":"Get string length in grapheme units","y":"int grapheme_strlen\n    ( string $input\n   )","r":"The length of the string on success, and 0 if the string is empty.   ","p":[{"t":"input","d":"The string being measured for length. It must be a valid UTF-8 string."}]},"grapheme_strpos":{"s":"Find position (in grapheme units) of first occurrence of a string","y":"int grapheme_strpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position as an integer. If needle is not found, strpos() will return boolean FALSE.   ","p":[{"t":"haystack","d":"The string to look in. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"offset","d":"The optional $offset parameter allows you to specify where in $haystack to\n       start searching as an offset in grapheme units (not bytes or characters).\n       The position returned is still relative to the beginning of haystack\n       regardless of the value of $offset."}]},"grapheme_strripos":{"s":"Find position (in grapheme units) of last occurrence of a case-insensitive string","y":"int grapheme_strripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position as an integer. If needle is not found, grapheme_strripos() will return boolean FALSE.   ","p":[{"t":"haystack","d":"The string to look in. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"offset","d":"The optional $offset parameter allows you to specify where in $haystack to\n       start searching as an offset in grapheme units (not bytes or characters).\n       The position returned is still relative to the beginning of haystack\n       regardless of the value of $offset."}]},"grapheme_strrpos":{"s":"Find position (in grapheme units) of last occurrence of a string","y":"int grapheme_strrpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position as an integer. If needle is not found, grapheme_strrpos() will return boolean FALSE.   ","p":[{"t":"haystack","d":"The string to look in. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"offset","d":"The optional $offset parameter allows you to specify where in $haystack to\n       start searching as an offset in grapheme units (not bytes or characters).\n       The position returned is still relative to the beginning of haystack\n       regardless of the value of $offset."}]},"grapheme_strstr":{"s":"Returns part of haystack string from the first occurrence of needle to the end of haystack.","y":"string grapheme_strstr\n    ( string $haystack\n   , string $needle\n   [, bool $before_needle = false\n  ] )","r":"Returns the portion of string, or FALSE if needle is not found.   ","p":[{"t":"haystack","d":"The input string. Must be valid UTF-8."},{"t":"needle","d":"The string to look for. Must be valid UTF-8."},{"t":"before_needle","d":"If TRUE, grapheme_strstr() returns the part of the\n       haystack before the first occurrence of the needle (excluding the needle)."}]},"grapheme_substr":{"s":"Return part of a string","y":"int grapheme_substr\n    ( string $string\n   , int $start\n   [, int $length\n  ] )","r":"Returns the extracted part of $string.   ","p":[{"t":"string","d":"The input string. Must be valid UTF-8."},{"t":"start","d":"Start position in default grapheme units.\n       If $start is non-negative, the returned string will start at the\n       $start&#039;th position in $string, counting from zero. If $start is negative,\n       the returned string will start at the $start&#039;th grapheme unit from the \n       end of string."},{"t":"length","d":"Length in grapheme units.\n       If $length  is given and is positive, the string returned will contain\n       at most $length grapheme units beginning from $start (depending on the \n       length of string). If $length is given and is negative, then\n       that many grapheme units will be omitted from the end of string (after the\n       start position has been calculated when a start is negative). If $start\n       denotes a position beyond this truncation, FALSE will be returned."}]},"gupnp_context_get_host_ip":{"s":"Get the IP address","y":"string gupnp_context_get_host_ip\n    ( resource $context\n   )","r":"Returns the IP address for the current context and FALSE on error.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."}]},"gupnp_context_get_port":{"s":"Get the port","y":"int gupnp_context_get_port\n    ( resource $context\n   )","r":"Returns the port number for the current context and FALSE on error.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."}]},"gupnp_context_get_subscription_timeout":{"s":"Get the event subscription timeout","y":"int gupnp_context_get_subscription_timeout\n    ( resource $context\n   )","r":"The event subscription timeout in seconds.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."}]},"gupnp_context_host_path":{"s":"Start hosting","y":"bool gupnp_context_host_path\n    ( resource $context\n   , string $local_path\n   , string $server_path\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"local_path","d":"Path to the local file or folder to be hosted."},{"t":"server_path","d":"Web server path where local_path should be hosted."}]},"gupnp_context_new":{"s":"Create a new context","y":"resource gupnp_context_new\n    ([ string $host_ip\n   [, int $port = 0\n  ]] )","r":"A context identifier.","p":[{"t":"host_ip","d":"The local host&#039;s IP address, or NULL to use the IP address of the first non-loopback network interface."},{"t":"port","d":"Port to run on, or 0 if you don&#039;t care what port is used."}]},"gupnp_context_set_subscription_timeout":{"s":"Sets the event subscription timeout","y":"void gupnp_context_set_subscription_timeout\n    ( resource $context\n   , int $timeout\n   )","r":"No value is returned.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"timeout","d":"The event subscription timeout in seconds.\n       Use 0 if you don&#039;t want subscriptions to time out."}]},"gupnp_context_timeout_add":{"s":"Sets a function to be called at regular intervals","y":"bool gupnp_context_timeout_add\n    ( resource $context\n   , int $timeout\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"timeout","d":"A timeout in miliseconds."},{"t":"callback","d":"The callback function calling every timeout period of time. \n       Typically, callback function takes on arg parameter."},{"t":"arg","d":"User data for callback."}]},"gupnp_context_unhost_path":{"s":"Stop hosting","y":"bool gupnp_context_unhost_path\n    ( resource $context\n   , string $server_path\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"server_path","d":"Web server path where the file or folder is hosted."}]},"gupnp_control_point_browse_start":{"s":"Start browsing","y":"bool gupnp_control_point_browse_start\n    ( resource $cpoint\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"cpoint","d":"A control point identifier, returned by gupnp_control_point_new()."}]},"gupnp_control_point_browse_stop":{"s":"Stop browsing","y":"bool gupnp_control_point_browse_stop\n    ( resource $cpoint\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"cpoint","d":"A control point identifier, returned by gupnp_control_point_new()."}]},"gupnp_control_point_callback_set":{"s":"Set control point callback","y":"bool gupnp_control_point_callback_set\n    ( resource $cpoint\n   , int $signal\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"cpoint","d":"A control point identifier, returned by gupnp_control_point_new()."},{"t":"signal","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"callback","d":"The callback function for the certain signal. Typically, callback function \n       takes on two parameters. The proxy parameter&#039;s \n       identifier being the first, and the arg second."},{"t":"arg","d":"User data for callback."}]},"gupnp_device_action_callback_set":{"s":"Set device callback function","y":"bool gupnp_device_action_callback_set\n    ( resource $root_device\n   , int $signal\n   , string $action_name\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."},{"t":"signal","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"action_name","d":"The name of action."},{"t":"callback","d":"The callback function for the certain signal. Typically, callback function \n       takes on three parameters. The service parameter&#039;s \n       identifier being the first, action parameter&#039;s \n       identifier (in case GUPNP_SIGNAL_ACTION_INVOKED signal) or \n       error parameter&#039;s message (in case GUPNP_SIGNAL_NOTIFY_FAILED \n       signal) being the second, and the arg is third."},{"t":"arg","d":"User data for callback."}]},"gupnp_device_info_get":{"s":"Get info of root device","y":"array gupnp_device_info_get\n    ( resource $root_device\n   )","r":"Return array wich contains the information of the root device (like location, url, udn and etc).","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."}]},"gupnp_device_info_get_service":{"s":"Get the service with type","y":"resource gupnp_device_info_get_service\n    ( resource $root_device\n   , string $type\n   )","r":"A service identifier.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."},{"t":"type","d":"The type of the service to be retrieved."}]},"gupnp_root_device_get_available":{"s":"Check whether root device is available","y":"bool gupnp_root_device_get_available\n    ( resource $root_device\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."}]},"gupnp_root_device_get_relative_location":{"s":"Get the relative location of root device.","y":"string gupnp_root_device_get_relative_location\n    ( resource $root_device\n   )","r":"The relative location of root device","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."}]},"gupnp_root_device_new":{"s":"Create a new root device","y":"resource gupnp_root_device_new\n    ( resource $context\n   , string $location\n   , string $description_dir\n   )","r":"A root device identifier.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"location","d":"Location of the description file for this device, relative to the HTTP root"}]},"gupnp_root_device_set_available":{"s":"Set whether or not root_device is available","y":"bool gupnp_root_device_set_available\n    ( resource $root_device\n   , bool $available\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."},{"t":"available","d":"Set TRUE if root_device should be available."}]},"gupnp_root_device_start":{"s":" Start main loop","y":"bool gupnp_root_device_start\n    ( resource $root_device\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."}]},"gupnp_service_action_get":{"s":"Retrieves the specified action arguments","y":"mixed gupnp_service_action_get\n    ( resource $action\n   , string $name\n   , int $type\n   )","r":"The value of the variable.","p":[{"t":"action","d":"A service action identifier."},{"t":"name","d":"The name of the variable to retrieve."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""}]},"gupnp_service_action_return":{"s":"Return successfully","y":"bool gupnp_service_action_return\n    ( resource $action\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"action","d":"A service action identifier."}]},"gupnp_service_action_return_error":{"s":"Return error code","y":"bool gupnp_service_action_return_error\n    ( resource $action\n   , int $error_code\n   [, string $error_description\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"action","d":"A service action identifier."},{"t":"error_code","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"error_description","d":"The error description."}]},"gupnp_service_freeze_notify":{"s":"Freeze new notifications","y":"bool gupnp_service_freeze_notify\n    ( resource $service\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"service","d":"A service identifier."}]},"gupnp_service_info_get":{"s":"Get full info of service","y":"array gupnp_service_info_get\n    ( resource $proxy\n   )","r":"Return array wich contains the information of the service (like location, url, udn and etc).","p":[{"t":"proxy","d":"A service proxy identifier."}]},"gupnp_service_info_get_introspection":{"s":"Get resource introspection of service","y":"mixed gupnp_service_info_get_introspection\n    ( resource $proxy\n   [, mixed $callback\n   [, mixed $arg\n  ]] )","r":"Return true if callback function was defined.\n   Return introspection identifier if callback function was omited.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"callback","d":"The callback function to be called when introspection object is ready.\n       Typically, callback function takes on three parameters. The introspection \n       parameter&#039;s identifier being the first, error parameter&#039;s message \n       being the second, and the arg is third."},{"t":"arg","d":"User data for callback."}]},"gupnp_service_introspection_get_state_variable":{"s":"Returns the state variable data","y":"array gupnp_service_introspection_get_state_variable\n    ( resource $introspection\n   , string $variable_name\n   )","r":"Return the state variable data or FALSE.","p":[{"t":"introspection","d":"A introspection identifier."},{"t":"variable_name","d":"The name of the variable to retreive."}]},"gupnp_service_notify":{"s":"Notifies listening clients","y":"bool gupnp_service_notify\n    ( resource $service\n   , string $name\n   , int $type\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"service","d":"A service identifier."},{"t":"name","d":"The name of the variable."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"value","d":"The value of the variable."}]},"gupnp_service_proxy_action_get":{"s":"Send action to the service and get value","y":"mixed gupnp_service_proxy_action_get\n    ( resource $proxy\n   , string $action\n   , string $name\n   , int $type\n   )","r":"Return value of the action.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"action","d":"An action."},{"t":"name","d":"The action name."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""}]},"gupnp_service_proxy_action_set":{"s":"Send action to the service and set value","y":"bool gupnp_service_proxy_action_set\n    ( resource $proxy\n   , string $action\n   , string $name\n   , mixed $value\n   , int $type\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"action","d":"An action."},{"t":"name","d":"The action name."},{"t":"value","d":"The action value."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""}]},"gupnp_service_proxy_callback_set":{"s":"Set service proxy callback for signal","y":"bool gupnp_service_proxy_callback_set\n    ( resource $proxy\n   , int $signal\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"signal","d":""},{"t":"","d":""},{"t":"callback","d":"The callback function for the certain signal. Typically, callback function \n       takes on two parameters.  error parameter&#039;s message \n       being the first, and the arg is second."},{"t":"arg","d":"User data for callback."}]},"gupnp_service_proxy_get_subscribed":{"s":"Check whether subscription is valid to the service","y":"bool gupnp_service_proxy_get_subscribed\n    ( resource $proxy\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."}]},"gupnp_service_proxy_remove_notify":{"s":"Cancels the variable change notification","y":"bool gupnp_service_proxy_remove_notify\n    ( resource $proxy\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"value","d":"The variable to add notification for."}]},"gupnp_service_thaw_notify":{"s":"Sends out any pending notifications and stops queuing of new ones.","y":"bool gupnp_service_thaw_notify\n    ( resource $service\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"service","d":"A service identifier."}]},"gzclose":{"s":"Close an open gz-file pointer","y":"bool gzclose\n    ( resource $zp\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"gzcompress":{"s":"Compress a string","y":"string gzcompress\n    ( string $data\n   [, int $level = -1\n   [, int $encoding = ZLIB_ENCODING_DEFLATE\n  ]] )","r":"The compressed string or FALSE if an error occurred.","p":[{"t":"data","d":"The data to compress."},{"t":"level","d":"The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression."},{"t":"encoding","d":"One of ZLIB_ENCODING_* constants."}]},"gzdecode":{"s":"Decodes a gzip compressed string","y":"string gzdecode\n    ( string $data\n   [, int $length\n  ] )","r":"The decoded string, or FALSE if an error occurred.","p":[{"t":"data","d":"The data to decode, encoded by gzencode()."},{"t":"length","d":"The maximum length of data to decode."}]},"gzdeflate":{"s":"Deflate a string","y":"string gzdeflate\n    ( string $data\n   [, int $level = -1\n   [, int $encoding = ZLIB_ENCODING_RAW\n  ]] )","r":"The deflated string or FALSE if an error occurred.","p":[{"t":"data","d":"The data to deflate."},{"t":"level","d":"The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression. If not given, the default compression level will\n       be the default compression level of the zlib library."},{"t":"encoding","d":"One of ZLIB_ENCODING_* constants."}]},"gzencode":{"s":"Create a gzip compressed string","y":"string gzencode\n    ( string $data\n   [, int $level = -1\n   [, int $encoding_mode = FORCE_GZIP\n  ]] )","r":"The encoded string, or FALSE if an error occurred.","p":[{"t":"data","d":"The data to encode."},{"t":"level","d":"The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression. If not given, the default compression level will\n       be the default compression level of the zlib library."},{"t":"encoding_mode","d":"The encoding mode. Can be FORCE_GZIP (the default)\n       or FORCE_DEFLATE."}]},"gzeof":{"s":"Test for EOF on a gz-file pointer","y":"int gzeof\n    ( resource $zp\n   )","r":" \n   Returns TRUE if the gz-file pointer is at EOF or an error occurs;\n   otherwise returns FALSE.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"gzfile":{"s":"Read entire gz-file into an array","y":"array gzfile\n    ( string $filename\n   [, int $use_include_path = 0\n  ] )","r":"An array containing the file, one line per cell.","p":[{"t":"filename","d":"The file name."},{"t":"use_include_path","d":"You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too."}]},"gzgetc":{"s":"Get character from gz-file pointer","y":"string gzgetc\n    ( resource $zp\n   )","r":"The uncompressed character or FALSE on EOF (unlike gzeof()).","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"gzgets":{"s":"Get line from file pointer","y":"string gzgets\n    ( resource $zp\n   [, int $length\n  ] )","r":"The uncompressed string, or FALSE on error.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."},{"t":"length","d":"The length of data to get."}]},"gzgetss":{"s":"Get line from gz-file pointer and strip HTML tags","y":"string gzgetss\n    ( resource $zp\n   , int $length\n   [, string $allowable_tags\n  ] )","r":"The uncompressed and stripped string, or FALSE on error.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."},{"t":"length","d":"The length of data to get."},{"t":"allowable_tags","d":"You can use this optional parameter to specify tags which should not \n       be stripped."}]},"gzinflate":{"s":"Inflate a deflated string","y":"string gzinflate\n    ( string $data\n   [, int $length = 0\n  ] )","r":"The original uncompressed data or FALSE on error.","p":[{"t":"data","d":"The data compressed by gzdeflate()."},{"t":"length","d":"The maximum length of data to decode."}]},"gzopen":{"s":"Open gz-file","y":"resource gzopen\n    ( string $filename\n   , string $mode\n   [, int $use_include_path = 0\n  ] )","r":"Returns a file pointer to the file opened, after that, everything you read\n   from this file descriptor will be transparently decompressed and what you \n   write gets compressed.","p":[{"t":"filename","d":"The file name."},{"t":"mode","d":"As in fopen() (rb or \n       wb) but can also include a compression level \n       (wb9) or a strategy: f for\n       filtered data as in wb6f, h for\n       Huffman only compression as in wb1h.\n       (See the description of deflateInit2\n       in zlib.h for \n       more information about the strategy parameter.)"},{"t":"use_include_path","d":"You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too."}]},"gzpassthru":{"s":"Output all remaining data on a gz-file pointer","y":"int gzpassthru\n    ( resource $zp\n   )","r":"The number of uncompressed characters read from gz\n   and passed through to the input, or FALSE on error.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"gzputs":{"s":"Alias of gzwrite()","y":"","r":"","p":null},"gzread":{"s":"Binary-safe gz-file read","y":"string gzread\n    ( resource $zp\n   , int $length\n   )","r":"The data that have been read.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."},{"t":"length","d":"The number of bytes to read."}]},"gzrewind":{"s":"Rewind the position of a gz-file pointer","y":"bool gzrewind\n    ( resource $zp\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"gzseek":{"s":"Seek on a gz-file pointer","y":"int gzseek\n    ( resource $zp\n   , int $offset\n   [, int $whence = SEEK_SET\n  ] )","r":"Upon success, returns 0; otherwise, returns -1. Note that seeking\n   past EOF is not considered an error.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."},{"t":"offset","d":"The seeked offset."},{"t":"whence","d":"whence values are:\n       \n        SEEK_SET - Set position equal to offset bytes.\n        SEEK_CUR - Set position to current location plus offset."}]},"gzuncompress":{"s":"Uncompress a compressed string","y":"string gzuncompress\n    ( string $data\n   [, int $length = 0\n  ] )","r":"The original uncompressed data or FALSE on error.","p":[{"t":"data","d":"The data compressed by gzcompress()."},{"t":"length","d":"The maximum length of data to decode."}]},"gzwrite":{"s":"Binary-safe gz-file write","y":"int gzwrite\n    ( resource $zp\n   , string $string\n   [, int $length\n  ] )","r":" \n   Returns the number of (uncompressed) bytes written to the given gz-file \n   stream.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."},{"t":"string","d":"The string to write."},{"t":"length","d":"The number of uncompressed bytes to write. If supplied, writing will \n       stop after length (uncompressed) bytes have been\n       written or the end of string is reached,\n       whichever comes first."}]},"hash":{"s":"Generate a hash value (message digest)","y":"string hash\n    ( string $algo\n   , string $data\n   [, bool $raw_output = false\n  ] )","r":"Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)"},{"t":"data","d":"Message to be hashed."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits."}]},"hash_algos":{"s":"Return a list of registered hashing algorithms","y":"array hash_algos\n    ( void\n   )","r":"Returns a numerically indexed array containing the list of supported\n   hashing algorithms.","p":null},"hash_copy":{"s":"Copy hashing context","y":"resource hash_copy\n    ( resource $context\n   )","r":"Returns a copy of Hashing Context resource.","p":[{"t":"context","d":"Hashing context returned by hash_init()."}]},"hash_file":{"s":"Generate a hash value using the contents of a given file","y":"string hash_file\n    ( string $algo\n   , string $filename\n   [, bool $raw_output = false\n  ] )","r":"Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)"},{"t":"filename","d":"URL describing location of file to be hashed; Supports fopen wrappers."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits."}]},"hash_final":{"s":"Finalize an incremental hash and return resulting digest","y":"string hash_final\n    ( resource $context\n   [, bool $raw_output = false\n  ] )","r":"Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.","p":[{"t":"context","d":"Hashing context returned by hash_init()."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits."}]},"hash_hmac":{"s":"Generate a keyed hash value using the HMAC method","y":"string hash_hmac\n    ( string $algo\n   , string $data\n   , string $key\n   [, bool $raw_output = false\n  ] )","r":"Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n   Returns FALSE when algo is unknown.","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms."},{"t":"data","d":"Message to be hashed."},{"t":"key","d":"Shared secret key used for generating the HMAC variant of the message digest."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits."}]},"hash_hmac_file":{"s":"Generate a keyed hash value using the HMAC method and the contents of a given file","y":"string hash_hmac_file\n    ( string $algo\n   , string $filename\n   , string $key\n   [, bool $raw_output = false\n  ] )","r":"Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms."},{"t":"filename","d":"URL describing location of file to be hashed; Supports fopen wrappers."},{"t":"key","d":"Shared secret key used for generating the HMAC variant of the message digest."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits."}]},"hash_init":{"s":"Initialize an incremental hashing context","y":"resource hash_init\n    ( string $algo\n   [, int $options = 0\n   [, string $key = NULL\n  ]] )","r":"Returns a Hashing Context resource for use with hash_update(),\n   hash_update_stream(), hash_update_file(),\n   and hash_final().","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..). For a list of supported algorithms see hash_algos()."},{"t":"options","d":"Optional settings for hash generation, currently supports only one option:\n       HASH_HMAC.  When specified, the key\n       must be specified."},{"t":"key","d":"When HASH_HMAC is specified for options,\n       a shared secret key to be used with the HMAC hashing method must be supplied in this\n       parameter."}]},"hash_pbkdf2":{"s":"Generate a PBKDF2 key derivation of a supplied password","y":"string hash_pbkdf2\n    ( string $algo\n   , string $password\n   , string $salt\n   , int $iterations\n   [, int $length = 0\n   [, bool $raw_output = false\n  ]] )","r":"Returns a string containing the derived key as lowercase hexits unless\n   raw_output is set to TRUE in which case the raw\n   binary representation of the derived key is returned.","p":[{"t":"algo","d":"Name of selected hashing algorithm (i.e. md5,\n       sha256, haval160,4, etc..) See\n       hash_algos() for a list of supported algorithms."},{"t":"password","d":"The password to use for the derivation."},{"t":"salt","d":"The salt to use for the derivation. This value should be generated randomly."},{"t":"iterations","d":"The number of internal iterations to perform for the derivation."},{"t":"length","d":"The length of the output string. If raw_output\n       is TRUE this corresponds to the byte-length of the derived key, if\n       raw_output is FALSE this corresponds to twice the\n       byte-length of the derived key (as every byte of the key is returned as\n       two hexits)."},{"t":"raw_output","d":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase\n       hexits."}]},"hash_update":{"s":"Pump data into an active hashing context","y":"bool hash_update\n    ( resource $context\n   , string $data\n   )","r":"Returns TRUE.","p":[{"t":"context","d":"Hashing context returned by hash_init()."},{"t":"data","d":"Message to be included in the hash digest."}]},"hash_update_file":{"s":"Pump data into an active hashing context from a file","y":"bool hash_update_file\n    ( resource $hcontext\n   , string $filename\n   [, resource $scontext = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"hcontext","d":"Hashing context returned by hash_init()."},{"t":"filename","d":"URL describing location of file to be hashed; Supports fopen wrappers."},{"t":"scontext","d":"Stream context as returned by stream_context_create()."}]},"hash_update_stream":{"s":"Pump data into an active hashing context from an open stream","y":"int hash_update_stream\n    ( resource $context\n   , resource $handle\n   [, int $length = -1\n  ] )","r":"Actual number of bytes added to the hashing context from handle.","p":[{"t":"context","d":"Hashing context returned by hash_init()."},{"t":"handle","d":"Open file handle as returned by any stream creation function."},{"t":"length","d":"Maximum number of characters to copy from handle\n       into the hashing context."}]},"header":{"s":"Send a raw HTTP header","y":"void header\n    ( string $string\n   [, bool $replace = true\n   [, int $http_response_code\n  ]] )","r":"No value is returned.","p":[{"t":"string","d":"The header string."}]},"headers_list":{"s":"Returns a list of response headers sent (or ready to send)","y":"array headers_list\n    ( void\n   )","r":"Returns a numerically indexed array of headers.","p":null},"headers_sent":{"s":"Checks if or where headers have been sent","y":"bool headers_sent\n    ([ string &$file\n   [, int &$line\n  ]] )","r":"headers_sent() will return FALSE if no HTTP headers\n   have already been sent or TRUE otherwise.","p":[{"t":"file","d":"If the optional file and\n       line parameters are set, \n       headers_sent() will put the PHP source file name\n       and line number where output started in the file\n       and line variables."},{"t":"line","d":"The line number where the output started."}]},"header_register_callback":{"s":"Call a header function","y":"bool header_register_callback\n    ( callable $callback\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"callback","d":"Function called just before the headers are sent. It gets no parameters\n      and the return value is ignored."}]},"header_remove":{"s":"Remove previously set headers","y":"void header_remove\n    ([ string $name\n  ] )","r":"No value is returned.","p":[{"t":"name","d":"The header name to be removed."}]},"hebrevc":{"s":"Convert logical Hebrew text to visual text with newline conversion","y":"string hebrevc\n    ( string $hebrew_text\n   [, int $max_chars_per_line = 0\n  ] )","r":"Returns the visual string.","p":[{"t":"hebrew_text","d":"A Hebrew input string."},{"t":"max_chars_per_line","d":"This optional parameter indicates maximum number of characters per\n       line that will be returned."}]},"hex2bin":{"s":"Decodes a hexadecimally encoded binary string","y":"string hex2bin\n    ( string $data\n   )","r":"Returns the binary representation of the given data  or FALSE on failure.","p":[{"t":"data","d":"Hexadecimal representation of data."}]},"hexdec":{"s":"Hexadecimal to decimal","y":"number hexdec\n     ( string $hex_string\n    )","r":"The decimal representation of hex_string","p":[{"t":"hex_string","d":"The hexadecimal string to convert"}]},"highlight_file":{"s":"Syntax highlighting of a file","y":"mixed highlight_file\n    ( string $filename\n   [, bool $return = false\n  ] )","r":"If return is set to TRUE, returns the highlighted\n   code as a string instead of printing it out. Otherwise, it will return\n   TRUE on success, FALSE on failure.","p":[{"t":"filename","d":"Path to the PHP file to be highlighted."},{"t":"return","d":"Set this parameter to TRUE to make this function return the\n       highlighted code."}]},"highlight_string":{"s":"Syntax highlighting of a string","y":"mixed highlight_string\n    ( string $str\n   [, bool $return = false\n  ] )","r":"If return is set to TRUE, returns the highlighted\n   code as a string instead of printing it out. Otherwise, it will return\n   TRUE on success, FALSE on failure.","p":[{"t":"str","d":"The PHP code to be highlighted. This should include the opening tag."},{"t":"return","d":"Set this parameter to TRUE to make this function return the\n       highlighted code."}]},"htmlentities":{"s":"Convert all applicable characters to HTML entities","y":"string htmlentities\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $encoding = &quot;UTF-8&quot;\n   [, bool $double_encode = true\n  ]]] )","r":"Returns the encoded string.","p":[{"t":"string","d":"The input string."},{"t":"flags","d":"A bitmask of one or more of the following flags, which specify how to handle quotes,\n       invalid code unit sequences and the used document type. The default is\n       ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_IGNORE\n           \n            Silently discard invalid code unit sequences instead of returning\n            an empty string. Using this flag is discouraged as it\n            &raquo;&nbsp;may have security implications.\n           \n          \n\n          \n           ENT_SUBSTITUTE\n           \n            Replace invalid code unit sequences with a Unicode Replacement Character\n            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.\n           \n          \n\n          \n           ENT_DISALLOWED\n           \n            Replace invalid code points for the given document type with a\n            Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;\n            (otherwise) instead of leaving them as is. This may be useful, for\n            instance, to ensure the well-formedness of XML documents with\n            embedded external content.\n           \n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5."},{"t":"encoding","d":"Like htmlspecialchars(),\n       htmlentities() takes an optional third argument\n       encoding which defines encoding used in\n       conversion.\n       From PHP 5.6.0, default_charset\n       value is used as default. From PHP 5.4.0, UTF-8 is the default.\n       PHP prior to 5.4.0, ISO-8859-1 is used as the default.\n       Although this argument is technically optional, you are highly\n       encouraged to specify the correct value for your code."},{"t":"double_encode","d":"When double_encode is turned off PHP will not\n       encode existing html entities. The default is to convert everything."}]},"htmlspecialchars":{"s":"Convert special characters to HTML entities","y":"string htmlspecialchars\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $encoding = &quot;UTF-8&quot;\n   [, bool $double_encode = true\n  ]]] )","r":"The converted string.","p":[{"t":"string","d":"The string being converted."},{"t":"flags","d":"A bitmask of one or more of the following flags, which specify how to handle quotes,\n       invalid code unit sequences and the used document type. The default is\n       ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_IGNORE\n           \n            Silently discard invalid code unit sequences instead of returning\n            an empty string. Using this flag is discouraged as it\n            &raquo;&nbsp;may have security implications.\n           \n          \n\n          \n           ENT_SUBSTITUTE\n           \n            Replace invalid code unit sequences with a Unicode Replacement Character\n            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.\n           \n          \n\n          \n           ENT_DISALLOWED\n           \n            Replace invalid code points for the given document type with a\n            Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;\n            (otherwise) instead of leaving them as is. This may be useful, for\n            instance, to ensure the well-formedness of XML documents with\n            embedded external content.\n           \n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5."},{"t":"encoding","d":"From PHP 5.6.0, default_charset\n       value is used as default. From PHP 5.4.0, UTF-8 is the default.\n       PHP prior to 5.4.0, ISO-8859-1 is used as the default.\n       Although this argument is technically optional, you are highly\n       encouraged to specify the correct value for your code."},{"t":"double_encode","d":"When double_encode is turned off PHP will not\n       encode existing html entities, the default is to convert everything."}]},"htmlspecialchars_decode":{"s":"Convert special HTML entities back to characters","y":"string htmlspecialchars_decode\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n  ] )","r":"Returns the decoded string.","p":[{"t":"string","d":"The string to decode."},{"t":"flags","d":"A bitmask of one or more of the following flags, which specify how to handle quotes and\n       which document type to use. The default is ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5."}]},"html_entity_decode":{"s":"Convert all HTML entities to their applicable characters","y":"string html_entity_decode\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $encoding = &quot;UTF-8&quot;\n  ]] )","r":"Returns the decoded string.","p":[{"t":"string","d":"The input string."},{"t":"flags","d":"A bitmask of one or more of the following flags, which specify how to handle quotes and\n       which document type to use. The default is ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5."},{"t":"encoding","d":"Encoding to use.\n       If omitted, the default value for this argument is ISO-8859-1 in\n       versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards."}]},"http_build_query":{"s":"Generate URL-encoded query string","y":"string http_build_query\n    ( mixed $query_data\n   [, string $numeric_prefix\n   [, string $arg_separator\n   [, int $enc_type = PHP_QUERY_RFC1738\n  ]]] )","r":"Returns a URL-encoded string.","p":[{"t":"query_data","d":"May be an array or object containing properties."},{"t":"numeric_prefix","d":"If numeric indices are used in the base array and this parameter is\n       provided, it will be prepended to the numeric index for elements in\n       the base array only."},{"t":"arg_separator","d":"arg_separator.output\n       is used to separate arguments, unless this parameter is specified,\n       and is then used."},{"t":"enc_type","d":"By default, PHP_QUERY_RFC1738."}]},"http_build_url":{"s":"Build a URL","y":"string http_build_url\n    ([ mixed $url\n   [, mixed $parts\n   [, int $flags = HTTP_URL_REPLACE\n   [, array &$new_url\n  ]]]] )","r":"Returns the new URL as string on success or FALSE on failure.","p":[{"t":"url","d":"(part(s) of) an URL in form of a string or associative array like parse_url() returns"},{"t":"parts","d":"same as the first argument"},{"t":"flags","d":"a bitmask of binary or&#039;ed HTTP_URL constants;\n       HTTP_URL_REPLACE is the default"},{"t":"new_url","d":"if set, it will be filled with the parts of the composed url like parse_url() would return"}]},"http_cache_etag":{"s":"Caching by ETag","y":"bool http_cache_etag\n    ([ string $etag\n  ] )","r":"Returns FALSE or exits on success with 304 Not Modified if the entity is cached.\n   See the INI setting\nhttp.force_exit for what &quot;exits&quot; means.","p":[{"t":"etag","d":"custom ETag"}]},"http_cache_last_modified":{"s":"Caching by last modification","y":"bool http_cache_last_modified\n    ([ int $timestamp_or_expires\n  ] )","r":"Returns FALSE or exits on success with 304 Not Modified if the entity is cached.\n   See the INI setting\nhttp.force_exit for what &quot;exits&quot; means.","p":[{"t":"timestamp_or_expires","d":"Unix timestamp"}]},"http_chunked_decode":{"s":"Decode chunked-encoded data","y":"string http_chunked_decode\n    ( string $encoded\n   )","r":"Returns the decoded string on success or FALSE on failure.","p":[{"t":"encoded","d":"chunked encoded string"}]},"http_date":{"s":"Compose HTTP RFC compliant date","y":"string http_date\n    ([ int $timestamp\n  ] )","r":"Returns the HTTP date as string.","p":[{"t":"timestamp","d":"Unix timestamp; current time if omitted"}]},"http_get":{"s":"Perform GET request","y":"string http_get\n    ( string $url\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"options","d":"request options"},{"t":"info","d":"Will be filled with request\/response information"}]},"http_get_request_body":{"s":"Get request body as string","y":"string http_get_request_body\n    ( void\n   )","r":"Returns the raw request body as string on success or NULL on failure.","p":null},"http_get_request_body_stream":{"s":"Get request body as stream","y":"resource http_get_request_body_stream\n    ( void\n   )","r":"Returns the raw request body as stream on success or NULL on failure.","p":null},"http_get_request_headers":{"s":"Get request headers as array","y":"array http_get_request_headers\n    ( void\n   )","r":"Returns an associative array of incoming request headers.","p":null},"http_head":{"s":"Perform HEAD request","y":"string http_head\n    ( string $url\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_inflate":{"s":"Inflate data","y":"string http_inflate\n    ( string $data\n   )","r":"Returns the decoded string on success, or NULL on failure.","p":[{"t":"data","d":"string containing the compressed data"}]},"http_match_etag":{"s":"Match ETag","y":"bool http_match_etag\n    ( string $etag\n   [, bool $for_range = false\n  ] )","r":"Returns TRUE if ETag matches or the header contained the asterisk (&quot;*&quot;), else FALSE.","p":[{"t":"etag","d":"the ETag to match"},{"t":"for_range","d":"if set to TRUE, the header usually used to validate HTTP ranges will be checked"}]},"http_match_modified":{"s":"Match last modification","y":"bool http_match_modified\n    ([ int $timestamp = -1\n   [, bool $for_range = false\n  ]] )","r":"Returns TRUE if timestamp represents an earlier date than the header, else FALSE.","p":[{"t":"timestamp","d":"Unix timestamp; current time, if omitted"},{"t":"for_range","d":"if set to TRUE, the header usually used to validate HTTP ranges will be checked"}]},"http_match_request_header":{"s":"Match any header","y":"bool http_match_request_header\n    ( string $header\n   , string $value\n   [, bool $match_case = false\n  ] )","r":"Returns TRUE if header value matches, else FALSE.","p":[{"t":"header","d":"the header name (case-insensitive)"},{"t":"value","d":"the header value that should be compared"},{"t":"match_case","d":"whether the value should be compared case sensitively"}]},"http_negotiate_charset":{"s":"Negotiate client&#039;s preferred character set","y":"string http_negotiate_charset\n    ( array $supported\n   [, array &$result\n  ] )","r":"Returns the negotiated charset or the default charset (i.e. first array entry) if none match.","p":[{"t":"supported","d":"array containing the supported charsets as values"},{"t":"result","d":"will be filled with an array containing the negotiation results"}]},"http_negotiate_content_type":{"s":"Negotiate client&#039;s preferred content type","y":"string http_negotiate_content_type\n    ( array $supported\n   [, array &$result\n  ] )","r":"Returns the negotiated content type or the default content type (i.e. first array entry) if none match.","p":[{"t":"supported","d":"array containing the supported content types as values"},{"t":"result","d":"will be filled with an array containing the negotiation results"}]},"http_negotiate_language":{"s":"Negotiate client&#039;s preferred language","y":"string http_negotiate_language\n    ( array $supported\n   [, array &$result\n  ] )","r":"Returns the negotiated language or the default language (i.e. first array entry) if none match.","p":[{"t":"supported","d":"array containing the supported languages as values"},{"t":"result","d":"will be filled with an array containing the negotiation results"}]},"http_parse_cookie":{"s":"Parse HTTP cookie","y":"object http_parse_cookie\n    ( string $cookie\n   [, int $flags\n   [, array $allowed_extras\n  ]] )","r":"Returns a stdClass object on success or FALSE on failure.","p":[{"t":"cookie","d":"string containing the value of a Set-Cookie response header"},{"t":"flags","d":"parse flags (HTTP_COOKIE_PARSE_RAW)"},{"t":"allowed_extras","d":"array containing recognized extra keys;\n       by default all unknown keys will be treated as cookie names"}]},"http_parse_headers":{"s":"Parse HTTP headers","y":"array http_parse_headers\n    ( string $header\n   )","r":"Returns an array on success or FALSE on failure.","p":[{"t":"header","d":"string containing HTTP headers"}]},"http_parse_message":{"s":"Parse HTTP messages","y":"object http_parse_message\n    ( string $message\n   )","r":"Returns a hierarchical object structure of the parsed messages.","p":[{"t":"message","d":"string containing a single HTTP message or several consecutive HTTP messages"}]},"http_parse_params":{"s":"Parse parameter list","y":"object http_parse_params\n    ( string $param\n   [, int $flags = HTTP_PARAMS_DEFAULT\n  ] )","r":"Returns parameter list as stdClass object.","p":[{"t":"param","d":"Parameters"},{"t":"flags","d":"Parse flags"}]},"http_persistent_handles_clean":{"s":"Clean up persistent handles","y":"string http_persistent_handles_clean\n    ([ string $ident\n  ] )","r":"No value is returned.","p":[{"t":"clean","d":"the identification string"}]},"http_persistent_handles_count":{"s":"Stat persistent handles","y":"object http_persistent_handles_count\n    ( void\n   )","r":"Returns persistent handles statistics as stdClass object on success or FALSE on failure.","p":null},"http_persistent_handles_ident":{"s":"Get\/set ident of persistent handles","y":"string http_persistent_handles_ident\n    ([ string $ident\n  ] )","r":"Returns the prior ident as string on success or FALSE on failure.","p":[{"t":"ident","d":"the identification string"}]},"http_post_data":{"s":"Perform POST request with pre-encoded data","y":"string http_post_data\n    ( string $url\n   , string $data\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"data","d":"String containing the pre-encoded post data"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_post_fields":{"s":"Perform POST request with data to be encoded","y":"string http_post_fields\n    ( string $url\n   , array $data\n   [, array $files\n   [, array $options\n   [, array &$info\n  ]]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"data","d":"Associative array of POST values"},{"t":"files","d":"Array of files to post"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_put_data":{"s":"Perform PUT request with data","y":"string http_put_data\n    ( string $url\n   , string $data\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"data","d":"PUT request body"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_put_file":{"s":"Perform PUT request with file","y":"string http_put_file\n    ( string $url\n   , string $file\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"file","d":"The file to put"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_put_stream":{"s":"Perform PUT request with stream","y":"string http_put_stream\n    ( string $url\n   , resource $stream\n   [, array $options\n   [, array &$info\n  ]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"url","d":"URL"},{"t":"stream","d":"The stream to read the PUT request body from"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_redirect":{"s":"Issue HTTP redirect","y":"bool http_redirect\n    ([ string $url\n   [, array $params\n   [, bool $session = false\n   [, int $status = 0\n  ]]]] )","r":"Returns FALSE or exits on success with the specified redirection status code.\n   See the INI setting\nhttp.force_exit for what &quot;exits&quot; means.","p":[{"t":"url","d":"the URL to redirect to"},{"t":"params","d":"associative array of query parameters"},{"t":"session","d":"whether to append session information"},{"t":"status","d":"custom response status code"}]},"http_request":{"s":"Perform custom request","y":"string http_request\n    ( int $method\n   , string $url\n   [, string $body\n   [, array $options\n   [, array &$info\n  ]]] )","r":"Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.","p":[{"t":"method","d":"Request method"},{"t":"url","d":"URL"},{"t":"body","d":"Request body"},{"t":"options","d":"request options"},{"t":"info","d":"Request\/response information"}]},"http_request_body_encode":{"s":"Encode request body","y":"string http_request_body_encode\n    ( array $fields\n   , array $files\n   )","r":"Returns encoded string on success or FALSE on failure.","p":[{"t":"fields","d":"POST fields"},{"t":"files","d":"POST files"}]},"http_request_method_exists":{"s":"Check whether request method exists","y":"int http_request_method_exists\n    ( mixed $method\n   )","r":"Returns TRUE if the request method is known, else FALSE.","p":[{"t":"method","d":"request method name or ID"}]},"http_request_method_register":{"s":"Register request method","y":"int http_request_method_register\n    ( string $method\n   )","r":"Returns the ID of the request method on success or FALSE on failure.","p":[{"t":"method","d":"the request method name to register"}]},"http_request_method_unregister":{"s":"Unregister request method","y":"bool http_request_method_unregister\n    ( mixed $method\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"method","d":"The request method name or ID"}]},"http_response_code":{"s":"Get or Set the HTTP response code","y":"int http_response_code\n    ([ int $response_code\n  ] )","r":"The current response code. By default the return value is int(200).","p":[{"t":"response_code","d":"The optional response_code will set the response code."}]},"http_send_content_disposition":{"s":"Send Content-Disposition","y":"bool http_send_content_disposition\n    ( string $filename\n   [, bool $inline = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"the file name the &quot;Save as...&quot; dialog should display"},{"t":"inline","d":"if set to TRUE and the user agent knows how to handle the content type,\n       it will probably not cause the popup window to be shown"}]},"http_send_content_type":{"s":"Send Content-Type","y":"bool http_send_content_type\n    ([ string $content_type = &quot;application\/x-octetstream&quot;\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"content_type","d":"the desired content type  (primary\/secondary)"}]},"http_send_data":{"s":"Send arbitrary data","y":"bool http_send_data\n    ( string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":"data to send"}]},"http_send_file":{"s":"Send file","y":"bool http_send_file\n    ( string $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"file","d":"the file to send"}]},"http_send_last_modified":{"s":"Send Last-Modified","y":"bool http_send_last_modified\n    ([ int $timestamp = time()\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"timestamp","d":"a Unix timestamp, converted to a valid HTTP date;\n       if omitted, the current time will be sent"}]},"http_send_status":{"s":"Send HTTP response status","y":"bool http_send_status\n    ( int $status\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"status","d":"HTTP status code (100-599)"}]},"http_send_stream":{"s":"Send stream","y":"bool http_send_stream\n    ( resource $stream\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream","d":"stream to read from (must be seekable)"}]},"http_support":{"s":"Check built-in HTTP support","y":"int http_support\n    ([ int $feature = 0\n  ] )","r":"Returns integer, whether requested feature is supported,\n   or a bitmask with all supported features if feature was omitted.","p":[{"t":"feature","d":"feature to probe for"}]},"http_throttle":{"s":"HTTP throttling","y":"void http_throttle\n    ( float $sec\n   [, int $bytes = 40960\n  ] )","r":"","p":[{"t":"sec","d":"seconds to sleep after each chunk sent"},{"t":"bytes","d":"the chunk size in bytes"}]},"hwapi_attribute_new":{"s":"Creates instance of class hw_api_attribute","y":"HW_API_Attribute hwapi_attribute_new\n    ([ string $name\n   [, string $value\n  ]] )","r":"Returns an instance of hw_api_attribute.","p":[{"t":"name","d":"The attribute name."},{"t":"value","d":"The attribute value."}]},"hwapi_content_new":{"s":"Create new instance of class hw_api_content","y":"HW_API_Content hwapi_content_new\n    ( string $content\n   , string $mimetype\n   )","r":"","p":[{"t":"content","d":""},{"t":"mimetype","d":"The mimetype for the contents."}]},"hwapi_hgcsp":{"s":"Returns object of class hw_api","y":"HW_API hwapi_hgcsp\n    ( string $hostname\n   [, int $port\n  ] )","r":"Returns an instance of HW_API.","p":[{"t":"hostname","d":"The host name."},{"t":"port","d":"If you do not pass a port number, 418 is used."}]},"hwapi_object_new":{"s":"Creates a new instance of class hwapi_object_new","y":"hw_api_object hwapi_object_new\n    ( array $parameter\n   )","r":"","p":[{"t":"parameter","d":""}]},"hw_changeobject":{"s":"Changes attributes of an object (obsolete)","y":"bool hw_changeobject\n    ( int $link\n   , int $objid\n   , array $attributes\n   )","r":"","p":null},"hw_connection_info":{"s":"Prints information about the connection to Hyperwave server","y":"void hw_connection_info\n    ( int $link\n   )","r":"","p":null},"hw_cp":{"s":"Copies objects","y":"int hw_cp\n    ( int $connection\n   , array $object_id_array\n   , int $destination_id\n   )","r":"Returns the number of copied objects.","p":[{"t":"connection","d":"The connection identifier."},{"t":"object_id_array","d":"An array of object ids."},{"t":"destination_id","d":"The target collection id."}]},"hw_dummy":{"s":"Hyperwave dummy function","y":"string hw_dummy\n    ( int $link\n   , int $id\n   , int $msgid\n   )","r":"","p":null},"hw_getremotechildren":{"s":"Gets children of remote document","y":"mixed hw_getremotechildren\n    ( int $connection\n   , string $object_record\n   )","r":"If the number of children is 1 the function will return the document\n   itself formatted by the Hyperwave Gateway Interface (HGI). If the number\n   of children is greater than 1 it will return an array of object record\n   with each maybe the input value for another call to\n   hw_getremotechildren(). Those object records are\n   virtual and do not exist in the Hyperwave server, therefore they do not\n   have a valid object ID. How exactly such an object record looks like is up\n   to the HGI.","p":[{"t":"connection","d":"The connection identifier."},{"t":"object_record","d":"The object record."}]},"hw_getusername":{"s":"Name of currently logged in user","y":"string hw_getusername\n    ( int $connection\n   )","r":"Returns the username as a string.","p":[{"t":"connection","d":"The connection identifier."}]},"hw_insertanchors":{"s":"Inserts only anchors into text","y":"bool hw_insertanchors\n    ( int $hwdoc\n   , array $anchorecs\n   , array $dest\n   [, array $urlprefixes\n  ] )","r":"","p":null},"hw_mapid":{"s":"Maps global id on virtual local id","y":"int hw_mapid\n    ( int $connection\n   , int $server_id\n   , int $object_id\n   )","r":"Returns the virtual object id.","p":[{"t":"connection","d":"The connection identifier."},{"t":"server_id","d":"The server id is the first part of the global object id (GOid) of the\n       object which is actually the IP number as an integer."},{"t":"object_id","d":"The object identifier."}]},"hw_mv":{"s":"Moves objects","y":"int hw_mv\n    ( int $connection\n   , array $object_id_array\n   , int $source_id\n   , int $destination_id\n   )","r":"Returns the number of moved objects.","p":[{"t":"connection","d":"The connection identifier."},{"t":"object_id_array","d":"An array of object ids."},{"t":"source_id","d":"The source collection id."},{"t":"destination_id","d":"The target collection id. If set to 0 the objects will be unlinked\n       from the source collection. If this is the last instance of that\n       object it will be deleted. If you want to delete all instances at\n       once, use hw_deleteobject()."}]},"hw_objrec2array":{"s":"Convert attributes from object record to object array","y":"array hw_objrec2array\n    ( string $object_record\n   [, array $format\n  ] )","r":"Returns an array. The keys of the resulting array are the attributes names.\n   Multi-value attributes like &#039;Title&#039; in different languages form its own\n   array. The keys of this array are the left part to the colon of the\n   attribute value. This left part must be two characters long.","p":[{"t":"object_record","d":"The object record."},{"t":"format","d":"An associative array with the attribute name as its key and the value\n       being one of HW_ATTR_LANG or\n       HW_ATTR_NONE."}]},"hw_setlinkroot":{"s":"Set the id to which links are calculated","y":"int hw_setlinkroot\n    ( int $link\n   , int $rootid\n   )","r":"","p":null},"hw_stat":{"s":"Returns status string","y":"string hw_stat\n    ( int $link\n   )","r":"","p":null},"hypot":{"s":"Calculate the length of the hypotenuse of a right-angle triangle","y":"float hypot\n    ( float $x\n   , float $y\n   )","r":"Calculated length of the hypotenuse","p":[{"t":"x","d":"Length of first side"},{"t":"y","d":"Length of second side"}]},"ibase_add_user":{"s":"Add a user to a security database","y":"bool ibase_add_user\n    ( resource $service_handle\n   , string $user_name\n   , string $password\n   [, string $first_name\n   [, string $middle_name\n   [, string $last_name\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ibase_affected_rows":{"s":"Return the number of rows that were affected by the previous query","y":"int ibase_affected_rows\n    ([ resource $link_identifier\n  ] )","r":"Returns the number of rows as an integer.","p":[{"t":"link_identifier","d":"A transaction context. If link_identifier is a\n       connection resource, its default transaction is used."}]},"ibase_backup":{"s":"Initiates a backup task in the service manager and returns immediately","y":"mixed ibase_backup\n    ( resource $service_handle\n   , string $source_db\n   , string $dest_file\n   [, int $options = 0\n   [, bool $verbose = false\n  ]] )","r":"","p":null},"ibase_blob_add":{"s":"Add data into a newly created blob","y":"void ibase_blob_add\n    ( resource $blob_handle\n   , string $data\n   )","r":"No value is returned.","p":[{"t":"blob_handle","d":"A blob handle opened with ibase_blob_create()."},{"t":"data","d":"The data to be added."}]},"ibase_blob_cancel":{"s":"Cancel creating blob","y":"bool ibase_blob_cancel\n    ( resource $blob_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"blob_handle","d":"A BLOB handle opened with ibase_blob_create()."}]},"ibase_blob_close":{"s":"Close blob","y":"mixed ibase_blob_close\n    ( resource $blob_handle\n   )","r":"If the BLOB was being read, this function returns TRUE on success, if\n   the BLOB was being written to, this function returns a string containing\n   the BLOB id that has been assigned to it by the database. On failure, this\n   function returns FALSE.","p":[{"t":"blob_handle","d":"A BLOB handle opened with ibase_blob_create() or\n       ibase_blob_open()."}]},"ibase_blob_create":{"s":"Create a new blob for adding data","y":"resource ibase_blob_create\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns a BLOB handle for later use with\n   ibase_blob_add() or FALSE on failure.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."}]},"ibase_blob_echo":{"s":"Output blob contents to browser","y":"bool ibase_blob_echo\n    ( string $blob_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."},{"t":"blob_id","d":""}]},"ibase_blob_import":{"s":"Create blob, copy file in it, and close it","y":"string ibase_blob_import\n    ( resource $link_identifier\n   , resource $file_handle\n   )","r":"Returns the BLOB id on success, or FALSE on error.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."},{"t":"file_handle","d":"The file handle is a handle returned by fopen()."}]},"ibase_blob_info":{"s":"Return blob length and other useful info","y":"array ibase_blob_info\n    ( resource $link_identifier\n   , string $blob_id\n   )","r":"Returns an array containing information about a BLOB. The information returned\n   consists of the length of the BLOB, the number of segments it contains, the size\n   of the largest segment, and whether it is a stream BLOB or a segmented BLOB.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."},{"t":"blob_id","d":"A BLOB id."}]},"ibase_blob_open":{"s":"Open blob for retrieving data parts","y":"resource ibase_blob_open\n    ( resource $link_identifier\n   , string $blob_id\n   )","r":"Returns a BLOB handle for later use with \n   ibase_blob_get() or FALSE on failure.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."},{"t":"blob_id","d":"A BLOB id."}]},"ibase_close":{"s":"Close a connection to an InterBase database","y":"bool ibase_close\n    ([ resource $connection_id = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection_id","d":"An InterBase link identifier returned from\n       ibase_connect(). If omitted, the last opened link\n       is assumed."}]},"ibase_commit":{"s":"Commit a transaction","y":"bool ibase_commit\n    ([ resource $link_or_trans_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_or_trans_identifier","d":"If called without an argument, this function commits the default\n       transaction of the default link. If the argument is a connection\n       identifier, the default transaction of the corresponding connection\n       will be committed. If the argument is a transaction identifier, the\n       corresponding transaction will be committed."}]},"ibase_commit_ret":{"s":"Commit a transaction without closing it","y":"bool ibase_commit_ret\n    ([ resource $link_or_trans_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_or_trans_identifier","d":"If called without an argument, this function commits the default\n       transaction of the default link. If the argument is a connection\n       identifier, the default transaction of the corresponding connection\n       will be committed. If the argument is a transaction identifier, the\n       corresponding transaction will be committed. The transaction context\n       will be retained, so statements executed from within this transaction\n       will not be invalidated."}]},"ibase_connect":{"s":"Open a connection to a database","y":"resource ibase_connect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, int $buffers\n   [, int $dialect\n   [, string $role\n   [, int $sync\n  ]]]]]]]] )","r":"Returns an Firebird\/InterBase link identifier on success, or FALSE on error.","p":[{"t":"database","d":"The database argument has to be a valid path to\n       database file on the server it resides on. If the server is not local,\n       it must be prefixed with either &#039;hostname:&#039; (TCP\/IP), &#039;\/\/hostname\/&#039;\n       (NetBEUI), depending on the connection\n       protocol used."},{"t":"username","d":"The user name. Can be set with the\n       ibase.default_user php.ini directive."},{"t":"password","d":"The password for username. Can be set with the\n       ibase.default_password php.ini directive."},{"t":"charset","d":"charset is the default character set for a\n       database."},{"t":"buffers","d":"buffers is the number of database buffers to\n       allocate for the server-side cache. If 0 or omitted, server chooses\n       its own default."},{"t":"dialect","d":"dialect selects the default SQL dialect for any\n       statement executed within a connection, and it defaults to the highest\n       one supported by client libraries."},{"t":"role","d":"Functional only with InterBase 5 and up."},{"t":"sync","d":""}]},"ibase_db_info":{"s":"Request statistics about a database","y":"string ibase_db_info\n    ( resource $service_handle\n   , string $db\n   , int $action\n   [, int $argument = 0\n  ] )","r":"","p":null},"ibase_delete_user":{"s":"Delete a user from a security database","y":"bool ibase_delete_user\n    ( resource $service_handle\n   , string $user_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ibase_drop_db":{"s":"Drops a database","y":"bool ibase_drop_db\n    ([ resource $connection = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."}]},"ibase_errcode":{"s":"Return an error code","y":"int ibase_errcode\n    ( void\n   )","r":"Returns the error code as an integer, or FALSE if no error occurred.","p":null},"ibase_errmsg":{"s":"Return error messages","y":"string ibase_errmsg\n    ( void\n   )","r":"Returns the error message as a string, or FALSE if no error occurred.","p":null},"ibase_execute":{"s":"Execute a previously prepared query","y":"resource ibase_execute\n    ( resource $query\n   [, mixed $bind_arg\n   [, mixed $...\n  ]] )","r":"If the query raises an error, returns FALSE. If it is successful and\n   there is a (possibly empty) result set (such as with a SELECT query),\n   returns a result identifier. If the query was successful and there were\n   no results, returns TRUE.","p":[{"t":"query","d":"An InterBase query prepared by ibase_prepare()."},{"t":"bind_arg","d":""},{"t":"...","d":""}]},"ibase_fetch_assoc":{"s":"Fetch a result row from a query as an associative array","y":"array ibase_fetch_assoc\n    ( resource $result\n   [, int $fetch_flag = 0\n  ] )","r":"Returns an associative array that corresponds to the fetched row.\n   Subsequent calls will return the next row in the result set, or FALSE if\n   there are no more rows.","p":[{"t":"result","d":"The result handle."},{"t":"fetch_flag","d":"fetch_flag is a combination of the constants\n       IBASE_TEXT and IBASE_UNIXTIME\n       ORed together. Passing IBASE_TEXT will cause this\n       function to return BLOB contents instead of BLOB ids. Passing\n       IBASE_UNIXTIME will cause this function to return\n       date\/time values as Unix timestamps instead of as formatted strings."}]},"ibase_fetch_object":{"s":"Get an object from a InterBase database","y":"object ibase_fetch_object\n    ( resource $result_id\n   [, int $fetch_flag = 0\n  ] )","r":"Returns an object with the next row information, or FALSE if there are\n   no more rows.","p":[{"t":"result_id","d":"An InterBase result identifier obtained either by\n       ibase_query() or ibase_execute()."},{"t":"fetch_flag","d":"fetch_flag is a combination of the constants\n       IBASE_TEXT and IBASE_UNIXTIME\n       ORed together. Passing IBASE_TEXT will cause this\n       function to return BLOB contents instead of BLOB ids. Passing\n       IBASE_UNIXTIME will cause this function to return\n       date\/time values as Unix timestamps instead of as formatted strings."}]},"ibase_fetch_row":{"s":"Fetch a row from an InterBase database","y":"array ibase_fetch_row\n    ( resource $result_identifier\n   [, int $fetch_flag = 0\n  ] )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows. Each result column is stored in an array offset,\n   starting at offset 0.","p":[{"t":"result_identifier","d":"An InterBase result identifier."},{"t":"fetch_flag","d":"fetch_flag is a combination of the constants\n       IBASE_TEXT and IBASE_UNIXTIME\n       ORed together. Passing IBASE_TEXT will cause this\n       function to return BLOB contents instead of BLOB ids. Passing\n       IBASE_UNIXTIME will cause this function to return\n       date\/time values as Unix timestamps instead of as formatted strings."}]},"ibase_field_info":{"s":"Get information about a field","y":"array ibase_field_info\n    ( resource $result\n   , int $field_number\n   )","r":"Returns an array with the following keys: name,\n   alias, relation,\n   length and type.","p":[{"t":"result","d":"An InterBase result identifier."},{"t":"field_number","d":"Field offset."}]},"ibase_free_event_handler":{"s":"Cancels a registered event handler","y":"bool ibase_free_event_handler\n    ( resource $event\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"event","d":"An event resource, created by\n       ibase_set_event_handler()."}]},"ibase_free_query":{"s":"Free memory allocated by a prepared query","y":"bool ibase_free_query\n    ( resource $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"query","d":"A query prepared with ibase_prepare()."}]},"ibase_free_result":{"s":"Free a result set","y":"bool ibase_free_result\n    ( resource $result_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_identifier","d":"A result set created by ibase_query() or\n       ibase_execute()."}]},"ibase_gen_id":{"s":"Increments the named generator and returns its new value","y":"mixed ibase_gen_id\n    ( string $generator\n   [, int $increment = 1\n   [, resource $link_identifier = NULL\n  ]] )","r":"Returns new generator value as integer, or as string if the value is too big.","p":null},"ibase_maintain_db":{"s":"Execute a maintenance command on the database server","y":"bool ibase_maintain_db\n    ( resource $service_handle\n   , string $db\n   , int $action\n   [, int $argument = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ibase_modify_user":{"s":"Modify a user to a security database","y":"bool ibase_modify_user\n    ( resource $service_handle\n   , string $user_name\n   , string $password\n   [, string $first_name\n   [, string $middle_name\n   [, string $last_name\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ibase_name_result":{"s":"Assigns a name to a result set","y":"bool ibase_name_result\n    ( resource $result\n   , string $name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"An InterBase result set."},{"t":"name","d":"The name to be assigned."}]},"ibase_num_fields":{"s":"Get the number of fields in a result set","y":"int ibase_num_fields\n    ( resource $result_id\n   )","r":"Returns the number of fields as an integer.","p":[{"t":"result_id","d":"An InterBase result identifier."}]},"ibase_num_params":{"s":"Return the number of parameters in a prepared query","y":"int ibase_num_params\n    ( resource $query\n   )","r":"Returns the number of parameters as an integer.","p":[{"t":"query","d":"The prepared query handle."}]},"ibase_param_info":{"s":"Return information about a parameter in a prepared query","y":"array ibase_param_info\n    ( resource $query\n   , int $param_number\n   )","r":"Returns an array with the following keys: name,\n   alias, relation,\n   length and type.","p":[{"t":"query","d":"An InterBase prepared query handle."},{"t":"param_number","d":"Parameter offset."}]},"ibase_pconnect":{"s":"Open a persistent connection to an InterBase database","y":"resource ibase_pconnect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, int $buffers\n   [, int $dialect\n   [, string $role\n   [, int $sync\n  ]]]]]]]] )","r":"Returns an InterBase link identifier on success, or FALSE on error.","p":[{"t":"database","d":"The database argument has to be a valid path to\n       database file on the server it resides on. If the server is not local,\n       it must be prefixed with either &#039;hostname:&#039; (TCP\/IP), &#039;\/\/hostname\/&#039;\n       (NetBEUI) or &#039;hostname@&#039; (IPX\/SPX), depending on the connection\n       protocol used."},{"t":"username","d":"The user name. Can be set with the\n       ibase.default_user php.ini directive."},{"t":"password","d":"The password for username. Can be set with the\n       ibase.default_password php.ini directive."},{"t":"charset","d":"charset is the default character set for a\n       database."},{"t":"buffers","d":"buffers is the number of database buffers to\n       allocate for the server-side cache. If 0 or omitted, server chooses\n       its own default."},{"t":"dialect","d":"dialect selects the default SQL dialect for any\n       statement executed within a connection, and it defaults to the highest\n       one supported by client libraries. Functional only with InterBase 6\n       and up."},{"t":"role","d":"Functional only with InterBase 5 and up."},{"t":"sync","d":""}]},"ibase_prepare":{"s":"Prepare a query for later binding of parameter placeholders and execution","y":"resource ibase_prepare\n    ( string $query\n   )","r":"Returns a prepared query handle, or FALSE on error.","p":[{"t":"query","d":"An InterBase query."}]},"ibase_query":{"s":"Execute a query on an InterBase database","y":"resource ibase_query\n    ([ resource $link_identifier\n   ], string $query\n   [, int $bind_args\n  ] )","r":"If the query raises an error, returns FALSE. If it is successful and\n   there is a (possibly empty) result set (such as with a SELECT query),\n   returns a result identifier. If the query was successful and there were\n   no results, returns TRUE.","p":[{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."},{"t":"query","d":"An InterBase query."},{"t":"bind_args","d":""}]},"ibase_restore":{"s":"Initiates a restore task in the service manager and returns immediately","y":"mixed ibase_restore\n    ( resource $service_handle\n   , string $source_file\n   , string $dest_db\n   [, int $options = 0\n   [, bool $verbose = false\n  ]] )","r":"","p":null},"ibase_rollback":{"s":"Roll back a transaction","y":"bool ibase_rollback\n    ([ resource $link_or_trans_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_or_trans_identifier","d":"If called without an argument, this function rolls back the default\n       transaction of the default link. If the argument is a connection\n       identifier, the default transaction of the corresponding connection\n       will be rolled back. If the argument is a transaction identifier, the\n       corresponding transaction will be rolled back."}]},"ibase_rollback_ret":{"s":"Roll back a transaction without closing it","y":"bool ibase_rollback_ret\n    ([ resource $link_or_trans_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_or_trans_identifier","d":"If called without an argument, this function rolls back the default\n       transaction of the default link. If the argument is a connection\n       identifier, the default transaction of the corresponding connection\n       will be rolled back. If the argument is a transaction identifier, the\n       corresponding transaction will be rolled back. The transaction context\n       will be retained, so statements executed from within this transaction\n       will not be invalidated."}]},"ibase_server_info":{"s":"Request information about a database server","y":"string ibase_server_info\n    ( resource $service_handle\n   , int $action\n   )","r":"","p":null},"ibase_service_attach":{"s":"Connect to the service manager","y":"resource ibase_service_attach\n    ( string $host\n   , string $dba_username\n   , string $dba_password\n   )","r":"","p":null},"ibase_service_detach":{"s":"Disconnect from the service manager","y":"bool ibase_service_detach\n    ( resource $service_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ibase_set_event_handler":{"s":"Register a callback function to be called when events are posted","y":"resource ibase_set_event_handler\n    ( callable $event_handler\n   , string $event_name1\n   [, string $event_name2\n   [, string $...\n  ]] )","r":"The return value is an event resource. This resource can be used to free\n   the event handler using ibase_free_event_handler().","p":[{"t":"event_handler","d":"The callback is called with the event name and the link resource as\n       arguments whenever one of the specified events is posted by the\n       database."},{"t":"event_name1","d":"An event name."},{"t":"event_name2","d":"At most 15 events allowed."}]},"ibase_trans":{"s":"Begin a transaction","y":"resource ibase_trans\n    ([ int $trans_args\n   [, resource $link_identifier\n  ]] )","r":"Returns a transaction handle, or FALSE on error.","p":[{"t":"trans_args","d":"trans_args can be a combination of\n       IBASE_READ,\n       IBASE_WRITE,\n       IBASE_COMMITTED, \n       IBASE_CONSISTENCY,\n       IBASE_CONCURRENCY, \n       IBASE_REC_VERSION, \n       IBASE_REC_NO_VERSION,\n       IBASE_WAIT and \n       IBASE_NOWAIT."},{"t":"link_identifier","d":"An InterBase link identifier. If omitted, the last opened link is\n       assumed."}]},"ibase_wait_event":{"s":"Wait for an event to be posted by the database","y":"string ibase_wait_event\n    ( string $event_name1\n   [, string $event_name2\n   [, string $...\n  ]] )","r":"Returns the name of the event that was posted.","p":[{"t":"event_name1","d":"The event name."},{"t":"event_name2","d":""},{"t":"...","d":""}]},"iconv":{"s":"Convert string to requested character encoding","y":"string iconv\n    ( string $in_charset\n   , string $out_charset\n   , string $str\n   )","r":"Returns the converted string or FALSE on failure.","p":[{"t":"in_charset","d":"The input charset."},{"t":"out_charset","d":"The output charset."},{"t":"str","d":"The string to be converted."}]},"iconv_get_encoding":{"s":"Retrieve internal configuration variables of iconv extension","y":"mixed iconv_get_encoding\n    ([ string $type = &quot;all&quot;\n  ] )","r":"Returns the current value of the internal configuration variable if\n   successful or FALSE on failure.","p":[{"t":"type","d":"The value of the optional type can be:\n       \n        all\n        input_encoding\n        output_encoding\n        internal_encoding"}]},"iconv_mime_decode":{"s":"Decodes a MIME header field","y":"string iconv_mime_decode\n    ( string $encoded_header\n   [, int $mode = 0\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ]] )","r":"Returns a decoded MIME field on success,\n   or FALSE if an error occurs during the decoding.","p":[{"t":"encoded_header","d":"The encoded header, as a string."},{"t":"mode","d":"mode determines the behaviour in the event\n       iconv_mime_decode() encounters a malformed\n       MIME header field. You can specify any combination\n       of the following bitmasks.\n       \n        Bitmasks acceptable to iconv_mime_decode()\n        \n         \n          \n           Value\n           Constant\n           Description\n          \n\n         \n\n         \n          \n           1\n           ICONV_MIME_DECODE_STRICT\n           \n            If set, the given header is decoded in full conformance with the\n            standards defined in &raquo;&nbsp;RFC2047.\n            This option is disabled by default because there are a lot of\n            broken mail user agents that don&#039;t follow the specification and don&#039;t\n            produce correct MIME headers.\n           \n          \n\n          \n           2\n           ICONV_MIME_DECODE_CONTINUE_ON_ERROR\n           \n            If set, iconv_mime_decode_headers()\n            attempts to ignore any grammatical errors and continue to process\n            a given header."},{"t":"charset","d":"The optional charset parameter specifies the\n       character set to represent the result by. If omitted,\n       iconv.internal_encoding\n       will be used."}]},"iconv_mime_decode_headers":{"s":"Decodes multiple MIME header fields at once","y":"array iconv_mime_decode_headers\n    ( string $encoded_headers\n   [, int $mode = 0\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ]] )","r":"Returns an associative array that holds a whole set of\n   MIME header fields specified by\n   encoded_headers on success, or FALSE\n   if an error occurs during the decoding.","p":[{"t":"encoded_headers","d":"The encoded headers, as a string."},{"t":"mode","d":"mode determines the behaviour in the event\n       iconv_mime_decode_headers() encounters a malformed\n       MIME header field. You can specify any combination\n       of the following bitmasks.\n       \n        Bitmasks acceptable to iconv_mime_decode_headers()\n        \n         \n          \n           Value\n           Constant\n           Description\n          \n\n         \n\n         \n          \n           1\n           ICONV_MIME_DECODE_STRICT\n           \n            If set, the given header is decoded in full conformance with the\n            standards defined in &raquo;&nbsp;RFC2047.\n            This option is disabled by default because there are a lot of\n            broken mail user agents that don&#039;t follow the specification and don&#039;t\n            produce correct MIME headers.\n           \n          \n\n          \n           2\n           ICONV_MIME_DECODE_CONTINUE_ON_ERROR\n           \n            If set, iconv_mime_decode_headers()\n            attempts to ignore any grammatical errors and continue to process\n            a given header."},{"t":"charset","d":"The optional charset parameter specifies the\n       character set to represent the result by. If omitted,\n       iconv.internal_encoding\n       will be used."}]},"iconv_mime_encode":{"s":"Composes a MIME header field","y":"string iconv_mime_encode\n    ( string $field_name\n   , string $field_value\n   [, array $preferences = NULL\n  ] )","r":"Returns an encoded MIME field on success,\n   or FALSE if an error occurs during the encoding.","p":[{"t":"field_name","d":"The field name."},{"t":"field_value","d":"The field value."},{"t":"preferences","d":"You can control the behaviour of iconv_mime_encode()\n       by specifying an associative array that contains configuration items\n       to the optional third parameter preferences.\n       The items supported by iconv_mime_encode() are\n       listed below. Note that item names are treated case-sensitive.\n       \n        Configuration items supported by iconv_mime_encode()\n        \n         \n          \n           Item\n           Type\n           Description\n           Default value\n           Example\n          \n\n         \n\n         \n          \n           scheme\n           string\n           \n            Specifies the method to encode a field value by. The value of\n            this item may be either &quot;B&quot; or &quot;Q&quot;, where &quot;B&quot; stands for\n            base64 encoding scheme and &quot;Q&quot; stands for\n            quoted-printable encoding scheme.\n           \n           B\n           B\n          \n\n          \n           input-charset\n           string\n           \n            Specifies the character set in which the first parameter\n            field_name and the second parameter\n            field_value are presented. If not given,\n            iconv_mime_encode() assumes those parameters\n            are presented to it in the\n            iconv.internal_encoding\n            ini setting.\n           \n           \n            iconv.internal_encoding\n           \n           ISO-8859-1\n          \n\n          \n           output-charset\n           string\n           \n            Specifies the character set to use to compose the\n            MIME header.\n           \n           \n            iconv.internal_encoding\n           \n           UTF-8\n          \n\n          \n           line-length\n           integer\n           \n            Specifies the maximum length of the header lines. The resulting\n            header is &quot;folded&quot; to a set of multiple lines in case\n            the resulting header field would be longer than the value of this\n            parameter, according to\n            &raquo;&nbsp;RFC2822 - Internet Message Format.\n            If not given, the length will be limited to 76 characters.\n           \n           76\n           996\n          \n\n          \n           line-break-chars\n           string\n           \n            Specifies the sequence of characters to append to each line\n            as an end-of-line sign when &quot;folding&quot; is performed on a long header\n            field. If not given, this defaults to &quot;\\r\\n&quot;\n            (CR LF). Note that\n            this parameter is always treated as an ASCII string regardless\n            of the value of input-charset.\n           \n           \\r\\n\n           \\n"}]},"iconv_set_encoding":{"s":"Set current setting for character encoding conversion","y":"bool iconv_set_encoding\n    ( string $type\n   , string $charset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"type","d":"The value of type can be any one of these:\n       \n        input_encoding\n        output_encoding\n        internal_encoding"},{"t":"charset","d":"The character set."}]},"iconv_strlen":{"s":"Returns the character count of string","y":"int iconv_strlen\n    ( string $str\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ] )","r":"Returns the character count of str, as an integer.","p":[{"t":"str","d":"The string."},{"t":"charset","d":"If charset parameter is omitted,\n       str is assumed to be encoded in\n       iconv.internal_encoding."}]},"iconv_strpos":{"s":"Finds position of first occurrence of a needle within a haystack","y":"int iconv_strpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ]] )","r":"Returns the numeric position of the first occurrence of\n   needle in haystack.","p":[{"t":"haystack","d":"The entire string."},{"t":"needle","d":"The searched substring."},{"t":"offset","d":"The optional offset parameter specifies\n       the position from which the search should be performed."},{"t":"charset","d":"If charset parameter is omitted,\n       string are assumed to be encoded in\n       iconv.internal_encoding."}]},"iconv_strrpos":{"s":"Finds the last occurrence of a needle within a haystack","y":"int iconv_strrpos\n    ( string $haystack\n   , string $needle\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ] )","r":"Returns the numeric position of the last occurrence of\n   needle in haystack.","p":[{"t":"haystack","d":"The entire string."},{"t":"needle","d":"The searched substring."},{"t":"charset","d":"If charset parameter is omitted,\n       string are assumed to be encoded in\n       iconv.internal_encoding."}]},"iconv_substr":{"s":"Cut out part of a string","y":"string iconv_substr\n    ( string $str\n   , int $offset\n   [, int $length = iconv_strlen($str, $charset)\n   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)\n  ]] )","r":"Returns the portion of str specified by the\n   offset and length parameters.","p":[{"t":"str","d":"The original string."},{"t":"offset","d":"If offset is non-negative,\n       iconv_substr() cuts the portion out of\n       str beginning at offset&#039;th\n       character, counting from zero."},{"t":"length","d":"If length is given and is positive, the return\n       value will contain at most length characters\n       of the portion that begins at offset\n       (depending on the length of string)."},{"t":"charset","d":"If charset parameter is omitted,\n       string are assumed to be encoded in\n       iconv.internal_encoding."}]},"id3_get_frame_long_name":{"s":"Get the long name of an ID3v2 frame","y":"string id3_get_frame_long_name\n    ( string $frameId\n   )","r":"Returns the frame long name or FALSE on errors.","p":[{"t":"frameId","d":"An ID3v2 frame"}]},"id3_get_frame_short_name":{"s":"Get the short name of an ID3v2 frame","y":"string id3_get_frame_short_name\n    ( string $frameId\n   )","r":"Returns the frame short name or FALSE on errors.","p":[{"t":"frameId","d":"An ID3v2 frame"}]},"id3_get_genre_id":{"s":"Get the id for a genre","y":"int id3_get_genre_id\n    ( string $genre\n   )","r":"The genre id or FALSE on errors.","p":[{"t":"genre","d":"Genre name as string."}]},"id3_get_genre_list":{"s":"Get all possible genre values","y":"array id3_get_genre_list\n    ( void\n   )","r":"Returns an array containing all possible genres that may be stored in an\n   ID3 tag.","p":null},"id3_get_genre_name":{"s":"Get the name for a genre id","y":"string id3_get_genre_name\n    ( int $genre_id\n   )","r":"Returns the name as a string.","p":[{"t":"genre_id","d":"An integer ranging from 0 to 147"}]},"id3_get_tag":{"s":"Get all information stored in an ID3 tag","y":"array id3_get_tag\n    ( string $filename\n   [, int $version = ID3_BEST\n  ] )","r":"Returns an associative array with various keys like: \n   title, artist, ..","p":[{"t":"filename","d":"The path to the MP3 file"},{"t":"version","d":"Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags"}]},"id3_get_version":{"s":"Get version of an ID3 tag","y":"int id3_get_version\n    ( string $filename\n   )","r":"Returns the version number of the ID3 tag of the file.\n   As a tag can contain ID3 v1.x and v2.x tags, the return value of this\n   function should be bitwise compared with the predefined constants \n   ID3_V1_0, ID3_V1_1 and  \n   ID3_V2.","p":[{"t":"filename","d":"The path to the MP3 file"}]},"id3_remove_tag":{"s":"Remove an existing ID3 tag","y":"bool id3_remove_tag\n    ( string $filename\n   [, int $version = ID3_V1_0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The path to the MP3 file"},{"t":"version","d":"Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags."}]},"id3_set_tag":{"s":"Update information stored in an ID3 tag","y":"bool id3_set_tag\n    ( string $filename\n   , array $tag\n   [, int $version = ID3_V1_0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The path to the MP3 file"},{"t":"tag","d":"An associative array of tag keys and values"},{"t":"version","d":"Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags"}]},"idate":{"s":"Format a local time\/date as integer","y":"int idate\n    ( string $format\n   [, int $timestamp = time()\n  ] )","r":"Returns an integer.","p":[{"t":"format","d":"The following characters are recognized in the\n        format parameter string\n        \n         \n          \n           format character\n           Description\n          \n\n         \n\n         \n          \n           B\n           Swatch Beat\/Internet Time\n          \n\n          \n           d\n           Day of the month\n          \n\n          \n           h\n           Hour (12 hour format)\n          \n\n          \n           H\n           Hour (24 hour format)\n          \n\n          \n           i\n           Minutes\n          \n\n          \n           I (uppercase i)\n           returns 1 if DST is activated,\n            0 otherwise\n          \n\n          \n           L (uppercase l)\n           returns 1 for leap year,\n            0 otherwise\n          \n\n          \n           m\n           Month number\n          \n\n          \n           s\n           Seconds\n          \n\n          \n           t\n           Days in current month\n          \n\n          \n           U\n           Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC -\n            this is the same as time()\n          \n\n          \n           w\n           Day of the week (0 on Sunday)\n          \n\n          \n           W\n           ISO-8601 week number of year, weeks starting on\n            Monday\n          \n\n          \n           y\n           Year (1 or 2 digits - check note below)\n          \n\n          \n           Y\n           Year (4 digits)\n          \n\n          \n           z\n           Day of the year\n          \n\n          \n           Z\n           Timezone offset in seconds"},{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."}]},"idn_to_ascii":{"s":"Convert domain name to IDNA ASCII form.","y":"string idn_to_ascii\n    ( string $domain\n   [, int $options = 0\n   [, int $variant = INTL_IDNA_VARIANT_2003\n   [, array &$idna_info\n  ]]] )","r":"Domain name encoded in ASCII-compatible form.  or FALSE on failure","p":[{"t":"domain","d":"Domain to convert. In PHP 5 must be UTF-8 encoded."},{"t":"options","d":"Conversion options - combination of IDNA_* constants\n       (except IDNA_ERROR_* constants)."},{"t":"variant","d":"Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or\n       INTL_IDNA_VARIANT_UTS46 for UTS #46."},{"t":"idna_info","d":"This parameter can be used only if\n       INTL_IDNA_VARIANT_UTS46 was used for\n       variant. In that case, it will be filled with an\n       array with the keys &#039;result&#039;, the possibly illegal\n       result of the transformation,\n       &#039;isTransitionalDifferent&#039;, a boolean indicating\n       whether the usage of the transitional mechanisms of UTS #46 either has\n       or would have changed the result and &#039;errors&#039;,\n       which is an int representing a bitset of the error\n       constants IDNA_ERROR_*."}]},"idn_to_unicode":{"s":"Alias of idn_to_utf8()","y":"","r":"","p":null},"idn_to_utf8":{"s":"Convert domain name from IDNA ASCII to Unicode.","y":"string idn_to_utf8\n    ( string $domain\n   [, int $options = 0\n   [, int $variant = INTL_IDNA_VARIANT_2003\n   [, array &$idna_info\n  ]]] )","r":"Domain name in Unicode, encoded in UTF-8.  or FALSE on failure","p":[{"t":"domain","d":"Domain to convert in IDNA ASCII-compatible format."},{"t":"options","d":"Conversion options - combination of IDNA_* constants\n       (except IDNA_ERROR_* constants)."},{"t":"variant","d":"Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or\n       INTL_IDNA_VARIANT_UTS46 for UTS #46."},{"t":"idna_info","d":"This parameter can be used only if\n       INTL_IDNA_VARIANT_UTS46 was used for\n       variant. In that case, it will be filled with an\n       array with the keys &#039;result&#039;, the possibly illegal\n       result of the transformation,\n       &#039;isTransitionalDifferent&#039;, a boolean indicating\n       whether the usage of the transitional mechanisms of UTS #46 either has\n       or would have changed the result and &#039;errors&#039;,\n       which is an int representing a bitset of the error\n       constants IDNA_ERROR_*."}]},"ifxus_close_slob":{"s":"Deletes the slob object","y":"bool ifxus_close_slob\n    ( int $bid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"An existing slob id."}]},"ifxus_create_slob":{"s":"Creates an slob object and opens it","y":"int ifxus_create_slob\n    ( int $mode\n   )","r":"Return the new slob object-id, or FALSE on errors.","p":[{"t":"mode","d":"A combination of IFX_LO_RDONLY, \n       IFX_LO_WRONLY, IFX_LO_APPEND\n       IFX_LO_RDWR, IFX_LO_BUFFER,\n       IFX_LO_NOBUFFER."}]},"ifxus_free_slob":{"s":"Deletes the slob object","y":"bool ifxus_free_slob\n    ( int $bid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"An existing slob id."}]},"ifxus_open_slob":{"s":"Opens an slob object","y":"int ifxus_open_slob\n    ( int $bid\n   , int $mode\n   )","r":"Returns the new slob object-id, or FALSE on errors.","p":[{"t":"bid","d":"An existing slob id."},{"t":"mode","d":"A combination of IFX_LO_RDONLY, \n       IFX_LO_WRONLY, IFX_LO_APPEND\n       IFX_LO_RDWR, IFX_LO_BUFFER,\n       IFX_LO_NOBUFFER."}]},"ifxus_read_slob":{"s":"Reads nbytes of the slob object","y":"string ifxus_read_slob\n    ( int $bid\n   , int $nbytes\n   )","r":"Returns the slob contents as a string, or FALSE on errors.","p":[{"t":"bid","d":"An existing slob id."},{"t":"nbytes","d":"The number of bytes to read."}]},"ifxus_seek_slob":{"s":"Sets the current file or seek position","y":"int ifxus_seek_slob\n    ( int $bid\n   , int $mode\n   , int $offset\n   )","r":"Returns the seek position as an integer, or FALSE on errors.","p":[{"t":"bid","d":"An existing slob id."},{"t":"mode","d":"0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END."},{"t":"offset","d":"A byte offset."}]},"ifxus_write_slob":{"s":"Writes a string into the slob object","y":"int ifxus_write_slob\n    ( int $bid\n   , string $content\n   )","r":"Returns the bytes written as an integer, or FALSE on errors.","p":[{"t":"bid","d":"An existing slob id."},{"t":"content","d":"The content to write, as a string."}]},"ifx_affected_rows":{"s":"Get number of rows affected by a query","y":"int ifx_affected_rows\n    ( resource $result_id\n   )","r":"Returns the number of rows as an integer.","p":[{"t":"result_id","d":"A valid result id returned by ifx_query() or\n       ifx_prepare()."}]},"ifx_blobinfile_mode":{"s":"Set the default blob mode for all select queries","y":"bool ifx_blobinfile_mode\n    ( int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mode","d":"Mode &quot;0&quot; means save Byte-Blobs in memory, and mode &quot;1&quot; means save\n       Byte-Blobs in a file."}]},"ifx_byteasvarchar":{"s":"Set the default byte mode","y":"bool ifx_byteasvarchar\n    ( int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mode","d":"Mode &quot;0&quot; will return a blob id, and mode &quot;1&quot; will return a varchar\n       with text content."}]},"ifx_connect":{"s":"Open Informix server connection","y":"resource ifx_connect\n    ([ string $database\n   [, string $userid\n   [, string $password\n  ]]] )","r":"Returns a connection identifier on success, or FALSE on error.","p":[{"t":"database","d":"The database name, as a string."},{"t":"userid","d":"The username, as a string."},{"t":"password","d":"The password, as a string."}]},"ifx_copy_blob":{"s":"Duplicates the given blob object","y":"int ifx_copy_blob\n    ( int $bid\n   )","r":"Returns the new blob object-id, or FALSE on errors.","p":[{"t":"bid","d":"A BLOB identifier."}]},"ifx_create_blob":{"s":"Creates an blob object","y":"int ifx_create_blob\n    ( int $type\n   , int $mode\n   , string $param\n   )","r":"Returns the new BLOB object-id, or FALSE on errors.","p":[{"t":"type","d":"1 = TEXT, 0 = BYTE"},{"t":"mode","d":"0 = blob-object holds the content in memory,\n       1 = blob-object holds the content in file."},{"t":"param","d":"if mode = 0: pointer to the content,\n       if mode = 1: pointer to the filestring."}]},"ifx_create_char":{"s":"Creates an char object","y":"int ifx_create_char\n    ( string $param\n   )","r":"Returns the new char object id, or FALSE on errors.","p":[{"t":"param","d":"The char content."}]},"ifx_do":{"s":"Execute a previously prepared SQL-statement","y":"bool ifx_do\n    ( resource $result_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_error":{"s":"Returns error code of last Informix call","y":"string ifx_error\n    ([ resource $link_identifier\n  ] )","r":"The Informix error codes (SQLSTATE &amp; SQLCODE) formatted as\n   x [SQLSTATE = aa bbb SQLCODE=cccc].","p":[{"t":"link_identifier","d":"The link identifier."}]},"ifx_errormsg":{"s":"Returns error message of last Informix call","y":"string ifx_errormsg\n    ([ int $errorcode\n  ] )","r":"Return the error message, as a string.","p":[{"t":"errorcode","d":"If specified, the function will return the message corresponding to\n       the specified code."}]},"ifx_fetch_row":{"s":"Get row as an associative array","y":"array ifx_fetch_row\n    ( resource $result_id\n   [, mixed $position\n  ] )","r":"Returns an associative array that corresponds to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."},{"t":"position","d":"An optional parameter for a &quot;fetch&quot; operation on &quot;scroll&quot; cursors:\n       NEXT, PREVIOUS,\n       CURRENT, FIRST, \n       LAST or a number.  If you specify a number, an\n       &quot;absolute&quot; row fetch is executed.  This parameter is optional, and\n       only valid for SCROLL cursors."}]},"ifx_fieldproperties":{"s":"List of SQL fieldproperties","y":"array ifx_fieldproperties\n    ( resource $result_id\n   )","r":"Returns an associative array with fieldnames as key and the SQL \n   fieldproperties as data for a query with result_id.\n   Returns FALSE on errors.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_fieldtypes":{"s":"List of Informix SQL fields","y":"array ifx_fieldtypes\n    ( resource $result_id\n   )","r":"Returns an associative array with fieldnames as key and the SQL\n   fieldtypes as data for query with\n   result_id.  Returns FALSE on error.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_free_char":{"s":"Deletes the char object","y":"bool ifx_free_char\n    ( int $bid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"The char object id."}]},"ifx_free_result":{"s":"Releases resources for the query","y":"bool ifx_free_result\n    ( resource $result_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_getsqlca":{"s":"Get the contents of sqlca.sqlerrd[0..5] after a query","y":"array ifx_getsqlca\n    ( resource $result_id\n   )","r":"Returns an associative array with the following entries:\n   sqlerrd0, sqlerrd1,\n   sqlerrd2, sqlerrd3,\n   sqlerrd4 and sqlerrd5.","p":[{"t":"result_id","d":"result_id is a valid result id returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_get_blob":{"s":"Return the content of a blob object","y":"string ifx_get_blob\n    ( int $bid\n   )","r":"The contents of the BLOB as a string, or FALSE on errors.","p":[{"t":"bid","d":"The BLOB object id."}]},"ifx_get_char":{"s":"Return the content of the char object","y":"string ifx_get_char\n    ( int $bid\n   )","r":"Returns the contents as a string, or FALSE on errors.","p":[{"t":"bid","d":"The char object-id."}]},"ifx_htmltbl_result":{"s":"Formats all rows of a query into a HTML table","y":"int ifx_htmltbl_result\n    ( resource $result_id\n   [, string $html_table_options\n  ] )","r":"Returns the number of fetched rows, or FALSE on errors.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."},{"t":"html_table_options","d":"This optional argument is a string of &lt;table&gt; tag options."}]},"ifx_nullformat":{"s":"Sets the default return value on a fetch row","y":"bool ifx_nullformat\n    ( int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mode","d":"Mode &quot;0&quot; returns &quot;&quot;, and mode &quot;1&quot; returns &quot;NULL&quot;."}]},"ifx_num_fields":{"s":"Returns the number of columns in the query","y":"int ifx_num_fields\n    ( resource $result_id\n   )","r":"Returns the number of columns in query for\n   result_id, or FALSE on errors.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_num_rows":{"s":"Count the rows already fetched from a query","y":"int ifx_num_rows\n    ( resource $result_id\n   )","r":"Returns the number of fetched rows or FALSE on errors.","p":[{"t":"result_id","d":"result_id is a valid resultid returned by\n       ifx_query() or\n       ifx_prepare() (select type queries only!)."}]},"ifx_pconnect":{"s":"Open persistent Informix connection","y":"resource ifx_pconnect\n    ([ string $database\n   [, string $userid\n   [, string $password\n  ]]] )","r":"Returns: valid Informix persistent link identifier on success, or FALSE\n   on errors.","p":[{"t":"database","d":"The database name, as a string."},{"t":"userid","d":"The username, as a string."},{"t":"password","d":"The password, as a string."}]},"ifx_prepare":{"s":"Prepare an SQL-statement for execution","y":"resource ifx_prepare\n    ( string $query\n   , resource $link_identifier\n   [, int $cursor_def\n   ], mixed $blobidarray\n   )","r":"Returns a valid result identifier for use by ifx_do(),\n   or FALSE on errors.","p":[{"t":"query","d":"The query string."},{"t":"link_identifier","d":"The link identifier."},{"t":"cursor_def","d":"This optional parameter allows you to make this a \n       scroll and\/or hold cursor.\n       It&#039;s a bitmask and can be either IFX_SCROLL,\n       IFX_HOLD, or both or&#039;ed together."},{"t":"blobidarray","d":"If you have BLOB (BYTE or TEXT) columns in the query, you can add\n       a blobidarray parameter containing the\n       corresponding &quot;blob ids&quot;, and you should replace those columns\n       with a &quot;?&quot; in the query text."}]},"ifx_query":{"s":"Send Informix query","y":"resource ifx_query\n    ( string $query\n   , resource $link_identifier\n   [, int $cursor_type\n   [, mixed $blobidarray\n  ]] )","r":"Returns valid Informix result identifier on success, or FALSE on errors.","p":[{"t":"query","d":"The query string."},{"t":"link_identifier","d":"The link identifier."},{"t":"cursor_def","d":"This optional parameter allows you to make this a \n       scroll and\/or hold cursor.\n       It&#039;s a bitmask and can be either IFX_SCROLL,\n       IFX_HOLD, or both or&#039;ed together. I you omit this\n       parameter the cursor is a normal sequential cursor."},{"t":"blobidarray","d":"If you have BLOB (BYTE or TEXT) columns in the query, you can add\n       a blobidarray parameter containing the\n       corresponding &quot;blob ids&quot;, and you should replace those columns\n       with a &quot;?&quot; in the query text."}]},"ifx_textasvarchar":{"s":"Set the default text mode","y":"bool ifx_textasvarchar\n    ( int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mode","d":"Mode &quot;0&quot; will return a blob id, and mode &quot;1&quot; will return a varchar\n       with text content."}]},"ifx_update_blob":{"s":"Updates the content of the blob object","y":"bool ifx_update_blob\n    ( int $bid\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"A BLOB object identifier."},{"t":"content","d":"The new data, as a string."}]},"ifx_update_char":{"s":"Updates the content of the char object","y":"bool ifx_update_char\n    ( int $bid\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"A char object identifier."},{"t":"content","d":"The new data, as a string."}]},"ignore_user_abort":{"s":"Set whether a client disconnect should abort script execution","y":"int ignore_user_abort\n    ([ string $value\n  ] )","r":"Returns the previous setting, as an integer.","p":[{"t":"value","d":"If set, this function will set the ignore_user_abort ini setting\n       to the given value. If not, this function will\n       only return the previous setting without changing it."}]},"iis_add_server":{"s":"Creates a new virtual web server","y":"int iis_add_server\n    ( string $path\n   , string $comment\n   , string $server_ip\n   , int $port\n   , string $host_name\n   , int $rights\n   , int $start_server\n   )","r":"","p":null},"iis_get_dir_security":{"s":"Gets Directory Security","y":"int iis_get_dir_security\n    ( int $server_instance\n   , string $virtual_path\n   )","r":"","p":null},"iis_get_script_map":{"s":"Gets script mapping on a virtual directory for a specific extension","y":"string iis_get_script_map\n    ( int $server_instance\n   , string $virtual_path\n   , string $script_extension\n   )","r":"","p":null},"iis_get_server_by_comment":{"s":"Return the instance number associated with the Comment","y":"int iis_get_server_by_comment\n    ( string $comment\n   )","r":"","p":null},"iis_get_server_by_path":{"s":"Return the instance number associated with the Path","y":"int iis_get_server_by_path\n    ( string $path\n   )","r":"Returns the server instance number.","p":[{"t":"path","d":"The path to the root directory"}]},"iis_get_server_rights":{"s":"Gets server rights","y":"int iis_get_server_rights\n    ( int $server_instance\n   , string $virtual_path\n   )","r":"","p":null},"iis_get_service_state":{"s":"Returns the state for the service defined by ServiceId","y":"int iis_get_service_state\n    ( string $service_id\n   )","r":"","p":null},"iis_remove_server":{"s":"Removes the virtual web server indicated by ServerInstance","y":"int iis_remove_server\n    ( int $server_instance\n   )","r":"","p":null},"iis_set_app_settings":{"s":"Creates application scope for a virtual directory","y":"int iis_set_app_settings\n    ( int $server_instance\n   , string $virtual_path\n   , string $application_scope\n   )","r":"","p":null},"iis_set_dir_security":{"s":"Sets Directory Security","y":"int iis_set_dir_security\n    ( int $server_instance\n   , string $virtual_path\n   , int $directory_flags\n   )","r":"","p":null},"iis_set_script_map":{"s":"Sets script mapping on a virtual directory","y":"int iis_set_script_map\n    ( int $server_instance\n   , string $virtual_path\n   , string $script_extension\n   , string $engine_path\n   , int $allow_scripting\n   )","r":"","p":null},"iis_set_server_rights":{"s":"Sets server rights","y":"int iis_set_server_rights\n    ( int $server_instance\n   , string $virtual_path\n   , int $directory_flags\n   )","r":"","p":null},"iis_start_server":{"s":"Starts the virtual web server","y":"int iis_start_server\n    ( int $server_instance\n   )","r":"","p":null},"iis_start_service":{"s":"Starts the service defined by ServiceId","y":"int iis_start_service\n    ( string $service_id\n   )","r":"","p":null},"iis_stop_server":{"s":"Stops the virtual web server","y":"int iis_stop_server\n    ( int $server_instance\n   )","r":"","p":null},"iis_stop_service":{"s":"Stops the service defined by ServiceId","y":"int iis_stop_service\n    ( string $service_id\n   )","r":"","p":null},"imageaffine":{"s":"Return an image containing the affine transformed src image, using an optional clipping area","y":"resource imageaffine\n    ( resource $image\n   , array $affine\n   [, array $clip\n  ] )","r":"Return affined image resource on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"affine","d":"Array with keys 0 to 5."},{"t":"clip","d":"Array with keys &quot;x&quot;, &quot;y&quot;, &quot;width&quot; and &quot;height&quot;."}]},"imageaffinematrixconcat":{"s":"Concat two matrices (as in doing many ops in one go)","y":"array imageaffinematrixconcat\n    ( array $m1\n   , array $m2\n   )","r":"Array with keys 0 to 5 and float values or FALSE on failure.","p":[{"t":"m1","d":"Array with keys 0 to 5."},{"t":"m2","d":"Array with keys 0 to 5."}]},"imageaffinematrixget":{"s":"Return an image containing the affine tramsformed src image, using an optional clipping area","y":"array imageaffinematrixget\n    ( int $type\n   [, mixed $options\n  ] )","r":"Array with keys 0 to 5 and float values or FALSE on failure.","p":[{"t":"type","d":"One of IMG_AFFINE_* constants."},{"t":"options","d":""}]},"imagealphablending":{"s":"Set the blending mode for an image","y":"bool imagealphablending\n    ( resource $image\n   , bool $blendmode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"blendmode","d":"Whether to enable the blending mode or not. On true color images \n       the default value is TRUE otherwise the default value is FALSE"}]},"imageantialias":{"s":"Should antialias functions be used or not","y":"bool imageantialias\n    ( resource $image\n   , bool $enabled\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"enabled","d":"Whether to enable antialiasing or not."}]},"imagearc":{"s":"Draws an arc","y":"bool imagearc\n    ( resource $image\n   , int $cx\n   , int $cy\n   , int $width\n   , int $height\n   , int $start\n   , int $end\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"cx","d":"x-coordinate of the center."},{"t":"cy","d":"y-coordinate of the center."},{"t":"width","d":"The arc width."},{"t":"height","d":"The arc height."},{"t":"start","d":"The arc start angle, in degrees."},{"t":"end","d":"The arc end angle, in degrees.\n       0\u00b0 is located at the three-o&#039;clock position, and the arc is drawn\n       clockwise."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagecharup":{"s":"Draw a character vertically","y":"bool imagecharup\n    ( resource $image\n   , int $font\n   , int $x\n   , int $y\n   , string $c\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."},{"t":"x","d":"x-coordinate of the start."},{"t":"y","d":"y-coordinate of the start."},{"t":"c","d":"The character to draw."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagecolorallocate":{"s":"Allocate a color for an image","y":"int imagecolorallocate\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   )","r":"A color identifier or FALSE if the allocation failed.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."}]},"imagecolorallocatealpha":{"s":"Allocate a color for an image","y":"int imagecolorallocatealpha\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   , int $alpha\n   )","r":"A color identifier or FALSE if the allocation failed.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."},{"t":"alpha","d":"A value between 0 and 127.\n       0 indicates completely opaque while \n       127 indicates completely transparent."}]},"imagecolorat":{"s":"Get the index of the color of a pixel","y":"int imagecolorat\n    ( resource $image\n   , int $x\n   , int $y\n   )","r":"Returns the index of the color.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x","d":"x-coordinate of the point."},{"t":"y","d":"y-coordinate of the point."}]},"imagecolorclosest":{"s":"Get the index of the closest color to the specified color","y":"int imagecolorclosest\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   )","r":"Returns the index of the closest color, in the palette of the image, to\n   the specified one","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."}]},"imagecolorclosestalpha":{"s":"Get the index of the closest color to the specified color + alpha","y":"int imagecolorclosestalpha\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   , int $alpha\n   )","r":"Returns the index of the closest color in the palette.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."},{"t":"alpha","d":"A value between 0 and 127.\n       0 indicates completely opaque while \n       127 indicates completely transparent."}]},"imagecolorclosesthwb":{"s":"Get the index of the color which has the hue, white and blackness","y":"int imagecolorclosesthwb\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   )","r":"Returns an integer with the index of the color which has \n   the hue, white and blackness nearest the given color.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."}]},"imagecolordeallocate":{"s":"De-allocate a color for an image","y":"bool imagecolordeallocate\n    ( resource $image\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"color","d":"The color identifier."}]},"imagecolorexact":{"s":"Get the index of the specified color","y":"int imagecolorexact\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   )","r":"Returns the index of the specified color in the palette, or -1 if the\n   color does not exist.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."}]},"imagecolorexactalpha":{"s":"Get the index of the specified color + alpha","y":"int imagecolorexactalpha\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   , int $alpha\n   )","r":"Returns the index of the specified color+alpha in the palette of the\n   image, or -1 if the color does not exist in the image&#039;s palette.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."},{"t":"alpha","d":"A value between 0 and 127.\n       0 indicates completely opaque while \n       127 indicates completely transparent."}]},"imagecolormatch":{"s":"Makes the colors of the palette version of an image more closely match the true color version","y":"bool imagecolormatch\n    ( resource $image1\n   , resource $image2\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image1","d":"A truecolor image link resource."},{"t":"image2","d":"A palette image link resource pointing to an image that has the same\n       size as image1."}]},"imagecolorresolve":{"s":"Get the index of the specified color or its closest possible alternative","y":"int imagecolorresolve\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   )","r":"Returns a color index.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."}]},"imagecolorresolvealpha":{"s":"Get the index of the specified color + alpha or its closest possible alternative","y":"int imagecolorresolvealpha\n    ( resource $image\n   , int $red\n   , int $green\n   , int $blue\n   , int $alpha\n   )","r":"Returns a color index.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."},{"t":"alpha","d":"A value between 0 and 127.\n       0 indicates completely opaque while \n       127 indicates completely transparent."}]},"imagecolorset":{"s":"Set the color for the specified palette index","y":"void imagecolorset\n    ( resource $image\n   , int $index\n   , int $red\n   , int $green\n   , int $blue\n   [, int $alpha = 0\n  ] )","r":"No value is returned.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"index","d":"An index in the palette."},{"t":"red","d":"Value of red component."},{"t":"green","d":"Value of green component."},{"t":"blue","d":"Value of blue component."},{"t":"alpha","d":"Value of alpha component."}]},"imagecolorsforindex":{"s":"Get the colors for an index","y":"array imagecolorsforindex\n    ( resource $image\n   , int $index\n   )","r":"Returns an associative array with red, green, blue and alpha keys that\n   contain the appropriate values for the specified color index.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"index","d":"The color index."}]},"imagecolorstotal":{"s":"Find out the number of colors in an image&#039;s palette","y":"int imagecolorstotal\n    ( resource $image\n   )","r":"Returns the number of colors in the specified image&#039;s palette or 0 for\n   truecolor images.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions, such\n       as imagecreatefromgif()."}]},"imagecolortransparent":{"s":"Define a color as transparent","y":"int imagecolortransparent\n    ( resource $image\n   [, int $color\n  ] )","r":"The identifier of the new (or current, if none is specified)\n   transparent color is returned. If color\n   is not specified, and the image has no transparent color, the\n   returned identifier will be -1.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imageconvolution":{"s":"Apply a 3x3 convolution matrix, using coefficient and offset","y":"bool imageconvolution\n    ( resource $image\n   , array $matrix\n   , float $div\n   , float $offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"matrix","d":"A 3x3 matrix: an array of three arrays of three floats."},{"t":"div","d":"The divisor of the result of the convolution, used for normalization."},{"t":"offset","d":"Color offset."}]},"imagecopy":{"s":"Copy part of an image","y":"bool imagecopy\n    ( resource $dst_im\n   , resource $src_im\n   , int $dst_x\n   , int $dst_y\n   , int $src_x\n   , int $src_y\n   , int $src_w\n   , int $src_h\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dst_im","d":"Destination image link resource."},{"t":"src_im","d":"Source image link resource."},{"t":"dst_x","d":"x-coordinate of destination point."},{"t":"dst_y","d":"y-coordinate of destination point."},{"t":"src_x","d":"x-coordinate of source point."},{"t":"src_y","d":"y-coordinate of source point."},{"t":"src_w","d":"Source width."},{"t":"src_h","d":"Source height."}]},"imagecopymerge":{"s":"Copy and merge part of an image","y":"bool imagecopymerge\n    ( resource $dst_im\n   , resource $src_im\n   , int $dst_x\n   , int $dst_y\n   , int $src_x\n   , int $src_y\n   , int $src_w\n   , int $src_h\n   , int $pct\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dst_im","d":"Destination image link resource."},{"t":"src_im","d":"Source image link resource."},{"t":"dst_x","d":"x-coordinate of destination point."},{"t":"dst_y","d":"y-coordinate of destination point."},{"t":"src_x","d":"x-coordinate of source point."},{"t":"src_y","d":"y-coordinate of source point."},{"t":"src_w","d":"Source width."},{"t":"src_h","d":"Source height."},{"t":"pct","d":"The two images will be merged according to pct\n       which can range from 0 to 100.  When pct = 0,\n       no action is taken, when 100 this function behaves identically\n       to imagecopy() for pallete images, except for\n       ignoring alpha components, while it implements alpha transparency\n       for true colour images."}]},"imagecopymergegray":{"s":"Copy and merge part of an image with gray scale","y":"bool imagecopymergegray\n    ( resource $dst_im\n   , resource $src_im\n   , int $dst_x\n   , int $dst_y\n   , int $src_x\n   , int $src_y\n   , int $src_w\n   , int $src_h\n   , int $pct\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dst_im","d":"Destination image link resource."},{"t":"src_im","d":"Source image link resource."},{"t":"dst_x","d":"x-coordinate of destination point."},{"t":"dst_y","d":"y-coordinate of destination point."},{"t":"src_x","d":"x-coordinate of source point."},{"t":"src_y","d":"y-coordinate of source point."},{"t":"src_w","d":"Source width."},{"t":"src_h","d":"Source height."},{"t":"pct","d":"The src_im will be changed to grayscale according \n        to pct where 0 is fully grayscale and 100 is \n        unchanged. When pct = 100 this function behaves \n        identically to imagecopy() for pallete images, except for\n        ignoring alpha components, while\n        it implements alpha transparency for true colour images."}]},"imagecopyresampled":{"s":"Copy and resize part of an image with resampling","y":"bool imagecopyresampled\n    ( resource $dst_image\n   , resource $src_image\n   , int $dst_x\n   , int $dst_y\n   , int $src_x\n   , int $src_y\n   , int $dst_w\n   , int $dst_h\n   , int $src_w\n   , int $src_h\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dst_image","d":"Destination image link resource."},{"t":"src_image","d":"Source image link resource."},{"t":"dst_x","d":"x-coordinate of destination point."},{"t":"dst_y","d":"y-coordinate of destination point."},{"t":"src_x","d":"x-coordinate of source point."},{"t":"src_y","d":"y-coordinate of source point."},{"t":"dst_w","d":"Destination width."},{"t":"dst_h","d":"Destination height."},{"t":"src_w","d":"Source width."},{"t":"src_h","d":"Source height."}]},"imagecopyresized":{"s":"Copy and resize part of an image","y":"bool imagecopyresized\n    ( resource $dst_image\n   , resource $src_image\n   , int $dst_x\n   , int $dst_y\n   , int $src_x\n   , int $src_y\n   , int $dst_w\n   , int $dst_h\n   , int $src_w\n   , int $src_h\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dst_image","d":"Destination image link resource."},{"t":"src_image","d":"Source image link resource."},{"t":"dst_x","d":"x-coordinate of destination point."},{"t":"dst_y","d":"y-coordinate of destination point."},{"t":"src_x","d":"x-coordinate of source point."},{"t":"src_y","d":"y-coordinate of source point."},{"t":"dst_w","d":"Destination width."},{"t":"dst_h","d":"Destination height."},{"t":"src_w","d":"Source width."},{"t":"src_h","d":"Source height."}]},"imagecreate":{"s":"Create a new palette based image","y":"resource imagecreate\n    ( int $width\n   , int $height\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"width","d":"The image width."},{"t":"height","d":"The image height."}]},"imagecreatefromgd":{"s":"Create a new image from GD file or URL","y":"resource imagecreatefromgd\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the GD file."}]},"imagecreatefromgd2":{"s":"Create a new image from GD2 file or URL","y":"resource imagecreatefromgd2\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the GD2 image."}]},"imagecreatefromgd2part":{"s":"Create a new image from a given part of GD2 file or URL","y":"resource imagecreatefromgd2part\n    ( string $filename\n   , int $srcX\n   , int $srcY\n   , int $width\n   , int $height\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the GD2 image."},{"t":"srcX","d":"x-coordinate of source point."},{"t":"srcY","d":"y-coordinate of source point."},{"t":"width","d":"Source width."},{"t":"height","d":"Source height."}]},"imagecreatefromgif":{"s":"Create a new image from file or URL","y":"resource imagecreatefromgif\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the GIF image."}]},"imagecreatefrompng":{"s":"Create a new image from file or URL","y":"resource imagecreatefrompng\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the PNG image."}]},"imagecreatefromstring":{"s":"Create a new image from the image stream in the string","y":"resource imagecreatefromstring\n    ( string $image\n   )","r":"An image resource will be returned on success. FALSE is returned if\n   the image type is unsupported, the data is not in a recognised format,\n   or the image is corrupt and cannot be loaded.","p":[{"t":"image","d":"A string containing the image data."}]},"imagecreatefromwbmp":{"s":"Create a new image from file or URL","y":"resource imagecreatefromwbmp\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the WBMP image."}]},"imagecreatefromwebp":{"s":"Create a new image from file or URL","y":"resource imagecreatefromwebp\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the WebP image."}]},"imagecreatefromxbm":{"s":"Create a new image from file or URL","y":"resource imagecreatefromxbm\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the XBM image."}]},"imagecreatetruecolor":{"s":"Create a new true color image","y":"resource imagecreatetruecolor\n    ( int $width\n   , int $height\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"width","d":"Image width."},{"t":"height","d":"Image height."}]},"imagecrop":{"s":"Crop an image using the given coordinates and size, x, y, width and height","y":"resource imagecrop\n    ( resource $image\n   , array $rect\n   )","r":"Return cropped image resource on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"rect","d":"Array with keys &quot;x&quot;, &quot;y&quot;, &quot;width&quot; and &quot;height&quot;."}]},"imagecropauto":{"s":"Crop an image automatically using one of the available modes","y":"resource imagecropauto\n    ( resource $image\n   [, int $mode = -1\n   [, float $threshold = .5\n   [, int $color = -1\n  ]]] )","r":"Return cropped image resource on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"mode","d":"One of IMG_CROP_* constants."},{"t":"threshold","d":"Used in IMG_CROP_THRESHOLD mode."},{"t":"color","d":"Used in IMG_CROP_THRESHOLD mode."}]},"imagedashedline":{"s":"Draw a dashed line","y":"bool imagedashedline\n    ( resource $image\n   , int $x1\n   , int $y1\n   , int $x2\n   , int $y2\n   , int $color\n   )","r":"Always returns true","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x1","d":"Upper left x coordinate."},{"t":"y1","d":"Upper left y coordinate 0, 0 is the top left corner of the image."},{"t":"x2","d":"Bottom right x coordinate."},{"t":"y2","d":"Bottom right y coordinate."},{"t":"color","d":"The fill color. A color identifier created with \n       imagecolorallocate()."}]},"imagedestroy":{"s":"Destroy an image","y":"bool imagedestroy\n    ( resource $image\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."}]},"imageellipse":{"s":"Draw an ellipse","y":"bool imageellipse\n    ( resource $image\n   , int $cx\n   , int $cy\n   , int $width\n   , int $height\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"cx","d":"x-coordinate of the center."},{"t":"cy","d":"y-coordinate of the center."},{"t":"width","d":"The ellipse width."},{"t":"height","d":"The ellipse height."},{"t":"color","d":"The color of the ellipse. A color identifier created with\n       imagecolorallocate()."}]},"imagefill":{"s":"Flood fill","y":"bool imagefill\n    ( resource $image\n   , int $x\n   , int $y\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x","d":"x-coordinate of start point."},{"t":"y","d":"y-coordinate of start point."},{"t":"color","d":"The fill color. A color identifier created with \n       imagecolorallocate()."}]},"imagefilledarc":{"s":"Draw a partial arc and fill it","y":"bool imagefilledarc\n    ( resource $image\n   , int $cx\n   , int $cy\n   , int $width\n   , int $height\n   , int $start\n   , int $end\n   , int $color\n   , int $style\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"cx","d":"x-coordinate of the center."},{"t":"cy","d":"y-coordinate of the center."},{"t":"width","d":"The arc width."},{"t":"height","d":"The arc height."},{"t":"start","d":"The arc start angle, in degrees."},{"t":"end","d":"The arc end angle, in degrees.\n       0\u00b0 is located at the three-o&#039;clock position, and the arc is drawn\n       clockwise."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."},{"t":"style","d":"A bitwise OR of the following possibilities:\n       \n        IMG_ARC_PIE\n        IMG_ARC_CHORD\n        IMG_ARC_NOFILL\n        IMG_ARC_EDGED\n       \n       IMG_ARC_PIE and IMG_ARC_CHORD are\n       mutually exclusive; IMG_ARC_CHORD just\n       connects the starting and ending angles with a straight line, while\n       IMG_ARC_PIE produces a rounded edge.\n       IMG_ARC_NOFILL indicates that the arc\n       or chord should be outlined, not filled.  IMG_ARC_EDGED,\n       used together with IMG_ARC_NOFILL, indicates that the\n       beginning and ending angles should be connected to the center - this is a\n       good way to outline (rather than fill) a &#039;pie slice&#039;."}]},"imagefilledellipse":{"s":"Draw a filled ellipse","y":"bool imagefilledellipse\n    ( resource $image\n   , int $cx\n   , int $cy\n   , int $width\n   , int $height\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"cx","d":"x-coordinate of the center."},{"t":"cy","d":"y-coordinate of the center."},{"t":"width","d":"The ellipse width."},{"t":"height","d":"The ellipse height."},{"t":"color","d":"The fill color. A color identifier created with \n       imagecolorallocate()."}]},"imagefilledpolygon":{"s":"Draw a filled polygon","y":"bool imagefilledpolygon\n    ( resource $image\n   , array $points\n   , int $num_points\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"points","d":"An array containing the x and y\n       coordinates of the polygons vertices consecutively."},{"t":"num_points","d":"Total number of vertices, which must be at least 3."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagefilledrectangle":{"s":"Draw a filled rectangle","y":"bool imagefilledrectangle\n    ( resource $image\n   , int $x1\n   , int $y1\n   , int $x2\n   , int $y2\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x1","d":"x-coordinate for point 1."},{"t":"y1","d":"y-coordinate for point 1."},{"t":"x2","d":"x-coordinate for point 2."},{"t":"y2","d":"y-coordinate for point 2."},{"t":"color","d":"The fill color. A color identifier created with \n       imagecolorallocate()."}]},"imagefilltoborder":{"s":"Flood fill to specific color","y":"bool imagefilltoborder\n    ( resource $image\n   , int $x\n   , int $y\n   , int $border\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x","d":"x-coordinate of start."},{"t":"y","d":"y-coordinate of start."},{"t":"border","d":"The border color. A color identifier created with \n       imagecolorallocate()."},{"t":"color","d":"The fill color. A color identifier created with \n       imagecolorallocate()."}]},"imagefilter":{"s":"Applies a filter to an image","y":"bool imagefilter\n    ( resource $image\n   , int $filtertype\n   [, int $arg1\n   [, int $arg2\n   [, int $arg3\n   [, int $arg4\n  ]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filtertype","d":"filtertype can be one of the following:\n       \n        \n         \n          IMG_FILTER_NEGATE: Reverses all colors of\n          the image.\n         \n        \n        \n         \n          IMG_FILTER_GRAYSCALE: Converts the image into\n          grayscale.\n         \n        \n        \n         \n          IMG_FILTER_BRIGHTNESS: Changes the brightness\n          of the image. Use arg1 to set the level of\n          brightness.\n         \n        \n        \n         \n          IMG_FILTER_CONTRAST: Changes the contrast of\n          the image. Use arg1 to set the level of\n          contrast.\n         \n        \n        \n         \n          IMG_FILTER_COLORIZE: Like\n          IMG_FILTER_GRAYSCALE, except you can specify the\n          color. Use arg1, arg2 and\n          arg3 in the form of\n          red, green,\n          blue and arg4 for the\n          alpha channel. The range for each color is 0 to 255.\n         \n        \n        \n         \n          IMG_FILTER_EDGEDETECT: Uses edge detection to\n          highlight the edges in the image.\n         \n        \n        \n         \n          IMG_FILTER_EMBOSS: Embosses the image.\n         \n        \n        \n         \n          IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using\n          the Gaussian method.\n         \n        \n        \n         \n          IMG_FILTER_SELECTIVE_BLUR: Blurs the image.\n         \n        \n        \n         \n          IMG_FILTER_MEAN_REMOVAL: Uses mean removal to\n          achieve a &quot;sketchy&quot; effect.\n         \n        \n        \n         \n          IMG_FILTER_SMOOTH: Makes the image smoother.\n          Use arg1 to set the level of smoothness.\n         \n        \n        \n         \n          IMG_FILTER_PIXELATE: Applies pixelation effect \n          to the image, use arg1 to set the block size \n          and arg2 to set the pixelation effect mode."},{"t":"arg1","d":"IMG_FILTER_BRIGHTNESS: Brightness level.\n         \n        \n        \n         \n          IMG_FILTER_CONTRAST: Contrast level.\n         \n        \n        \n         \n          IMG_FILTER_COLORIZE: Value of red component.\n         \n        \n        \n         \n          IMG_FILTER_SMOOTH: Smoothness level.\n         \n        \n        \n         \n          IMG_FILTER_PIXELATE: Block size in pixels."},{"t":"arg2","d":"IMG_FILTER_COLORIZE: Value of green component.\n         \n        \n        \n         \n          IMG_FILTER_PIXELATE: Whether to use advanced pixelation \n          effect or not (defaults to FALSE)."},{"t":"arg3","d":"IMG_FILTER_COLORIZE: Value of blue component."},{"t":"arg4","d":"IMG_FILTER_COLORIZE: Alpha channel, A value \n          between 0 and 127. 0 indicates completely opaque while 127 indicates \n          completely transparent."}]},"imageflip":{"s":"Flips an image using a given mode","y":"bool imageflip\n    ( resource $image\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"mode","d":"Flip mode, this can be one of the IMG_FLIP_* constants:"}]},"imagefontheight":{"s":"Get font height","y":"int imagefontheight\n    ( int $font\n   )","r":"Returns the pixel height of the font.","p":[{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."}]},"imagefontwidth":{"s":"Get font width","y":"int imagefontwidth\n    ( int $font\n   )","r":"Returns the pixel width of the font.","p":[{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."}]},"imageftbbox":{"s":"Give the bounding box of a text using fonts via freetype2","y":"array imageftbbox\n    ( float $size\n   , float $angle\n   , string $fontfile\n   , string $text\n   [, array $extrainfo\n  ] )","r":"imageftbbox() returns an array with 8\n   elements representing four points making the bounding box of the\n   text:\n   \n    \n     \n      \n       0\n       lower left corner, X position\n      \n\n      \n       1\n       lower left corner, Y position\n      \n\n      \n       2\n       lower right corner, X position\n      \n\n      \n       3\n       lower right corner, Y position\n      \n\n      \n       4\n       upper right corner, X position\n      \n\n      \n       5\n       upper right corner, Y position\n      \n\n      \n       6\n       upper left corner, X position\n      \n\n      \n       7\n       upper left corner, Y position","p":[{"t":"size","d":"The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2)."},{"t":"angle","d":"Angle in degrees in which text will be \n       measured."},{"t":"fontfile","d":"The name of the TrueType font file (can be a URL). Depending on\n       which version of the GD library that PHP is using, it may attempt to\n       search for files that do not begin with a leading &#039;\/&#039; by appending\n       &#039;.ttf&#039; to the filename and searching along a library-defined font path."},{"t":"text","d":"The string to be measured."},{"t":"extrainfo","d":"Possible array indexes for extrainfo\n        \n         \n          \n           Key\n           Type\n           Meaning\n          \n\n         \n\n         \n          \n           linespacing\n           float\n           Defines drawing linespacing"}]},"imagefttext":{"s":"Write text to the image using fonts using FreeType 2","y":"array imagefttext\n    ( resource $image\n   , float $size\n   , float $angle\n   , int $x\n   , int $y\n   , int $color\n   , string $fontfile\n   , string $text\n   [, array $extrainfo\n  ] )","r":"This function returns an array defining the four points of the box, starting in the lower left and moving counter-clockwise:\n   \n    \n     \n      \n       0\n       lower left x-coordinate\n      \n\n      \n       1\n       lower left y-coordinate\n      \n\n      \n       2\n       lower right x-coordinate\n      \n\n      \n       3\n       lower right y-coordinate\n      \n\n      \n       4\n       upper right x-coordinate\n      \n\n      \n       5\n       upper right y-coordinate\n      \n\n      \n       6\n       upper left x-coordinate\n      \n\n      \n       7\n       upper left y-coordinate","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"size","d":"The font size to use in points."},{"t":"angle","d":"The angle in degrees, with 0 degrees being left-to-right reading text.\n       Higher values represent a counter-clockwise rotation. For example, a \n       value of 90 would result in bottom-to-top reading text."},{"t":"x","d":"The coordinates given by x and\n       y will define the basepoint of the first\n       character (roughly the lower-left corner of the character). This\n       is different from the imagestring(), where\n       x and y define the\n       upper-left corner of the first character. For example, &quot;top left&quot;\n       is 0, 0."},{"t":"y","d":"The y-ordinate. This sets the position of the fonts baseline, not the\n       very bottom of the character."},{"t":"color","d":"The index of the desired color for the text, see \n       imagecolorexact()."},{"t":"fontfile","d":"The path to the TrueType font you wish to use."}]},"imagegammacorrect":{"s":"Apply a gamma correction to a GD image","y":"bool imagegammacorrect\n    ( resource $image\n   , float $inputgamma\n   , float $outputgamma\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"inputgamma","d":"The input gamma."},{"t":"outputgamma","d":"The output gamma."}]},"imagegd":{"s":"Output GD image to browser or file","y":"bool imagegd\n    ( resource $image\n   [, string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."}]},"imagegd2":{"s":"Output GD2 image to browser or file","y":"bool imagegd2\n    ( resource $image\n   [, string $filename\n   [, int $chunk_size\n   [, int $type = IMG_GD2_RAW\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."},{"t":"chunk_size","d":"Chunk size."},{"t":"type","d":"Either IMG_GD2_RAW or \n       IMG_GD2_COMPRESSED. Default is \n       IMG_GD2_RAW."}]},"imagegif":{"s":"Output image to browser or file","y":"bool imagegif\n    ( resource $image\n   [, string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."}]},"imagegrabscreen":{"s":"Captures the whole screen","y":"resource imagegrabscreen\n    ( void\n   )","r":"Returns an image resource identifier on success, FALSE on failure.","p":null},"imagegrabwindow":{"s":"Captures a window","y":"resource imagegrabwindow\n    ( int $window_handle\n   [, int $client_area = 0\n  ] )","r":"Returns an image resource identifier on success, FALSE on failure.","p":[{"t":"window_handle","d":"The HWND window ID."},{"t":"client_area","d":"Include the client area of the application window."}]},"imageinterlace":{"s":"Enable or disable interlace","y":"int imageinterlace\n    ( resource $image\n   [, int $interlace = 0\n  ] )","r":"Returns 1 if the interlace bit is set for the image, 0 otherwise.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"interlace","d":"If non-zero, the image will be interlaced, else the interlace bit is\n       turned off."}]},"imageistruecolor":{"s":"Finds whether an image is a truecolor image","y":"bool imageistruecolor\n    ( resource $image\n   )","r":"Returns TRUE if the image is truecolor, FALSE\n   otherwise.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."}]},"imagelayereffect":{"s":"Set the alpha blending flag to use the bundled libgd layering effects","y":"bool imagelayereffect\n    ( resource $image\n   , int $effect\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"effect","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""}]},"imageline":{"s":"Draw a line","y":"bool imageline\n    ( resource $image\n   , int $x1\n   , int $y1\n   , int $x2\n   , int $y2\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x1","d":"x-coordinate for first point."},{"t":"y1","d":"y-coordinate for first point."},{"t":"x2","d":"x-coordinate for second point."},{"t":"y2","d":"y-coordinate for second point."},{"t":"color","d":"The line color. A color identifier created with \n       imagecolorallocate()."}]},"imageloadfont":{"s":"Load a new font","y":"int imageloadfont\n    ( string $file\n   )","r":"The font identifier which is always bigger than 5 to avoid conflicts with\n   built-in fonts or FALSE on errors.","p":[{"t":"file","d":"The font file format is currently binary and architecture\n       dependent.  This means you should generate the font files on the\n       same type of CPU as the machine you are running PHP on."}]},"imagepalettecopy":{"s":"Copy the palette from one image to another","y":"void imagepalettecopy\n    ( resource $destination\n   , resource $source\n   )","r":"No value is returned.","p":[{"t":"destination","d":"The destination image resource."},{"t":"source","d":"The source image resource."}]},"imagepalettetotruecolor":{"s":"Converts a palette based image to true color","y":"bool imagepalettetotruecolor\n    ( resource $src\n   )","r":"Returns TRUE if the convertion was complete, or if the source image already \n   is a true color image, otherwise FALSE is returned.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."}]},"imagepng":{"s":"Output a PNG image to either the browser or a file","y":"bool imagepng\n    ( resource $image\n   [, string $filename\n   [, int $quality\n   [, int $filters\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."},{"t":"quality","d":"Compression level: from 0 (no compression) to 9."},{"t":"filters","d":"Allows reducing the PNG file size. It is a bitmask field which may be\n       set to any combination of the PNG_FILTER_XXX \n       constants. PNG_NO_FILTER or \n       PNG_ALL_FILTERS may also be used to respectively\n       disable or activate all filters."}]},"imagepolygon":{"s":"Draws a polygon","y":"bool imagepolygon\n    ( resource $image\n   , array $points\n   , int $num_points\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"points","d":"An array containing the polygon&#039;s vertices, e.g.:\n       \n        \n         \n          \n           points[0]\n           = x0\n          \n\n          \n           points[1]\n           = y0\n          \n\n          \n           points[2]\n           = x1\n          \n\n          \n           points[3]\n           = y1"},{"t":"num_points","d":"Total number of points (vertices)."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagepsbbox":{"s":"Give the bounding box of a text rectangle using PostScript Type1 fonts","y":"array imagepsbbox\n    ( string $text\n   , resource $font\n   , int $size\n   )","r":"Returns an array containing the following elements:\n   \n    \n     \n      \n       0\n       left x-coordinate\n      \n\n      \n       1\n       upper y-coordinate\n      \n\n      \n       2\n       right x-coordinate\n      \n\n      \n       3\n       lower y-coordinate","p":[{"t":"text","d":"The text to be written."},{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."},{"t":"size","d":"size is expressed in pixels."},{"t":"space","d":"Allows you to change the default value of a space in a font.  This\n       amount is added to the normal value and can also be negative. \n       Expressed in character space units, where 1 unit is 1\/1000th of an\n       em-square."},{"t":"tightness","d":"tightness allows you to control the amount\n       of white space between characters. This amount is added to the\n       normal character width and can also be negative.\n       Expressed in character space units, where 1 unit is 1\/1000th of an\n       em-square."},{"t":"angle","d":"angle is in degrees."}]},"imagepsencodefont":{"s":"Change the character encoding vector of a font","y":"bool imagepsencodefont\n    ( resource $font_index\n   , string $encodingfile\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."},{"t":"encodingfile","d":"The exact format of this file is described in T1libs documentation. \n       T1lib comes with two ready-to-use files, \n       IsoLatin1.enc and \n       IsoLatin2.enc."}]},"imagepsextendfont":{"s":"Extend or condense a font","y":"bool imagepsextendfont\n    ( resource $font_index\n   , float $extend\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."},{"t":"extend","d":"Extension value, must be greater than 0."}]},"imagepsfreefont":{"s":"Free memory used by a PostScript Type 1 font","y":"bool imagepsfreefont\n    ( resource $font_index\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."}]},"imagepsloadfont":{"s":"Load a PostScript Type 1 font from file","y":"resource imagepsloadfont\n    ( string $filename\n   )","r":"In the case everything went right, a valid font index will be returned and\n   can be used for further purposes. Otherwise the function returns FALSE.","p":[{"t":"filename","d":"Path to the Postscript font file."}]},"imagepstext":{"s":"Draws a text over an image using PostScript Type1 fonts","y":"array imagepstext\n    ( resource $image\n   , string $text\n   , resource $font_index\n   , int $size\n   , int $foreground\n   , int $background\n   , int $x\n   , int $y\n   [, int $space = 0\n   [, int $tightness = 0\n   [, float $angle = 0.0\n   [, int $antialias_steps = 4\n  ]]]] )","r":"This function returns an array containing the following elements:\n   \n    \n     \n      \n       0\n       lower left x-coordinate\n      \n\n      \n       1\n       lower left y-coordinate\n      \n\n      \n       2\n       upper right x-coordinate\n      \n\n      \n       3\n       upper right y-coordinate","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"text","d":"The text to be written."},{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."},{"t":"size","d":"size is expressed in pixels."},{"t":"foreground","d":"The color in which the text will be painted."},{"t":"background","d":"The color to which the text will try to fade in with antialiasing.\n       No pixels with the color background are \n       actually painted, so the background image does not need to be of solid\n       color."},{"t":"x","d":"x-coordinate for the lower-left corner of the first character."},{"t":"y","d":"y-coordinate for the lower-left corner of the first character."},{"t":"space","d":"Allows you to change the default value of a space in a font. This\n       amount is added to the normal value and can also be negative.\n       Expressed in character space units, where 1 unit is 1\/1000th of an \n       em-square."},{"t":"tightness","d":"tightness allows you to control the amount\n       of white space between characters. This amount is added to the\n       normal character width and can also be negative.\n       Expressed in character space units, where 1 unit is 1\/1000th of an \n       em-square."},{"t":"angle","d":"angle is in degrees."},{"t":"antialias_steps","d":"Allows you to control the number of colours used for antialiasing \n       text. Allowed values are 4 and 16. The higher value is recommended\n       for text sizes lower than 20, where the effect in text quality is\n       quite visible.  With bigger sizes, use 4. It&#039;s less computationally\n       intensive."}]},"imagerectangle":{"s":"Draw a rectangle","y":"bool imagerectangle\n    ( resource $image\n   , int $x1\n   , int $y1\n   , int $x2\n   , int $y2\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x1","d":"Upper left x coordinate."},{"t":"y1","d":"Upper left y coordinate\n       0, 0 is the top left corner of the image."},{"t":"x2","d":"Bottom right x coordinate."},{"t":"y2","d":"Bottom right y coordinate."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagerotate":{"s":"Rotate an image with a given angle","y":"resource imagerotate\n    ( resource $image\n   , float $angle\n   , int $bgd_color\n   [, int $ignore_transparent = 0\n  ] )","r":"Returns an image resource for the rotated image,  or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"angle","d":"Rotation angle, in degrees. The rotation angle is interpreted as the\n       number of degrees to rotate the image anticlockwise."},{"t":"bgd_color","d":"Specifies the color of the uncovered zone after the rotation"},{"t":"ignore_transparent","d":"If set and non-zero, transparent colors are ignored (otherwise kept)."}]},"imagesavealpha":{"s":"Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images","y":"bool imagesavealpha\n    ( resource $image\n   , bool $saveflag\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"saveflag","d":"Whether to save the alpha channel or not. Default to FALSE."}]},"imagescale":{"s":"Scale an image using the given new width and height","y":"resource imagescale\n    ( resource $image\n   , int $new_width\n   [, int $new_height = -1\n   [, int $mode = IMG_BILINEAR_FIXED\n  ]] )","r":"Return scaled image resource on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"new_width","d":""},{"t":"new_height","d":""},{"t":"mode","d":"One of IMG_NEAREST_NEIGHBOUR,\n      IMG_BILINEAR_FIXED,\n      IMG_BICUBIC,\n      IMG_BICUBIC_FIXED or anything else (will use two\n      pass)."}]},"imagesetbrush":{"s":"Set the brush image for line drawing","y":"bool imagesetbrush\n    ( resource $image\n   , resource $brush\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"brush","d":"An image resource."}]},"imagesetinterpolation":{"s":"Set the interpolation method","y":"bool imagesetinterpolation\n    ( resource $image\n   [, int $method = IMG_BILINEAR_FIXED\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"method","d":"The interpolation method, which can be one of the following:\n       \n        \n         \n          IMG_BELL: Bell filter.\n         \n        \n        \n         \n          IMG_BESSEL: Bessel filter.\n         \n        \n        \n         \n          IMG_BICUBIC: Bicubic interpolation.\n         \n        \n        \n         \n          IMG_BICUBIC_FIXED: Fixed point implementation of the bicubic interpolation.\n         \n        \n        \n         \n          IMG_BILINEAR_FIXED: Fixed point implementation of the  bilinear interpolation (default (also on image creation)).\n         \n        \n        \n         \n          IMG_BLACKMAN: Blackman window function.\n         \n        \n        \n         \n          IMG_BOX: Box blur filter.\n         \n        \n        \n         \n          IMG_BSPLINE: Spline interpolation.\n         \n        \n        \n         \n          IMG_CATMULLROM: Cubic Hermite spline interpolation.\n         \n        \n        \n         \n          IMG_GAUSSIAN: Gaussian function.\n         \n        \n        \n         \n          IMG_GENERALIZED_CUBIC: Generalized cubic spline fractal interpolation.\n         \n        \n        \n         \n          IMG_HERMITE: Hermite interpolation.\n         \n        \n        \n         \n          IMG_HAMMING: Hamming filter.\n         \n        \n        \n         \n          IMG_HANNING: Hanning filter.\n         \n        \n        \n         \n          IMG_MITCHELL: Mitchell filter.\n         \n        \n        \n         \n          IMG_POWER: Power interpolation.\n         \n        \n        \n         \n          IMG_QUADRATIC: Inverse quadratic interpolation.\n         \n        \n        \n         \n          IMG_SINC: Sinc function.\n         \n        \n        \n         \n          IMG_NEAREST_NEIGHBOUR: Nearest neighbour interpolation.\n         \n        \n        \n         \n          IMG_WEIGHTED4: Weighting filter.\n         \n        \n        \n         \n          IMG_TRIANGLE: Triangle interpolation."}]},"imagesetpixel":{"s":"Set a single pixel","y":"bool imagesetpixel\n    ( resource $image\n   , int $x\n   , int $y\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"x","d":"x-coordinate."},{"t":"y","d":"y-coordinate."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagesetstyle":{"s":"Set the style for line drawing","y":"bool imagesetstyle\n    ( resource $image\n   , array $style\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"style","d":"An array of pixel colors. You can use the \n       IMG_COLOR_TRANSPARENT constant to add a \n       transparent pixel."}]},"imagesetthickness":{"s":"Set the thickness for line drawing","y":"bool imagesetthickness\n    ( resource $image\n   , int $thickness\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"thickness","d":"Thickness, in pixels."}]},"imagesettile":{"s":"Set the tile image for filling","y":"bool imagesettile\n    ( resource $image\n   , resource $tile\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"tile","d":"The image resource to be used as a tile."}]},"imagestring":{"s":"Draw a string horizontally","y":"bool imagestring\n    ( resource $image\n   , int $font\n   , int $x\n   , int $y\n   , string $string\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."},{"t":"x","d":"x-coordinate of the upper left corner."},{"t":"y","d":"y-coordinate of the upper left corner."},{"t":"string","d":"The string to be written."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagesx":{"s":"Get image width","y":"int imagesx\n    ( resource $image\n   )","r":"Return the width of the image or FALSE on \n   errors.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."}]},"imagesy":{"s":"Get image height","y":"int imagesy\n    ( resource $image\n   )","r":"Return the height of the image or FALSE on \n   errors.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."}]},"imagetruecolortopalette":{"s":"Convert a true color image to a palette image","y":"bool imagetruecolortopalette\n    ( resource $image\n   , bool $dither\n   , int $ncolors\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"dither","d":"Indicates if the image should be dithered - if it is TRUE then\n       dithering will be used which will result in a more speckled image but\n       with better color approximation."},{"t":"ncolors","d":"Sets the maximum number of colors that should be retained in the palette."}]},"imagettfbbox":{"s":"Give the bounding box of a text using TrueType fonts","y":"array imagettfbbox\n    ( float $size\n   , float $angle\n   , string $fontfile\n   , string $text\n   )","r":"imagettfbbox() returns an array with 8\n   elements representing four points making the bounding box of the\n   text on success and FALSE on error.\n   \n    \n     \n      \n       key\n       contents\n      \n\n     \n\n     \n      \n       0\n       lower left corner, X position\n      \n\n      \n       1\n       lower left corner, Y position\n      \n\n      \n       2\n       lower right corner, X position\n      \n\n      \n       3\n       lower right corner, Y position\n      \n\n      \n       4\n       upper right corner, X position\n      \n\n      \n       5\n       upper right corner, Y position\n      \n\n      \n       6\n       upper left corner, X position\n      \n\n      \n       7\n       upper left corner, Y position","p":[{"t":"size","d":"The font size.\n       Note: \n        \n         In GD 1, this is measured in pixels. In GD 2, this is measured in\n         points."},{"t":"angle","d":"Angle in degrees in which text will be measured."},{"t":"fontfile","d":"The name of the TrueType font file (can be a URL). Depending on\n       which version of the GD library that PHP is using, it may attempt to\n       search for files that do not begin with a leading &#039;\/&#039; by appending\n       &#039;.ttf&#039; to the filename and searching along a library-defined font path."},{"t":"text","d":"The string to be measured."}]},"imagettftext":{"s":"Write text to the image using TrueType fonts","y":"array imagettftext\n    ( resource $image\n   , float $size\n   , float $angle\n   , int $x\n   , int $y\n   , int $color\n   , string $fontfile\n   , string $text\n   )","r":"Returns an array with 8 elements representing four points making the\n   bounding box of the text. The order of the points is lower left, lower \n   right, upper right, upper left. The points are relative to the text\n   regardless of the angle, so &quot;upper left&quot; means in the top left-hand \n   corner when you see the text horizontally.\n   Returns FALSE on error.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"size","d":"The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2)."},{"t":"angle","d":"The angle in degrees, with 0 degrees being left-to-right reading text.\n       Higher values represent a counter-clockwise rotation. For example, a \n       value of 90 would result in bottom-to-top reading text."},{"t":"x","d":"The coordinates given by x and\n       y will define the basepoint of the first\n       character (roughly the lower-left corner of the character). This\n       is different from the imagestring(), where\n       x and y define the\n       upper-left corner of the first character. For example, &quot;top left&quot;\n       is 0, 0."},{"t":"y","d":"The y-ordinate. This sets the position of the fonts baseline, not the\n       very bottom of the character."},{"t":"color","d":"The color index. Using the negative of a color index has the effect of\n       turning off antialiasing. See imagecolorallocate()."},{"t":"fontfile","d":"The path to the TrueType font you wish to use."}]},"imagetypes":{"s":"Return the image types supported by this PHP build","y":"int imagetypes\n    ( void\n   )","r":"Returns a bit-field corresponding to the image formats supported by the\n   version of GD linked into PHP.  The following bits are returned, \n   IMG_GIF | IMG_JPG |\n   IMG_PNG | IMG_WBMP | \n   IMG_XPM.","p":null},"imagewbmp":{"s":"Output image to browser or file","y":"bool imagewbmp\n    ( resource $image\n   [, string $filename\n   [, int $foreground\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."},{"t":"foreground","d":"You can set the foreground color with this parameter by setting an\n       identifier obtained from imagecolorallocate().\n       The default foreground color is black."}]},"imagewebp":{"s":"Output an WebP image to browser or file","y":"bool imagewebp\n    ( resource $image\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."}]},"imagexbm":{"s":"Output an XBM image to browser or file","y":"bool imagexbm\n    ( resource $image\n   , string $filename\n   [, int $foreground\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."},{"t":"foreground","d":"You can set the foreground color with this parameter by setting an\n       identifier obtained from imagecolorallocate().\n       The default foreground color is black."}]},"image_type_to_extension":{"s":"Get file extension for image type","y":"string image_type_to_extension\n    ( int $imagetype\n   [, bool $include_dot = TRUE\n  ] )","r":"A string with the extension corresponding to the given image type.","p":[{"t":"imagetype","d":"One of the IMAGETYPE_XXX constant."},{"t":"include_dot","d":"Whether to prepend a dot to the extension or not. Default to TRUE."}]},"image_type_to_mime_type":{"s":"Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype","y":"string image_type_to_mime_type\n    ( int $imagetype\n   )","r":"The returned values are as follows\n   \n   Returned values Constants\n    \n     \n      \n       imagetype\n       Returned value\n      \n\n     \n\n     \n      \n       IMAGETYPE_GIF\n       image\/gif\n      \n\n      \n       IMAGETYPE_JPEG\n       image\/jpeg\n      \n\n      \n       IMAGETYPE_PNG\n       image\/png\n      \n\n      \n       IMAGETYPE_SWF\n       application\/x-shockwave-flash\n      \n\n      \n       IMAGETYPE_PSD\n       image\/psd\n      \n\n      \n       IMAGETYPE_BMP\n       image\/bmp\n      \n\n      \n       IMAGETYPE_TIFF_II (intel byte order)\n       image\/tiff\n      \n\n      \n       \n        IMAGETYPE_TIFF_MM (motorola byte order)\n       \n       image\/tiff\n      \n\n      \n       IMAGETYPE_JPC\n       application\/octet-stream\n      \n\n      \n       IMAGETYPE_JP2\n       image\/jp2\n      \n\n      \n       IMAGETYPE_JPX\n       application\/octet-stream\n      \n\n      \n       IMAGETYPE_JB2\n       application\/octet-stream\n      \n\n      \n       IMAGETYPE_SWC\n       application\/x-shockwave-flash\n      \n\n      \n       IMAGETYPE_IFF\n       image\/iff\n      \n\n      \n       IMAGETYPE_WBMP\n       image\/vnd.wap.wbmp\n      \n\n      \n       IMAGETYPE_XBM\n       image\/xbm\n      \n\n      \n       IMAGETYPE_ICO\n       image\/vnd.microsoft.icon","p":[{"t":"imagetype","d":"One of the IMAGETYPE_XXX constants."}]},"imap_8bit":{"s":"Convert an 8bit string to a quoted-printable string","y":"string imap_8bit\n    ( string $string\n   )","r":"Returns a quoted-printable string.","p":[{"t":"string","d":"The 8bit string to convert"}]},"imap_alerts":{"s":"Returns all IMAP alert messages that have occurred","y":"array imap_alerts\n    ( void\n   )","r":"Returns an array of all of the IMAP alert messages generated or FALSE if\n   no alert messages are available.","p":null},"imap_base64":{"s":"Decode BASE64 encoded text","y":"string imap_base64\n    ( string $text\n   )","r":"Returns the decoded message as a string.","p":[{"t":"text","d":"The encoded text"}]},"imap_binary":{"s":"Convert an 8bit string to a base64 string","y":"string imap_binary\n    ( string $string\n   )","r":"Returns a base64 encoded string.","p":[{"t":"string","d":"The 8bit string"}]},"imap_body":{"s":"Read the message body","y":"string imap_body\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )","r":"Returns the body of the specified message, as a string.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"options","d":"The optional options are a bit mask\n       with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in internal format, will\n          not canonicalize to CRLF."}]},"imap_bodystruct":{"s":"Read the structure of a specified body section of a specific message","y":"object imap_bodystruct\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   )","r":"Returns the information in an object, for a detailed description\n   of the object structure and properties see \n   imap_fetchstructure().","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"section","d":"The body section to read"}]},"imap_check":{"s":"Check current mailbox","y":"object imap_check\n    ( resource $imap_stream\n   )","r":"Returns the information in an object with following properties:\n   \n    \n     \n      Date - current system time formatted according to &raquo;&nbsp;RFC2822\n     \n    \n    \n     \n      Driver - protocol used to access this mailbox:\n      POP3, IMAP, NNTP\n     \n    \n    \n     \n      Mailbox - the mailbox name\n     \n    \n    \n     \n      Nmsgs - number of messages in the mailbox\n     \n    \n    \n     \n      Recent - number of recent messages in the mailbox","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_clearflag_full":{"s":"Clears flags on messages","y":"bool imap_clearflag_full\n    ( resource $imap_stream\n   , string $sequence\n   , string $flag\n   [, int $options = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"sequence","d":"A sequence of message numbers. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax"},{"t":"flag","d":"The flags which you can unset are &quot;\\\\Seen&quot;, &quot;\\\\Answered&quot;, &quot;\\\\Flagged&quot;,\n       &quot;\\\\Deleted&quot;, and &quot;\\\\Draft&quot; (as defined by &raquo;&nbsp;RFC2060)"},{"t":"options","d":"options are a bit mask and may contain\n       the single option:\n       \n        \n         \n          ST_UID - The sequence argument contains UIDs\n          instead of sequence numbers"}]},"imap_close":{"s":"Close an IMAP stream","y":"bool imap_close\n    ( resource $imap_stream\n   [, int $flag = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"flag","d":"If set to CL_EXPUNGE, the function will silently\n       expunge the mailbox before closing, removing all messages marked for\n       deletion. You can achieve the same thing by using\n       imap_expunge()"}]},"imap_create":{"s":"Alias of imap_createmailbox()","y":"","r":"","p":null},"imap_createmailbox":{"s":"Create a new mailbox","y":"bool imap_createmailbox\n    ( resource $imap_stream\n   , string $mailbox\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information. Names containing international characters should be\n       encoded by imap_utf7_encode()"}]},"imap_delete":{"s":"Mark a message for deletion from current mailbox","y":"bool imap_delete\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )","r":"Returns TRUE.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"options","d":"You can set the FT_UID which tells the function\n       to treat the msg_number argument as an\n       UID."}]},"imap_deletemailbox":{"s":"Delete a mailbox","y":"bool imap_deletemailbox\n    ( resource $imap_stream\n   , string $mailbox\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"}]},"imap_errors":{"s":"Returns all of the IMAP errors that have occurred","y":"array imap_errors\n    ( void\n   )","r":"This function returns an array of all of the IMAP error messages\n   generated since the last imap_errors() call,\n   or the beginning of the page. Returns FALSE if no error messages are\n   available. ","p":null},"imap_expunge":{"s":"Delete all messages marked for deletion","y":"bool imap_expunge\n    ( resource $imap_stream\n   )","r":"Returns TRUE.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_fetchbody":{"s":"Fetch a particular section of the body of the message","y":"string imap_fetchbody\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   [, int $options = 0\n  ] )","r":"Returns a particular section of the body of the specified messages as a\n   text string.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"section","d":"The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification"},{"t":"options","d":"A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF."}]},"imap_fetchheader":{"s":"Returns header for a message","y":"string imap_fetchheader\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )","r":"Returns the header of the specified message as a text string.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"options","d":"The possible options are:\n       \n        \n         \n          FT_UID - The msgno\n          argument is a UID\n         \n        \n        \n         \n          FT_INTERNAL - The return string\n          is in &quot;internal&quot; format, without any attempt to\n          canonicalize to CRLF newlines\n         \n        \n        \n         \n          FT_PREFETCHTEXT - The RFC822.TEXT\n          should be pre-fetched at the same time.  This avoids an\n          extra RTT on an IMAP connection if a full message text is\n          desired (e.g. in a &quot;save to local file&quot; operation)"}]},"imap_fetchmime":{"s":"Fetch MIME headers for a particular section of the message","y":"string imap_fetchmime\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   [, int $options = 0\n  ] )","r":"Returns the MIME headers of a particular section of the body of the specified messages as a\n   text string.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"section","d":"The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification"},{"t":"options","d":"A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF."}]},"imap_fetchstructure":{"s":"Read the structure of a particular message","y":"object imap_fetchstructure\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )","r":"Returns an object includes the envelope, internal date, size, flags and\n   body structure along with a similar object for each mime attachment. The\n   structure of the returned objects is as follows:","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"options","d":"This optional parameter only has a single option, \n       FT_UID, which tells the function to treat the\n       msg_number argument as a \n       UID."}]},"imap_fetchtext":{"s":"Alias of imap_body()","y":"","r":"","p":null},"imap_fetch_overview":{"s":"Read an overview of the information in the headers of the given message","y":"array imap_fetch_overview\n    ( resource $imap_stream\n   , string $sequence\n   [, int $options = 0\n  ] )","r":"Returns an array of objects describing one message header each.\n   The object will only define a property if it exists. The possible\n   properties are:\n   \n    \n     \n      subject - the messages subject\n     \n    \n    \n     \n      from - who sent it\n     \n    \n    \n     \n      to - recipient\n     \n    \n    \n     \n      date - when was it sent\n     \n    \n    \n     \n      message_id - Message-ID\n     \n    \n    \n     \n      references - is a reference to this message id\n     \n    \n    \n     \n      in_reply_to - is a reply to this message id\n     \n    \n    \n     \n      size - size in bytes\n     \n    \n    \n     \n      uid - UID the message has in the mailbox\n     \n    \n    \n     \n      msgno - message sequence number in the mailbox\n     \n    \n    \n     \n      recent - this message is flagged as recent\n     \n    \n    \n     \n      flagged -  this message is flagged\n     \n    \n    \n     \n      answered -  this message is flagged as answered\n     \n    \n    \n     \n      deleted -  this message is flagged for deletion\n     \n    \n    \n     \n      seen -  this message is flagged as already read\n     \n    \n    \n     \n      draft -  this message is flagged as being a draft","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"sequence","d":"A message sequence description. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax"},{"t":"options","d":"sequence will contain a sequence of message\n       indices or UIDs, if this parameter is set to \n       FT_UID."}]},"imap_gc":{"s":"Clears IMAP cache","y":"bool imap_gc\n    ( resource $imap_stream\n   , int $caches\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"caches","d":"Specifies the cache to purge. It may one or a combination\n       of the following constants: \n       IMAP_GC_ELT (message cache elements), \n       IMAP_GC_ENV (enveloppe and bodies),\n       IMAP_GC_TEXTS (texts)."}]},"imap_getacl":{"s":"Gets the ACL for a given mailbox","y":"array imap_getacl\n    ( resource $imap_stream\n   , string $mailbox\n   )","r":"Returns an associative array of &quot;folder&quot; =&gt; &quot;acl&quot; pairs.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"}]},"imap_getmailboxes":{"s":"Read the list of mailboxes, returning detailed information on each one","y":"array imap_getmailboxes\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )","r":"Returns an array of objects containing mailbox information. Each\n   object has the attributes name, specifying\n   the full name of the mailbox; delimiter,\n   which is the hierarchy delimiter for the part of the hierarchy\n   this mailbox is in; and\n   attributes. Attributes\n   is a bitmask that can be tested against:\n   \n    \n     \n      LATT_NOINFERIORS - This mailbox contains, and may not contain any\n      &quot;children&quot; (there are no mailboxes below this one). Calling \n      imap_createmailbox() will not work on this mailbox.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"ref","d":"ref should normally be just the server\n       specification as described in imap_open()"},{"t":"pattern","d":"Specifies where in the mailbox hierarchy\nto start searching."}]},"imap_getsubscribed":{"s":"List all the subscribed mailboxes","y":"array imap_getsubscribed\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )","r":"Returns an array of objects containing mailbox information. Each\n   object has the attributes name, specifying\n   the full name of the mailbox; delimiter,\n   which is the hierarchy delimiter for the part of the hierarchy\n   this mailbox is in; and\n   attributes. Attributes\n   is a bitmask that can be tested against:\n   \n    \n     \n      LATT_NOINFERIORS - This mailbox has no\n      &quot;children&quot; (there are no mailboxes below this one).\n     \n    \n   \n     \n      LATT_NOSELECT - This is only a container,\n      not a mailbox - you cannot open it.\n     \n    \n    \n     \n      LATT_MARKED - This mailbox is marked.\n      Only used by UW-IMAPD.\n     \n    \n    \n     \n      LATT_UNMARKED - This mailbox is not marked.\n      Only used by UW-IMAPD.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"ref","d":"ref should normally be just the server\n       specification as described in imap_open()"},{"t":"pattern","d":"Specifies where in the mailbox hierarchy\nto start searching."}]},"imap_get_quotaroot":{"s":"Retrieve the quota settings per user","y":"array imap_get_quotaroot\n    ( resource $imap_stream\n   , string $quota_root\n   )","r":"Returns an array of integer values pertaining to the specified user\n   mailbox.  All values contain a key based upon the resource name, and a\n   corresponding array with the usage and limit values within.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"quota_root","d":"quota_root should normally be in the form of\n       which mailbox (i.e. INBOX)."}]},"imap_header":{"s":"Alias of imap_headerinfo()","y":"","r":"","p":null},"imap_headerinfo":{"s":"Read the header of the message","y":"object imap_headerinfo\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $fromlength = 0\n   [, int $subjectlength = 0\n   [, string $defaulthost = NULL\n  ]]] )","r":"Returns the information in an object with following properties:\n   \n    \n     \n      toaddress - full to: line, up to 1024 characters\n     \n    \n    \n     \n      to - an array of objects from the To: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      fromaddress - full from: line, up to 1024 characters\n     \n    \n    \n     \n      from - an array of objects from the From: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      ccaddress - full cc: line, up to 1024 characters\n     \n    \n    \n     \n      cc - an array of objects from the Cc: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      bccaddress - full bcc: line, up to 1024 characters\n     \n    \n    \n     \n      bcc - an array of objects from the Bcc: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      reply_toaddress - full Reply-To: line, up to 1024 characters\n     \n    \n    \n     \n      reply_to - an array of objects from the Reply-To: line, with the following\n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      senderaddress - full sender: line, up to 1024 characters\n     \n    \n    \n     \n      sender - an array of objects from the Sender: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      return_pathaddress - full Return-Path: line, up to 1024 characters\n     \n    \n    \n     \n      return_path - an array of objects from the Return-Path: line, with the\n      following properties: personal, \n      adl, mailbox, and \n      host\n     \n    \n    \n     \n      remail - \n     \n    \n    \n     \n      date - The message date as found in its headers\n     \n    \n    \n     \n      Date - Same as date\n     \n    \n    \n     \n      subject - The message subject\n     \n    \n    \n     \n      Subject - Same as subject \n     \n    \n    \n     \n      in_reply_to - \n     \n    \n    \n     \n      message_id - \n     \n    \n    \n     \n      newsgroups - \n     \n    \n    \n     \n      followup_to - \n     \n    \n    \n     \n      references - \n     \n    \n    \n     \n      Recent - R if recent and seen, N\n      if recent and not seen, &#039; &#039; if not recent.\n     \n    \n    \n     \n      Unseen - U if not seen AND not recent, &#039; &#039; if seen\n      OR not seen and recent\n     \n    \n    \n     \n      Flagged - F if flagged, &#039; &#039; if not flagged\n     \n    \n    \n     \n      Answered - A if answered, &#039; &#039; if unanswered\n     \n    \n    \n     \n      Deleted - D if deleted, &#039; &#039; if not deleted\n     \n    \n    \n     \n      Draft - X if draft, &#039; &#039; if not draft\n     \n    \n    \n     \n      Msgno - The message number\n     \n    \n    \n     \n      MailDate - \n     \n    \n    \n     \n      Size - The message size\n     \n    \n    \n     \n      udate - mail message date in Unix time\n     \n    \n    \n     \n      fetchfrom - from line formatted to fit fromlength\n      characters\n     \n    \n    \n     \n      fetchsubject - subject line formatted to fit \n      subjectlength characters","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"fromlength","d":"Number of characters for the fetchfrom property.\n       Must be greater than or equal to zero."},{"t":"subjectlength","d":"Number of characters for the fetchsubject property\n       Must be greater than or equal to zero."},{"t":"defaulthost","d":""}]},"imap_headers":{"s":"Returns headers for all messages in a mailbox","y":"array imap_headers\n    ( resource $imap_stream\n   )","r":"Returns an array of string formatted with header info. One\n   element per mail message.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_last_error":{"s":"Gets the last IMAP error that occurred during this page request","y":"string imap_last_error\n    ( void\n   )","r":"Returns the full text of the last IMAP error message that occurred on the\n   current page. Returns FALSE if no error messages are available.","p":null},"imap_listmailbox":{"s":"Alias of imap_list()","y":"","r":"","p":null},"imap_listscan":{"s":"Returns the list of mailboxes that matches the given text","y":"array imap_listscan\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   , string $content\n   )","r":"Returns an array containing the names of the mailboxes that have\n   content in the text of the mailbox.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"ref","d":"ref should normally be just the server \n       specification as described in imap_open()"},{"t":"pattern","d":"Specifies where in the mailbox hierarchy\nto start searching."},{"t":"content","d":"The searched string"}]},"imap_lsub":{"s":"List all the subscribed mailboxes","y":"array imap_lsub\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )","r":"Returns an array of all the subscribed mailboxes.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"ref","d":"ref should normally be just the server \n       specification as described in imap_open()"},{"t":"pattern","d":"Specifies where in the mailbox hierarchy\nto start searching."}]},"imap_mail":{"s":"Send an email message","y":"bool imap_mail\n    ( string $to\n   , string $subject\n   , string $message\n   [, string $additional_headers = NULL\n   [, string $cc = NULL\n   [, string $bcc = NULL\n   [, string $rpath = NULL\n  ]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"to","d":"The receiver"},{"t":"subject","d":"The mail subject"},{"t":"message","d":"The mail body, see imap_mail_compose()"},{"t":"additional_headers","d":"As string with additional headers to be set on the mail"},{"t":"cc","d":""},{"t":"bcc","d":"The receivers specified in bcc will get the\n       mail, but are excluded from the headers."},{"t":"rpath","d":"Use this parameter to specify return path upon mail delivery failure.\n       This is useful when using PHP as a mail client for multiple users."}]},"imap_mailboxmsginfo":{"s":"Get information about the current mailbox","y":"object imap_mailboxmsginfo\n    ( resource $imap_stream\n   )","r":"Returns the information in an object with following properties:\n   \n    Mailbox properties\n    \n     \n      \n       Date\n       date of last change (current datetime)\n      \n\n      \n       Driver\n       driver\n      \n\n      \n       Mailbox\n       name of the mailbox\n      \n\n      \n       Nmsgs\n       number of messages\n      \n\n      \n       Recent\n       number of recent messages\n      \n\n      \n       Unread\n       number of unread messages\n      \n\n      \n       Deleted\n       number of deleted messages\n      \n\n      \n       Size\n       mailbox size","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_mail_compose":{"s":"Create a MIME message based on given envelope and body sections","y":"string imap_mail_compose\n    ( array $envelope\n   , array $body\n   )","r":"Returns the MIME message.","p":[{"t":"envelope","d":"An associative array of headers fields. Valid keys are: &quot;remail&quot;,\n       &quot;return_path&quot;, &quot;date&quot;, &quot;from&quot;, &quot;reply_to&quot;, &quot;in_reply_to&quot;, &quot;subject&quot;,\n       &quot;to&quot;, &quot;cc&quot;, &quot;bcc&quot;, &quot;message_id&quot; and &quot;custom_headers&quot; (which contains\n       associative array of other headers)."},{"t":"body","d":"An indexed array of bodies"}]},"imap_mail_copy":{"s":"Copy specified messages to a mailbox","y":"bool imap_mail_copy\n    ( resource $imap_stream\n   , string $msglist\n   , string $mailbox\n   [, int $options = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msglist","d":"msglist is a range not just message\n       numbers (as described in &raquo;&nbsp;RFC2060)."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"options","d":"options is a bitmask of one or more of\n       \n        \n         \n          CP_UID - the sequence numbers contain UIDS\n         \n        \n        \n         \n          CP_MOVE - Delete the messages from\n          the current mailbox after copying"}]},"imap_mail_move":{"s":"Move specified messages to a mailbox","y":"bool imap_mail_move\n    ( resource $imap_stream\n   , string $msglist\n   , string $mailbox\n   [, int $options = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msglist","d":"msglist is a range not just message numbers\n       (as described in &raquo;&nbsp;RFC2060)."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"options","d":"options is a bitmask and may contain the single option:\n       \n        \n         \n          CP_UID - the sequence numbers contain UIDS"}]},"imap_mime_header_decode":{"s":"Decode MIME header elements","y":"array imap_mime_header_decode\n    ( string $text\n   )","r":"The decoded elements are returned in an array of objects, where each\n   object has two properties, charset and \n   text.","p":[{"t":"text","d":"The MIME text"}]},"imap_msgno":{"s":"Gets the message sequence number for the given UID","y":"int imap_msgno\n    ( resource $imap_stream\n   , int $uid\n   )","r":"Returns the message sequence number for the given \n   uid.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"uid","d":"The message UID"}]},"imap_num_msg":{"s":"Gets the number of messages in the current mailbox","y":"int imap_num_msg\n    ( resource $imap_stream\n   )","r":"Return the number of messages in the current mailbox, as an integer.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_num_recent":{"s":"Gets the number of recent messages in current mailbox","y":"int imap_num_recent\n    ( resource $imap_stream\n   )","r":"Returns the number of recent messages in the current mailbox, as an\n   integer.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_open":{"s":"Open an IMAP stream to a mailbox","y":"resource imap_open\n    ( string $mailbox\n   , string $username\n   , string $password\n   [, int $options = 0\n   [, int $n_retries = 0\n   [, array $params = NULL\n  ]]] )","r":"Returns an IMAP stream on success or FALSE on error.","p":[{"t":"mailbox","d":"A mailbox name consists of a server and a mailbox path on this server.\n       The special name INBOX stands for the current users\n       personal mailbox. Mailbox names that contain international characters\n       besides those in the printable ASCII space have to be encoded width\n       imap_utf7_encode()."},{"t":"username","d":"The user name"},{"t":"password","d":"The password associated with the username"},{"t":"options","d":"The options are a bit mask with one or more of\n       the following:\n       \n        \n         \n          OP_READONLY - Open mailbox read-only\n         \n        \n        \n         \n          OP_ANONYMOUS - Don&#039;t use or update a\n          .newsrc for news (NNTP only)\n         \n        \n        \n         \n          OP_HALFOPEN - For IMAP\n          and NNTP names, open a connection but\n          don&#039;t open a mailbox.\n         \n        \n        \n         \n          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close\n          (see also imap_delete() and\n          imap_expunge())\n         \n        \n        \n         \n          OP_DEBUG - Debug protocol negotiations\n         \n        \n        \n         \n          OP_SHORTCACHE - Short (elt-only) caching\n         \n        \n        \n         \n          OP_SILENT - Don&#039;t pass up events (internal use)\n         \n        \n        \n         \n          OP_PROTOTYPE - Return driver prototype\n         \n        \n        \n         \n          OP_SECURE - Don&#039;t do non-secure authentication"},{"t":"n_retries","d":"Number of maximum connect attempts"},{"t":"params","d":"Connection parameters, the following (string) keys maybe used \n       to set one or more connection parameters:\n       \n        \n         \n          DISABLE_AUTHENTICATOR - Disable authentication properties"}]},"imap_ping":{"s":"Check if the IMAP stream is still active","y":"bool imap_ping\n    ( resource $imap_stream\n   )","r":"Returns TRUE if the stream is still alive, FALSE otherwise.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."}]},"imap_qprint":{"s":"Convert a quoted-printable string to an 8 bit string","y":"string imap_qprint\n    ( string $string\n   )","r":"Returns an 8 bits string.","p":[{"t":"string","d":"A quoted-printable string"}]},"imap_rename":{"s":"Alias of imap_renamemailbox()","y":"","r":"","p":null},"imap_renamemailbox":{"s":"Rename an old mailbox to new mailbox","y":"bool imap_renamemailbox\n    ( resource $imap_stream\n   , string $old_mbox\n   , string $new_mbox\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"old_mbox","d":"The old mailbox name, see imap_open() for more\n       information"},{"t":"new_mbox","d":"The new mailbox name, see imap_open() for more\n       information"}]},"imap_reopen":{"s":"Reopen IMAP stream to new mailbox","y":"bool imap_reopen\n    ( resource $imap_stream\n   , string $mailbox\n   [, int $options = 0\n   [, int $n_retries = 0\n  ]] )","r":"Returns TRUE if the stream is reopened, FALSE otherwise.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"options","d":"The options are a bit mask with one or more of\n       the following:\n       \n        \n         \n          OP_READONLY - Open mailbox read-only\n         \n        \n        \n         \n          OP_ANONYMOUS - Don&#039;t use or update a\n          .newsrc for news (NNTP only)\n         \n        \n        \n         \n          OP_HALFOPEN - For IMAP\n          and NNTP names, open a connection but\n          don&#039;t open a mailbox.\n         \n        \n        \n         \n          OP_EXPUNGE - Silently expunge recycle stream\n         \n        \n        \n         \n          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close\n          (see also imap_delete() and\n          imap_expunge())"},{"t":"n_retries","d":"Number of maximum connect attempts"}]},"imap_rfc822_parse_adrlist":{"s":"Parses an address string","y":"array imap_rfc822_parse_adrlist\n    ( string $address\n   , string $default_host\n   )","r":"Returns an array of objects. The objects properties are:","p":[{"t":"address","d":"A string containing addresses"},{"t":"default_host","d":"The default host name"}]},"imap_rfc822_parse_headers":{"s":"Parse mail headers from a string","y":"object imap_rfc822_parse_headers\n    ( string $headers\n   [, string $defaulthost = &quot;UNKNOWN&quot;\n  ] )","r":"Returns an object similar to the one returned by\n   imap_header(), except for the flags and other \n   properties that come from the IMAP server.","p":[{"t":"headers","d":"The parsed headers data"},{"t":"defaulthost","d":"The default host name"}]},"imap_rfc822_write_address":{"s":"Returns a properly formatted email address given the mailbox, host, and personal info","y":"string imap_rfc822_write_address\n    ( string $mailbox\n   , string $host\n   , string $personal\n   )","r":"Returns a string properly formatted email address as defined in &raquo;&nbsp;RFC2822.","p":[{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"host","d":"The email host part"},{"t":"personal","d":"The name of the account owner"}]},"imap_savebody":{"s":"Save a specific body section to a file","y":"bool imap_savebody\n    ( resource $imap_stream\n   , mixed $file\n   , int $msg_number\n   [, string $part_number = &quot;&quot;\n   [, int $options = 0\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"file","d":"The path to the saved file as a string, or a valid file descriptor\n       returned by fopen()."},{"t":"msg_number","d":"The message number"},{"t":"part_number","d":"The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification"},{"t":"options","d":"A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF."}]},"imap_scan":{"s":"Alias of imap_listscan()","y":"","r":"","p":null},"imap_scanmailbox":{"s":"Alias of imap_listscan()","y":"","r":"","p":null},"imap_search":{"s":"This function returns an array of messages matching the given search criteria","y":"array imap_search\n    ( resource $imap_stream\n   , string $criteria\n   [, int $options = SE_FREE\n   [, string $charset = NIL\n  ]] )","r":"Returns an array of message numbers or UIDs.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"criteria","d":"A string, delimited by spaces, in which the following keywords are\n       allowed. Any multi-word arguments (e.g.\n       FROM &quot;joey smith&quot;) must be quoted. Results will match\n       all criteria entries.\n       \n        \n         \n          ALL - return all messages matching the rest of the criteria\n         \n        \n        \n         \n          ANSWERED - match messages with the \\\\ANSWERED flag set\n         \n        \n        \n         \n          BCC &quot;string&quot; - match messages with &quot;string&quot; in the Bcc: field\n         \n        \n        \n         \n          BEFORE &quot;date&quot; - match messages with Date: before &quot;date&quot;\n         \n        \n        \n         \n          BODY &quot;string&quot; - match messages with &quot;string&quot; in the body of the message\n         \n        \n        \n         \n          CC &quot;string&quot; - match messages with &quot;string&quot; in the Cc: field\n         \n        \n        \n         \n          DELETED - match deleted messages\n         \n        \n        \n         \n          FLAGGED - match messages with the \\\\FLAGGED (sometimes\n          referred to as Important or Urgent) flag set\n         \n        \n        \n         \n          FROM &quot;string&quot; - match messages with &quot;string&quot; in the From: field\n         \n        \n        \n         \n          KEYWORD &quot;string&quot; - match messages with &quot;string&quot; as a keyword\n         \n        \n        \n         \n          NEW - match new messages\n         \n        \n        \n         \n          OLD - match old messages\n         \n        \n        \n         \n          ON &quot;date&quot; - match messages with Date: matching &quot;date&quot;\n         \n        \n        \n         \n          RECENT - match messages with the \\\\RECENT flag set\n         \n        \n        \n         \n          SEEN - match messages that have been read (the \\\\SEEN flag is set)\n         \n        \n        \n         \n          SINCE &quot;date&quot; - match messages with Date: after &quot;date&quot;\n         \n        \n        \n         \n          SUBJECT &quot;string&quot; - match messages with &quot;string&quot; in the Subject:\n         \n        \n        \n         \n          TEXT &quot;string&quot; - match messages with text &quot;string&quot;\n         \n        \n        \n         \n          TO &quot;string&quot; - match messages with &quot;string&quot; in the To:\n         \n        \n        \n         \n          UNANSWERED - match messages that have not been answered\n         \n        \n        \n         \n          UNDELETED - match messages that are not deleted\n         \n        \n        \n         \n          UNFLAGGED - match messages that are not flagged\n         \n        \n        \n         \n          UNKEYWORD &quot;string&quot; - match messages that do not have the\n          keyword &quot;string&quot;\n         \n        \n        \n         \n          UNSEEN - match messages which have not been read yet"},{"t":"options","d":"Valid values for options are \n       SE_UID, which causes the returned array to\n       contain UIDs instead of messages sequence numbers."},{"t":"charset","d":""}]},"imap_setacl":{"s":"Sets the ACL for a given mailbox","y":"bool imap_setacl\n    ( resource $imap_stream\n   , string $mailbox\n   , string $id\n   , string $rights\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"id","d":"The user to give the rights to."},{"t":"rights","d":"The rights to give to the user. Passing an empty string will delete\n       acl."}]},"imap_setflag_full":{"s":"Sets flags on messages","y":"bool imap_setflag_full\n    ( resource $imap_stream\n   , string $sequence\n   , string $flag\n   [, int $options = NIL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"sequence","d":"A sequence of message numbers. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax"},{"t":"flag","d":"The flags which you can set are \\Seen, \n       \\Answered, \\Flagged,\n       \\Deleted, and \\Draft as\n       defined by &raquo;&nbsp;RFC2060."},{"t":"options","d":"A bit mask that may contain the single option:\n       \n        \n         \n          ST_UID - The sequence argument contains UIDs\n          instead of sequence numbers"}]},"imap_sort":{"s":"Gets and sort messages","y":"array imap_sort\n    ( resource $imap_stream\n   , int $criteria\n   , int $reverse\n   [, int $options = 0\n   [, string $search_criteria = NULL\n   [, string $charset = NIL\n  ]]] )","r":"Returns an array of message numbers sorted by the given\n   parameters.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"criteria","d":"Criteria can be one (and only one) of the following:\n       \n        \n         \n          SORTDATE - message Date\n         \n        \n        \n         \n          SORTARRIVAL - arrival date\n         \n        \n        \n         \n          SORTFROM - mailbox in first From address\n         \n        \n        \n         \n          SORTSUBJECT - message subject\n         \n        \n        \n         \n          SORTTO - mailbox in first To address\n         \n        \n        \n         \n          SORTCC - mailbox in first cc address\n         \n        \n        \n         \n          SORTSIZE - size of message in octets"},{"t":"reverse","d":"Set this to 1 for reverse sorting"},{"t":"options","d":"The options are a bitmask of one or more of the\n       following:\n       \n        \n         \n          SE_UID - Return UIDs instead of sequence numbers\n         \n        \n        \n         \n          SE_NOPREFETCH - Don&#039;t prefetch searched messages"},{"t":"search_criteria","d":""},{"t":"charset","d":""}]},"imap_subscribe":{"s":"Subscribe to a mailbox","y":"bool imap_subscribe\n    ( resource $imap_stream\n   , string $mailbox\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"}]},"imap_thread":{"s":"Returns a tree of threaded message","y":"array imap_thread\n    ( resource $imap_stream\n   [, int $options = SE_FREE\n  ] )","r":"imap_thread() returns an associative array containing\n   a tree of messages threaded by REFERENCES, or FALSE\n   on error.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"options","d":""}]},"imap_undelete":{"s":"Unmark the message which is marked deleted","y":"bool imap_undelete\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $flags = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number"},{"t":"flags","d":""}]},"imap_unsubscribe":{"s":"Unsubscribe from a mailbox","y":"bool imap_unsubscribe\n    ( resource $imap_stream\n   , string $mailbox\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"}]},"imap_utf7_decode":{"s":"Decodes a modified UTF-7 encoded string","y":"string imap_utf7_decode\n    ( string $text\n   )","r":"Returns a string that is encoded in ISO-8859-1 and consists of the same\n   sequence of characters in text, or FALSE\n   if text contains invalid modified UTF-7 sequence\n   or text contains a character that is not part of\n   ISO-8859-1 character set.","p":[{"t":"text","d":"A modified UTF-7 encoding string, as defined in &raquo;&nbsp;RFC 2060, section 5.1.3 (original UTF-7\n       was defined in &raquo;&nbsp;RFC1642)."}]},"imap_utf7_encode":{"s":"Converts ISO-8859-1 string to modified UTF-7 text","y":"string imap_utf7_encode\n    ( string $data\n   )","r":"Returns data encoded with the modified UTF-7\n   encoding as defined in &raquo;&nbsp;RFC 2060, \n   section 5.1.3 (original UTF-7 was defined in &raquo;&nbsp;RFC1642).","p":[{"t":"data","d":"An ISO-8859-1 string."}]},"imap_utf8":{"s":"Converts MIME-encoded text to UTF-8","y":"string imap_utf8\n    ( string $mime_encoded_text\n   )","r":"Returns an UTF-8 encoded string.","p":[{"t":"mime_encoded_text","d":"A MIME encoded string. MIME encoding method and the UTF-8 \n       specification are described in &raquo;&nbsp;RFC2047 and &raquo;&nbsp;RFC2044 respectively."}]},"implode":{"s":"Join array elements with a string","y":"string implode\n    ( string $glue\n   , array $pieces\n   )","r":"Returns a string containing a string representation of all the array\n   elements in the same order, with the glue string between each element.","p":[{"t":"glue","d":"Defaults to an empty string."},{"t":"pieces","d":"The array of strings to implode."}]},"import_request_variables":{"s":"Import GET\/POST\/Cookie variables into the global scope","y":"bool import_request_variables\n    ( string $types\n   [, string $prefix\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"types","d":"Using the types parameter, you can specify\n       which request variables to import. You can use &#039;G&#039;, &#039;P&#039; and &#039;C&#039; \n       characters respectively for GET, POST and Cookie. These characters are\n       not case sensitive, so you can also use any combination of &#039;g&#039;, &#039;p&#039;\n       and &#039;c&#039;. POST includes the POST uploaded file information."},{"t":"prefix","d":"Variable name prefix, prepended before all variable&#039;s name imported\n       into the global scope. So if you have a GET value named\n       &quot;userid&quot;, and provide a prefix\n       &quot;pref_&quot;, then you&#039;ll get a global variable named\n       $pref_userid."}]},"inclued_get_data":{"s":"Get the inclued data","y":"array inclued_get_data\n    ( void\n   )","r":"The inclued data.","p":null},"inet_ntop":{"s":"Converts a packed internet address to a human readable representation","y":"string inet_ntop\n    ( string $in_addr\n   )","r":"Returns a string representation of the address or FALSE on failure.","p":[{"t":"in_addr","d":"A 32bit IPv4, or 128bit IPv6 address."}]},"inet_pton":{"s":"Converts a human readable IP address to its packed in_addr representation","y":"string inet_pton\n    ( string $address\n   )","r":"Returns the in_addr representation of the given\n   address, or FALSE if a syntactically invalid\n   address is given (for example, an IPv4 address\n   without dots or an IPv6 address without colons).","p":[{"t":"address","d":"A human readable IPv4 or IPv6 address."}]},"ingres_autocommit":{"s":"Switch autocommit on or off","y":"bool ingres_autocommit\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_autocommit_state":{"s":"Test if the connection is using autocommit","y":"bool ingres_autocommit_state\n    ( resource $link\n   )","r":"Returns TRUE if autocommit is enabled or FALSE when autocommit is\n   disabled","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_charset":{"s":"Returns the installation character set","y":"string ingres_charset\n    ( resource $link\n   )","r":"Returns a string with the value for II_CHARSETxx or returns NULL if the value\n   could not be determined.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_close":{"s":"Close an Ingres database connection","y":"bool ingres_close\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_commit":{"s":"Commit a transaction","y":"bool ingres_commit\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_connect":{"s":"Open a connection to an Ingres database","y":"resource ingres_connect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, array $options\n  ]]]] )","r":"Returns a Ingres link resource on success or FALSE on failure","p":[{"t":"database","d":"The database name. Must follow the syntax:"},{"t":"username","d":"The Ingres user name"},{"t":"password","d":"The password associated with username"}]},"ingres_cursor":{"s":"Get a cursor name for a given result resource","y":"string ingres_cursor\n    ( resource $result\n   )","r":"Returns a string containing the active cursor name. If no cursor is\n   active then NULL is returned.","p":[{"t":"result","d":"The query result identifier"}]},"ingres_errno":{"s":"Get the last Ingres error number generated","y":"int ingres_errno\n    ([ resource $link\n  ] )","r":"Returns an integer containing the last error number. If no error was\n   reported, 0 is returned.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_error":{"s":"Get a meaningful error message for the last error generated","y":"string ingres_error\n    ([ resource $link\n  ] )","r":"Returns a string containing the last error, or NULL if no error has\n   occurred.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_escape_string":{"s":"Escape special characters for use in a query","y":"string ingres_escape_string\n    ( resource $link\n   , string $source_string\n   )","r":"Returns a string containing the escaped data.","p":[{"t":"link","d":"The connection link identifier"},{"t":"source_string","d":"The source string to be parsed"}]},"ingres_execute":{"s":"Execute a prepared query","y":"bool ingres_execute\n    ( resource $result\n   [, array $params\n   [, string $types\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result query identifier"},{"t":"params","d":"An array of parameter values to be used with the query"},{"t":"types","d":"A string containing a sequence of types for the parameter values\n       passed. See the types parameter in\n       ingres_query() for the list of type codes."}]},"ingres_fetch_array":{"s":"Fetch a row of result into an array","y":"array ingres_fetch_array\n    ( resource $result\n   [, int $result_type\n  ] )","r":"Returns an array that corresponds to the fetched row,\n   or FALSE if there are no more rows","p":[{"t":"result","d":"The query result identifier"},{"t":"result_type","d":"The result type. This result_type can be INGRES_NUM for\n       enumerated array, INGRES_ASSOC for associative array, or\n       INGRES_BOTH (default)."}]},"ingres_fetch_assoc":{"s":"Fetch a row of result into an associative array","y":"array ingres_fetch_assoc\n    ( resource $result\n   )","r":"Returns an associative array that corresponds to the fetched row,\n   or FALSE if there are no more rows","p":[{"t":"result","d":"The query result identifier"}]},"ingres_fetch_object":{"s":"Fetch a row of result into an object","y":"object ingres_fetch_object\n    ( resource $result\n   [, int $result_type\n  ] )","r":"Returns an object that corresponds to the fetched row,\n   or FALSE if there are no more rows","p":[{"t":"link","d":"The query result identifier"},{"t":"result_type","d":"(Optional argument.) result_type is a\n       constant and can take the following values: INGRES_ASSOC,\n       INGRES_NUM, and INGRES_BOTH."}]},"ingres_fetch_proc_return":{"s":"Get the return value from a procedure call","y":"int ingres_fetch_proc_return\n    ( resource $result\n   )","r":"Returns an integer if there is a return value otherwise it will\n   return NULL.","p":[{"t":"result","d":"The result identifier for a query"}]},"ingres_fetch_row":{"s":"Fetch a row of result into an enumerated array","y":"array ingres_fetch_row\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row,\n   or FALSE if there are no more rows","p":[{"t":"result","d":"The query result identifier"}]},"ingres_field_length":{"s":"Get the length of a field","y":"int ingres_field_length\n    ( resource $result\n   , int $index\n   )","r":"Returns the length of a field.","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the column number whose length\n       will be retrieved."}]},"ingres_field_name":{"s":"Get the name of a field in a query result","y":"string ingres_field_name\n    ( resource $result\n   , int $index\n   )","r":"Returns the name of a field\n   in a query result or FALSE on failure","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the field whose name will be\n       retrieved."}]},"ingres_field_nullable":{"s":"Test if a field is nullable","y":"bool ingres_field_nullable\n    ( resource $result\n   , int $index\n   )","r":"ingres_field_nullable() returns TRUE if the\n   field can be set to the NULL value and FALSE if it cannot","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the field whose nullability will be\n       retrieved."}]},"ingres_field_precision":{"s":"Get the precision of a field","y":"int ingres_field_precision\n    ( resource $result\n   , int $index\n   )","r":"Returns the field precision as an integer","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the field whose precision will be\n       retrieved."}]},"ingres_field_scale":{"s":"Get the scale of a field","y":"int ingres_field_scale\n    ( resource $result\n   , int $index\n   )","r":"Returns the scale of the field, as an integer","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the field whose scale will be\n       retrieved."}]},"ingres_field_type":{"s":"Get the type of a field in a query result","y":"string ingres_field_type\n    ( resource $result\n   , int $index\n   )","r":"ingres_field_type() returns the type of a\n   field in a query result or FALSE on failure.  Examples of\n   types returned are IIAPI_BYTE_TYPE,\n   IIAPI_CHA_TYPE, IIAPI_DTE_TYPE,\n   IIAPI_FLT_TYPE, IIAPI_INT_TYPE,\n   IIAPI_VCH_TYPE. Some of these types can map to more\n   than one SQL type depending on the length of the field (see\n   ingres_field_length()). For example\n   IIAPI_FLT_TYPE can be a float4 or a float8. For detailed\n   information, see the Ingres OpenAPI User Guide, Appendix \n   &quot;Data Types&quot; in the Ingres documentation.","p":[{"t":"result","d":"The query result identifier"},{"t":"index","d":"index is the field whose type will be\n       retrieved."}]},"ingres_free_result":{"s":"Free the resources associated with a result identifier","y":"bool ingres_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure. ","p":[{"t":"result","d":"The query result identifier"}]},"ingres_next_error":{"s":"Get the next Ingres error","y":"bool ingres_next_error\n    ([ resource $link\n  ] )","r":"ingres_next_error() returns TRUE if there is another\n   error to retrieve or FALSE when there are no more errors","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_num_fields":{"s":"Get the number of fields returned by the last query","y":"int ingres_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields","p":[{"t":"result","d":"The query result identifier"}]},"ingres_num_rows":{"s":"Get the number of rows affected or returned by a query","y":"int ingres_num_rows\n    ( resource $result\n   )","r":"For delete, insert, or update queries,\n   ingres_num_rows() returns the number of rows\n   affected by the query. For other queries,\n   ingres_num_rows() returns the number of rows\n   in the query&#039;s result.","p":[{"t":"result","d":"The result identifier for a query"}]},"ingres_pconnect":{"s":"Open a persistent connection to an Ingres database","y":"resource ingres_pconnect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, array $options\n  ]]]] )","r":"Returns an Ingres link resource on success or FALSE on failure","p":[{"t":"database","d":"The database name. Must follow the syntax:"},{"t":"username","d":"The Ingres user name"},{"t":"password","d":"The password associated with username"},{"t":"options","d":"See ingres_connect() for the list of options that\n       can be passed"}]},"ingres_prepare":{"s":"Prepare a query for later execution","y":"mixed ingres_prepare\n    ( resource $link\n   , string $query\n   )","r":"ingres_prepare() returns a query result identifier that\n   is used with ingres_execute() to execute the query. To see \n   if an error occurred, use ingres_errno(), \n   ingres_error(), or \n   ingres_errsqlstate().","p":[{"t":"link","d":"The connection link identifier"},{"t":"query","d":"A valid SQL query (see the Ingres SQL reference\n       guide) in the Ingres documentation.\n       See the query\n       parameter in ingres_query() for a list of SQL\n       statements which cannot be executed using\n       ingres_prepare()"}]},"ingres_query":{"s":"Send an SQL query to Ingres","y":"mixed ingres_query\n    ( resource $link\n   , string $query\n   [, array $params\n   [, string $types\n  ]] )","r":"ingres_query() returns a query result identifier on\n   success else it returns FALSE. To see if an error\n   occurred use ingres_errno(), \n   ingres_error() or \n   ingres_errsqlstate().","p":[{"t":"link","d":"The connection link identifier."},{"t":"params","d":"An array of parameter values to be used with the query"}]},"ingres_result_seek":{"s":"Set the row position before fetching data","y":"bool ingres_result_seek\n    ( resource $result\n   , int $position\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result identifier for a query"},{"t":"position","d":"The row to position the cursor on. If ingres.array_index_start\n       is set to 0, then the first row is 0, else it is 1"}]},"ingres_rollback":{"s":"Roll back a transaction","y":"bool ingres_rollback\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_set_environment":{"s":"Set environment features controlling output options","y":"bool ingres_set_environment\n    ( resource $link\n   , array $options\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"The connection link identifier"}]},"ingres_unbuffered_query":{"s":"Send an unbuffered  SQL query to Ingres","y":"mixed ingres_unbuffered_query\n    ( resource $link\n   , string $query\n   [, array $params\n   [, string $types\n  ]] )","r":"ingres_unbuffered_query() returns a query result identifier when\n   there are rows to fetch; else it returns FALSE when there are no rows, as\n   is the case of an INSERT, UPDATE, or DELETE statement. To see if an error\n   occurred, use ingres_errno(), \n   ingres_error(), or \n   ingres_errsqlstate().","p":[{"t":"link","d":"The connection link identifier"},{"t":"query","d":"A valid SQL query (see the Ingres SQL reference\n       guide) in the Ingres documentation.\n       See the query\n       parameter in ingres_query() for a list of SQL\n       statements that cannot be executed via\n       ingres_unbuffered_query()."},{"t":"params","d":"An array of parameter values to be used with the query"},{"t":"types","d":"A string containing a sequence of types for the parameter values\n       passed. See the types parameter in\n       ingres_query() for the list of type codes."}]},"ini_alter":{"s":"Alias of ini_set()","y":"","r":"","p":null},"ini_get":{"s":"Gets the value of a configuration option","y":"string ini_get\n    ( string $varname\n   )","r":"Returns the value of the configuration option as a string on success, or an\n   empty string for null values. Returns FALSE if the\n   configuration option doesn&#039;t exist.","p":[{"t":"varname","d":"The configuration option name."}]},"ini_get_all":{"s":"Gets all configuration options","y":"array ini_get_all\n    ([ string $extension\n   [, bool $details = true\n  ]] )","r":"Returns an associative array with directive name as the array key.","p":[{"t":"extension","d":"An optional extension name. If set, the function return only options\n       specific for that extension."},{"t":"details","d":"Retrieve details settings or only the current value for each setting.\n       Default is TRUE (retrieve details)."}]},"ini_restore":{"s":"Restores the value of a configuration option","y":"void ini_restore\n    ( string $varname\n   )","r":"No value is returned.","p":[{"t":"varname","d":"The configuration option name."}]},"ini_set":{"s":"Sets the value of a configuration option","y":"string ini_set\n    ( string $varname\n   , string $newvalue\n   )","r":"Returns the old value on success, FALSE on failure.","p":[{"t":"varname","d":""},{"t":"newvalue","d":"The new value for the option."}]},"inotify_add_watch":{"s":"Add a watch to an initialized inotify instance","y":"int inotify_add_watch\n    ( resource $inotify_instance\n   , string $pathname\n   , int $mask\n   )","r":"The return value is a unique (inotify instance wide) watch descriptor.","p":[{"t":"inotify_instance","d":"Resource returned by\ninotify_init()"},{"t":"pathname","d":"File or directory to watch"},{"t":"mask","d":"Events to watch for. See Predefined Constants."}]},"inotify_init":{"s":"Initialize an inotify instance","y":"resource inotify_init\n    ( void\n   )","r":"A stream resource or FALSE on error.","p":null},"inotify_queue_len":{"s":"Return a number upper than zero if there are pending events","y":"int inotify_queue_len\n    ( resource $inotify_instance\n   )","r":"Returns a number upper than zero if there are pending events. ","p":[{"t":"inotify_instance","d":"Resource returned by\ninotify_init()"}]},"inotify_read":{"s":"Read events from an inotify instance","y":"array inotify_read\n    ( resource $inotify_instance\n   )","r":"An array of inotify events or FALSE if no events was pending and\n   inotify_instance is non-blocking. Each event is an array with the following keys:\n   \n    wd is a watch descriptor returned by\n     inotify_add_watch()\n    mask is a bit mask of events\n    cookie is a unique id to connect related events (e.g. IN_MOVE_FROM\n     and IN_MOVE_TO)\n    name is the name of a file (e.g. if a file was modified in a\n     watched directory)","p":[{"t":"inotify_instance","d":"Resource returned by\ninotify_init()"}]},"inotify_rm_watch":{"s":"Remove an existing watch from an inotify instance","y":"bool inotify_rm_watch\n    ( resource $inotify_instance\n   , int $watch_descriptor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"inotify_instance","d":"Resource returned by\ninotify_init()"},{"t":"watch_descriptor","d":"Watch to remove from the instance"}]},"interface_exists":{"s":"Checks if the interface has been defined","y":"bool interface_exists\n    ( string $interface_name\n   [, bool $autoload = true\n  ] )","r":"Returns TRUE if the interface given by \n   interface_name has been defined, FALSE otherwise.","p":[{"t":"interface_name","d":"The interface name"},{"t":"autoload","d":"Whether to call __autoload or not by default."}]},"intl_get_error_code":{"s":"Get the last error code","y":"int \n   intl_get_error_code\n    ( void\n   )","r":"Error code returned by the last API function call.","p":null},"intl_get_error_message":{"s":"Get description of the last error","y":"string \n   intl_get_error_message\n    ( void\n   )","r":"Description of an error occurred in the last API function call.","p":null},"intl_is_failure":{"s":"Check whether the given error code indicates failure","y":"bool \n   intl_is_failure\n    ( int $error_code\n   )","r":"TRUE if it the code indicates some failure, and FALSE\n   in case of success or a warning.","p":[{"t":"error_code","d":"is a value that returned by functions:\n       intl_get_error_code(),\n       collator_get_error_code() ."}]},"intval":{"s":"Get the integer value of a variable","y":"int intval\n    ( mixed $var\n   [, int $base = 10\n  ] )","r":"The integer value of var on success, or 0 on\n   failure. Empty arrays return 0, non-empty arrays return 1.","p":[{"t":"var","d":"The scalar value being converted to an integer"},{"t":"base","d":"The base for the conversion"}]},"in_array":{"s":"Checks if a value exists in an array","y":"bool in_array\n    ( mixed $needle\n   , array $haystack\n   [, bool $strict = FALSE\n  ] )","r":"Returns TRUE if needle is found in the array,\n   FALSE otherwise.","p":[{"t":"needle","d":"The searched value."},{"t":"haystack","d":"The array."},{"t":"strict","d":"If the third parameter strict is set to TRUE\n       then the in_array() function will also check the\n       types of the\n       needle in the haystack."}]},"ip2long":{"s":"Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address","y":"int ip2long\n    ( string $ip_address\n   )","r":"Returns the IPv4 address or FALSE if ip_address\n   is invalid.","p":[{"t":"ip_address","d":"A standard format address."}]},"iptcembed":{"s":"Embeds binary IPTC data into a JPEG image","y":"mixed iptcembed\n    ( string $iptcdata\n   , string $jpeg_file_name\n   [, int $spool\n  ] )","r":"If success and spool flag is lower than 2 then the JPEG will not be \n   returned as a string, FALSE on errors.","p":[{"t":"iptcdata","d":"The data to be written."},{"t":"jpeg_file_name","d":"Path to the JPEG image."},{"t":"spool","d":"Spool flag. If the spool flag is over 2 then the JPEG will be \n       returned as a string."}]},"iptcparse":{"s":"Parse a binary IPTC block into single tags.","y":"array iptcparse\n    ( string $iptcblock\n   )","r":"Returns an array using the tagmarker as an index and the value as the\n   value. It returns FALSE on error or if no IPTC data was found. ","p":[{"t":"iptcblock","d":"A binary IPTC block."}]},"isset":{"s":"Determine if a variable is set and is not NULL","y":"bool isset\n    ( mixed $var\n   [, mixed $...\n  ] )","r":"Returns TRUE if var exists and has value other\n   than NULL, FALSE otherwise.","p":[{"t":"var","d":"The variable to be checked."},{"t":"...","d":"Another variable ..."}]},"is_a":{"s":"Checks if the object is of this class or has this class as one of its parents","y":"bool is_a\n    ( object $object\n   , string $class_name\n   [, bool $allow_string = FALSE\n  ] )","r":"Returns TRUE if the object is of this class or has this class as one of\n   its parents, FALSE otherwise.","p":[{"t":"object","d":"The tested object"},{"t":"class_name","d":"The class name"},{"t":"allow_string","d":"If this parameter set to FALSE, string class name as object\n       is not allowed. This also prevents from calling autoloader if the class doesn&#039;t exist."}]},"is_bool":{"s":"Finds out whether a variable is a boolean","y":"bool is_bool\n    ( mixed $var\n   )","r":"Returns TRUE if var is a boolean,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_callable":{"s":"Verify that the contents of a variable can be called as a function","y":"bool is_callable\n    ( callable $name\n   [, bool $syntax_only = false\n   [, string &$callable_name\n  ]] )","r":"Returns TRUE if name is callable, FALSE \n   otherwise.","p":[{"t":"name","d":"The callback function to check"},{"t":"syntax_only","d":"If set to TRUE the function only verifies that\n       name might be a function or method. It will only\n       reject simple variables that are not strings, or an array that does\n       not have a valid structure to be used as a callback. The valid ones\n       are supposed to have only 2 entries, the first of which is an object\n       or a string, and the second a string."},{"t":"callable_name","d":"Receives the &quot;callable name&quot;.  In the example below it is\n       &quot;someClass::someMethod&quot;.  Note, however, that despite the implication\n       that someClass::SomeMethod() is a callable static method, this is not\n       the case."}]},"is_dir":{"s":"Tells whether the filename is a directory","y":"bool is_dir\n    ( string $filename\n   )","r":"Returns TRUE if the filename exists and is a directory, FALSE\n   otherwise.","p":[{"t":"filename","d":"Path to the file. If filename is a relative\n       filename, it will be checked relative to the current working\n       directory. If filename is a symbolic or hard link \n       then the link will be resolved and checked. If you have enabled safe mode,\n       or open_basedir further\n       restrictions may apply."}]},"is_double":{"s":"Alias of is_float()","y":"","r":"","p":null},"is_executable":{"s":"Tells whether the filename is executable","y":"bool is_executable\n    ( string $filename\n   )","r":"Returns TRUE if the filename exists and is executable, or FALSE on\n   error.","p":[{"t":"filename","d":"Path to the file."}]},"is_file":{"s":"Tells whether the filename is a regular file","y":"bool is_file\n    ( string $filename\n   )","r":"Returns TRUE if the filename exists and is a regular file, FALSE\n   otherwise.","p":[{"t":"filename","d":"Path to the file."}]},"is_finite":{"s":"Finds whether a value is a legal finite number","y":"bool is_finite\n     ( float $val\n    )","r":"TRUE if val is a legal finite\n   number within the allowed range for a PHP float on this platform,\n   else FALSE.","p":[{"t":"val","d":"The value to check"}]},"is_float":{"s":"Finds whether the type of a variable is float","y":"bool is_float\n     ( mixed $var\n    )","r":"Returns TRUE if var is a float,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_infinite":{"s":"Finds whether a value is infinite","y":"bool is_infinite\n     ( float $val\n    )","r":"TRUE if val is infinite, else FALSE.","p":[{"t":"val","d":"The value to check"}]},"is_int":{"s":"Find whether the type of a variable is integer","y":"bool is_int\n     ( mixed $var\n    )","r":"Returns TRUE if var is an integer,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_link":{"s":"Tells whether the filename is a symbolic link","y":"bool is_link\n    ( string $filename\n   )","r":"Returns TRUE if the filename exists and is a symbolic link, FALSE\n   otherwise.","p":[{"t":"filename","d":"Path to the file."}]},"is_long":{"s":"Alias of is_int()","y":"","r":"","p":null},"is_nan":{"s":"Finds whether a value is not a number","y":"bool is_nan\n    ( float $val\n   )","r":"Returns TRUE if val is &#039;not a number&#039;,\n   else FALSE.","p":[{"t":"val","d":"The value to check"}]},"is_null":{"s":"Finds whether a variable is NULL","y":"bool is_null\n    ( mixed $var\n   )","r":"Returns TRUE if var is null, FALSE\n   otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_numeric":{"s":"Finds whether a variable is a number or a numeric string","y":"bool is_numeric\n    ( mixed $var\n   )","r":"Returns TRUE if var is a number or a numeric\n   string, FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_object":{"s":"Finds whether a variable is an object","y":"bool is_object\n     ( mixed $var\n    )","r":"Returns TRUE if var is an object,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_readable":{"s":"Tells whether a file exists and is readable","y":"bool is_readable\n    ( string $filename\n   )","r":"Returns TRUE if the file or directory specified by\n   filename exists and is readable, FALSE otherwise.","p":[{"t":"filename","d":"Path to the file."}]},"is_real":{"s":"Alias of is_float()","y":"","r":"","p":null},"is_resource":{"s":"Finds whether a variable is a resource","y":"bool is_resource\n    ( mixed $var\n   )","r":"Returns TRUE if var is a resource,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_scalar":{"s":"Finds whether a variable is a scalar","y":"bool is_scalar\n    ( mixed $var\n   )","r":"Returns TRUE if var is a scalar FALSE\n   otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_soap_fault":{"s":"Checks if a SOAP call has failed","y":"bool is_soap_fault\n    ( mixed $object\n   )","r":"This will return TRUE on error, and FALSE otherwise.","p":[{"t":"object","d":"The object to test."}]},"is_string":{"s":"Find whether the type of a variable is string","y":"bool is_string\n    ( mixed $var\n   )","r":"Returns TRUE if var is of type string,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"is_subclass_of":{"s":"Checks if the object has this class as one of its parents","y":"bool is_subclass_of\n    ( mixed $object\n   , string $class_name\n   [, bool $allow_string = TRUE\n  ] )","r":"This function returns TRUE if the object object,\n   belongs to a class which is a subclass of \n   class_name, FALSE otherwise.","p":[{"t":"object","d":"A class name or an object instance"},{"t":"class_name","d":"The class name"},{"t":"allow_string","d":"If this parameter set to false, string class name as object\n       is not allowed. This also prevents from calling autoloader if the class doesn&#039;t exist."}]},"is_tainted":{"s":"Checks whether a string is tainted","y":"bool is_tainted\n    ( string $string\n   )","r":"Return TRUE if the string is tainted, FALSE otherwise.","p":[{"t":"string","d":""}]},"is_uploaded_file":{"s":"Tells whether the file was uploaded via HTTP POST","y":"bool is_uploaded_file\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The filename being checked."}]},"is_writable":{"s":"Tells whether the filename is writable","y":"bool is_writable\n    ( string $filename\n   )","r":"Returns TRUE if the filename exists and is\n   writable.  ","p":[{"t":"filename","d":"The filename being checked."}]},"is_writeable":{"s":"Alias of is_writable()","y":"","r":"","p":null},"iterator_apply":{"s":"Call a function for every element in an iterator","y":"int iterator_apply\n    ( Traversable $iterator\n   , callable $function\n   [, array $args\n  ] )","r":"Returns the iteration count.","p":[{"t":"iterator","d":"The class to iterate over."},{"t":"function","d":"The callback function to call on every element.\n       Note: \n        \n         The function must return TRUE in order to\n         continue iterating over the iterator."},{"t":"args","d":"Arguments to pass to the callback function."}]},"iterator_count":{"s":"Count the elements in an iterator","y":"int iterator_count\n    ( Traversable $iterator\n   )","r":"The number of elements in iterator.","p":[{"t":"iterator","d":"The iterator being counted."}]},"iterator_to_array":{"s":"Copy the iterator into an array","y":"array iterator_to_array\n    ( Traversable $iterator\n   [, bool $use_keys = true\n  ] )","r":"An array containing the elements of the iterator.","p":[{"t":"iterator","d":"The iterator being copied."},{"t":"use_keys","d":"Whether to use the iterator element keys as index."}]},"java_last_exception_clear":{"s":"Clear last Java exception","y":"void java_last_exception_clear\n    ( void\n   )","r":"No value is returned.","p":null},"java_last_exception_get":{"s":"Get last Java exception","y":"object java_last_exception_get\n    ( void\n   )","r":"Returns an exception object.","p":null},"jdtojewish":{"s":"Converts a Julian day count to a Jewish calendar date","y":"string jdtojewish\n    ( int $juliandaycount\n   [, bool $hebrew = false\n   [, int $fl = 0\n  ]] )","r":"The jewish date as a string in the form &quot;month\/day\/year&quot;","p":[{"t":"julianday","d":"A julian day number as integer"},{"t":"hebrew","d":"If the hebrew parameter is set to TRUE, the\n       fl parameter is used for Hebrew, string based,\n       output format."},{"t":"fl","d":"The available formats are:  \n       CAL_JEWISH_ADD_ALAFIM_GERESH,\n       CAL_JEWISH_ADD_ALAFIM,\n       CAL_JEWISH_ADD_GERESHAYIM."}]},"jdtounix":{"s":"Convert Julian Day to Unix timestamp","y":"int jdtounix\n    ( int $jday\n   )","r":"The unix timestamp for the start of the given julian day.","p":[{"t":"jday","d":"A julian day number between 2440588 and 2465342."}]},"join":{"s":"Alias of implode()","y":"","r":"","p":null},"jpeg2wbmp":{"s":"Convert JPEG image file to WBMP image file","y":"bool jpeg2wbmp\n    ( string $jpegname\n   , string $wbmpname\n   , int $dest_height\n   , int $dest_width\n   , int $threshold\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"jpegname","d":"Path to JPEG file."},{"t":"wbmpname","d":"Path to destination WBMP file."},{"t":"dest_height","d":"Destination image height."},{"t":"dest_width","d":"Destination image width."},{"t":"threshold","d":"Threshold value, between 0 and 8 (inclusive)."}]},"json_decode":{"s":"Decodes a JSON string","y":"mixed json_decode\n    ( string $json\n   [, bool $assoc = false\n   [, int $depth = 512\n   [, int $options = 0\n  ]]] )","r":"Returns the value encoded in json in appropriate\n   PHP type. Values true, false and\n   null (case-insensitive) are returned as TRUE, FALSE\n   and NULL respectively. NULL is returned if the\n   json cannot be decoded or if the encoded\n   data is deeper than the recursion limit.","p":[{"t":"json","d":"The json string being decoded."},{"t":"assoc","d":"When TRUE, returned objects will be converted into\n       associative arrays."},{"t":"depth","d":"User specified recursion depth."},{"t":"options","d":"Bitmask of JSON decode options.  Currently only\n       JSON_BIGINT_AS_STRING\n       is supported (default is to cast large integers as floats)"}]},"json_encode":{"s":"Returns the JSON representation of a value","y":"string json_encode\n    ( mixed $value\n   [, int $options = 0\n   [, int $depth = 512\n  ]] )","r":"Returns a JSON encoded string on success  or FALSE on failure.","p":[{"t":"value","d":"The value being encoded. Can be any type except\n       a resource."},{"t":"options","d":"Bitmask consisting of JSON_HEX_QUOT,\n       JSON_HEX_TAG,\n       JSON_HEX_AMP,\n       JSON_HEX_APOS,\n       JSON_NUMERIC_CHECK,\n       JSON_PRETTY_PRINT,\n       JSON_UNESCAPED_SLASHES,\n       JSON_FORCE_OBJECT,\n       JSON_UNESCAPED_UNICODE. The behaviour of these\n       constants is described on\n       the JSON constants page."},{"t":"depth","d":"Set the maximum depth. Must be greater than zero."}]},"json_last_error":{"s":"Returns the last error occurred","y":"int json_last_error\n    ( void\n   )","r":"Returns an integer, the value can be one of the following \n   constants: ","p":null},"json_last_error_msg":{"s":"Returns the error string of the last json_encode() or json_decode() call","y":"string json_last_error_msg\n    ( void\n   )","r":"Returns the error message on success or NULL with wrong parameters.","p":null},"judy_type":{"s":"Return the type of a Judy array","y":"int judy_type\n    ( Judy $array\n   )","r":"Return an integer corresponding to a Judy type.","p":[{"t":"array","d":"The Judy Array to test."}]},"judy_version":{"s":"Return or print the current PHP Judy version","y":"string judy_version\n    ( void\n   )","r":"Return a string of the PHP Judy version. ","p":null},"kadm5_chpass_principal":{"s":"Changes the principal&#039;s password","y":"bool kadm5_chpass_principal\n    ( resource $handle\n   , string $principal\n   , string $password\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."},{"t":"principal","d":"The principal."},{"t":"password","d":"The new password."}]},"kadm5_create_principal":{"s":"Creates a kerberos principal with the given parameters","y":"bool kadm5_create_principal\n    ( resource $handle\n   , string $principal\n   [, string $password\n   [, array $options\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."},{"t":"principal","d":"The principal."},{"t":"password","d":"If password is omitted or is NULL, a random\n       key will be generated."},{"t":"options","d":"It is possible to specify several optional parameters within the\n       array options. Allowed are the following options:\n       KADM5_PRINC_EXPIRE_TIME,\n       KADM5_PW_EXPIRATION,\n       KADM5_ATTRIBUTES,\n       KADM5_MAX_LIFE,\n       KADM5_KVNO,\n       KADM5_POLICY,\n       KADM5_CLEARPOLICY,\n       KADM5_MAX_RLIFE."}]},"kadm5_delete_principal":{"s":"Deletes a kerberos principal","y":"bool kadm5_delete_principal\n    ( resource $handle\n   , string $principal\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."},{"t":"principal","d":"The removed principal."}]},"kadm5_destroy":{"s":"Closes the connection to the admin server and releases all related resources","y":"bool kadm5_destroy\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."}]},"kadm5_flush":{"s":"Flush all changes to the Kerberos database","y":"bool kadm5_flush\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."}]},"kadm5_get_principal":{"s":"Gets the principal&#039;s entries from the Kerberos database","y":"array kadm5_get_principal\n    ( resource $handle\n   , string $principal\n   )","r":"Returns array of options containing the following keys: KADM5_PRINCIPAL,\n   KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION, KADM5_ATTRIBUTES,\n   KADM5_MAX_LIFE, KADM5_MOD_NAME, KADM5_MOD_TIME, KADM5_KVNO, KADM5_POLICY,\n   KADM5_MAX_RLIFE, KADM5_LAST_SUCCESS, KADM5_LAST_FAILED,\n   KADM5_FAIL_AUTH_COUNT on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."},{"t":"principal","d":"The principal."}]},"kadm5_get_principals":{"s":"Gets all principals from the Kerberos database","y":"array kadm5_get_principals\n    ( resource $handle\n   )","r":"Returns array of principals on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."}]},"kadm5_init_with_password":{"s":"Opens a connection to the KADM5 library","y":"resource kadm5_init_with_password\n    ( string $admin_server\n   , string $realm\n   , string $principal\n   , string $password\n   )","r":"Returns a KADM5 handle on success or FALSE on failure.","p":[{"t":"admin_server","d":"The server."},{"t":"realm","d":"Defines the authentication domain for the connection."},{"t":"principal","d":"The principal."},{"t":"password","d":"If password is omitted or is NULL, a random\n       key will be generated."}]},"kadm5_modify_principal":{"s":"Modifies a kerberos principal with the given parameters","y":"bool kadm5_modify_principal\n    ( resource $handle\n   , string $principal\n   , array $options\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."},{"t":"principal","d":"The principal."},{"t":"options","d":"It is possible to specify several optional parameters within the\n       array options. Allowed are the following options:\n       KADM5_PRINC_EXPIRE_TIME,\n       KADM5_PW_EXPIRATION,\n       KADM5_ATTRIBUTES,\n       KADM5_MAX_LIFE,\n       KADM5_KVNO,\n       KADM5_POLICY,\n       KADM5_CLEARPOLICY,\n       KADM5_MAX_RLIFE.\n       KADM5_FAIL_AUTH_COUNT."}]},"key":{"s":"Fetch a key from an array","y":"mixed key\n    ( array &$array\n   )","r":"The key() function simply returns the\n   key of the array element that&#039;s currently being pointed to by the\n   internal pointer.  It does not move the pointer in any way.  If the\n   internal pointer points beyond the end of the elements list or the array is \n   empty, key() returns NULL.","p":[{"t":"array","d":"The array."}]},"key_exists":{"s":"Alias of array_key_exists()","y":"","r":"","p":null},"krsort":{"s":"Sort an array by key in reverse order","y":"bool krsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"You may modify the behavior of the sort using the optional parameter\n       sort_flags, for details see\n       sort()."}]},"ksort":{"s":"Sort an array by key","y":"bool ksort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details\n       see sort()."}]},"lcfirst":{"s":"Make a string&#039;s first character lowercase","y":"string lcfirst\n    ( string $str\n   )","r":"Returns the resulting string.","p":[{"t":"str","d":"The input string."}]},"lcg_value":{"s":"Combined linear congruential generator","y":"float lcg_value\n     ( void\n    )","r":"A pseudo random float value in the range of (0, 1)","p":null},"lchgrp":{"s":"Changes group ownership of symlink","y":"bool lchgrp\n    ( string $filename\n   , mixed $group\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the symlink."},{"t":"group","d":"The group specified by name or number."}]},"lchown":{"s":"Changes user ownership of symlink","y":"bool lchown\n    ( string $filename\n   , mixed $user\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."},{"t":"user","d":"User name or number."}]},"ldap_8859_to_t61":{"s":"Translate 8859 characters to t61 characters","y":"string ldap_8859_to_t61\n    ( string $value\n   )","r":"Return the t61 translation of\n   value.","p":[{"t":"value","d":"The text to be translated."}]},"ldap_add":{"s":"Add entries to LDAP directory","y":"bool ldap_add\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"entry","d":""}]},"ldap_bind":{"s":"Bind to LDAP directory","y":"bool ldap_bind\n    ( resource $link_identifier\n   [, string $bind_rdn = NULL\n   [, string $bind_password = NULL\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"bind_rdn","d":""},{"t":"bind_password","d":""}]},"ldap_close":{"s":"Alias of ldap_unbind()","y":"","r":"","p":null},"ldap_compare":{"s":"Compare value of attribute found in entry specified with DN","y":"mixed ldap_compare\n    ( resource $link_identifier\n   , string $dn\n   , string $attribute\n   , string $value\n   )","r":"Returns TRUE if value matches otherwise returns\n   FALSE. Returns -1 on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"attribute","d":"The attribute name."},{"t":"value","d":"The compared value."}]},"ldap_connect":{"s":"Connect to an LDAP server","y":"resource ldap_connect\n    ([ string $hostname = NULL\n   [, int $port = 389\n  ]] )","r":"Returns a positive LDAP link identifier on success, or FALSE on error.\n   When OpenLDAP 2.x.x is used, ldap_connect() will always\n   return a resource as it does not actually connect but just\n   initializes the connecting parameters.  The actual connect happens with\n   the next calls to ldap_* funcs, usually with\n   ldap_bind().","p":[{"t":"hostname","d":"If you are using OpenLDAP 2.x.x you can specify a URL instead of the\n       hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL\n       support, configure PHP with SSL, and set this parameter as  \n       ldaps:\/\/hostname\/."},{"t":"port","d":"The port to connect to. Not used when using URLs."}]},"ldap_control_paged_result":{"s":"Send LDAP pagination control","y":"bool ldap_control_paged_result\n    ( resource $link\n   , int $pagesize\n   [, bool $iscritical = false\n   [, string $cookie = &quot;&quot;\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"pagesize","d":"The number of entries by page."},{"t":"iscritical","d":"Indicates whether the pagination is critical of not. \n       If true and if the server doesn&#039;t support pagination, the search\n       will return no result."},{"t":"cookie","d":"An opaque structure sent by the server \n       (ldap_control_paged_result_response())."}]},"ldap_control_paged_result_response":{"s":"Retrieve the LDAP pagination cookie","y":"bool ldap_control_paged_result_response\n    ( resource $link\n   , resource $result\n   [, string &$cookie\n   [, int &$estimated\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result","d":""},{"t":"cookie","d":"An opaque structure sent by the server."},{"t":"estimated","d":"The estimated number of entries to retrieve."}]},"ldap_count_entries":{"s":"Count the number of entries in a search","y":"int ldap_count_entries\n    ( resource $link_identifier\n   , resource $result_identifier\n   )","r":"Returns number of entries in the result or FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_identifier","d":"The internal LDAP result."}]},"ldap_delete":{"s":"Delete an entry from a directory","y":"bool ldap_delete\n    ( resource $link_identifier\n   , string $dn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."}]},"ldap_dn2ufn":{"s":"Convert DN to User Friendly Naming format","y":"string ldap_dn2ufn\n    ( string $dn\n   )","r":"Returns the user friendly name.","p":[{"t":"dn","d":"The distinguished name of an LDAP entity."}]},"ldap_err2str":{"s":"Convert LDAP error number into string error message","y":"string ldap_err2str\n    ( int $errno\n   )","r":"Returns the error message, as a string.","p":[{"t":"errno","d":"The error number."}]},"ldap_errno":{"s":"Return the LDAP error number of the last LDAP command","y":"int ldap_errno\n    ( resource $link_identifier\n   )","r":"Return the LDAP error number of the last LDAP command for this\n   link.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."}]},"ldap_error":{"s":"Return the LDAP error message of the last LDAP command","y":"string ldap_error\n    ( resource $link_identifier\n   )","r":"Returns string error message.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."}]},"ldap_explode_dn":{"s":"Splits DN into its component parts","y":"array ldap_explode_dn\n    ( string $dn\n   , int $with_attrib\n   )","r":"Returns an array of all DN components.\n   The first element in this array has count key and\n   represents the number of returned values, next elements are numerically\n   indexed DN components.","p":[{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"with_attrib","d":"Used to request if the RDNs are returned with only values or their\n       attributes as well.  To get RDNs with the attributes (i.e. in\n       attribute=value format) set with_attrib to 0\n       and to get only values set it to 1."}]},"ldap_first_attribute":{"s":"Return first attribute","y":"string ldap_first_attribute\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )","r":"Returns the first attribute in the entry on success and FALSE on\n   error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""},{"t":"ber_identifier","d":"ber_identifier is the identifier to internal\n       memory location pointer. It is passed by reference. The same\n       ber_identifier is passed to\n       ldap_next_attribute() , which modifies that\n       pointer."}]},"ldap_first_entry":{"s":"Return first result id","y":"resource ldap_first_entry\n    ( resource $link_identifier\n   , resource $result_identifier\n   )","r":"Returns the result entry identifier for the first entry on success and\n   FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_identifier","d":""}]},"ldap_first_reference":{"s":"Return first reference","y":"resource ldap_first_reference\n    ( resource $link\n   , resource $result\n   )","r":"","p":null},"ldap_free_result":{"s":"Free result memory","y":"bool ldap_free_result\n    ( resource $result_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_identifier","d":""}]},"ldap_get_attributes":{"s":"Get attributes from a search result entry","y":"array ldap_get_attributes\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )","r":"Returns a complete entry information in a multi-dimensional array\n   on success and FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""}]},"ldap_get_dn":{"s":"Get the DN of a result entry","y":"string ldap_get_dn\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )","r":"Returns the DN of the result entry and FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""}]},"ldap_get_entries":{"s":"Get all result entries","y":"array ldap_get_entries\n    ( resource $link_identifier\n   , resource $result_identifier\n   )","r":"Returns a complete result information in a multi-dimensional array on\n   success and FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_identifier","d":""}]},"ldap_get_option":{"s":"Get the current value for given option","y":"bool ldap_get_option\n    ( resource $link_identifier\n   , int $option\n   , mixed &$retval\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"option","d":"The parameter option can be one of:\n       \n        \n         \n          \n           Option\n           Type\n          \n\n         \n\n         \n          \n           LDAP_OPT_DEREF\n           integer\n          \n\n          \n           LDAP_OPT_SIZELIMIT\n           integer\n          \n\n          \n           LDAP_OPT_TIMELIMIT\n           integer\n          \n\n          \n           LDAP_OPT_NETWORK_TIMEOUT\n           integer\n          \n\n          \n           LDAP_OPT_PROTOCOL_VERSION\n           integer\n          \n\n          \n           LDAP_OPT_ERROR_NUMBER\n           integer\n          \n\n          \n           LDAP_OPT_REFERRALS\n           bool\n          \n\n          \n           LDAP_OPT_RESTART\n           bool\n          \n\n          \n           LDAP_OPT_HOST_NAME\n           string\n          \n\n          \n           LDAP_OPT_ERROR_STRING\n           string\n          \n\n          \n           LDAP_OPT_MATCHED_DN\n           string\n          \n\n          \n           LDAP_OPT_SERVER_CONTROLS\n           array\n          \n\n          \n           LDAP_OPT_CLIENT_CONTROLS\n           array"},{"t":"retval","d":"This will be set to the option value."}]},"ldap_get_values":{"s":"Get all values from a result entry","y":"array ldap_get_values\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   , string $attribute\n   )","r":"Returns an array of values for the attribute on success and FALSE on\n   error. The number of values can be found by indexing &quot;count&quot; in the\n   resultant array. Individual values are accessed by integer index in the\n   array.  The first index is 0.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""},{"t":"attribute","d":""}]},"ldap_get_values_len":{"s":"Get all binary values from a result entry","y":"array ldap_get_values_len\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   , string $attribute\n   )","r":"Returns an array of values for the attribute on success and FALSE on\n   error. Individual values are accessed by integer index in the array. The\n   first index is 0. The number of values can be found by indexing &quot;count&quot;\n   in the resultant array. ","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""},{"t":"attribute","d":""}]},"ldap_list":{"s":"Single-level search","y":"resource ldap_list\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )","r":"Returns a search result identifier or FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"base_dn","d":"The base DN for the directory."},{"t":"filter","d":""},{"t":"attributes","d":"An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested."},{"t":"attrsonly","d":"Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour."},{"t":"sizelimit","d":"Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit."},{"t":"timelimit","d":"Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit."},{"t":"deref","d":"Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always."}]},"ldap_modify":{"s":"Modify an LDAP entry","y":"bool ldap_modify\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"entry","d":""}]},"ldap_mod_add":{"s":"Add attribute values to current attributes","y":"bool ldap_mod_add\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"entry","d":""}]},"ldap_mod_del":{"s":"Delete attribute values from current attributes","y":"bool ldap_mod_del\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"entry","d":""}]},"ldap_mod_replace":{"s":"Replace attribute values with new ones","y":"bool ldap_mod_replace\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"entry","d":""}]},"ldap_next_entry":{"s":"Get next result entry","y":"resource ldap_next_entry\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )","r":"Returns entry identifier for the next entry in the result whose entries\n   are being read starting with ldap_first_entry(). If\n   there are no more entries in the result then it returns FALSE.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""}]},"ldap_next_reference":{"s":"Get next reference","y":"resource ldap_next_reference\n    ( resource $link\n   , resource $entry\n   )","r":"","p":null},"ldap_parse_reference":{"s":"Extract information from reference entry","y":"bool ldap_parse_reference\n    ( resource $link\n   , resource $entry\n   , array &$referrals\n   )","r":"","p":null},"ldap_parse_result":{"s":"Extract information from result","y":"bool ldap_parse_result\n    ( resource $link\n   , resource $result\n   , int &$errcode\n   [, string &$matcheddn\n   [, string &$errmsg\n   [, array &$referrals\n  ]]] )","r":"","p":null},"ldap_read":{"s":"Read an entry","y":"resource ldap_read\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )","r":"Returns a search result identifier or FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"base_dn","d":"The base DN for the directory."},{"t":"filter","d":"An empty filter is not allowed. If you want to retrieve absolutely all\n       information for this entry, use a filter of \n       objectClass=*. If you know which entry types are\n       used on the directory server, you might use an appropriate filter such\n       as objectClass=inetOrgPerson."},{"t":"attributes","d":"An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested."},{"t":"attrsonly","d":"Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour."},{"t":"sizelimit","d":"Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit."},{"t":"timelimit","d":"Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit."},{"t":"deref","d":"Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always."}]},"ldap_sasl_bind":{"s":"Bind to LDAP directory using SASL","y":"bool ldap_sasl_bind\n    ( resource $link\n   [, string $binddn = NULL\n   [, string $password = NULL\n   [, string $sasl_mech = NULL\n   [, string $sasl_realm = NULL\n   [, string $sasl_authc_id = NULL\n   [, string $sasl_authz_id = NULL\n   [, string $props = NULL\n  ]]]]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ldap_search":{"s":"Search LDAP tree","y":"resource ldap_search\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )","r":"Returns a search result identifier or FALSE on error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"base_dn","d":"The base DN for the directory."},{"t":"filter","d":"The search filter can be simple or advanced, using boolean operators in\n       the format described in the LDAP documentation (see the &raquo;&nbsp;Netscape Directory SDK for full\n       information on filters)."},{"t":"attributes","d":"An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested."},{"t":"attrsonly","d":"Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour."},{"t":"sizelimit","d":"Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit."},{"t":"timelimit","d":"Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit."},{"t":"deref","d":"Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always."}]},"ldap_set_option":{"s":"Set the value of the given option","y":"bool ldap_set_option\n    ( resource $link_identifier\n   , int $option\n   , mixed $newval\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"option","d":"The parameter option can be one of:\n       \n        \n         \n          \n           Option\n           Type\n           Available since\n          \n\n         \n\n         \n          \n           LDAP_OPT_DEREF\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_SIZELIMIT\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_TIMELIMIT\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_NETWORK_TIMEOUT\n           integer\n           PHP 5.3.0\n          \n\n          \n           LDAP_OPT_PROTOCOL_VERSION\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_ERROR_NUMBER\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_REFERRALS\n           bool\n           &nbsp;\n          \n\n          \n           LDAP_OPT_RESTART\n           bool\n           &nbsp;\n          \n\n          \n           LDAP_OPT_HOST_NAME\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_ERROR_STRING\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_MATCHED_DN\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_SERVER_CONTROLS\n           array\n           &nbsp;\n          \n\n          \n           LDAP_OPT_CLIENT_CONTROLS\n           array\n           &nbsp;"},{"t":"newval","d":"The new value for the specified option."}]},"ldap_set_rebind_proc":{"s":"Set a callback function to do re-binds on referral chasing","y":"bool ldap_set_rebind_proc\n    ( resource $link\n   , callable $callback\n   )","r":"","p":null},"ldap_sort":{"s":"Sort LDAP result entries","y":"bool ldap_sort\n    ( resource $link\n   , resource $result\n   , string $sortfilter\n   )","r":"","p":[{"t":"link","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result","d":"An search result identifier, returned by\n       ldap_search()."},{"t":"sortfilter","d":"The attribute to use as a key in the sort."}]},"ldap_start_tls":{"s":"Start TLS","y":"bool ldap_start_tls\n    ( resource $link\n   )","r":"","p":null},"ldap_t61_to_8859":{"s":"Translate t61 characters to 8859 characters","y":"string ldap_t61_to_8859\n    ( string $value\n   )","r":"","p":null},"ldap_unbind":{"s":"Unbind from LDAP directory","y":"bool ldap_unbind\n    ( resource $link_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."}]},"levenshtein":{"s":"Calculate Levenshtein distance between two strings","y":"int levenshtein\n    ( string $str1\n   , string $str2\n   )","r":"This function returns the Levenshtein-Distance between the\n   two argument strings or -1, if one of the argument strings\n   is longer than the limit of 255 characters.","p":[{"t":"str1","d":"One of the strings being evaluated for Levenshtein distance."},{"t":"str2","d":"One of the strings being evaluated for Levenshtein distance."},{"t":"cost_ins","d":"Defines the cost of insertion."},{"t":"cost_rep","d":"Defines the cost of replacement."},{"t":"cost_del","d":"Defines the cost of deletion."}]},"libxml_disable_entity_loader":{"s":"Disable the ability to load external entities","y":"bool libxml_disable_entity_loader\n    ([ bool $disable = true\n  ] )","r":"Returns the previous value.","p":[{"t":"disable","d":"Disable (TRUE) or enable (FALSE) libxml extensions (such as\n       DOM, XMLWriter\n       and XMLReader) to load external entities."}]},"libxml_set_external_entity_loader":{"s":"Changes the default external entity loader","y":"void libxml_set_external_entity_loader\n    ( callable $resolver_function\n   )","r":"No value is returned.","p":[{"t":"resolver_function","d":"A callable that takes three arguments. Two strings, a public id\n      and system id, and a context (an array with four keys) as the third argument.\n      This callback should return a resource, a string from which a resource can be\n      opened, or NULL."}]},"libxml_set_streams_context":{"s":"Set the streams context for the next libxml document load or write","y":"void libxml_set_streams_context\n    ( resource $streams_context\n   )","r":"No value is returned.","p":[{"t":"streams_context","d":"The stream context resource (created with\n        stream_context_create())"}]},"libxml_use_internal_errors":{"s":"Disable libxml errors and allow user to fetch error information as needed","y":"bool libxml_use_internal_errors\n    ([ bool $use_errors = false\n  ] )","r":"This function returns the previous value of\n   use_errors.","p":[{"t":"use_errors","d":"Enable (TRUE) user error handling or disable (FALSE) user error handling. Disabling will also clear any existing libxml errors."}]},"link":{"s":"Create a hard link","y":"bool link\n    ( string $target\n   , string $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"target","d":"Target of the link."},{"t":"link","d":"The link name."}]},"linkinfo":{"s":"Gets information about a link","y":"int linkinfo\n    ( string $path\n   )","r":"linkinfo() returns the st_dev field\n   of the Unix C stat structure returned by the lstat\n   system call. Returns 0 or FALSE in case of error.","p":[{"t":"path","d":"Path to the link."}]},"list":{"s":"Assign variables as if they were an array","y":"array list\n    ( mixed $var1\n   [, mixed $...\n  ] )","r":"Returns the assigned array.","p":[{"t":"var1","d":"A variable."}]},"localtime":{"s":"Get the local time","y":"array localtime\n    ([ int $timestamp = time()\n   [, bool $is_associative = false\n  ]] )","r":"","p":[{"t":"timestamp","d":"The optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time()."},{"t":"is_associative","d":"If set to FALSE or not supplied then the array is returned as a regular, \n       numerically indexed array.  If the argument is set to TRUE then\n       localtime() returns an associative array containing\n       all the different elements of the structure returned by the C\n       function call to localtime.  The names of the different keys of\n       the associative array are as follows:"}]},"log":{"s":"Natural logarithm","y":"float log\n     ( float $arg\n    [, float $base = M_E\n   ] )","r":"The logarithm of arg to \n   base, if given, or the\n   natural logarithm.  ","p":[{"t":"arg","d":"The value to calculate the logarithm for"},{"t":"base","d":"The optional logarithmic base to use \n       (defaults to &#039;e&#039; and so to the natural logarithm)."}]},"log10":{"s":"Base-10 logarithm","y":"float log10\n     ( float $arg\n    )","r":"The base-10 logarithm of arg","p":[{"t":"arg","d":"The argument to process"}]},"log1p":{"s":"Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero","y":"float log1p\n    ( float $number\n   )","r":"log(1 + number)","p":[{"t":"number","d":"The argument to process"}]},"long2ip":{"s":"Converts an (IPv4) Internet network address into a string in Internet standard dotted format","y":"string long2ip\n    ( string $proper_address\n   )","r":"Returns the Internet IP address as a string.","p":[{"t":"proper_address","d":"A proper address representation."}]},"lstat":{"s":"Gives information about a file or symbolic link","y":"array lstat\n    ( string $filename\n   )","r":"See the manual page for stat() for information on\n   the structure of the array that lstat() returns.\n   This function is identical to the stat() function\n   except that if the filename parameter is a symbolic\n   link, the status of the symbolic link is returned, not the status of the\n   file pointed to by the symbolic link.","p":[{"t":"filename","d":"Path to a file or a symbolic link."}]},"ltrim":{"s":"Strip whitespace (or other characters) from the beginning of a string","y":"string ltrim\n    ( string $str\n   [, string $character_mask\n  ] )","r":"This function returns a string with whitespace stripped from the\n   beginning of str.\n   Without the second parameter,\n   ltrim() will strip these characters:\n   \n   \n    \n     \n      &quot; &quot; (ASCII 32\n      (0x20)), an ordinary space.\n     \n    \n    \n     \n      &quot;\\t&quot; (ASCII 9\n      (0x09)), a tab.\n     \n    \n    \n     \n      &quot;\\n&quot; (ASCII 10\n      (0x0A)), a new line (line feed).\n     \n    \n    \n     \n      &quot;\\r&quot; (ASCII 13\n      (0x0D)), a carriage return.\n     \n    \n    \n     \n      &quot;\\0&quot; (ASCII 0\n      (0x00)), the NUL-byte.\n     \n    \n    \n      \n      &quot;\\x0B&quot; (ASCII 11\n      (0x0B)), a vertical tab.","p":[{"t":"str","d":"The input string."},{"t":"character_mask","d":"You can also specify the characters you want to strip, by means of the\n       character_mask parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters."}]},"lzf_compress":{"s":"LZF compression","y":"string lzf_compress\n    ( string $data\n   )","r":"Returns the compressed data or FALSE if an error occurred.","p":[{"t":"data","d":"The string to compress."}]},"lzf_decompress":{"s":"LZF decompression","y":"string lzf_decompress\n    ( string $data\n   )","r":"Returns the decompressed data or FALSE if an error occurred.","p":[{"t":"data","d":"The compressed string."}]},"magic_quotes_runtime":{"s":"Alias of set_magic_quotes_runtime()","y":"","r":"","p":null},"mail":{"s":"Send mail","y":"bool mail\n    ( string $to\n   , string $subject\n   , string $message\n   [, string $additional_headers\n   [, string $additional_parameters\n  ]] )","r":"Returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.","p":[{"t":"to","d":"Receiver, or receivers of the mail."},{"t":"subject","d":"Subject of the email to be sent."}]},"mailparse_determine_best_xfer_encoding":{"s":"Gets the best way of encoding","y":"string mailparse_determine_best_xfer_encoding\n    ( resource $fp\n   )","r":"Returns one of the character encodings supported by the\n   mbstring module.","p":[{"t":"fp","d":"A valid file pointer, which must be seek-able."}]},"mailparse_msg_create":{"s":"Create a mime mail resource","y":"resource mailparse_msg_create\n    ( void\n   )","r":"Returns a handle that can be used to parse a message.","p":null},"mailparse_msg_extract_part":{"s":"Extracts\/decodes a message section","y":"void mailparse_msg_extract_part\n    ( resource $mimemail\n   , string $msgbody\n   [, callable $callbackfunc\n  ] )","r":"No value is returned.","p":[{"t":"mimemail","d":"A valid MIME resource."},{"t":"msgbody","d":""},{"t":"callbackfunc","d":""}]},"mailparse_msg_extract_part_file":{"s":"Extracts\/decodes a message section","y":"string mailparse_msg_extract_part_file\n    ( resource $mimemail\n   , mixed $filename\n   [, callable $callbackfunc\n  ] )","r":"If callbackfunc is not NULL returns TRUE on\n   success.","p":[{"t":"mimemail","d":"A valid MIME resource, created with\n       mailparse_msg_create()."},{"t":"filename","d":"Can be a file name or a valid stream resource."},{"t":"callbackfunc","d":"If set, this must be either a valid callback that will be passed the\n       extracted section, or NULL to make this function return the\n       extracted section."}]},"mailparse_msg_extract_whole_part_file":{"s":"Extracts a message section including headers without decoding the transfer encoding","y":"string mailparse_msg_extract_whole_part_file\n    ( resource $mimemail\n   , string $filename\n   [, callable $callbackfunc\n  ] )","r":"","p":[{"t":"mimemail","d":"A valid MIME resource."},{"t":"filename","d":""},{"t":"callbackfunc","d":""}]},"mailparse_msg_free":{"s":"Frees a MIME resource","y":"bool mailparse_msg_free\n    ( resource $mimemail\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mimemail","d":"A valid MIME resource allocated by\n       mailparse_msg_create() or \n       mailparse_msg_parse_file()."}]},"mailparse_msg_get_part":{"s":"Returns a handle on a given section in a mimemessage","y":"resource mailparse_msg_get_part\n    ( resource $mimemail\n   , string $mimesection\n   )","r":"","p":[{"t":"mimemail","d":"A valid MIME resource."},{"t":"mimesection","d":""}]},"mailparse_msg_get_part_data":{"s":"Returns an associative array of info about the message","y":"array mailparse_msg_get_part_data\n    ( resource $mimemail\n   )","r":"","p":[{"t":"mimemail","d":"A valid MIME resource."}]},"mailparse_msg_get_structure":{"s":"Returns an array of mime section names in the supplied message","y":"array mailparse_msg_get_structure\n    ( resource $mimemail\n   )","r":"","p":[{"t":"mimemail","d":"A valid MIME resource."}]},"mailparse_msg_parse":{"s":"Incrementally parse data into buffer","y":"bool mailparse_msg_parse\n    ( resource $mimemail\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"mimemail","d":"A valid MIME resource."},{"t":"data","d":""}]},"mailparse_msg_parse_file":{"s":"Parses a file","y":"resource mailparse_msg_parse_file\n    ( string $filename\n   )","r":"Returns a MIME resource representing the structure, or\n   FALSE on error.","p":[{"t":"filename","d":"Path to the file holding the message.\n       The file is opened and streamed through the parser."}]},"mailparse_rfc822_parse_addresses":{"s":"Parse RFC 822 compliant addresses","y":"array mailparse_rfc822_parse_addresses\n    ( string $addresses\n   )","r":"Returns an array of associative arrays with the following keys for each\n   recipient:\n   \n    \n     \n      \n       display\n       \n        The recipient name, for display purpose. If this part is not set for a\n        recipient, this key will hold the same value as \n        address.\n       \n      \n\n      \n       address\n       The email address\n      \n\n      \n       is_group\n       TRUE if the recipient is a newsgroup, FALSE otherwise.","p":[{"t":"addresses","d":"A string containing addresses, like in:\n       Wez Furlong &lt;wez@example.com&gt;, doe@example.com"}]},"mailparse_stream_encode":{"s":"Streams data from source file pointer, apply encoding and write to destfp ","y":"bool mailparse_stream_encode\n    ( resource $sourcefp\n   , resource $destfp\n   , string $encoding      \n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sourcefp","d":"A valid file handle. The file is streamed through the parser."},{"t":"destfp","d":"The destination file handle in which the encoded data will be written."},{"t":"encoding","d":"One of the character encodings supported by the\n       mbstring module."}]},"mailparse_uudecode_all":{"s":"Scans the data from fp and extract each embedded uuencoded file","y":"array mailparse_uudecode_all\n    ( resource $fp\n   )","r":"Returns an array of associative arrays listing filename information.\n   \n    \n     \n      \n       filename\n       Path to the temporary file name created\n      \n\n      \n       origfilename\n       The original filename, for uuencoded parts only\n      \n\n     \n    \n   \n\n   The first filename entry is the message body. The next entries are the\n   decoded uuencoded files.","p":[{"t":"fp","d":"A valid file pointer."}]},"main":{"s":"Dummy for main()","y":"","r":"","p":null},"max":{"s":"Find highest value","y":"mixed max\n    ( array $values\n   )","r":"max() returns the numerically highest of the\n   parameter values. If multiple values can be considered of the same size,\n   the one that is listed first will be returned.","p":[{"t":"values","d":"An array containing the values."},{"t":"value1","d":"Any comparable\n       value."},{"t":"value2","d":"Any comparable\n       value."},{"t":"...","d":"Any comparable\n       value."}]},"maxdb_affected_rows":{"s":"Gets the number of affected rows in a previous MaxDB operation","y":"int maxdb_affected_rows\n    ( resource $link\n   )","r":"An integer greater than zero indicates the number of rows affected or retrieved.\n   Zero indicates that no records where updated for an UPDATE statement, no rows matched\n   the WHERE clause in the query or that no query has yet been executed.\n   -1 indicates that the number of rows affected can not be determined.","p":null},"maxdb_autocommit":{"s":"Turns on or off auto-commiting database modifications","y":"bool maxdb_autocommit\n    ( resource $link\n   , bool $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_bind_param":{"s":"Alias of maxdb_stmt_bind_param()","y":"","r":"","p":null},"maxdb_change_user":{"s":"Changes the user of the specified database connection","y":"bool maxdb_change_user\n    ( resource $link\n   , string $user\n   , string $password\n   , string $database\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_character_set_name":{"s":"Returns the default character set for the database connection","y":"string maxdb_character_set_name\n    ( resource $link\n   )","r":"The default character set for the current connection, either ascii or unicode.","p":null},"maxdb_client_encoding":{"s":"Alias of maxdb_character_set_name()","y":"","r":"","p":null},"maxdb_close":{"s":"Closes a previously opened database connection","y":"bool maxdb_close\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_close_long_data":{"s":"Alias of maxdb_stmt_close_long_data()","y":"","r":"","p":null},"maxdb_commit":{"s":"Commits the current transaction","y":"bool maxdb_commit\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_connect":{"s":"Open a new connection to the MaxDB server","y":"resource maxdb_connect\n    ([ string $host\n   [, string $username\n   [, string $passwd\n   [, string $dbname\n   [, int $port = 0\n   [, string $socket\n  ]]]]]] )","r":"Returns a resource which represents the connection to a MaxDB Server or\n   FALSE if the connection failed.","p":null},"maxdb_connect_errno":{"s":"Returns the error code from last connect call","y":"int maxdb_connect_errno\n    ( void\n   )","r":"An error code value for the last call to maxdb_connect(), if it failed.\n   zero means no error occurred.","p":null},"maxdb_connect_error":{"s":"Returns a string description of the last connect error","y":"string maxdb_connect_error\n    ( void\n   )","r":"A string that describes the error. An empty string if no error occurred.","p":null},"maxdb_data_seek":{"s":"Adjusts the result pointer to an arbitary row in the result","y":"bool maxdb_data_seek\n    ( resource $result\n   , int $offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_debug":{"s":"Performs debugging operations","y":"void maxdb_debug\n    ( string $debug\n   )","r":"maxdb_debug() doesn&#039;t return any value.","p":null},"maxdb_disable_reads_from_master":{"s":"Disable reads from master","y":"bool maxdb_disable_reads_from_master\n    ( resource $link\n   )","r":"","p":null},"maxdb_disable_rpl_parse":{"s":"Disable RPL parse","y":"bool maxdb_disable_rpl_parse\n    ( resource $link\n   )","r":"","p":null},"maxdb_dump_debug_info":{"s":"Dump debugging information into the log","y":"bool maxdb_dump_debug_info\n    ( resource $link\n   )","r":"","p":null},"maxdb_enable_reads_from_master":{"s":"Enable reads from master","y":"bool maxdb_enable_reads_from_master\n    ( resource $link\n   )","r":"","p":null},"maxdb_enable_rpl_parse":{"s":"Enable RPL parse","y":"bool maxdb_enable_rpl_parse\n    ( resource $link\n   )","r":"","p":null},"maxdb_errno":{"s":"Returns the error code for the most recent function call","y":"int maxdb_errno\n    ( resource $link\n   )","r":"An error code value for the last call, if it failed. zero means no error occurred.","p":null},"maxdb_error":{"s":"Returns a string description of the last error","y":"string maxdb_error\n    ( resource $link\n   )","r":"A string that describes the error. An empty string if no error occurred.","p":null},"maxdb_escape_string":{"s":"Alias of maxdb_real_escape_string()","y":"","r":"","p":null},"maxdb_execute":{"s":"Alias of maxdb_stmt_execute()","y":"","r":"","p":null},"maxdb_fetch":{"s":"Alias of maxdb_stmt_fetch()","y":"","r":"","p":null},"maxdb_fetch_array":{"s":"Fetch a result row as an associative, a numeric array, or both","y":"mixed maxdb_fetch_array\n    ( resource $result\n   [, int $resulttype\n  ] )","r":"Returns an array that corresponds to the fetched row or NULL if there are no more rows in resultset.","p":null},"maxdb_fetch_assoc":{"s":"Fetch a result row as an associative array","y":"array maxdb_fetch_assoc\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row or NULL if there are no more rows in resultset.","p":null},"maxdb_fetch_field":{"s":"Returns the next field in the result set","y":"mixed maxdb_fetch_field\n    ( resource $result\n   )","r":"Returns an resource which contains field definition information or FALSE if no field information\n   is available.","p":null},"maxdb_fetch_fields":{"s":"Returns an array of resources representing the fields in a result set","y":"mixed maxdb_fetch_fields\n    ( resource $result\n   )","r":"Returns an array of resources which contains field definition information or FALSE if no field information\n   is available.","p":null},"maxdb_fetch_field_direct":{"s":"Fetch meta-data for a single field","y":"mixed maxdb_fetch_field_direct\n    ( resource $result\n   , int $fieldnr\n   )","r":"Returns an resource which contains field definition information or FALSE if no field information\n   for specified fieldnr is available.","p":null},"maxdb_fetch_lengths":{"s":"Returns the lengths of the columns of the current row in the result set","y":"array maxdb_fetch_lengths\n    ( resource $result\n   )","r":"An array of integers representing the size of each column (not including\n   any terminating null characters). FALSE if an error occurred.","p":null},"maxdb_fetch_object":{"s":"Returns the current row of a result set as an object","y":"object maxdb_fetch_object\n    ( object $result\n   )","r":"Returns an object that corresponds to the fetched row or NULL if there are no more rows in resultset.","p":null},"maxdb_fetch_row":{"s":"Get a result row as an enumerated array","y":"mixed maxdb_fetch_row\n    ( resource $result\n   )","r":"maxdb_fetch_row() returns an array that corresponds to the fetched row\n   or NULL if there are no more rows in result set.","p":null},"maxdb_field_count":{"s":"Returns the number of columns for the most recent query","y":"int maxdb_field_count\n    ( resource $link\n   )","r":"An integer representing the number of fields in a result set.","p":null},"maxdb_field_tell":{"s":"Get current field offset of a result pointer","y":"int maxdb_field_tell\n    ( resource $result\n   )","r":"Returns current offset of field cursor.","p":null},"maxdb_free_result":{"s":"Frees the memory associated with a result","y":"void maxdb_free_result\n    ( resource $result\n   )","r":"This function doesn&#039;t return any value.","p":null},"maxdb_get_client_info":{"s":"Returns the MaxDB client version as a string","y":"string maxdb_get_client_info\n    ( void\n   )","r":"A string that represents the MaxDB client library version","p":null},"maxdb_get_client_version":{"s":"Get MaxDB client info","y":"int maxdb_get_client_version\n    ( void\n   )","r":"A number that represents the MaxDB client library version in format:\n   main_version*10000 + minor_version *100 + sub_version.\n   For example, 7.5.0 is returned as 70500.","p":null},"maxdb_get_host_info":{"s":"Returns a string representing the type of connection used","y":"string maxdb_get_host_info\n    ( resource $link\n   )","r":"A character string representing the server hostname and the connection type.","p":null},"maxdb_get_metadata":{"s":"Alias of maxdb_stmt_result_metadata()","y":"","r":"","p":null},"maxdb_get_proto_info":{"s":"Returns the version of the MaxDB protocol used","y":"int maxdb_get_proto_info\n    ( resource $link\n   )","r":"Returns an integer representing the protocol version (constant 10).","p":null},"maxdb_get_server_info":{"s":"Returns the version of the MaxDB server","y":"string maxdb_get_server_info\n    ( resource $link\n   )","r":"A character string representing the server version.","p":null},"maxdb_info":{"s":"Retrieves information about the most recently executed query","y":"string maxdb_info\n    ( resource $link\n   )","r":"A character string representing additional information about the most recently executed query.","p":null},"maxdb_init":{"s":"Initializes MaxDB and returns an resource for use with maxdb_real_connect","y":"resource maxdb_init\n    ( void\n   )","r":"Returns an resource.","p":null},"maxdb_insert_id":{"s":"Returns the auto generated id used in the last query","y":"mixed maxdb_insert_id\n    ( resource $link\n   )","r":"The value of the DEFAULT SERIAL field that was updated\n   by the previous query. Returns zero if there was no previous query on the\n   connection or if the query did not update an DEFAULT_SERIAL\n   value.","p":null},"maxdb_kill":{"s":"Disconnects from a MaxDB server","y":"bool maxdb_kill\n    ( resource $link\n   , int $processid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_master_query":{"s":"Enforce execution of a query on the master in a master\/slave setup","y":"bool maxdb_master_query\n    ( resource $link\n   , string $query\n   )","r":"","p":null},"maxdb_more_results":{"s":"Check if there any more query results from a multi query","y":"bool maxdb_more_results\n    ( resource $link\n   )","r":"Always FALSE.","p":null},"maxdb_multi_query":{"s":"Performs a query on the database","y":"bool maxdb_multi_query\n    ( resource $link\n   , string $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_next_result":{"s":"Prepare next result from multi_query","y":"bool maxdb_next_result\n    ( resource $link\n   )","r":"Returns FALSE.","p":null},"maxdb_num_fields":{"s":"Get the number of fields in a result","y":"int maxdb_num_fields\n    ( resource $result\n   )","r":"The number of fields from a result set","p":null},"maxdb_num_rows":{"s":"Gets the number of rows in a result","y":"int maxdb_num_rows\n    ( resource $result\n   )","r":"Returns number of rows in the result set.","p":null},"maxdb_param_count":{"s":"Alias of maxdb_stmt_param_count()","y":"","r":"","p":null},"maxdb_ping":{"s":"Pings a server connection, or tries to reconnect if the connection has gone down","y":"bool maxdb_ping\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_prepare":{"s":"Prepare an SQL statement for execution","y":"resource maxdb_prepare\n    ( resource $link\n   , string $query\n   )","r":"maxdb_prepare() returns a statement resource or FALSE if an error occurred.","p":null},"maxdb_query":{"s":"Performs a query on the database","y":"mixed maxdb_query\n    ( resource $link\n   , string $query\n   [, int $resultmode\n  ] )","r":"Returns TRUE on success or FALSE on failure. For SELECT, SHOW, DESCRIBE or\n   EXPLAIN maxdb_query() will return\n   a result resource.","p":null},"maxdb_real_connect":{"s":"Opens a connection to a MaxDB server","y":"bool maxdb_real_connect\n    ( resource $link\n   [, string $hostname\n   [, string $username\n   [, string $passwd\n   [, string $dbname\n   [, int $port = 0\n   [, string $socket\n  ]]]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_real_escape_string":{"s":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","y":"string maxdb_real_escape_string\n    ( resource $link\n   , string $escapestr\n   )","r":"Returns an escaped string.","p":null},"maxdb_real_query":{"s":"Execute an SQL query","y":"bool maxdb_real_query\n    ( resource $link\n   , string $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_report":{"s":"Enables or disables internal report functions","y":"bool maxdb_report\n    ( int $flags\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"flags","d":"One of the MAXDB_REPORT_XXX constants."}]},"maxdb_rollback":{"s":"Rolls back current transaction","y":"bool maxdb_rollback\n    ( resource $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_rpl_parse_enabled":{"s":"Check if RPL parse is enabled","y":"int maxdb_rpl_parse_enabled\n    ( resource $link\n   )","r":"","p":null},"maxdb_rpl_probe":{"s":"RPL probe","y":"bool maxdb_rpl_probe\n    ( resource $link\n   )","r":"","p":null},"maxdb_rpl_query_type":{"s":"Returns RPL query type","y":"int maxdb_rpl_query_type\n    ( resource $link\n   )","r":"","p":null},"maxdb_select_db":{"s":"Selects the default database for database queries","y":"bool maxdb_select_db\n    ( resource $link\n   , string $dbname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_send_long_data":{"s":"Alias of maxdb_stmt_send_long_data()","y":"","r":"","p":null},"maxdb_server_end":{"s":"Shut down the embedded server","y":"void maxdb_server_end\n    ( void\n   )","r":"","p":null},"maxdb_server_init":{"s":"Initialize embedded server","y":"bool maxdb_server_init\n    ([ array $server\n   [, array $groups\n  ]] )","r":"","p":null},"maxdb_set_opt":{"s":"Alias of maxdb_options()","y":"","r":"","p":null},"maxdb_sqlstate":{"s":"Returns the SQLSTATE error from previous MaxDB operation","y":"string maxdb_sqlstate\n    ( resource $link\n   )","r":"Returns a string containing the SQLSTATE error code for the last error.\n   The error code consists of five characters. &#039;00000&#039; means no error.","p":null},"maxdb_ssl_set":{"s":"Used for establishing secure connections using SSL","y":"bool maxdb_ssl_set\n    ( resource $link\n   , string $key\n   , string $cert\n   , string $ca\n   , string $capath\n   , string $cipher\n   )","r":"","p":null},"maxdb_stat":{"s":"Gets the current system status","y":"string maxdb_stat\n    ( resource $link\n   )","r":"A string describing the server status. FALSE if an error occurred.","p":null},"maxdb_stmt_bind_param":{"s":"Binds variables to a prepared statement as parameters","y":"bool maxdb_stmt_bind_param\n    ( resource $stmt\n   , string $types\n   , mixed &$var1\n   [, mixed &$...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_bind_result":{"s":"Binds variables to a prepared statement for result storage","y":"bool maxdb_stmt_bind_result\n    ( resource $stmt\n   , mixed &$var1\n   [, mixed &$...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_close":{"s":"Closes a prepared statement","y":"bool maxdb_stmt_close\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_close_long_data":{"s":"Ends a sequence of maxdb_stmt_send_long_data()","y":"bool maxdb_stmt_close_long_data\n    ( resource $stmt\n   , int $param_nr\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_data_seek":{"s":"Seeks to an arbitray row in statement result set","y":"bool maxdb_stmt_data_seek\n    ( resource $statement\n   , int $offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_errno":{"s":"Returns the error code for the most recent statement call","y":"int maxdb_stmt_errno\n    ( resource $stmt\n   )","r":"An error code value. Zero means no error occurred.","p":null},"maxdb_stmt_error":{"s":"Returns a string description for last statement error","y":"string maxdb_stmt_error\n    ( resource $stmt\n   )","r":"A string that describes the error. An empty string if no error occurred.","p":null},"maxdb_stmt_execute":{"s":"Executes a prepared Query","y":"bool maxdb_stmt_execute\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_fetch":{"s":"Fetch results from a prepared statement into the bound variables","y":"bool maxdb_stmt_fetch\n    ( resource $stmt\n   )","r":"","p":null},"maxdb_stmt_free_result":{"s":"Frees stored result memory for the given statement handle","y":"void maxdb_stmt_free_result\n    ( resource $stmt\n   )","r":"This function doesn&#039;t return any value.","p":null},"maxdb_stmt_init":{"s":"Initializes a statement and returns an resource for use with maxdb_stmt_prepare","y":"resource maxdb_stmt_init\n    ( resource $link\n   )","r":"Returns an resource.","p":null},"maxdb_stmt_num_rows":{"s":"Return the number of rows in statements result set","y":"int maxdb_stmt_num_rows\n    ( resource $stmt\n   )","r":"An integer representing the number of rows in result set.","p":null},"maxdb_stmt_param_count":{"s":"Returns the number of parameter for the given statement","y":"int maxdb_stmt_param_count\n    ( resource $stmt\n   )","r":"returns an integer representing the number of parameters.","p":null},"maxdb_stmt_prepare":{"s":"Prepare an SQL statement for execution","y":"bool maxdb_stmt_prepare\n    ( resource $stmt\n   , string $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_reset":{"s":"Resets a prepared statement","y":"bool maxdb_stmt_reset\n    ( resource $stmt\n   )","r":"","p":null},"maxdb_stmt_result_metadata":{"s":"Returns result set metadata from a prepared statement","y":"resource maxdb_stmt_result_metadata\n    ( resource $stmt\n   )","r":"maxdb_stmt_result_metadata() returns a result resource or FALSE if\n   an error occurred.","p":null},"maxdb_stmt_send_long_data":{"s":"Send data in blocks","y":"bool maxdb_stmt_send_long_data\n    ( resource $stmt\n   , int $param_nr\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_stmt_sqlstate":{"s":"Returns SQLSTATE error from previous statement operation","y":"string maxdb_stmt_sqlstate\n    ( resource $stmt\n   )","r":"Returns a string containing the SQLSTATE error code for the last error.\n   The error code consists of five characters. &#039;00000&#039; means no error.","p":null},"maxdb_stmt_store_result":{"s":"Transfers a result set from a prepared statement","y":"bool maxdb_stmt_store_result\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"maxdb_store_result":{"s":"Transfers a result set from the last query","y":"resource maxdb_store_result\n    ( resource $link\n   )","r":"Returns a result resource or FALSE if an error occurred.","p":null},"maxdb_thread_id":{"s":"Returns the thread ID for the current connection","y":"int maxdb_thread_id\n    ( resource $link\n   )","r":"maxdb_thread_id() returns the Thread ID for the current connection.","p":null},"maxdb_thread_safe":{"s":"Returns whether thread safety is given or not","y":"bool maxdb_thread_safe\n    ( void\n   )","r":"TRUE if the client library is thread-safe, otherwise FALSE.","p":null},"maxdb_use_result":{"s":"Initiate a result set retrieval","y":"resource maxdb_use_result\n    ( resource $link\n   )","r":"Returns result  or FALSE on failure.","p":null},"maxdb_warning_count":{"s":"Returns the number of warnings from the last query for the given link","y":"int maxdb_warning_count\n    ( resource $link\n   )","r":"Number of warnings or zero if there are no warnings.","p":null},"mb_check_encoding":{"s":"Check if the string is valid for the specified encoding","y":"bool mb_check_encoding\n    ([ string $var = NULL\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"var","d":"The byte stream to check. If it is omitted, this function checks\n       all the input from the beginning of the request."},{"t":"encoding","d":"The expected encoding."}]},"mb_convert_case":{"s":"Perform case folding on a string","y":"string mb_convert_case\n    ( string $str\n   , int $mode\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"A case folded version of string converted in the\n   way specified by mode.","p":[{"t":"str","d":"The string being converted."},{"t":"mode","d":"The mode of the conversion. It can be one of \n       MB_CASE_UPPER, \n       MB_CASE_LOWER, or \n       MB_CASE_TITLE."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_convert_encoding":{"s":"Convert character encoding","y":"string mb_convert_encoding\n    ( string $str\n   , string $to_encoding\n   [, mixed $from_encoding = mb_internal_encoding()\n  ] )","r":"The encoded string.","p":[{"t":"str","d":"The string being encoded."},{"t":"to_encoding","d":"The type of encoding that str is being converted to."},{"t":"from_encoding","d":"Is specified by character code names before conversion. It is either\n       an array, or a comma separated enumerated list.\n       If from_encoding is not specified, the internal \n       encoding will be used."}]},"mb_convert_kana":{"s":"Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)","y":"string mb_convert_kana\n    ( string $str\n   [, string $option = &quot;KV&quot;\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"The converted string.","p":[{"t":"str","d":"The string being converted."},{"t":"option","d":"The conversion option."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_convert_variables":{"s":"Convert character code in variable(s)","y":"string mb_convert_variables\n    ( string $to_encoding\n   , mixed $from_encoding\n   , mixed &$vars\n   [, mixed &$...\n  ] )","r":"The character encoding before conversion for success, \n   or FALSE for failure.","p":[{"t":"to_encoding","d":"The encoding that the string is being converted to."},{"t":"from_encoding","d":"from_encoding is specified as an array \n       or comma separated string, it tries to detect encoding from\n       from-coding. When from_encoding \n       is omitted, detect_order is used."},{"t":"vars","d":"vars is the reference to the\n       variable being converted. String, Array and Object are accepted.\n       mb_convert_variables() assumes all parameters\n       have the same encoding."},{"t":"...","d":"Additional vars."}]},"mb_decode_mimeheader":{"s":"Decode string in MIME header field","y":"string mb_decode_mimeheader\n    ( string $str\n   )","r":"The decoded string in internal character encoding.","p":[{"t":"str","d":"The string being decoded."}]},"mb_decode_numericentity":{"s":"Decode HTML numeric string reference to character","y":"string mb_decode_numericentity\n    ( string $str\n   , array $convmap\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"The converted string.","p":[{"t":"str","d":"The string being decoded."},{"t":"convmap","d":"convmap is an array that specifies \n       the code area to convert."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_detect_encoding":{"s":"Detect character encoding","y":"string mb_detect_encoding\n    ( string $str\n   [, mixed $encoding_list = mb_detect_order()\n   [, bool $strict = false\n  ]] )","r":"The detected character encoding or FALSE if the encoding cannot be\n   detected from the given string.","p":[{"t":"str","d":"The string being detected."},{"t":"encoding_list","d":"encoding_list is list of character\n       encoding. Encoding order may be specified by array or comma\n       separated list string."},{"t":"strict","d":"strict specifies whether to use\n       the strict encoding detection or not.\n       Default is FALSE."}]},"mb_detect_order":{"s":"Set\/Get character encoding detection order","y":"mixed mb_detect_order\n    ([ mixed $encoding_list = mb_detect_order()\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"encoding_list","d":"encoding_list is an array or \n       comma separated list of character encoding. See supported encodings."}]},"mb_encode_mimeheader":{"s":"Encode string for MIME header","y":"string mb_encode_mimeheader\n    ( string $str\n   [, string $charset = mb_internal_encoding()\n   [, string $transfer_encoding = &quot;B&quot;\n   [, string $linefeed = &quot;\\r\\n&quot;\n   [, int $indent = 0\n  ]]]] )","r":"A converted version of the string represented in ASCII.","p":[{"t":"str","d":"The string being encoded."},{"t":"charset","d":"charset specifies the name of the character set\n       in which str is represented in. The default value\n       is determined by the current NLS setting (mbstring.language).\n       mb_internal_encoding() should be set to same encoding."},{"t":"transfer_encoding","d":"transfer_encoding specifies the scheme of MIME\n       encoding. It should be either &quot;B&quot; (Base64) or\n       &quot;Q&quot; (Quoted-Printable). Falls back to\n       &quot;B&quot; if not given."},{"t":"linefeed","d":"linefeed specifies the EOL (end-of-line) marker\n       with which mb_encode_mimeheader() performs\n       line-folding (a &raquo;&nbsp;RFC term,\n       the act of breaking a line longer than a certain length into multiple\n       lines. The length is currently hard-coded to 74 characters).\n       Falls back to &quot;\\r\\n&quot; (CRLF) if not given."},{"t":"indent","d":"Indentation of the first line (number of characters in the header\n       before str)."}]},"mb_encode_numericentity":{"s":"Encode character to HTML numeric string reference","y":"string mb_encode_numericentity\n    ( string $str\n   , array $convmap\n   [, string $encoding = mb_internal_encoding()\n   [, bool $is_hex = FALSE\n  ]] )","r":"The converted string.","p":[{"t":"str","d":"The string being encoded."},{"t":"convmap","d":"convmap is array specifies code area to\n       convert."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."},{"t":"is_hex","d":""}]},"mb_encoding_aliases":{"s":"Get aliases of a known encoding type","y":"array mb_encoding_aliases\n    ( string $encoding\n   )","r":"Returns a numerically indexed array of encoding aliases on success,\n    or FALSE on failure","p":[{"t":"encoding","d":"The encoding type being checked, for aliases."}]},"mb_ereg":{"s":"Regular expression match with multibyte support","y":"int mb_ereg\n    ( string $pattern\n   , string $string\n   [, array $regs\n  ] )","r":"","p":[{"t":"pattern","d":"The search pattern."},{"t":"string","d":"The search string."},{"t":"regs","d":"Contains a substring of the matched string."}]},"mb_eregi":{"s":"Regular expression match ignoring case with multibyte support","y":"int mb_eregi\n    ( string $pattern\n   , string $string\n   [, array $regs\n  ] )","r":"","p":[{"t":"pattern","d":"The regular expression pattern."},{"t":"string","d":"The string being searched."},{"t":"regs","d":"Contains a substring of the matched string."}]},"mb_eregi_replace":{"s":"Replace regular expression with multibyte support ignoring case","y":"string mb_eregi_replace\n    ( string $pattern\n   , string $replace\n   , string $string\n   [, string $option = &quot;msri&quot;\n  ] )","r":"The resultant string or FALSE on error. ","p":[{"t":"pattern","d":"The regular expression pattern.  Multibyte characters may be used. The case will be ignored."},{"t":"replace","d":"The replacement text."},{"t":"string","d":"The searched string."},{"t":"option","d":""}]},"mb_ereg_match":{"s":"Regular expression match for multibyte string","y":"bool mb_ereg_match\n    ( string $pattern\n   , string $string\n   [, string $option = &quot;msr&quot;\n  ] )","r":"","p":[{"t":"pattern","d":"The regular expression pattern."},{"t":"string","d":"The string being evaluated."},{"t":"option","d":""}]},"mb_ereg_replace":{"s":"Replace regular expression with multibyte support","y":"string mb_ereg_replace\n    ( string $pattern\n   , string $replacement\n   , string $string\n   [, string $option = &quot;msr&quot;\n  ] )","r":"The resultant string on success, or FALSE on error.","p":[{"t":"pattern","d":"The regular expression pattern."},{"t":"replacement","d":"The replacement text."},{"t":"string","d":"The string being checked."},{"t":"option","d":""}]},"mb_ereg_replace_callback":{"s":"Perform a regular expresssion seach and replace with multibyte support using a callback","y":"string mb_ereg_replace_callback\n    ( string $pattern\n   , callable $callback\n   , string $string\n   [, string $option = &quot;msr&quot;\n  ] )","r":"The resultant string on success, or FALSE on error.","p":[{"t":"pattern","d":"The regular expression pattern."},{"t":"callback","d":"A callback that will be called and passed an array of matched elements\n        in the  subject string. The callback should\n       return the replacement string."},{"t":"string","d":"The string being checked."},{"t":"option","d":"Matching condition can be set by option\n       parameter. If i is specified for this\n       parameter, the case will be ignored. If x is\n       specified, white space will be ignored. If m\n       is specified, match will be executed in multiline mode and line\n       break will be included in &#039;.&#039;. If p is\n       specified, match will be executed in POSIX mode, line break \n       will be considered as normal character. Note that e\n       cannot be used for mb_ereg_replace_callback()."}]},"mb_ereg_search":{"s":"Multibyte regular expression match for predefined multibyte string","y":"bool mb_ereg_search\n    ([ string $pattern\n   [, string $option = &quot;ms&quot;\n  ]] )","r":"","p":[{"t":"pattern","d":"The search pattern."},{"t":"option","d":"The search option."}]},"mb_ereg_search_getpos":{"s":"Returns start point for next regular expression match","y":"int mb_ereg_search_getpos\n    ( void\n   )","r":"","p":null},"mb_ereg_search_getregs":{"s":"Retrieve the result from the last multibyte regular expression match","y":"array mb_ereg_search_getregs\n    ( void\n   )","r":"","p":null},"mb_ereg_search_init":{"s":"Setup string and regular expression for a multibyte regular expression match","y":"bool mb_ereg_search_init\n    ( string $string\n   [, string $pattern\n   [, string $option = &quot;msr&quot;\n  ]] )","r":"","p":[{"t":"string","d":"The search string."},{"t":"pattern","d":"The search pattern."},{"t":"option","d":"The search option."}]},"mb_ereg_search_pos":{"s":"Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string","y":"array mb_ereg_search_pos\n    ([ string $pattern\n   [, string $option = &quot;ms&quot;\n  ]] )","r":"","p":[{"t":"pattern","d":"The search pattern."},{"t":"option","d":"The search option."}]},"mb_ereg_search_regs":{"s":"Returns the matched part of a multibyte regular expression","y":"array mb_ereg_search_regs\n    ([ string $pattern\n   [, string $option = &quot;ms&quot;\n  ]] )","r":"","p":[{"t":"pattern","d":"The search pattern."},{"t":"option","d":"The search option."}]},"mb_ereg_search_setpos":{"s":"Set start point of next regular expression match","y":"bool mb_ereg_search_setpos\n    ( int $position\n   )","r":"","p":[{"t":"position","d":"The position to set."}]},"mb_get_info":{"s":"Get internal settings of mbstring","y":"mixed mb_get_info\n    ([ string $type = &quot;all&quot;\n  ] )","r":"An array of type information if type \n   is not specified, otherwise a specific type.","p":[{"t":"type","d":"If type isn&#039;t specified or is specified to\n       &quot;all&quot;, an array having the elements &quot;internal_encoding&quot;,\n       &quot;http_output&quot;, &quot;http_input&quot;, &quot;func_overload&quot;, &quot;mail_charset&quot;,\n       &quot;mail_header_encoding&quot;, &quot;mail_body_encoding&quot; will be returned."}]},"mb_http_input":{"s":"Detect HTTP input character encoding","y":"mixed mb_http_input\n    ([ string $type = &quot;&quot;\n  ] )","r":"The character encoding name, as per the type.\n   If mb_http_input() does not process specified\n   HTTP input, it returns FALSE.","p":[{"t":"type","d":"Input string specifies the input type. \n       &quot;G&quot; for GET, &quot;P&quot; for POST, &quot;C&quot; for COOKIE, &quot;S&quot; for string, &quot;L&quot; for list, and\n       &quot;I&quot; for the whole list (will return array). \n       If type is omitted, it returns the last input type processed."}]},"mb_http_output":{"s":"Set\/Get HTTP output character encoding","y":"mixed mb_http_output\n    ([ string $encoding = mb_http_output()\n  ] )","r":"If encoding is omitted,\n   mb_http_output() returns the current HTTP output\n   character encoding. Otherwise, \n   Returns TRUE on success or FALSE on failure.","p":[{"t":"encoding","d":"If encoding is set,\n       mb_http_output() sets the HTTP output character\n       encoding to encoding."}]},"mb_internal_encoding":{"s":"Set\/Get internal character encoding","y":"mixed mb_internal_encoding\n    ([ string $encoding = mb_internal_encoding()\n  ] )","r":"If encoding is set, then \n   Returns TRUE on success or FALSE on failure.\n   In this case, the character encoding for multibyte regex is NOT changed.\n   If encoding is omitted, then \n   the current character encoding name is returned.","p":[{"t":"encoding","d":"encoding is the character encoding name \n       used for the HTTP input character encoding conversion, HTTP output \n       character encoding conversion, and the default character encoding \n       for string functions defined by the mbstring module.\n       You should notice that the internal encoding is totally different from the one for multibyte regex."}]},"mb_language":{"s":"Set\/Get current language","y":"mixed mb_language\n    ([ string $language = mb_language()\n  ] )","r":"If language is set and\n   language is valid, it returns\n   TRUE. Otherwise, it returns FALSE. \n   When language is omitted, it returns the language\n   name as a string. If no language is set previously, it then returns\n   FALSE.","p":[{"t":"language","d":"Used for encoding\n       e-mail messages. Valid languages are &quot;Japanese&quot;,\n       &quot;ja&quot;,&quot;English&quot;,&quot;en&quot; and &quot;uni&quot;\n       (UTF-8). mb_send_mail() uses this setting to\n       encode e-mail."}]},"mb_list_encodings":{"s":"Returns an array of all supported encodings","y":"array mb_list_encodings\n    ( void\n   )","r":"Returns a numerically indexed array.","p":null},"mb_output_handler":{"s":"Callback function converts character encoding in output buffer","y":"string mb_output_handler\n    ( string $contents\n   , int $status\n   )","r":"The converted string.","p":[{"t":"contents","d":"The contents of the output buffer."},{"t":"status","d":"The status of the output buffer."}]},"mb_parse_str":{"s":"Parse GET\/POST\/COOKIE data and set global variable","y":"bool mb_parse_str\n    ( string $encoded_string\n   [, array &$result\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"encoded_string","d":"The URL encoded data."},{"t":"result","d":"An array containing decoded and character encoded converted values."}]},"mb_preferred_mime_name":{"s":"Get MIME charset string","y":"string mb_preferred_mime_name\n    ( string $encoding\n   )","r":"The MIME charset string for character encoding\n   encoding. ","p":[{"t":"encoding","d":"The encoding being checked."}]},"mb_regex_encoding":{"s":"Set\/Get character encoding for multibyte regex","y":"mixed mb_regex_encoding\n    ([ string $encoding = mb_regex_encoding()\n  ] )","r":"","p":[{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_regex_set_options":{"s":"Set\/Get the default options for mbregex functions","y":"string mb_regex_set_options\n    ([ string $options = mb_regex_set_options()\n  ] )","r":"The previous options. If options is omitted, \n   it returns the string that describes the current options.","p":[{"t":"options","d":"The options to set. This is a string where each \n       character is an option. To set a mode, the mode \n       character must be the last one set, however there \n       can only be set one mode but multiple options."}]},"mb_send_mail":{"s":"Send encoded mail","y":"bool mb_send_mail\n    ( string $to\n   , string $subject\n   , string $message\n   [, string $additional_headers = NULL\n   [, string $additional_parameter = NULL\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"to","d":"The mail addresses being sent to. Multiple\n       recipients may be specified by putting a comma between each\n       address in to. \n       This parameter is not automatically encoded."},{"t":"subject","d":"The subject of the mail."},{"t":"message","d":"The message of the mail."},{"t":"additional_headers","d":"String to be inserted at the end of the email header."},{"t":"additional_parameter","d":"additional_parameter is a MTA command line\n       parameter. It is useful when setting the correct Return-Path\n       header when using sendmail."}]},"mb_split":{"s":"Split multibyte string using regular expression","y":"array mb_split\n    ( string $pattern\n   , string $string\n   [, int $limit = -1\n  ] )","r":"The result as an array.","p":[{"t":"pattern","d":"The regular expression pattern."},{"t":"string","d":"The string being split."},{"t":"limit","d":""}]},"mb_strcut":{"s":"Get part of string","y":"string mb_strcut\n    ( string $str\n   , int $start\n   [, int $length = NULL\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"mb_strcut() returns the portion of\n   str specified by the\n   start and\n   length parameters.","p":[{"t":"str","d":"The string being cut."},{"t":"start","d":"Starting position in bytes."},{"t":"length","d":"Length in bytes. If omitted or NULL\n       is passed, extract all bytes to the end of the string."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strimwidth":{"s":"Get truncated string with specified width","y":"string mb_strimwidth\n    ( string $str\n   , int $start\n   , int $width\n   [, string $trimmarker = &quot;&quot;\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"The truncated string. If trimmarker is set,\n   trimmarker is appended to the return value.","p":[{"t":"str","d":"The string being decoded."},{"t":"start","d":"The start position offset. Number of\n       characters from the beginning of string. (First character is 0)"},{"t":"width","d":"The width of the desired trim."},{"t":"trimmarker","d":"A string that is added to the end of string \n       when string is truncated."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_stripos":{"s":"Finds position of first occurrence of a string within another, case insensitive","y":"int mb_stripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Return the numeric position of the first occurrence of\n   needle in the haystack\n   string, or FALSE if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the position of the first occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"offset","d":"The position in haystack\n       to start searching"},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_stristr":{"s":"Finds first occurrence of a string within another, case insensitive","y":"string mb_stristr\n    ( string $haystack\n   , string $needle\n   [, bool $before_needle = false\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the portion of haystack,\n   or FALSE if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the first occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"before_needle","d":"Determines which portion of haystack\n       this function returns. \n       If set to TRUE, it returns all of  haystack\n       from the beginning to the first occurrence of needle (excluding needle).\n       If set to FALSE, it returns all of haystack\n       from the first occurrence of needle to the end (including needle)."},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_strlen":{"s":"Get string length","y":"mixed mb_strlen\n    ( string $str\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"Returns the number of characters in\n   string str having character encoding\n   encoding. A multi-byte character is\n   counted as 1.","p":[{"t":"str","d":"The string being checked for length."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strpos":{"s":"Find position of first occurrence of string in a string","y":"int mb_strpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the numeric position of\n   the first occurrence of needle in the\n   haystack string. If\n   needle is not found, it returns FALSE.","p":[{"t":"haystack","d":"The string being checked."},{"t":"needle","d":"The string to find in haystack. In contrast\n       with strpos(), numeric values are not applied\n       as the ordinal value of a character."},{"t":"offset","d":"The search offset. If it is not specified, 0 is used."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strrchr":{"s":"Finds the last occurrence of a character in a string within another","y":"string mb_strrchr\n    ( string $haystack\n   , string $needle\n   [, bool $part = false\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the portion of haystack.\n   or FALSE if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the last occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"part","d":"Determines which portion of haystack\n       this function returns. \n       If set to TRUE, it returns all of haystack\n       from the beginning to the last occurrence of needle.\n       If set to FALSE, it returns all of haystack\n       from the last occurrence of needle to the end,"},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_strrichr":{"s":"Finds the last occurrence of a character in a string within another, case insensitive","y":"string mb_strrichr\n    ( string $haystack\n   , string $needle\n   [, bool $part = false\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the portion of haystack.\n   or FALSE if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the last occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"part","d":"Determines which portion of haystack\n       this function returns. \n       If set to TRUE, it returns all of haystack\n       from the beginning to the last occurrence of needle.\n       If set to FALSE, it returns all of haystack\n       from the last occurrence of needle to the end,"},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_strripos":{"s":"Finds position of last occurrence of a string within another, case insensitive","y":"int mb_strripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Return the numeric position of\n   the last occurrence of needle in the\n   haystack string, or FALSE\n   if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the position of the last occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"offset","d":"The position in haystack\n       to start searching"},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_strrpos":{"s":"Find position of last occurrence of a string in a string","y":"int mb_strrpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the numeric position of\n   the last occurrence of needle in the\n   haystack string. If\n   needle is not found, it returns FALSE.","p":[{"t":"haystack","d":"The string being checked, for the last occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack."},{"t":"offset","d":""},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strstr":{"s":"Finds first occurrence of a string within another","y":"string mb_strstr\n    ( string $haystack\n   , string $needle\n   [, bool $before_needle = false\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"Returns the portion of haystack,\n   or FALSE if needle is not found.","p":[{"t":"haystack","d":"The string from which to get the first occurrence\n       of needle"},{"t":"needle","d":"The string to find in haystack"},{"t":"before_needle","d":"Determines which portion of haystack\n       this function returns. \n       If set to TRUE, it returns all of  haystack\n       from the beginning to the first occurrence of needle (excluding needle).\n       If set to FALSE, it returns all of haystack\n       from the first occurrence of needle to the end (including needle)."},{"t":"encoding","d":"Character encoding name to use.\n       If it is omitted, internal character encoding is used."}]},"mb_strtolower":{"s":"Make a string lowercase","y":"string mb_strtolower\n    ( string $str\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"str with all alphabetic characters converted to lowercase.","p":[{"t":"str","d":"The string being lowercased."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strtoupper":{"s":"Make a string uppercase","y":"string mb_strtoupper\n    ( string $str\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"str with all alphabetic characters converted to uppercase.","p":[{"t":"str","d":"The string being uppercased."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_strwidth":{"s":"Return width of string","y":"int mb_strwidth\n    ( string $str\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"The width of string str.","p":[{"t":"str","d":"The string being decoded."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_substitute_character":{"s":"Set\/Get substitution character","y":"mixed mb_substitute_character\n    ([ mixed $substrchar = mb_substitute_character()\n  ] )","r":"If substchar is set, it returns TRUE for success,\n   otherwise returns FALSE. \n   If substchar is not set, it returns the current\n   setting.","p":[{"t":"substrchar","d":"Specify the Unicode value as an integer, \n       or as one of the following strings:\n       \n        \n         \n          &quot;none&quot;: no output\n         \n        \n        \n         \n          &quot;long&quot;: Output character code value (Example:\n          U+3000, JIS+7E7E)\n         \n        \n        \n         \n          &quot;entity&quot;: Output character entity (Example:\n          \u0200)"}]},"mb_substr":{"s":"Get part of string","y":"string mb_substr\n    ( string $str\n   , int $start\n   [, int $length = NULL\n   [, string $encoding = mb_internal_encoding()\n  ]] )","r":"mb_substr() returns the portion of\n   str specified by the\n   start and\n   length parameters.","p":[{"t":"str","d":"The string to extract the substring from."},{"t":"start","d":"Position of first character to use from str."},{"t":"length","d":"Maximum number of characters to use from str. If\n       omitted or NULL is passed, extract all characters to\n       the end of the string."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mb_substr_count":{"s":"Count the number of substring occurrences","y":"int mb_substr_count\n    ( string $haystack\n   , string $needle\n   [, string $encoding = mb_internal_encoding()\n  ] )","r":"The number of times the\n   needle substring occurs in the\n   haystack string.","p":[{"t":"haystack","d":"The string being checked."},{"t":"needle","d":"The string being found."},{"t":"encoding","d":"The encoding\nparameter is the character encoding. If it is omitted, the internal character\nencoding value will be used."}]},"mcrypt_cbc":{"s":"Encrypts\/decrypts data in CBC mode","y":"string mcrypt_cbc\n    ( int $cipher\n   , string $key\n   , string $data\n   , int $mode\n   [, string $iv\n  ] )","r":"","p":null},"mcrypt_cfb":{"s":"Encrypts\/decrypts data in CFB mode","y":"string mcrypt_cfb\n    ( int $cipher\n   , string $key\n   , string $data\n   , int $mode\n   , string $iv\n   )","r":"","p":null},"mcrypt_create_iv":{"s":"Creates an initialization vector (IV) from a random source","y":"string mcrypt_create_iv\n    ( int $size\n   [, int $source = MCRYPT_DEV_RANDOM\n  ] )","r":"Returns the initialization vector, or FALSE on error.","p":[{"t":"size","d":"The size of the IV."},{"t":"source","d":"The source of the IV. The source can be\n       MCRYPT_RAND (system random number generator),\n       MCRYPT_DEV_RANDOM (read data from\n       \/dev\/random) and\n       MCRYPT_DEV_URANDOM (read data from\n       \/dev\/urandom). Prior to 5.3.0,\n       MCRYPT_RAND was the only one supported on Windows."}]},"mcrypt_decrypt":{"s":"Decrypts crypttext with given parameters","y":"string mcrypt_decrypt\n    ( string $cipher\n   , string $key\n   , string $data\n   , string $mode\n   [, string $iv\n  ] )","r":"Returns the decrypted data as a string.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"key","d":"The key with which the data was encrypted. If it&#039;s smaller\n       than the required keysize, it is padded with\n       &#039;\\0&#039;."},{"t":"data","d":"The data that will be decrypted with the given cipher\n       and mode. If the size of the data is not n * blocksize,\n       the data will be padded with &#039;\\0&#039;."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."},{"t":"iv","d":"Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If you do not supply an IV, while it is needed for an algorithm, the function issues a warning and uses an IV with all its bytes set to &quot;\\0&quot;."}]},"mcrypt_ecb":{"s":"Deprecated: Encrypts\/decrypts data in ECB mode","y":"string mcrypt_ecb\n    ( int $cipher\n   , string $key\n   , string $data\n   , int $mode\n   )","r":"","p":null},"mcrypt_encrypt":{"s":"Encrypts plaintext with given parameters","y":"string mcrypt_encrypt\n    ( string $cipher\n   , string $key\n   , string $data\n   , string $mode\n   [, string $iv\n  ] )","r":"Returns the encrypted data, as a string.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"key","d":"The key with which the data will be encrypted. If it&#039;s smaller than\n       the required keysize, it is padded with &#039;\\0&#039;. It is\n       better not to use ASCII strings for keys."},{"t":"data","d":"The data that will be encrypted with the given cipher\n       and mode. If the size of the data is not n * blocksize,\n       the data will be padded with &#039;\\0&#039;."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."},{"t":"iv","d":"Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If you do not supply an IV, while it is needed for an algorithm, the function issues a warning and uses an IV with all its bytes set to &quot;\\0&quot;."}]},"mcrypt_enc_get_algorithms_name":{"s":"Returns the name of the opened algorithm","y":"string mcrypt_enc_get_algorithms_name\n    ( resource $td\n   )","r":"Returns the name of the opened algorithm as a string.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_get_block_size":{"s":"Returns the blocksize of the opened algorithm","y":"int mcrypt_enc_get_block_size\n    ( resource $td\n   )","r":"Returns the block size of the specified algorithm in bytes.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_get_iv_size":{"s":"Returns the size of the IV of the opened algorithm","y":"int mcrypt_enc_get_iv_size\n    ( resource $td\n   )","r":"Returns the size of the IV, or 0 if the IV is ignored by the algorithm.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_get_key_size":{"s":"Returns the maximum supported keysize of the opened mode","y":"int mcrypt_enc_get_key_size\n    ( resource $td\n   )","r":"Returns the maximum supported key size of the algorithm in bytes.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_get_modes_name":{"s":"Returns the name of the opened mode","y":"string mcrypt_enc_get_modes_name\n    ( resource $td\n   )","r":"Returns the name as a string.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_get_supported_key_sizes":{"s":"Returns an array with the supported keysizes of the opened algorithm","y":"array mcrypt_enc_get_supported_key_sizes\n    ( resource $td\n   )","r":"Returns an array with the key sizes supported by the algorithm\n   specified by the encryption descriptor. If it returns an empty\n   array then all key sizes between 1 and\n   mcrypt_enc_get_key_size() are supported by the\n   algorithm.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_is_block_algorithm":{"s":"Checks whether the algorithm of the opened mode is a block algorithm","y":"bool mcrypt_enc_is_block_algorithm\n    ( resource $td\n   )","r":"Returns TRUE if the algorithm is a block algorithm or FALSE if it is\n   a stream one.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_is_block_algorithm_mode":{"s":"Checks whether the encryption of the opened mode works on blocks","y":"bool mcrypt_enc_is_block_algorithm_mode\n    ( resource $td\n   )","r":"Returns TRUE if the mode is for use with block algorithms, otherwise it\n   returns FALSE.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_is_block_mode":{"s":"Checks whether the opened mode outputs blocks","y":"bool mcrypt_enc_is_block_mode\n    ( resource $td\n   )","r":"Returns TRUE if the mode outputs blocks of bytes,\n   or FALSE if it outputs just bytes.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_enc_self_test":{"s":"Runs a self test on the opened module","y":"int mcrypt_enc_self_test\n    ( resource $td\n   )","r":"If the self test succeeds it returns FALSE. In case of an error, it\n   returns TRUE.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_generic":{"s":"This function encrypts data","y":"string mcrypt_generic\n    ( resource $td\n   , string $data\n   )","r":"Returns the encrypted data.","p":[{"t":"td","d":"The encryption descriptor."},{"t":"data","d":"The data to encrypt."}]},"mcrypt_generic_deinit":{"s":"This function deinitializes an encryption module","y":"bool mcrypt_generic_deinit\n    ( resource $td\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_generic_end":{"s":"This function terminates encryption","y":"bool mcrypt_generic_end\n    ( resource $td\n   )","r":"","p":null},"mcrypt_generic_init":{"s":"This function initializes all buffers needed for encryption","y":"int mcrypt_generic_init\n    ( resource $td\n   , string $key\n   , string $iv\n   )","r":"The function returns a negative value on error: -3 when the key length\n   was incorrect, -4 when there was a memory allocation problem and any\n   other return value is an unknown error. If an error occurs a warning will\n   be displayed accordingly. FALSE is returned if incorrect parameters\n   were passed.","p":[{"t":"td","d":"The encryption descriptor."},{"t":"key","d":"The maximum length of the key should be the one obtained by calling\n       mcrypt_enc_get_key_size() and every value smaller\n       than this is legal."},{"t":"iv","d":"The IV should normally have the size of the algorithms block size, but\n       you must obtain the size by calling\n       mcrypt_enc_get_iv_size(). IV is ignored in ECB. IV\n       MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be\n       random and unique (but not secret). The same IV must be used for\n       encryption\/decryption. If you do not want to use it you should set it\n       to zeros, but this is not recommended."}]},"mcrypt_get_block_size":{"s":"Gets the block size of the specified cipher","y":"int mcrypt_get_block_size\n    ( int $cipher\n   )","r":"Gets the block size, as an integer.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."}]},"mcrypt_get_cipher_name":{"s":"Gets the name of the specified cipher","y":"string mcrypt_get_cipher_name\n    ( int $cipher\n   )","r":"This function returns the name of the cipher or FALSE if the cipher does\n   not exist.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."}]},"mcrypt_get_iv_size":{"s":"Returns the size of the IV belonging to a specific cipher\/mode combination","y":"int mcrypt_get_iv_size\n    ( string $cipher\n   , string $mode\n   )","r":"Returns the size of the Initialization Vector (IV) in bytes. On error the\n   function returns FALSE. If the IV is ignored in the specified cipher\/mode\n   combination zero is returned.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."}]},"mcrypt_get_key_size":{"s":"Gets the key size of the specified cipher","y":"int mcrypt_get_key_size\n    ( int $cipher\n   )","r":"Returns the maximum supported key size of the algorithm in bytes\n    or FALSE on failure.","p":[{"t":"cipher","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."}]},"mcrypt_list_algorithms":{"s":"Gets an array of all supported ciphers","y":"array mcrypt_list_algorithms\n    ([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;)\n  ] )","r":"Returns an array with all the supported algorithms.","p":[{"t":"lib_dir","d":"Specifies the directory where all algorithms are located. If not\n       specified, the value of the mcrypt.algorithms_dir\n       php.ini directive is used."}]},"mcrypt_list_modes":{"s":"Gets an array of all supported modes","y":"array mcrypt_list_modes\n    ([ string $lib_dir = ini_get(&quot;mcrypt.modes_dir&quot;)\n  ] )","r":"Returns an array with all the supported modes.","p":[{"t":"lib_dir","d":"Specifies the directory where all modes are located. If not\n       specified, the value of the mcrypt.modes_dir\n       php.ini directive is used."}]},"mcrypt_module_close":{"s":"Closes the mcrypt module","y":"bool mcrypt_module_close\n    ( resource $td\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"td","d":"The encryption descriptor."}]},"mcrypt_module_get_algo_block_size":{"s":"Returns the blocksize of the specified algorithm","y":"int mcrypt_module_get_algo_block_size\n    ( string $algorithm\n   [, string $lib_dir\n  ] )","r":"Returns the block size of the algorithm specified in bytes.","p":[{"t":"algorithm","d":"The algorithm name."},{"t":"lib_dir","d":"This optional parameter can contain the location where the mode module\n       is on the system."}]},"mcrypt_module_get_algo_key_size":{"s":"Returns the maximum supported keysize of the opened mode","y":"int mcrypt_module_get_algo_key_size\n    ( string $algorithm\n   [, string $lib_dir\n  ] )","r":"This function returns the maximum supported key size of the\n   algorithm specified in bytes.","p":[{"t":"algorithm","d":"The algorithm name."},{"t":"lib_dir","d":"This optional parameter can contain the location where the mode module\n       is on the system."}]},"mcrypt_module_get_supported_key_sizes":{"s":"Returns an array with the supported keysizes of the opened algorithm","y":"array mcrypt_module_get_supported_key_sizes\n    ( string $algorithm\n   [, string $lib_dir\n  ] )","r":"Returns an array with the key sizes supported by the specified algorithm.\n   If it returns an empty array then all key sizes between 1 and\n   mcrypt_module_get_algo_key_size() are supported by the\n   algorithm.","p":[{"t":"algorithm","d":"The algorithm to be used."},{"t":"lib_dir","d":"The optional lib_dir parameter can contain the\n       location where the algorithm module is on the system."}]},"mcrypt_module_is_block_algorithm":{"s":"This function checks whether the specified algorithm is a block algorithm","y":"bool mcrypt_module_is_block_algorithm\n    ( string $algorithm\n   [, string $lib_dir\n  ] )","r":"This function returns TRUE if the specified algorithm is a block\n   algorithm, or FALSE if it is a stream one.","p":[{"t":"algorithm","d":"The algorithm to check."},{"t":"lib_dir","d":"The optional lib_dir parameter can contain the\n       location where the algorithm module is on the system."}]},"mcrypt_module_is_block_algorithm_mode":{"s":"Returns if the specified module is a block algorithm or not","y":"bool mcrypt_module_is_block_algorithm_mode\n    ( string $mode\n   [, string $lib_dir\n  ] )","r":"This function returns TRUE if the mode is for use with block\n   algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and\n   TRUE for cbc, cfb, ofb).","p":[{"t":"mode","d":"The mode to check."},{"t":"lib_dir","d":"The optional lib_dir parameter can contain the\n       location where the algorithm module is on the system."}]},"mcrypt_module_is_block_mode":{"s":"Returns if the specified mode outputs blocks or not","y":"bool mcrypt_module_is_block_mode\n    ( string $mode\n   [, string $lib_dir\n  ] )","r":"This function returns TRUE if the mode outputs blocks of bytes or\n   FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and\n   FALSE for cfb and stream).","p":[{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."},{"t":"lib_dir","d":"The optional lib_dir parameter can contain the\n       location where the algorithm module is on the system."}]},"mcrypt_module_open":{"s":"Opens the module of the algorithm and the mode to be used","y":"resource mcrypt_module_open\n    ( string $algorithm\n   , string $algorithm_directory\n   , string $mode\n   , string $mode_directory\n   )","r":"Normally it returns an encryption descriptor, or FALSE on error.","p":[{"t":"algorithm","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"algorithm_directory","d":"The algorithm_directory parameter is used to locate\n       the encryption module. When you supply a directory name, it is used.  When\n       you set it to an empty string (&quot;&quot;), the value set by the\n       mcrypt.algorithms_dir php.ini directive is used. When\n       it is not set, the default directory that is used is the one that was compiled\n       into libmcrypt (usually \/usr\/local\/lib\/libmcrypt)."},{"t":"mode","d":"One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;."},{"t":"mode_directory","d":"The mode_directory parameter is used to locate\n       the encryption module. When you supply a directory name, it is used.  When\n       you set it to an empty string (&quot;&quot;), the value set by the\n       mcrypt.modes_dir php.ini directive is used. When\n       it is not set, the default directory that is used is the one that was compiled-in\n       into libmcrypt (usually \/usr\/local\/lib\/libmcrypt)."}]},"mcrypt_module_self_test":{"s":"This function runs a self test on the specified module","y":"bool mcrypt_module_self_test\n    ( string $algorithm\n   [, string $lib_dir\n  ] )","r":"The function returns TRUE if the self test succeeds, or FALSE when it\n   fails.","p":[{"t":"algorithm","d":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string."},{"t":"lib_dir","d":"The optional lib_dir parameter can contain the\n       location where the algorithm module is on the system."}]},"mcrypt_ofb":{"s":"Encrypts\/decrypts data in OFB mode","y":"string mcrypt_ofb\n    ( int $cipher\n   , string $key\n   , string $data\n   , int $mode\n   , string $iv\n   )","r":"","p":null},"md5":{"s":"Calculate the md5 hash of a string","y":"string md5\n    ( string $str\n   [, bool $raw_output = false\n  ] )","r":"Returns the hash as a 32-character hexadecimal number. ","p":[{"t":"str","d":"The string."},{"t":"raw_output","d":"If the optional raw_output is set to TRUE,\n       then the md5 digest is instead returned in raw binary format with a\n       length of 16."}]},"md5_file":{"s":"Calculates the md5 hash of a given file","y":"string md5_file\n    ( string $filename\n   [, bool $raw_output = false\n  ] )","r":"Returns a string on success, FALSE otherwise.","p":[{"t":"filename","d":"The filename"},{"t":"raw_output","d":"When TRUE, returns the digest in raw binary format with a length of\n       16."}]},"mdecrypt_generic":{"s":"Decrypts data","y":"string mdecrypt_generic\n    ( resource $td\n   , string $data\n   )","r":"","p":[{"t":"td","d":"An encryption descriptor returned by\n       mcrypt_module_open()"},{"t":"data","d":"Encrypted data."}]},"memory_get_peak_usage":{"s":"Returns the peak of memory allocated by PHP","y":"int memory_get_peak_usage\n    ([ bool $real_usage = false\n  ] )","r":"Returns the memory peak in bytes.","p":[{"t":"real_usage","d":"Set this to TRUE to get the real size of memory allocated from\n       system. If not set or FALSE only the memory used by\n       emalloc() is reported."}]},"memory_get_usage":{"s":"Returns the amount of memory allocated to PHP","y":"int memory_get_usage\n    ([ bool $real_usage = false\n  ] )","r":"Returns the memory amount in bytes.","p":[{"t":"real_usage","d":"Set this to TRUE to get the real size of memory allocated from\n       system. If not set or FALSE only the memory used by\n       emalloc() is reported."}]},"metaphone":{"s":"Calculate the metaphone key of a string","y":"string metaphone\n    ( string $str\n   [, int $phonemes = 0\n  ] )","r":"Returns the metaphone key as a string,  or FALSE on failure.","p":[{"t":"str","d":"The input string."},{"t":"phonemes","d":"This parameter restricts the returned metaphone key to \n       phonemes characters in length.\n       The default value of 0 means no restriction."}]},"method_exists":{"s":"Checks if the class method exists","y":"bool method_exists\n    ( mixed $object\n   , string $method_name\n   )","r":"Returns TRUE if the method given by method_name\n   has been defined for the given object, FALSE \n   otherwise.","p":[{"t":"object","d":"An object instance or a class name"},{"t":"method_name","d":"The method name"}]},"mhash":{"s":"Computes hash","y":"string mhash\n    ( int $hash\n   , string $data\n   [, string $key\n  ] )","r":"Returns the resulting hash (also called digest) or HMAC as a string, or\n   FALSE on error.","p":[{"t":"hash","d":"The hash ID. One of the MHASH_hashname constants."},{"t":"data","d":"The user input, as a string."},{"t":"key","d":"If specified, the function will return the resulting HMAC instead.\n       HMAC is keyed hashing for message authentication, or simply a message\n       digest that depends on the specified key. Not all algorithms \n       supported in mhash can be used in HMAC mode."}]},"mhash_count":{"s":"Gets the highest available hash ID","y":"int mhash_count\n    ( void\n   )","r":"Returns the highest available hash ID. Hashes are numbered from 0 to this\n   hash ID.","p":null},"mhash_get_block_size":{"s":"Gets the block size of the specified hash","y":"int mhash_get_block_size\n    ( int $hash\n   )","r":"Returns the size in bytes or FALSE, if the hash\n   does not exist.","p":[{"t":"hash","d":"The hash ID. One of the MHASH_hashname constants."}]},"mhash_get_hash_name":{"s":"Gets the name of the specified hash","y":"string mhash_get_hash_name\n    ( int $hash\n   )","r":"Returns the name of the hash or FALSE, if the hash does not exist.","p":[{"t":"hash","d":"The hash ID. One of the MHASH_hashname constants."}]},"mhash_keygen_s2k":{"s":"Generates a key","y":"string mhash_keygen_s2k\n    ( int $hash\n   , string $password\n   , string $salt\n   , int $bytes\n   )","r":"Returns the generated key as a string, or FALSE on error.","p":[{"t":"hash","d":"The hash ID used to create the key.\n       One of the MHASH_hashname constants."},{"t":"password","d":"An user supplied password."},{"t":"salt","d":"Must be different and random enough for every key you generate in\n       order to create different keys. Because salt\n       must be known when you check the keys, it is a good idea to append\n       the key to it. Salt has a fixed length of 8 bytes and will be padded\n       with zeros if you supply less bytes."},{"t":"bytes","d":"The key length, in bytes."}]},"microtime":{"s":"Return current Unix timestamp with microseconds","y":"mixed microtime\n    ([ bool $get_as_float = false\n  ] )","r":"By default, microtime() returns a string in\n   the form &quot;msec sec&quot;, where sec is the number of seconds \n   since the Unix epoch (0:00:00 January 1,1970 GMT), and msec \n   measures microseconds that have elapsed since sec \n   and is also expressed in seconds.","p":[{"t":"get_as_float","d":"If used and set to TRUE, microtime() will return a\n       float instead of a string, as described in\n       the return values section below."}]},"mime_content_type":{"s":"Detect MIME Content-type for a file (deprecated)","y":"string mime_content_type\n    ( string $filename\n   )","r":"Returns the content type in MIME format, like \n   text\/plain or application\/octet-stream.","p":[{"t":"filename","d":"Path to the tested file."}]},"min":{"s":"Find lowest value","y":"mixed min\n     ( array $values\n    )","r":"min() returns the numerically lowest of the\n   parameter values.","p":[{"t":"values","d":"An array containing the values."},{"t":"value1","d":"Any comparable\n       value."},{"t":"value2","d":"Any comparable\n       value."},{"t":"...","d":"Any comparable\n       value."}]},"ming_keypress":{"s":"Returns the action flag for keyPress(char)","y":"int ming_keypress\n    ( string $char\n   )","r":"","p":null},"ming_setcubicthreshold":{"s":"Set cubic threshold","y":"void ming_setcubicthreshold\n    ( int $threshold\n   )","r":"No value is returned.","p":[{"t":"threshold","d":"The Threshold. Lower is more accurate, hence larger file size."}]},"ming_setscale":{"s":"Set the global scaling factor.","y":"void ming_setscale\n    ( float $scale\n   )","r":"No value is returned.","p":[{"t":"scale","d":"The scale to be set."}]},"ming_setswfcompression":{"s":"Sets the SWF output compression","y":"void ming_setswfcompression\n    ( int $level\n   )","r":"No value is returned.","p":[{"t":"level","d":"The new compression level. Should be a value between 1 and 9 \n       inclusive."}]},"ming_useswfversion":{"s":"Sets the SWF version","y":"void ming_useswfversion\n    ( int $version\n   )","r":"No value is returned.","p":[{"t":"version","d":"SWF version to use."}]},"mkdir":{"s":"Makes directory","y":"bool mkdir\n    ( string $pathname\n   [, int $mode = 0777\n   [, bool $recursive = false\n   [, resource $context\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pathname","d":"The directory path."},{"t":"mode","d":"The mode is 0777 by default, which means the widest possible\n       access. For more information on modes, read the details\n       on the chmod() page."},{"t":"recursive","d":"Allows the creation of nested directories specified in the \n       pathname."},{"t":"context","d":""}]},"mktime":{"s":"Get Unix timestamp for a date","y":"int mktime\n    ([ int $hour = date(&quot;H&quot;)\n   [, int $minute = date(&quot;i&quot;)\n   [, int $second = date(&quot;s&quot;)\n   [, int $month = date(&quot;n&quot;)\n   [, int $day = date(&quot;j&quot;)\n   [, int $year = date(&quot;Y&quot;)\n   [, int $is_dst = -1\n  ]]]]]]] )","r":"mktime() returns the Unix timestamp of the arguments\n   given.\n   If the arguments are invalid, the function returns FALSE (before PHP 5.1\n   it returned -1).","p":[{"t":"hour","d":"The number of the hour relative to the start of the day determined by\n       month, day and year.\n       Negative values reference the hour before midnight of the day in question.\n       Values greater than 23 reference the appropriate hour in the following day(s)."},{"t":"minute","d":"The number of the minute relative to the start of the hour.\n       Negative values reference the minute in the previous hour.\n       Values greater than 59 reference the appropriate minute in the following hour(s)."},{"t":"second","d":"The number of seconds relative to the start of the minute.\n       Negative values reference the second in the previous minute.\n       Values greater than 59 reference the appropriate second in the following minute(s)."},{"t":"month","d":"The number of the month relative to the end of the previous year.\n       Values 1 to 12 reference the normal calendar months of the year in question.\n       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.\n       Values greater than 12 reference the appropriate month in the following year(s)."},{"t":"day","d":"The number of the day relative to the end of the previous month.\n       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.\n       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.\n       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s)."},{"t":"year","d":"The number of the year, may be a two or four digit value,\n       with values between 0-69 mapping to 2000-2069 and 70-100 to\n       1970-2000. On systems where time_t is a 32bit signed integer, as\n       most common today, the valid range for year \n       is somewhere between 1901 and 2038. However, before PHP 5.1.0 this\n       range was limited from 1970 to 2038 on some systems (e.g. Windows)."},{"t":"is_dst","d":"This parameter can be set to 1 if the time is during daylight savings time (DST), \n       0 if it is not, or -1 (the default) if it is unknown whether the time is within \n       daylight savings time or not. If it&#039;s unknown, PHP tries to figure it out itself.\n       This can cause unexpected (but not incorrect) results.\n       Some times are invalid if DST is enabled on the system PHP is running on or \n       is_dst is set to 1. If DST is enabled in e.g. 2:00, all times \n       between 2:00 and 3:00 are invalid and mktime() returns an undefined \n       (usually negative) value. \n       Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST \n       is enabled is evaluated as 23:30 of the previous day."}]},"money_format":{"s":"Formats a number as a currency string","y":"string money_format\n    ( string $format\n   , float $number\n   )","r":"Returns the formatted string. Characters before and after the formatting\n   string will be returned unchanged.\n   Non-numeric number causes returning NULL and\n   emitting E_WARNING.","p":[{"t":"format","d":"The format specification consists of the following sequence:\n       \n        a % character"},{"t":"","d":"The character = followed by a (single byte)\n            character f to be used as the numeric fill\n            character. The default fill character is space."},{"t":"","d":"Disable the use of grouping characters (as defined\n            by the current locale)."},{"t":"","d":"Specify the formatting style for positive and negative numbers.\n            If + is used, the locale&#039;s equivalent for\n            + and - will be used. If\n            ( is used, negative amounts are enclosed in\n            parenthesis. If no specification is given, the default is\n            +."},{"t":"","d":"Suppress the currency symbol from the output string."},{"t":"","d":"If present, it will make all fields left-justified (padded to the\n            right), as opposed to the default which is for the fields to be\n            right-justified (padded to the left)."},{"t":"","d":"A decimal digit string specifying a minimum field width. Field will\n            be right-justified unless the flag - is used.\n            Default value is 0 (zero)."},{"t":"","d":"The maximum number of digits (n) expected\n            to the left of the decimal character (e.g. the decimal point). It is\n            used usually to keep formatted output aligned in the same columns,\n            using the fill character if the number of digits is less than\n            n. If the number of actual digits is\n            bigger than n, then this specification is\n            ignored."},{"t":"","d":"A period followed by the number of digits\n            (p) after the decimal character. If the\n            value of p is 0 (zero), the decimal\n            character and the digits to its right will be omitted. If no right\n            precision is included, the default will dictated by the current\n            local in use. The amount being formatted is rounded to the specified\n            number of digits prior to formatting."},{"t":"","d":"The number is formatted according to the locale&#039;s international\n            currency format (e.g. for the USA locale: USD 1,234.56)."},{"t":"","d":"The number is formatted according to the locale&#039;s national\n            currency format (e.g. for the de_DE locale: EU1.234,56)."},{"t":"","d":"Returns the % character."},{"t":"number","d":"The number to be formatted."}]},"move_uploaded_file":{"s":"Moves an uploaded file to a new location","y":"bool move_uploaded_file\n    ( string $filename\n   , string $destination\n   )","r":"Returns TRUE on success.","p":[{"t":"filename","d":"The filename of the uploaded file."},{"t":"destination","d":"The destination of the moved file."}]},"mqseries_back":{"s":"MQSeries MQBACK","y":"void mqseries_back\n    ( resource $hconn\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_begin":{"s":"MQseries MQBEGIN","y":"void mqseries_begin\n    ( resource $hconn\n   , array $beginOptions\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_close":{"s":"MQSeries MQCLOSE","y":"void mqseries_close\n    ( resource $hconn\n   , resource $hobj\n   , int $options\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"hObj","d":"Object handle."},{"t":"options","d":""},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_cmit":{"s":"MQSeries MQCMIT","y":"void mqseries_cmit\n    ( resource $hconn\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_conn":{"s":"MQSeries MQCONN","y":"void mqseries_conn\n    ( string $qManagerName\n   , resource &$hconn\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"qManagerName","d":"Name of queue manager."},{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_connx":{"s":"MQSeries MQCONNX","y":"void mqseries_connx\n    ( string $qManagerName\n   , array &$connOptions\n   , resource &$hconn\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"qManagerName","d":"Name of queue manager."},{"t":"connOps","d":"Options that control the action of function"},{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_disc":{"s":"MQSeries MQDISC","y":"void mqseries_disc\n    ( resource $hconn\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_get":{"s":"MQSeries MQGET","y":"void mqseries_get\n    ( resource $hConn\n   , resource $hObj\n   , array &$md\n   , array &$gmo\n   , int &$bufferLength\n   , string &$msg\n   , int &$data_length\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"hObj","d":"Object handle."},{"t":"md","d":"Message descriptor (MQMD)."},{"t":"gmo","d":"Get message options (MQGMO)."},{"t":"bufferLength","d":"Expected length of the result buffer"},{"t":"msg","d":"Buffer holding the message that was retrieved from the object."},{"t":"data_length","d":"Actual buffer length"},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_inq":{"s":"MQSeries MQINQ","y":"void mqseries_inq\n    ( resource $hconn\n   , resource $hobj\n   , int $selectorCount\n   , array $selectors\n   , int $intAttrCount\n   , resource &$intAttr\n   , int $charAttrLength\n   , resource &$charAttr\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"hObj","d":"Object handle."},{"t":"selectorCount","d":"Count of selectors."},{"t":"selectors","d":"Array of attribute selectors."},{"t":"intAttrLength","d":"Count of integer attributes."},{"t":"intAttr","d":"Array of integer attributes."},{"t":"charAttrLength","d":"Length of character attributes buffer."},{"t":"charAttr","d":"Character attributes."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_open":{"s":"MQSeries MQOPEN","y":"void mqseries_open\n    ( resource $hconn\n   , array &$objDesc\n   , int $option\n   , resource &$hobj\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"objDesc","d":"Object descriptor. (MQOD)"},{"t":"options","d":"Options that control the action of the function."},{"t":"hObj","d":"Object handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_put":{"s":"MQSeries MQPUT","y":"void mqseries_put\n    ( resource $hConn\n   , resource $hObj\n   , array &$md\n   , array &$pmo\n   , string $message\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"hObj","d":"Object handle."},{"t":"md","d":"Message descriptor (MQMD)."},{"t":"pmo","d":"Put message options (MQPMO)."},{"t":"message","d":"The actual message to put onto the queue."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_put1":{"s":"MQSeries MQPUT1","y":"void mqseries_put1\n    ( resource $hconn\n   , resource &$objDesc\n   , resource &$msgDesc\n   , resource &$pmo\n   , string $buffer\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"objDesc","d":"Object descriptor. (MQOD)"},{"t":"msgDesc","d":"Message descriptor (MQMD)."},{"t":"pmo","d":"Put message options (MQPMO)."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_set":{"s":"MQSeries MQSET","y":"void mqseries_set\n    ( resource $hconn\n   , resource $hobj\n   , int $selectorcount\n   , array $selectors\n   , int $intattrcount\n   , array $intattrs\n   , int $charattrlength\n   , array $charattrs\n   , resource &$compCode\n   , resource &$reason\n   )","r":"No value is returned.","p":[{"t":"hConn","d":"Connection handle."},{"t":"compCode","d":"Completion code."},{"t":"reason","d":"Reason code qualifying the compCode."}]},"mqseries_strerror":{"s":"Returns the error message corresponding to a result code (MQRC).","y":"string mqseries_strerror\n    ( int $reason\n   )","r":"string representation of the reason code message.","p":[{"t":"reason","d":"Reason code qualifying the compCode."}]},"msession_connect":{"s":"Connect to msession server","y":"bool msession_connect\n    ( string $host\n   , string $port\n   )","r":"","p":null},"msession_count":{"s":"Get session count","y":"int msession_count\n    ( void\n   )","r":"","p":null},"msession_create":{"s":"Create a session","y":"bool msession_create\n    ( string $session\n   [, string $classname\n   [, string $data\n  ]] )","r":"","p":null},"msession_destroy":{"s":"Destroy a session","y":"bool msession_destroy\n    ( string $name\n   )","r":"","p":null},"msession_disconnect":{"s":"Close connection to msession server","y":"void msession_disconnect\n    ( void\n   )","r":"","p":null},"msession_find":{"s":"Find all sessions with name and value","y":"array msession_find\n    ( string $name\n   , string $value\n   )","r":"","p":null},"msession_get":{"s":"Get value from session","y":"string msession_get\n    ( string $session\n   , string $name\n   , string $value\n   )","r":"","p":null},"msession_get_array":{"s":"Get array of msession variables","y":"array msession_get_array\n    ( string $session\n   )","r":"","p":null},"msession_get_data":{"s":"Get data session unstructured data","y":"string msession_get_data\n    ( string $session\n   )","r":"","p":null},"msession_inc":{"s":"Increment value in session","y":"string msession_inc\n    ( string $session\n   , string $name\n   )","r":"","p":null},"msession_list":{"s":"List all sessions","y":"array msession_list\n    ( void\n   )","r":"","p":null},"msession_listvar":{"s":"List sessions with variable","y":"array msession_listvar\n    ( string $name\n   )","r":"Returns an associative array of value\/session for all sessions\n   with a variable named name.","p":[{"t":"name","d":"The name being searched."}]},"msession_lock":{"s":"Lock a session","y":"int msession_lock\n    ( string $name\n   )","r":"","p":null},"msession_plugin":{"s":"Call an escape function within the msession personality plugin","y":"string msession_plugin\n    ( string $session\n   , string $val\n   [, string $param\n  ] )","r":"","p":null},"msession_randstr":{"s":"Get random string","y":"string msession_randstr\n    ( int $param\n   )","r":"","p":null},"msession_set":{"s":"Set value in session","y":"bool msession_set\n    ( string $session\n   , string $name\n   , string $value\n   )","r":"","p":null},"msession_set_array":{"s":"Set msession variables from an array","y":"void msession_set_array\n    ( string $session\n   , array $tuples\n   )","r":"","p":null},"msession_set_data":{"s":"Set data session unstructured data","y":"bool msession_set_data\n    ( string $session\n   , string $value\n   )","r":"","p":null},"msession_timeout":{"s":"Set\/get session timeout","y":"int msession_timeout\n    ( string $session\n   [, int $param\n  ] )","r":"","p":null},"msession_uniq":{"s":"Get unique id","y":"string msession_uniq\n    ( int $param\n   [, string $classname\n   [, string $data\n  ]] )","r":"","p":null},"msession_unlock":{"s":"Unlock a session","y":"int msession_unlock\n    ( string $session\n   , int $key\n   )","r":"","p":null},"msg_get_queue":{"s":"Create or attach to a message queue","y":"resource msg_get_queue\n    ( int $key\n   [, int $perms = 0666\n  ] )","r":"Returns a resource handle that can be used to access the System V message queue.","p":[{"t":"key","d":"Message queue numeric ID"},{"t":"perms","d":"Queue permissions. Default to 0666. If the message queue already\n       exists, the perms will be ignored."}]},"msg_queue_exists":{"s":"Check whether a message queue exists","y":"bool msg_queue_exists\n    ( int $key\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"Queue key."}]},"msg_receive":{"s":"Receive a message from a message queue","y":"bool msg_receive\n    ( resource $queue\n   , int $desiredmsgtype\n   , int &$msgtype\n   , int $maxsize\n   , mixed &$message\n   [, bool $unserialize = true\n   [, int $flags = 0\n   [, int &$errorcode\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"queue","d":""},{"t":"desiredmsgtype","d":"If desiredmsgtype is 0, the message from the front\n       of the queue is returned. If desiredmsgtype is\n       greater than 0, then the first message of that type is returned.\n       If desiredmsgtype is less than 0, the first\n       message on the queue with the lowest type less than or equal to the\n       absolute value of desiredmsgtype will be read.\n       If no messages match the criteria, your script will wait until a suitable\n       message arrives on the queue.  You can prevent the script from blocking\n       by specifying MSG_IPC_NOWAIT in the\n       flags parameter."},{"t":"msgtype","d":"The type of the message that was received will be stored in this\n       parameter."},{"t":"maxsize","d":"The maximum size of message to be accepted is specified by the\n       maxsize; if the message in the queue is larger\n       than this size the function will fail (unless you set\n       flags as described below)."},{"t":"message","d":"The received message will be stored in message,\n       unless there were errors receiving the message."},{"t":"unserialize","d":"If set to\n       TRUE, the message is treated as though it was serialized using the\n       same mechanism as the session module. The message will be unserialized\n       and then returned to your script. This allows you to easily receive\n       arrays or complex object structures from other PHP scripts, or if you\n       are using the WDDX serializer, from any WDDX compatible source."},{"t":"flags","d":"The optional flags allows you to pass flags to the\n       low-level msgrcv system call.  It defaults to 0, but you may specify one\n       or more of the following values (by adding or ORing them together).\n       \n        Flag values for msg_receive\n        \n         \n          \n           MSG_IPC_NOWAIT\n           If there are no messages of the\n            desiredmsgtype, return immediately and do not\n            wait.  The function will fail and return an integer value\n            corresponding to MSG_ENOMSG.\n           \n          \n\n          \n           MSG_EXCEPT\n           Using this flag in combination with a\n            desiredmsgtype greater than 0 will cause the\n            function to receive the first message that is not equal to\n            desiredmsgtype.\n          \n\n          \n           MSG_NOERROR\n           \n            If the message is longer than maxsize,\n            setting this flag will truncate the message to\n            maxsize and will not signal an error."},{"t":"errorcode","d":"If the function fails, the optional errorcode\n       will be set to the value of the system errno variable."}]},"msg_remove_queue":{"s":"Destroy a message queue","y":"bool msg_remove_queue\n    ( resource $queue\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"queue","d":"Message queue resource handle"}]},"msg_send":{"s":"Send a message to a message queue","y":"bool msg_send\n    ( resource $queue\n   , int $msgtype\n   , mixed $message\n   [, bool $serialize = true\n   [, bool $blocking = true\n   [, int &$errorcode\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"queue","d":""},{"t":"msgtype","d":""},{"t":"message","d":""},{"t":"serialize","d":"The optional serialize controls how the\n       message is sent.  serialize\n       defaults to TRUE which means that the message is\n       serialized using the same mechanism as the session module before being\n       sent to the queue.  This allows complex arrays and objects to be sent to\n       other PHP scripts, or if you are using the WDDX serializer, to any WDDX\n       compatible client."},{"t":"blocking","d":"If the message is too large to fit in the queue, your script will wait\n       until another process reads messages from the queue and frees enough\n       space for your message to be sent.\n       This is called blocking; you can prevent blocking by setting the\n       optional blocking parameter to FALSE, in which\n       case msg_send() will immediately return FALSE if the\n       message is too big for the queue, and set the optional\n       errorcode to MSG_EAGAIN,\n       indicating that you should try to send your message again a little\n       later on."},{"t":"errorcode","d":""}]},"msg_set_queue":{"s":"Set information in the message queue data structure","y":"bool msg_set_queue\n    ( resource $queue\n   , array $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"queue","d":"Message queue resource handle"},{"t":"data","d":"You specify the values you require by setting the value of the keys\n       that you require in the data array."}]},"msg_stat_queue":{"s":"Returns information from the message queue data structure","y":"array msg_stat_queue\n    ( resource $queue\n   )","r":"The return value is an array whose keys and values have the following\n   meanings:\n   \n    Array structure for msg_stat_queue\n    \n     \n      \n       msg_perm.uid\n       \n        The uid of the owner of the queue.\n       \n      \n\n      \n       msg_perm.gid\n       \n        The gid of the owner of the queue.\n       \n      \n\n      \n       msg_perm.mode\n       \n        The file access mode of the queue.\n       \n      \n\n      \n       msg_stime\n       \n        The time that the last message was sent to the queue.\n       \n      \n\n      \n       msg_rtime\n       \n        The time that the last message was received from the queue.\n       \n      \n\n      \n       msg_ctime\n       \n        The time that the queue was last changed.\n       \n      \n\n      \n       msg_qnum\n       \n        The number of messages waiting to be read from the queue.\n       \n      \n\n      \n       msg_qbytes\n       \n        The maximum number of bytes allowed in one message queue. On\n        Linux, this value may be read and modified via\n        \/proc\/sys\/kernel\/msgmnb.\n       \n      \n\n      \n       msg_lspid\n       \n        The pid of the process that sent the last message to the queue.\n       \n      \n\n      \n       msg_lrpid\n       \n        The pid of the process that received the last message from the queue.","p":[{"t":"queue","d":"Message queue resource handle"}]},"msql":{"s":"Alias of msql_db_query()","y":"","r":"","p":null},"msql_affected_rows":{"s":"Returns number of affected rows","y":"int msql_affected_rows\n    ( resource $result\n   )","r":"Returns the number of affected rows on success, or FALSE on error.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_close":{"s":"Close mSQL connection","y":"bool msql_close\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_connect":{"s":"Open mSQL connection","y":"resource msql_connect\n    ([ string $hostname\n  ] )","r":"Returns a positive mSQL link identifier on success, or FALSE on\n   error.","p":[{"t":"hostname","d":"The hostname can also include a port number. e.g. \n       hostname,port."}]},"msql_createdb":{"s":"Alias of msql_create_db()","y":"","r":"","p":null},"msql_create_db":{"s":"Create mSQL database","y":"bool msql_create_db\n     ( string $database_name\n    [, resource $link_identifier\n   ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the mSQL database."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_data_seek":{"s":"Move internal row pointer","y":"bool msql_data_seek\n    ( resource $result\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"row_number","d":"The seeked row number."}]},"msql_dbname":{"s":"Alias of msql_result()","y":"","r":"","p":null},"msql_db_query":{"s":"Send mSQL query","y":"resource msql_db_query\n    ( string $database\n   , string $query\n   [, resource $link_identifier\n  ] )","r":" \n   Returns a positive mSQL query identifier to the query result, or FALSE\n   on error.","p":[{"t":"database","d":"The name of the mSQL database."},{"t":"query","d":"The SQL query."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_drop_db":{"s":"Drop (delete) mSQL database","y":"bool msql_drop_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the database."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_error":{"s":"Returns error message of last msql call","y":"string msql_error\n    ( void\n   )","r":"The last error message or an empty string if no error was issued.","p":null},"msql_fetch_array":{"s":"Fetch row as array","y":"array msql_fetch_array\n    ( resource $result\n   [, int $result_type\n  ] )","r":"Returns an array that corresponds to the fetched row, or FALSE if\n   there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"result_type","d":"A constant that can take the following values: \n       MSQL_ASSOC, MSQL_NUM, and\n       MSQL_BOTH with MSQL_BOTH being\n       the default."}]},"msql_fetch_field":{"s":"Get field information","y":"object msql_fetch_field\n    ( resource $result\n   [, int $field_offset = 0\n  ] )","r":"Returns an object containing field information. The properties of the \n   object are:\n   \n    \n     \n      name - column name","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The field offset. If not specified, the next field that wasn&#039;t yet\n       retrieved by msql_fetch_field() is retrieved."}]},"msql_fetch_object":{"s":"Fetch row as object","y":"object msql_fetch_object\n    ( resource $result\n   \n   )","r":"Returns an object with properties that correspond to the fetched\n   row, or FALSE if there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_fetch_row":{"s":"Get row as enumerated array","y":"array msql_fetch_row\n    ( resource $result\n   \n   )","r":"Returns an array that corresponds to the fetched row, or FALSE if\n   there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_fieldflags":{"s":"Alias of msql_field_flags()","y":"","r":"","p":null},"msql_fieldlen":{"s":"Alias of msql_field_len()","y":"","r":"","p":null},"msql_fieldname":{"s":"Alias of msql_field_name()","y":"","r":"","p":null},"msql_fieldtable":{"s":"Alias of msql_field_table()","y":"","r":"","p":null},"msql_fieldtype":{"s":"Alias of msql_field_type()","y":"","r":"","p":null},"msql_field_flags":{"s":"Get field flags","y":"string msql_field_flags\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns a string containing the field flags of the specified key.\n   This can be: primary key not null,\n   not null, primary key, \n   unique not null or unique. ","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_field_len":{"s":"Get field length","y":"int msql_field_len\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns the length of the specified field or FALSE on error.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_field_name":{"s":"Get the name of the specified field in a result","y":"string msql_field_name\n    ( resource $result\n   , int $field_offset\n   )","r":"The name of the field or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_field_seek":{"s":"Set field offset","y":"bool msql_field_seek\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_field_table":{"s":"Get table name for field","y":"int msql_field_table\n    ( resource $result\n   , int $field_offset\n   )","r":"The name of the table on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_field_type":{"s":"Get field type","y":"string msql_field_type\n    ( resource $result\n   , int $field_offset\n   )","r":"The type of the field. One of int, \n   char, real, ident,\n   null or unknown. This functions will\n   return FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 1."}]},"msql_free_result":{"s":"Free result memory","y":"bool msql_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_list_dbs":{"s":"List mSQL databases on server","y":"resource msql_list_dbs\n    ([ resource $link_identifier\n  ] )","r":"Returns a result set which may be traversed with any function that fetches\n   result sets, such as msql_fetch_array(). On failure, \n   this function will return FALSE.","p":[{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_list_fields":{"s":"List result fields","y":"resource msql_list_fields\n    ( string $database\n   , string $tablename\n   [, resource $link_identifier\n  ] )","r":"Returns a result set which may be traversed with any function that fetches\n   result sets, such as msql_fetch_array(). On failure, \n   this function will return FALSE.","p":[{"t":"database","d":"The name of the database."},{"t":"tablename","d":"The name of the table."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_list_tables":{"s":"List tables in an mSQL database","y":"resource msql_list_tables\n    ( string $database\n   [, resource $link_identifier\n  ] )","r":"Returns a result set which may be traversed with any function that fetches\n   result sets, such as msql_fetch_array(). On failure, \n   this function will return FALSE.","p":[{"t":"database","d":"The name of the database."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_numfields":{"s":"Alias of msql_num_fields()","y":"","r":"","p":null},"msql_numrows":{"s":"Alias of msql_num_rows()","y":"","r":"","p":null},"msql_num_fields":{"s":"Get number of fields in result","y":"int msql_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields in the result set.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_num_rows":{"s":"Get number of rows in result","y":"int msql_num_rows\n    ( resource $query_identifier\n   )","r":"Returns the number of rows in the result set.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."}]},"msql_pconnect":{"s":"Open persistent mSQL connection","y":"resource msql_pconnect\n    ([ string $hostname\n  ] )","r":"Returns a positive mSQL link identifier on success, or FALSE on\n   error.","p":[{"t":"hostname","d":"The hostname can also include a port number. e.g. \n       hostname,port."}]},"msql_query":{"s":"Send mSQL query","y":"resource msql_query\n    ( string $query\n   [, resource $link_identifier\n  ] )","r":"Returns a positive mSQL query identifier on success, or FALSE on\n   error.","p":[{"t":"query","d":"The SQL query."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_regcase":{"s":"Alias of sql_regcase()","y":"","r":"","p":null},"msql_result":{"s":"Get result data","y":"string msql_result\n    ( resource $result\n   , int $row\n   [, mixed $field\n  ] )","r":"Returns the contents of the cell at the row and offset in the\n   specified mSQL result set.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmsql_query()."},{"t":"row","d":"The row offset."},{"t":"field","d":"Can be the field&#039;s offset, or the field&#039;s name, or the field&#039;s table\n       dot field&#039;s name (tablename.fieldname.). If the column name has been \n       aliased (&#039;select foo as bar from ...&#039;), use the alias instead of the\n       column name."}]},"msql_select_db":{"s":"Select mSQL database","y":"bool msql_select_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name."},{"t":"link_identifier","d":"The mSQL connection.\nIf not specified, the last link opened by msql_connect()\nis assumed. If no such link is found, the function will try to establish a\nlink as if msql_connect() was called, and use it."}]},"msql_tablename":{"s":"Alias of msql_result()","y":"","r":"","p":null},"mssql_bind":{"s":"Adds a parameter to a stored procedure or a remote stored procedure","y":"bool mssql_bind\n    ( resource $stmt\n   , string $param_name\n   , mixed &$var\n   , int $type\n   [, bool $is_output = false\n   [, bool $is_null = false\n   [, int $maxlen = -1\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Statement resource, obtained with mssql_init()."},{"t":"param_name","d":"The parameter name, as a string."},{"t":"var","d":"The PHP variable you&#039;ll bind the MSSQL parameter to. It is passed by\n       reference, to retrieve OUTPUT and RETVAL values after\n       the procedure execution."},{"t":"type","d":"One of: SQLTEXT,\n       SQLVARCHAR, SQLCHAR,\n       SQLINT1, SQLINT2,\n       SQLINT4, SQLBIT,\n       SQLFLT4, SQLFLT8,\n       SQLFLTN."},{"t":"is_output","d":"Whether the value is an OUTPUT parameter or not. If it&#039;s an OUTPUT\n       parameter and you don&#039;t mention it, it will be treated as a normal\n       input parameter and no error will be thrown."},{"t":"is_null","d":"Whether the parameter is NULL or not. Passing the NULL value as\n       var will not do the job."},{"t":"maxlen","d":"Used with char\/varchar values. You have to indicate the length of the\n       data so if the parameter is a varchar(50), the type must be\n       SQLVARCHAR and this value 50."}]},"mssql_close":{"s":"Close MS SQL Server connection","y":"bool mssql_close\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"A MS SQL link identifier, returned by\n       mssql_connect()."}]},"mssql_connect":{"s":"Open MS SQL server connection","y":"resource mssql_connect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, bool $new_link = false\n  ]]]] )","r":"Returns a MS SQL link identifier on success, or FALSE on error.","p":[{"t":"servername","d":"The MS SQL server. It can also include a port number, e.g.\n       hostname:port (Linux), or \n       hostname,port (Windows)."},{"t":"username","d":"The username."},{"t":"password","d":"The password."},{"t":"new_link","d":"If a second call is made to mssql_connect() with the\n       same arguments, no new link will be established, but instead, the link\n       identifier of the already opened link will be returned. This parameter\n       modifies this behavior and makes mssql_connect()\n       always open a new link, even if mssql_connect() was\n       called before with the same parameters."}]},"mssql_data_seek":{"s":"Moves internal row pointer","y":"bool mssql_data_seek\n    ( resource $result_identifier\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_identifier","d":"The result resource that is being evaluated."},{"t":"row_number","d":"The desired row number of the new result pointer."}]},"mssql_execute":{"s":"Executes a stored procedure on a MS SQL server database","y":"mixed mssql_execute\n    ( resource $stmt\n   [, bool $skip_results = false\n  ] )","r":"","p":[{"t":"stmt","d":"Statement handle obtained with mssql_init()."},{"t":"skip_results","d":"Whenever to skip the results or not."}]},"mssql_fetch_array":{"s":"Fetch a result row as an associative array, a numeric array, or both","y":"array mssql_fetch_array\n    ( resource $result\n   [, int $result_type = MSSQL_BOTH\n  ] )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"result_type","d":"The type of array that is to be fetched. It&#039;s a constant and can take\n       the following values: MSSQL_ASSOC, \n       MSSQL_NUM, and\n       MSSQL_BOTH."}]},"mssql_fetch_assoc":{"s":"Returns an associative array of the current row in the result","y":"array mssql_fetch_assoc\n    ( resource $result_id\n   )","r":"Returns an associative array that corresponds to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result_id","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_fetch_batch":{"s":"Returns the next batch of records","y":"int mssql_fetch_batch\n    ( resource $result\n   )","r":"Returns the number of rows in the returned batch.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_fetch_field":{"s":"Get field information","y":"object mssql_fetch_field\n    ( resource $result\n   [, int $field_offset = -1\n  ] )","r":"Returns an object containing field information.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"field_offset","d":"The numerical field offset. If the field offset is not specified, the\n       next field that was not yet retrieved by this function is retrieved. The\n       field_offset starts at 0."}]},"mssql_fetch_object":{"s":"Fetch row as object","y":"object mssql_fetch_object\n    ( resource $result\n   )","r":"Returns an object with properties that correspond to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_fetch_row":{"s":"Get row as enumerated array","y":"array mssql_fetch_row\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_field_length":{"s":"Get the length of a field","y":"int mssql_field_length\n    ( resource $result\n   [, int $offset = -1\n  ] )","r":"The length of the specified field index on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"offset","d":"The field offset, starts at 0. If omitted, the current field is used."}]},"mssql_field_name":{"s":"Get the name of a field","y":"string mssql_field_name\n    ( resource $result\n   [, int $offset = -1\n  ] )","r":"The name of the specified field index on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"offset","d":"The field offset, starts at 0. If omitted, the current field is used."}]},"mssql_field_seek":{"s":"Seeks to the specified field offset","y":"bool mssql_field_seek\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"field_offset","d":"The field offset, starts at 0."}]},"mssql_field_type":{"s":"Gets the type of a field","y":"string mssql_field_type\n    ( resource $result\n   [, int $offset = -1\n  ] )","r":"The type of the specified field index on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"offset","d":"The field offset, starts at 0. If omitted, the current field is used."}]},"mssql_free_result":{"s":"Free result memory","y":"bool mssql_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that is being freed. This result comes from a\n       call to mssql_query()."}]},"mssql_free_statement":{"s":"Free statement memory","y":"bool mssql_free_statement\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Statement resource, obtained with mssql_init()."}]},"mssql_get_last_message":{"s":"Returns the last message from the server","y":"string mssql_get_last_message\n    ( void\n   )","r":"Returns last error message from server, or an empty string if \n   no error messages are returned from MSSQL.","p":null},"mssql_guid_string":{"s":"Converts a 16 byte binary GUID to a string","y":"string mssql_guid_string\n    ( string $binary\n   [, bool $short_format = false\n  ] )","r":"Returns the converted string on success.","p":[{"t":"binary","d":"A 16 byte binary GUID."},{"t":"short_format","d":"Whenever to use short format."}]},"mssql_init":{"s":"Initializes a stored procedure or a remote stored procedure","y":"resource mssql_init\n    ( string $sp_name\n   [, resource $link_identifier\n  ] )","r":"Returns a resource identifier &quot;statement&quot;, used in subsequent calls to\n   mssql_bind() and mssql_execute(),\n   or FALSE on errors. ","p":[{"t":"sp_name","d":"Stored procedure name, like ownew.sp_name or\n       otherdb.owner.sp_name."},{"t":"link_identifier","d":"A MS SQL link identifier, returned by \n       mssql_connect()."}]},"mssql_min_error_severity":{"s":"Sets the minimum error severity","y":"void mssql_min_error_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":"The new error severity."}]},"mssql_min_message_severity":{"s":"Sets the minimum message severity","y":"void mssql_min_message_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":"The new message severity."}]},"mssql_next_result":{"s":"Move the internal result pointer to the next result","y":"bool mssql_next_result\n    ( resource $result_id\n   )","r":"Returns TRUE if an additional result set was available or FALSE\n   otherwise.","p":[{"t":"result_id","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_num_fields":{"s":"Gets the number of fields in result","y":"int mssql_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields, as an integer.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_num_rows":{"s":"Gets the number of rows in result","y":"int mssql_num_rows\n    ( resource $result\n   )","r":"Returns the number of rows, as an integer.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."}]},"mssql_pconnect":{"s":"Open persistent MS SQL connection","y":"resource mssql_pconnect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, bool $new_link = false\n  ]]]] )","r":"Returns a positive MS SQL persistent link identifier on success, or\n   FALSE on error.","p":[{"t":"servername","d":"The MS SQL server. It can also include a port number. e.g. \n       hostname:port."},{"t":"username","d":"The username."},{"t":"password","d":"The password."},{"t":"new_link","d":"If a second call is made to mssql_pconnect() with\n       the same arguments, no new link will be established, but instead, the\n       link identifier of the already opened link will be returned. This\n       parameter modifies this behavior and makes\n       mssql_pconnect() always open a new link, even if\n       mssql_pconnect() was called before with the same\n       parameters."}]},"mssql_query":{"s":"Send MS SQL query","y":"mixed mssql_query\n    ( string $query\n   [, resource $link_identifier\n   [, int $batch_size = 0\n  ]] )","r":"Returns a MS SQL result resource on success, TRUE if no rows were\n   returned, or FALSE on error.","p":[{"t":"query","d":"An SQL query."},{"t":"link_identifier","d":"A MS SQL link identifier, returned by \n       mssql_connect() or \n       mssql_pconnect()."},{"t":"batch_size","d":"The number of records to batch in the buffer."}]},"mssql_result":{"s":"Get result data","y":"string mssql_result\n    ( resource $result\n   , int $row\n   , mixed $field\n   )","r":"Returns the contents of the specified cell.","p":[{"t":"result","d":"The result resource that is being evaluated. This result comes from a\n       call to mssql_query()."},{"t":"row","d":"The row number."},{"t":"field","d":"Can be the field&#039;s offset, the field&#039;s name or the field&#039;s table dot\n       field&#039;s name (tablename.fieldname). If the column name has been\n       aliased (&#039;select foo as bar from...&#039;), it uses the alias instead of\n       the column name."}]},"mssql_rows_affected":{"s":"Returns the number of records affected by the query","y":"int mssql_rows_affected\n    ( resource $link_identifier\n   )","r":"Returns the number of records affected by last operation.","p":[{"t":"link_identifier","d":"A MS SQL link identifier, returned by\n       mssql_connect() or\n       mssql_pconnect()."}]},"mssql_select_db":{"s":"Select MS SQL database","y":"bool mssql_select_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The database name."},{"t":"link_identifier","d":"A MS SQL link identifier, returned by\n       mssql_connect() or\n       mssql_pconnect()."}]},"mt_getrandmax":{"s":"Show largest possible random value","y":"int mt_getrandmax\n     ( void\n    )","r":"Returns the maximum random value returned by mt_rand()","p":null},"mt_rand":{"s":"Generate a better random value","y":"int mt_rand\n    ( void\n   )","r":"A random integer value between min (or 0)\n   and max (or mt_getrandmax(), inclusive),\n   or FALSE if max is less than min.","p":[{"t":"min","d":"Optional lowest value to be returned (default: 0)"},{"t":"max","d":"Optional highest value to be returned (default: mt_getrandmax())"}]},"mt_srand":{"s":"Seed the better random number generator","y":"void mt_srand\n     ([ int $seed\n   ] )","r":"No value is returned.","p":[{"t":"seed","d":"An optional seed value"}]},"mysqli_bind_param":{"s":"Binds variables to a prepared statement as parameters","y":"bool mysqli_stmt::bind_param\n    ( string $types\n   , mixed &$var1\n   [, mixed &$...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."},{"t":"types","d":"A string that contains one or more characters which specify the types\n       for the corresponding bind variables:\n       \n        Type specification chars\n        \n         \n          \n           Character\n           Description\n          \n\n         \n\n         \n          \n           i\n           corresponding variable has type integer\n          \n\n          \n           d\n           corresponding variable has type double\n          \n\n          \n           s\n           corresponding variable has type string\n          \n\n          \n           b\n           corresponding variable is a blob and will be sent in packets"},{"t":"var1","d":"The number of variables and length of string \n       types must match the parameters in the statement."}]},"mysqli_bind_result":{"s":"Binds variables to a prepared statement for result storage","y":"bool mysqli_stmt::bind_result\n    ( mixed &$var1\n   [, mixed &$...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."},{"t":"var1","d":"The variable to be bound."}]},"mysqli_client_encoding":{"s":"Returns the default character set for the database connection","y":"string mysqli::character_set_name\n    ( void\n   )","r":"The default character set for the current connection","p":[{"t":"link","d":"Procedural style only: A link identifier\nreturned by mysqli_connect() or mysqli_init()"}]},"mysqli_connect":{"s":"Open a new connection to the MySQL server","y":"","r":"Returns an object which represents the connection to a MySQL Server.","p":[{"t":"host","d":"Can be either a host name or an IP address. Passing the NULL value\n       or the string &quot;localhost&quot; to this parameter, the local host is\n       assumed. When possible, pipes will be used instead of the TCP\/IP\n       protocol."},{"t":"username","d":"The MySQL user name."},{"t":"passwd","d":"If not provided or NULL, the MySQL server will attempt to authenticate\n       the user against those user records which have no password only. This\n       allows one username to be used with different permissions (depending\n       on if a password as provided or not)."},{"t":"dbname","d":"If provided will specify the default database to be used when\n       performing queries."},{"t":"port","d":"Specifies the port number to attempt to connect to the MySQL server."},{"t":"socket","d":"Specifies the socket or named pipe that should be used."}]},"mysqli_disable_reads_from_master":{"s":"Disable reads from master","y":"void mysqli::disable_reads_from_master\n    ( void\n   )","r":"","p":null},"mysqli_disable_rpl_parse":{"s":"Disable RPL parse","y":"bool mysqli_disable_rpl_parse\n    ( mysqli $link\n   )","r":"","p":null},"mysqli_enable_reads_from_master":{"s":"Enable reads from master","y":"bool mysqli_enable_reads_from_master\n    ( mysqli $link\n   )","r":"","p":null},"mysqli_enable_rpl_parse":{"s":"Enable RPL parse","y":"bool mysqli_enable_rpl_parse\n    ( mysqli $link\n   )","r":"","p":null},"mysqli_escape_string":{"s":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","y":"string mysqli::escape_string\n    ( string $escapestr\n   )","r":"Returns an escaped string.","p":[{"t":"link","d":"Procedural style only: A link identifier\nreturned by mysqli_connect() or mysqli_init()"},{"t":"escapestr","d":"The string to be escaped."}]},"mysqli_execute":{"s":"Executes a prepared Query","y":"bool mysqli_stmt::execute\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."}]},"mysqli_fetch":{"s":"Fetch results from a prepared statement into the bound variables","y":"bool mysqli_stmt::fetch\n    ( void\n   )","r":"","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."}]},"mysqli_get_cache_stats":{"s":"Returns client Zval cache statistics","y":"array mysqli_get_cache_stats\n    ( void\n   )","r":"Returns an array with client Zval cache stats if success, FALSE otherwise.","p":null},"mysqli_get_metadata":{"s":"Returns result set metadata from a prepared statement","y":"mysqli_result mysqli_stmt::result_metadata\n    ( void\n   )","r":"Returns a result object or FALSE if an error occurred.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."}]},"mysqli_master_query":{"s":"Enforce execution of a query on the master in a master\/slave setup","y":"bool mysqli_master_query\n    ( mysqli $link\n   , string $query\n   )","r":"","p":null},"mysqli_param_count":{"s":"Returns the number of parameter for the given statement","y":"","r":"Returns an integer representing the number of parameters.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."}]},"mysqli_report":{"s":"Enables or disables internal report functions","y":"","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"flags","d":"Supported flags\n        \n         \n          \n           Name\n           Description\n          \n\n         \n\n         \n          \n           MYSQLI_REPORT_OFF\n           Turns reporting off\n          \n\n          \n           MYSQLI_REPORT_ERROR\n           Report errors from mysqli function calls\n          \n\n          \n           MYSQLI_REPORT_STRICT\n           \n            Throw mysqli_sql_exception for errors\n            instead of warnings\n           \n          \n\n          \n           MYSQLI_REPORT_INDEX\n           Report if no index or bad index was used in a query\n          \n\n          \n           MYSQLI_REPORT_ALL\n           Set all options (report all)"}]},"mysqli_rpl_parse_enabled":{"s":"Check if RPL parse is enabled","y":"int mysqli_rpl_parse_enabled\n    ( mysqli $link\n   )","r":"","p":null},"mysqli_rpl_probe":{"s":"RPL probe","y":"bool mysqli_rpl_probe\n    ( mysqli $link\n   )","r":"","p":null},"mysqli_send_long_data":{"s":"Send data in blocks","y":"bool mysqli_stmt::send_long_data\n    ( int $param_nr\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"Procedural style only: A statement identifier\nreturned by mysqli_stmt_init()."},{"t":"param_nr","d":"Indicates which parameter to associate the data with. Parameters are\n       numbered beginning with 0."},{"t":"data","d":"A string containing data to be sent."}]},"mysqli_set_opt":{"s":"Set options","y":"bool mysqli::options\n    ( int $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link","d":"Procedural style only: A link identifier\nreturned by mysqli_connect() or mysqli_init()"},{"t":"option","d":"The option that you want to set. It can be one of the following values:\n       \n        Valid options\n        \n         \n          \n           Name\n           Description\n          \n\n         \n\n         \n          \n           MYSQLI_OPT_CONNECT_TIMEOUT\n           connection timeout in seconds (supported on Windows with TCP\/IP since PHP 5.3.1)\n          \n\n          \n           MYSQLI_OPT_LOCAL_INFILE\n           enable\/disable use of LOAD LOCAL INFILE\n          \n\n          \n           MYSQLI_INIT_COMMAND\n           command to execute after when connecting to MySQL server\n          \n\n          \n           MYSQLI_READ_DEFAULT_FILE\n           \n            Read options from named option file instead of my.cnf\n           \n          \n\n          \n           MYSQLI_READ_DEFAULT_GROUP\n           \n            Read options from the named group from my.cnf\n            or the file specified with MYSQL_READ_DEFAULT_FILE.\n           \n          \n\n          \n           MYSQLI_SERVER_PUBLIC_KEY\n           \n             RSA public key file used with the SHA-256 based authentication."},{"t":"value","d":"The value for the option."}]},"mysqli_slave_query":{"s":"Force execution of a query on a slave in a master\/slave setup","y":"bool mysqli_slave_query\n    ( mysqli $link\n   , string $query\n   )","r":"","p":null},"mysqlnd_memcache_get_config":{"s":"Returns information about the plugin configuration","y":"array \n   mysqlnd_memcache_get_config\n    ( mixed $connection\n   )","r":"An array of mysqlnd_memcache configuration information on success, otherwise FALSE.","p":[{"t":"connection","d":"A handle to a MySQL Server using one of the MySQL API extensions for PHP, which are\n      PDO_MYSQL, mysqli or\n      ext\/mysql."}]},"mysqlnd_memcache_set":{"s":"Associate a MySQL connection with a Memcache connection","y":"bool \n   mysqlnd_memcache_set\n    ( mixed $mysql_connection\n   [, Memcached $memcache_connection\n   [, string $pattern\n   [, callback $callback\n  ]]] )","r":"TRUE if the association or disassociation is successful, otherwise FALSE if there\n   is an error.","p":[{"t":"mysql_connection","d":"A handle to a MySQL Server using one of the MySQL API extensions for PHP, which are\n      PDO_MYSQL, mysqli or\n      ext\/mysql."},{"t":"memcache_connection","d":"A Memcached instance with a \n      connection to the MySQL Memcache Daemon plugin. If this parameter\n      is omitted, then mysql_connection will be unassociated\n      from any memcache connection. And if a previous association exists, then it will be\n      replaced."},{"t":"pattern","d":"A regular expression in Perl Compatible\n      Regular Expression syntax used to identify potential\n      Memcache-queries. The query should have three sub patterns. The\n      first subpattern contains the requested field list, the second the name\n      of the ID column from the query and the third the requested value. If\n      this parameter is omitted or os set to NULL, then a default\n      pattern will be used."},{"t":"callback","d":"A callback which will be used whenever a query is being sent to \n      MySQL. The callback will receive a single boolean parameter\n      telling if a query was sent via Memcache."}]},"mysqlnd_ms_get_last_gtid":{"s":"Returns the latest global transaction ID","y":"string \n   mysqlnd_ms_get_last_gtid\n    ( mixed $connection\n   )","r":"Returns a global transaction ID (GTID) on success.\n   Otherwise, returns FALSE.","p":[{"t":"connection","d":"A PECL\/mysqlnd_ms connection handle to a MySQL server of the type\n      PDO_MYSQL, mysqli&gt; or\n      ext\/mysql.\n      The connection handle is obtained when opening a connection with\n      a host name that matches a mysqlnd_ms configuration file\n      entry using any of the above three MySQL driver extensions."}]},"mysqlnd_ms_get_last_used_connection":{"s":"Returns an array which describes the last used connection","y":"array \n   mysqlnd_ms_get_last_used_connection\n    ( mixed $connection\n   )","r":"FALSE on error. Otherwise, an\n   array which describes the connection used to\n   execute the last statement on.","p":[{"t":"connection","d":"A MySQL connection handle obtained from any of the\n      connect functions of the mysqli,\n      mysql or\n      PDO_MYSQL extensions."}]},"mysqlnd_ms_get_stats":{"s":"Returns query distribution and connection statistics","y":"array \n   mysqlnd_ms_get_stats\n    ( void\n   )","r":"Returns NULL if\n   the PHP configuration directive\n   mysqlnd_ms.enable\n   has disabled the plugin. Otherwise, returns array of statistics.","p":null},"mysqlnd_ms_match_wild":{"s":"Finds whether a table name matches a wildcard pattern or not","y":"bool \n   mysqlnd_ms_match_wild\n    ( string $table_name\n   , string $wildcard\n   )","r":"Returns TRUE table_name is\n   matched by wildcard.\n   Otherwise, returns FALSE","p":[{"t":"table_name","d":"The table name to check if it is matched by the wildcard."},{"t":"wildcard","d":"The wildcard pattern to check against the table name.\n      The wildcard pattern supports the same placeholders as\n      MySQL replication filters do."}]},"mysqlnd_ms_query_is_select":{"s":"Find whether to send the query to the master, the slave or the last used MySQL server","y":"int \n   mysqlnd_ms_query_is_select\n    ( string $query\n   )","r":"A return value of MYSQLND_MS_QUERY_USE_MASTER\n   indicates that the query should be send to the MySQL replication\n   master server. The function returns a value of\n   MYSQLND_MS_QUERY_USE_SLAVE if the query can be run\n   on a slave because it is considered read-only. A value of\n   MYSQLND_MS_QUERY_USE_LAST_USED is returned to recommend\n   running the query on the last used server. This can either be a MySQL\n   replication master server or a MySQL replication slave server.","p":[{"t":"query","d":"Query string to test."}]},"mysqlnd_ms_set_qos":{"s":"Sets the quality of service needed from the cluster","y":"bool \n   mysqlnd_ms_set_qos\n    ( mixed $connection\n   , int $service_level\n   [, int $service_level_option\n   [, mixed $option_value\n  ]] )","r":"Returns TRUE if the connections service level\n   has been switched to the requested. Otherwise, returns FALSE","p":[{"t":"connection","d":"A PECL\/mysqlnd_ms connection handle to a MySQL server of the type\n      PDO_MYSQL, mysqli or\n      ext\/mysql for which a service level is to be set.\n      The connection handle is obtained when opening a connection with\n      a host name that matches a mysqlnd_ms configuration file\n      entry using any of the above three MySQL driver extensions."},{"t":"service_level","d":"The requested service level: MYSQLND_MS_QOS_CONSISTENCY_EVENTUAL,\n      MYSQLND_MS_QOS_CONSISTENCY_SESSION or\n      MYSQLND_MS_QOS_CONSISTENCY_STRONG."},{"t":"service_level_option","d":"An option to parameterize the requested service level.\n      The option can either be MYSQLND_MS_QOS_OPTION_GTID\n      or MYSQLND_MS_QOS_OPTION_AGE."},{"t":"option_value","d":"Parameter value for the service level option. See also the\n      service_level_option parameter."}]},"mysqlnd_ms_set_user_pick_server":{"s":"Sets a callback for user-defined read\/write splitting","y":"bool \n   mysqlnd_ms_set_user_pick_server\n    ( string $function\n   )","r":"Host to run the query on. The host URI is to be taken from the\n   master and slave connection lists passed to the callback function.\n   If callback returns a value neither found in the master nor in the slave\n   connection lists the plugin will fallback to the second pick method configured\n   via the pick[] setting in the plugin configuration file.\n   If not second pick method is given, the plugin falls back to the build-in\n   default pick method for server selection.","p":[{"t":"function","d":"The function to be called. Class methods may also be invoked\n      statically using this function by passing\n      array($classname, $methodname) to this parameter.\n      Additionally class methods of an object instance may be called by passing\n      array($objectinstance, $methodname) to this parameter."}]},"mysqlnd_qc_clear_cache":{"s":"Flush all cache contents","y":"bool \n   mysqlnd_qc_clear_cache\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"mysqlnd_qc_get_available_handlers":{"s":"Returns a list of available storage handler","y":"array \n   mysqlnd_qc_get_available_handlers\n    ( void\n   )","r":"Returns an array of available built-in storage handler.\n   For each storage handler the version number and version string\n   is given.","p":null},"mysqlnd_qc_get_cache_info":{"s":"Returns information on the current handler, the number of cache entries and cache entries, if available","y":"array \n   mysqlnd_qc_get_cache_info\n    ( void\n   )","r":"Returns information on the current handler, the number of cache entries and\n   cache entries, if available. If and what data will be returned for the cache\n   entries is subject to the active storage handler.\n   Storage handler are free to return any data. Storage handler are\n   recommended to return at least the data provided by the default handler,\n   if technically possible.","p":null},"mysqlnd_qc_get_core_stats":{"s":"Statistics collected by the core of the query cache","y":"array \n   mysqlnd_qc_get_core_stats\n    ( void\n   )","r":"Array of core statistics","p":null},"mysqlnd_qc_get_normalized_query_trace_log":{"s":"Returns a normalized query trace log for each query inspected by the query cache","y":"array \n   mysqlnd_qc_get_normalized_query_trace_log\n    ( void\n   )","r":"An array of query log. Every list entry contains\n   the normalized query stringand further detail information.","p":null},"mysqlnd_qc_get_query_trace_log":{"s":"Returns a backtrace for each query inspected by the query cache","y":"array \n   mysqlnd_qc_get_query_trace_log\n    ( void\n   )","r":"An array of query backtrace. Every list entry contains\n   the query string, a backtrace and further detail information.","p":null},"mysqlnd_qc_set_cache_condition":{"s":"Set conditions for automatic caching","y":"bool \n   mysqlnd_qc_set_cache_condition\n    ( \n    int\n     $condition_type\n   \n   , \n    mixed\n     $condition\n   \n   , \n    mixed\n     $condition_option\n   \n   )","r":"Returns TRUE on success or FALSE on FAILURE.","p":[{"t":"condition_type","d":"Type of the condition. The only allowed value is\n      MYSQLND_QC_CONDITION_META_SCHEMA_PATTERN."},{"t":"condition","d":"Parameter for the condition set with condition_type.\n      Parameter type and structure depend on condition_type"},{"t":"condition_option","d":"Option for condition. Type and structure depend\n      on condition_type."}]},"mysqlnd_qc_set_is_select":{"s":"Installs a callback which decides whether a statement is cached","y":"mixed \n   mysqlnd_qc_set_is_select\n    ( \n    string\n     $callback\n   \n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"mysqlnd_qc_set_storage_handler":{"s":"Change current storage handler","y":"bool \n   mysqlnd_qc_set_storage_handler\n    ( \n    string\n     $handler\n   \n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handler","d":"Handler can be of type string representing the name of a\n      built-in storage handler or an object of type\n      mysqlnd_qc_handler_default.\n      The names of the built-in storage handler are\n      default,\n      APC,\n      MEMCACHE,\n      sqlite."}]},"mysqlnd_qc_set_user_handlers":{"s":"Sets the callback functions for a user-defined procedural storage handler","y":"bool \n   mysqlnd_qc_set_user_handlers\n    ( \n    string\n     $get_hash\n   \n   , \n    string\n     $find_query_in_cache\n   \n   , \n    string\n     $return_to_cache\n   \n   , \n    string\n     $add_query_to_cache_if_not_exists\n   \n   , \n    string\n     $query_is_select\n   \n   , \n    string\n     $update_query_run_time_stats\n   \n   , \n    string\n     $get_stats\n   \n   , \n    string\n     $clear_cache\n   \n   )","r":"Returns TRUE on success or FALSE on FAILURE.","p":[{"t":"get_hash","d":"Name of the user function implementing the storage handler\n      get_hash functionality."},{"t":"find_query_in_cache","d":"Name of the user function implementing the storage handler\n      find_in_cache functionality."},{"t":"return_to_cache","d":"Name of the user function implementing the storage handler\n      return_to_cache functionality."},{"t":"add_query_to_cache_if_not_exists","d":"Name of the user function implementing the storage handler\n      add_query_to_cache_if_not_exists functionality."},{"t":"query_is_select","d":"Name of the user function implementing the storage handler\n      query_is_select functionality."},{"t":"update_query_run_time_stats","d":"Name of the user function implementing the storage handler\n      update_query_run_time_stats functionality."},{"t":"get_stats","d":"Name of the user function implementing the storage handler\n      get_stats functionality."},{"t":"clear_cache","d":"Name of the user function implementing the storage handler\n      clear_cache functionality."}]},"mysqlnd_uh_convert_to_mysqlnd":{"s":"Converts a MySQL connection handle into a mysqlnd connection handle","y":"resource \n   mysqlnd_uh_convert_to_mysqlnd\n    ( mysqli &$mysql_connection\n   )","r":"A mysqlnd connection handle.","p":[{"t":"MySQL connection handle","d":"A MySQL connection handle of type mysql, mysqli or PDO_MySQL."}]},"mysqlnd_uh_set_connection_proxy":{"s":"Installs a proxy for mysqlnd connections","y":"bool mysqlnd_uh_set_connection_proxy\n    ( MysqlndUhConnection &$connection_proxy\n   [, mysqli &$mysqli_connection\n  ] )","r":"Returns TRUE on success.\n   Otherwise, returns FALSE","p":[{"t":"connection_proxy","d":"A proxy object of type MysqlndUhConnection."},{"t":"mysqli_connection","d":"Object of type mysqli.\n      If given, the proxy will be set for this particular connection only."}]},"mysqlnd_uh_set_statement_proxy":{"s":"Installs a proxy for mysqlnd statements","y":"bool mysqlnd_uh_set_statement_proxy\n    ( MysqlndUhStatement &$statement_proxy\n   )","r":"Returns TRUE on success.\n   Otherwise, returns FALSE","p":[{"t":"statement_proxy","d":"The mysqlnd statement proxy object of type MysqlndUhStatement"}]},"mysql_affected_rows":{"s":"Get number of affected rows in previous MySQL operation","y":"int mysql_affected_rows\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the number of affected rows on success, and -1 if the last query\n   failed.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_client_encoding":{"s":"Returns the name of the character set","y":"string mysql_client_encoding\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the default character set name for the current connection.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_close":{"s":"Close MySQL connection","y":"bool mysql_close\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no connection is found or\nestablished, an E_WARNING level error is\ngenerated."}]},"mysql_connect":{"s":"Open a connection to a MySQL Server","y":"resource mysql_connect\n    ([ string $server = ini_get(&quot;mysql.default_host&quot;)\n   [, string $username = ini_get(&quot;mysql.default_user&quot;)\n   [, string $password = ini_get(&quot;mysql.default_password&quot;)\n   [, bool $new_link = false\n   [, int $client_flags = 0\n  ]]]]] )","r":"Returns a MySQL link identifier on success or FALSE on failure.","p":[{"t":"server","d":"The MySQL server. It can also include a port number. e.g. \n       &quot;hostname:port&quot; or a path to a local socket e.g. &quot;:\/path\/to\/socket&quot; for \n       the localhost."},{"t":"username","d":"The username. Default value is defined by mysql.default_user. In\n       SQL safe mode, this parameter is ignored and the name of the user that\n       owns the server process is used."},{"t":"password","d":"The password. Default value is defined by mysql.default_password. In\n       SQL safe mode, this parameter is ignored and empty password is used."},{"t":"new_link","d":"If a second call is made to mysql_connect()\n       with the same arguments, no new link will be established, but\n       instead, the link identifier of the already opened link will be\n       returned. The new_link parameter modifies this \n       behavior and makes mysql_connect() always open \n       a new link, even if mysql_connect() was called \n       before with the same parameters.\n       In SQL safe mode, this parameter is ignored."},{"t":"client_flags","d":"The client_flags parameter can be a combination \n       of the following constants:\n       128 (enable LOAD DATA LOCAL handling),\n       MYSQL_CLIENT_SSL,\n       MYSQL_CLIENT_COMPRESS, \n       MYSQL_CLIENT_IGNORE_SPACE or\n       MYSQL_CLIENT_INTERACTIVE.\n       Read the section about MySQL client constants for further information.\n       In SQL safe mode, this parameter is ignored."}]},"mysql_create_db":{"s":"Create a MySQL database","y":"bool mysql_create_db\n    ( string $database_name\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the database being created."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_data_seek":{"s":"Move internal result pointer","y":"bool mysql_data_seek\n    ( resource $result\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"row_number","d":"The desired row number of the new result pointer."}]},"mysql_db_name":{"s":"Retrieves database name from the call to mysql_list_dbs()","y":"string mysql_db_name\n    ( resource $result\n   , int $row\n   [, mixed $field = NULL\n  ] )","r":"Returns the database name on success, and FALSE on failure. If FALSE\n   is returned, use mysql_error() to determine the nature\n   of the error.","p":[{"t":"result","d":"The result pointer from a call to mysql_list_dbs()."},{"t":"row","d":"The index into the result set."},{"t":"field","d":"The field name."}]},"mysql_db_query":{"s":"Selects a database and executes a query on it","y":"resource mysql_db_query\n    ( string $database\n   , string $query\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns a positive MySQL result resource to the query result,\n   or FALSE on error. The function also returns TRUE\/FALSE for\n   INSERT\/UPDATE\/DELETE\n   queries to indicate success\/failure.","p":[{"t":"database","d":"The name of the database that will be selected."},{"t":"query","d":"The MySQL query."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_drop_db":{"s":"Drop (delete) a MySQL database","y":"bool mysql_drop_db\n    ( string $database_name\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the database that will be deleted."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_errno":{"s":"Returns the numerical value of the error message from previous MySQL operation","y":"int mysql_errno\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the error number from the last MySQL function, or\n   0 (zero) if no error occurred.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_escape_string":{"s":"Escapes a string for use in a mysql_query","y":"string mysql_escape_string\n    ( string $unescaped_string\n   )","r":"Returns the escaped string.","p":[{"t":"unescaped_string","d":"The string that is to be escaped."}]},"mysql_fetch_array":{"s":"Fetch a result row as an associative array, a numeric array, or both","y":"array mysql_fetch_array\n    ( resource $result\n   [, int $result_type = MYSQL_BOTH\n  ] )","r":"Returns an array of strings that corresponds to the fetched row, or FALSE\n   if there are no more rows. The type of returned array depends on\n   how result_type is defined. By using \n   MYSQL_BOTH (default), you&#039;ll get an array with both \n   associative and number indices. Using MYSQL_ASSOC, you \n   only get associative indices (as mysql_fetch_assoc() \n   works), using MYSQL_NUM, you only get number indices \n   (as mysql_fetch_row() works).","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"result_type","d":"The type of array that is to be fetched. It&#039;s a constant and can\n       take the following values: MYSQL_ASSOC, \n       MYSQL_NUM, and\n       MYSQL_BOTH."}]},"mysql_fetch_field":{"s":"Get column information from a result and return as an object","y":"object mysql_fetch_field\n    ( resource $result\n   [, int $field_offset = 0\n  ] )","r":"Returns an object containing field information. The properties \n   of the object are:","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. If the field offset is not specified, the \n       next field that was not yet retrieved by this function is retrieved. \n       The field_offset starts at 0."}]},"mysql_fetch_lengths":{"s":"Get the length of each output in a result","y":"array mysql_fetch_lengths\n    ( resource $result\n   )","r":"An array of lengths on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"mysql_fetch_object":{"s":"Fetch a result row as an object","y":"object mysql_fetch_object\n    ( resource $result\n   [, string $class_name\n   [, array $params\n  ]] )","r":"Returns an object with string properties that correspond to the\n   fetched row, or FALSE if there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"class_name","d":"The name of the class to instantiate, set the properties of and return.\n        If not specified, a stdClass object is returned."},{"t":"params","d":"An optional array of parameters to pass to the constructor\n        for class_name objects."}]},"mysql_fetch_row":{"s":"Get a result row as an enumerated array","y":"array mysql_fetch_row\n    ( resource $result\n   )","r":"Returns an numerical array of strings that corresponds to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"mysql_field_flags":{"s":"Get the flags associated with the specified field in a result","y":"string mysql_field_flags\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns a string of flags associated with the result or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"mysql_field_name":{"s":"Get the name of the specified field in a result","y":"string mysql_field_name\n    ( resource $result\n   , int $field_offset\n   )","r":"The name of the specified field index on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"mysql_field_seek":{"s":"Set result pointer to a specified field offset","y":"bool mysql_field_seek\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"mysql_field_table":{"s":"Get name of the table the specified field is in","y":"string mysql_field_table\n    ( resource $result\n   , int $field_offset\n   )","r":"The name of the table on success.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"mysql_field_type":{"s":"Get the type of the specified field in a result","y":"string mysql_field_type\n    ( resource $result\n   , int $field_offset\n   )","r":"The returned field type\n   will be one of &quot;int&quot;, &quot;real&quot;, \n   &quot;string&quot;, &quot;blob&quot;, and others as\n   detailed in the &raquo;&nbsp;MySQL\n   documentation.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"mysql_free_result":{"s":"Free result memory","y":"bool mysql_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"mysql_get_client_info":{"s":"Get MySQL client info","y":"string mysql_get_client_info\n    ( void\n   )","r":"The MySQL client version.","p":null},"mysql_get_host_info":{"s":"Get MySQL host info","y":"string mysql_get_host_info\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns a string describing the type of MySQL connection in use for the\n   connection or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_get_proto_info":{"s":"Get MySQL protocol info","y":"int mysql_get_proto_info\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the MySQL protocol on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_get_server_info":{"s":"Get MySQL server info","y":"string mysql_get_server_info\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the MySQL server version on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_info":{"s":"Get information about the most recent query","y":"string mysql_info\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns information about the statement on success, or FALSE on\n   failure. See the example below for which statements provide information,\n   and what the returned value may look like. Statements that are not listed \n   will return FALSE.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_insert_id":{"s":"Get the ID generated in the last query","y":"int mysql_insert_id\n    ([ resource $link_identifier = NULL\n  ] )","r":"The ID generated for an AUTO_INCREMENT column by the previous \n   query on success, 0 if the previous\n   query does not generate an AUTO_INCREMENT value, or FALSE if\n   no MySQL connection was established.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_list_dbs":{"s":"List databases available on a MySQL server","y":"resource mysql_list_dbs\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns a result pointer resource on success, or FALSE on\n   failure. Use the mysql_tablename() function to traverse \n   this result pointer, or any function for result tables, such as \n   mysql_fetch_array().","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_list_fields":{"s":"List MySQL table fields","y":"resource mysql_list_fields\n    ( string $database_name\n   , string $table_name\n   [, resource $link_identifier = NULL\n  ] )","r":"A result pointer resource on success, or FALSE on\n   failure.","p":[{"t":"database_name","d":"The name of the database that&#039;s being queried."},{"t":"table_name","d":"The name of the table that&#039;s being queried."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_list_processes":{"s":"List MySQL processes","y":"resource mysql_list_processes\n    ([ resource $link_identifier = NULL\n  ] )","r":"A result pointer resource on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_list_tables":{"s":"List tables in a MySQL database","y":"resource mysql_list_tables\n    ( string $database\n   [, resource $link_identifier = NULL\n  ] )","r":"A result pointer resource on success or FALSE on failure.","p":[{"t":"database","d":"The name of the database"},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_num_rows":{"s":"Get number of rows in result","y":"int mysql_num_rows\n    ( resource $result\n   )","r":"The number of rows in a result set on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"mysql_pconnect":{"s":"Open a persistent connection to a MySQL server","y":"resource mysql_pconnect\n    ([ string $server = ini_get(&quot;mysql.default_host&quot;)\n   [, string $username = ini_get(&quot;mysql.default_user&quot;)\n   [, string $password = ini_get(&quot;mysql.default_password&quot;)\n   [, int $client_flags = 0\n  ]]]] )","r":"Returns a MySQL persistent link identifier on success, or FALSE on \n   failure.","p":[{"t":"server","d":"The MySQL server. It can also include a port number. e.g. \n       &quot;hostname:port&quot; or a path to a local socket e.g. &quot;:\/path\/to\/socket&quot; for \n       the localhost."},{"t":"username","d":"The username. Default value is the name of the user that owns the\n       server process."},{"t":"password","d":"The password. Default value is an empty password."},{"t":"client_flags","d":"The client_flags parameter can be a combination \n       of the following constants:\n       128 (enable LOAD DATA LOCAL handling),\n       MYSQL_CLIENT_SSL, \n       MYSQL_CLIENT_COMPRESS, \n       MYSQL_CLIENT_IGNORE_SPACE or\n       MYSQL_CLIENT_INTERACTIVE."}]},"mysql_ping":{"s":"Ping a server connection or reconnect if there is no connection","y":"bool mysql_ping\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns TRUE if the connection to the server MySQL server is working, \n   otherwise FALSE.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_query":{"s":"Send a MySQL query","y":"mixed mysql_query\n    ( string $query\n   [, resource $link_identifier = NULL\n  ] )","r":"For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,\n   mysql_query() \n   returns a resource on success, or FALSE on\n   error.","p":[{"t":"query","d":"An SQL query"},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_real_escape_string":{"s":"Escapes special characters in a string for use in an SQL statement","y":"string mysql_real_escape_string\n    ( string $unescaped_string\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns the escaped string, or FALSE on error.","p":[{"t":"unescaped_string","d":"The string that is to be escaped."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_result":{"s":"Get result data","y":"string mysql_result\n    ( resource $result\n   , int $row\n   [, mixed $field = 0\n  ] )","r":"The contents of one cell from a MySQL result set on success, or \n   FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"row","d":"The row number from the result that&#039;s being retrieved. Row numbers \n       start at 0."},{"t":"field","d":"The name or offset of the field being retrieved."}]},"mysql_select_db":{"s":"Select a MySQL database","y":"bool mysql_select_db\n    ( string $database_name\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":"The name of the database that is to be selected."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_set_charset":{"s":"Sets the client character set","y":"bool mysql_set_charset\n    ( string $charset\n   [, resource $link_identifier = NULL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"charset","d":"A valid character set name."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_stat":{"s":"Get current system status","y":"string mysql_stat\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns a string with the status for uptime, threads, queries, open tables,\n   flush tables and queries per second. For a complete list of other status\n   variables, you have to use the SHOW STATUS SQL command.\n   If link_identifier is invalid, NULL is returned.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"mysql_tablename":{"s":"Get table name of field","y":"string mysql_tablename\n    ( resource $result\n   , int $i\n   )","r":"The name of the table on success or FALSE on failure.","p":[{"t":"result","d":"A result pointer resource that&#039;s returned from  \n       mysql_list_tables()."},{"t":"i","d":"The integer index (row\/table number)"}]},"mysql_thread_id":{"s":"Return the current thread ID","y":"int mysql_thread_id\n    ([ resource $link_identifier = NULL\n  ] )","r":"The thread ID on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"m_checkstatus":{"s":"Check to see if a transaction has completed","y":"int m_checkstatus\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_connect":{"s":"Establish the connection to MCVE","y":"int m_connect\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_connectionerror":{"s":"Get a textual representation of why a connection failed","y":"string m_connectionerror\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_deletetrans":{"s":"Delete specified transaction from MCVE_CONN structure","y":"bool m_deletetrans\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_destroyconn":{"s":"Destroy the connection and MCVE_CONN structure","y":"bool m_destroyconn\n    ( resource $conn\n   )","r":"Returns TRUE.","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_destroyengine":{"s":"Free memory associated with IP\/SSL connectivity","y":"void m_destroyengine\n    ( void\n   )","r":"No value is returned.","p":null},"m_getcell":{"s":"Get a specific cell from a comma delimited response by column name","y":"string m_getcell\n    ( resource $conn\n   , int $identifier\n   , string $column\n   , int $row\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""},{"t":"column","d":""},{"t":"row","d":""}]},"m_getcellbynum":{"s":"Get a specific cell from a comma delimited response by column number","y":"string m_getcellbynum\n    ( resource $conn\n   , int $identifier\n   , int $column\n   , int $row\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""},{"t":"column","d":""},{"t":"row","d":""}]},"m_getcommadelimited":{"s":"Get the RAW comma delimited data returned from MCVE","y":"string m_getcommadelimited\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_getheader":{"s":"Get the name of the column in a comma-delimited response","y":"string m_getheader\n    ( resource $conn\n   , int $identifier\n   , int $column_num\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""},{"t":"column_num","d":""}]},"m_initconn":{"s":"Create and initialize an MCVE_CONN structure","y":"resource m_initconn\n    ( void\n   )","r":"Returns an MCVE_CONN resource.","p":null},"m_initengine":{"s":"Ready the client for IP\/SSL Communication","y":"int m_initengine\n    ( string $location\n   )","r":"","p":[{"t":"location","d":""}]},"m_iscommadelimited":{"s":"Checks to see if response is comma delimited","y":"int m_iscommadelimited\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_maxconntimeout":{"s":"The maximum amount of time the API will attempt a connection to MCVE","y":"bool m_maxconntimeout\n    ( resource $conn\n   , int $secs\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"secs","d":""}]},"m_monitor":{"s":"Perform communication with MCVE (send\/receive data) Non-blocking","y":"int m_monitor\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_numcolumns":{"s":"Number of columns returned in a comma delimited response","y":"int m_numcolumns\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_numrows":{"s":"Number of rows returned in a comma delimited response","y":"int m_numrows\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_parsecommadelimited":{"s":"Parse the comma delimited response so m_getcell, etc will work","y":"int m_parsecommadelimited\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_responsekeys":{"s":"Returns array of strings which represents the keys that can be used\n for response parameters on this transaction","y":"array m_responsekeys\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_returnstatus":{"s":"Check to see if the transaction was successful","y":"int m_returnstatus\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_setblocking":{"s":"Set blocking\/non-blocking mode for connection","y":"int m_setblocking\n    ( resource $conn\n   , int $tf\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"tf","d":""}]},"m_setdropfile":{"s":"Set the connection method to Drop-File","y":"int m_setdropfile\n    ( resource $conn\n   , string $directory\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"directory","d":""}]},"m_setip":{"s":"Set the connection method to IP","y":"int m_setip\n    ( resource $conn\n   , string $host\n   , int $port\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"host","d":""},{"t":"port","d":""}]},"m_setssl":{"s":"Set the connection method to SSL","y":"int m_setssl\n    ( resource $conn\n   , string $host\n   , int $port\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"host","d":""},{"t":"port","d":""}]},"m_setssl_cafile":{"s":"Set SSL CA (Certificate Authority) file for verification of server\n certificate","y":"int m_setssl_cafile\n    ( resource $conn\n   , string $cafile\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"cafile","d":""}]},"m_setssl_files":{"s":"Set certificate key files and certificates if server requires client certificate\n verification","y":"int m_setssl_files\n    ( resource $conn\n   , string $sslkeyfile\n   , string $sslcertfile\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"sslkeyfile","d":""},{"t":"sslcertfile","d":""}]},"m_settimeout":{"s":"Set maximum transaction time (per trans)","y":"int m_settimeout\n    ( resource $conn\n   , int $seconds\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"seconds","d":""}]},"m_sslcert_gen_hash":{"s":"Generate hash for SSL client certificate verification","y":"string m_sslcert_gen_hash\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":""}]},"m_transactionssent":{"s":"Check to see if outgoing buffer is clear","y":"int m_transactionssent\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_transinqueue":{"s":"Number of transactions in client-queue","y":"int m_transinqueue\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_transkeyval":{"s":"Add key\/value pair to a transaction. Replaces deprecated transparam()","y":"int m_transkeyval\n    ( resource $conn\n   , int $identifier\n   , string $key\n   , string $value\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""},{"t":"key","d":""},{"t":"value","d":""}]},"m_transnew":{"s":"Start a new transaction","y":"int m_transnew\n    ( resource $conn\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."}]},"m_transsend":{"s":"Finalize and send the transaction","y":"int m_transsend\n    ( resource $conn\n   , int $identifier\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""}]},"m_uwait":{"s":"Wait x microsecs","y":"int m_uwait\n    ( int $microsecs\n   )","r":"","p":[{"t":"microsecs","d":""}]},"m_validateidentifier":{"s":"Whether or not to validate the passed identifier on any transaction it is passed to","y":"int m_validateidentifier\n    ( resource $conn\n   , int $tf\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"tf","d":""}]},"m_verifyconnection":{"s":"Set whether or not to PING upon connect to verify connection","y":"bool m_verifyconnection\n    ( resource $conn\n   , int $tf\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"tf","d":""}]},"m_verifysslcert":{"s":"Set whether or not to verify the server ssl certificate","y":"bool m_verifysslcert\n    ( resource $conn\n   , int $tf\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"tf","d":""}]},"natcasesort":{"s":"Sort an array using a case insensitive &quot;natural order&quot; algorithm","y":"bool natcasesort\n    ( array &$array\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."}]},"natsort":{"s":"Sort an array using a &quot;natural order&quot; algorithm","y":"bool natsort\n    ( array &$array\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."}]},"ncurses_addch":{"s":"Add character at current position and advance cursor ","y":"int ncurses_addch\n    ( int $ch\n   )","r":"","p":[{"t":"ch","d":""}]},"ncurses_addchnstr":{"s":"Add attributed string with specified length at current position ","y":"int ncurses_addchnstr\n    ( string $s\n   , int $n\n   )","r":"","p":[{"t":"s","d":""},{"t":"n","d":""}]},"ncurses_addchstr":{"s":"Add attributed string at current position ","y":"int ncurses_addchstr\n    ( string $s\n   )","r":"","p":[{"t":"s","d":""}]},"ncurses_addnstr":{"s":"Add string with specified length at current position ","y":"int ncurses_addnstr\n    ( string $s\n   , int $n\n   )","r":"","p":[{"t":"s","d":""},{"t":"n","d":""}]},"ncurses_addstr":{"s":"Output text at current position ","y":"int ncurses_addstr\n    ( string $text\n   )","r":"","p":[{"t":"text","d":""}]},"ncurses_assume_default_colors":{"s":"Define default colors for color 0 ","y":"int ncurses_assume_default_colors\n    ( int $fg\n   , int $bg\n   )","r":"","p":[{"t":"fg","d":""},{"t":"bg","d":""}]},"ncurses_attroff":{"s":"Turn off the given attributes","y":"int ncurses_attroff\n    ( int $attributes\n   )","r":"","p":[{"t":"attributes","d":""}]},"ncurses_attron":{"s":"Turn on the given attributes","y":"int ncurses_attron\n    ( int $attributes\n   )","r":"","p":[{"t":"attributes","d":""}]},"ncurses_attrset":{"s":"Set given attributes","y":"int ncurses_attrset\n    ( int $attributes\n   )","r":"","p":[{"t":"attributes","d":""}]},"ncurses_baudrate":{"s":"Returns baudrate of terminal ","y":"int ncurses_baudrate\n    ( void\n   )","r":"","p":null},"ncurses_beep":{"s":"Let the terminal beep ","y":"int ncurses_beep\n    ( void\n   )","r":"","p":null},"ncurses_bkgd":{"s":"Set background property for terminal screen ","y":"int ncurses_bkgd\n    ( int $attrchar\n   )","r":"","p":[{"t":"attrchar","d":""}]},"ncurses_bkgdset":{"s":"Control screen background ","y":"void ncurses_bkgdset\n    ( int $attrchar\n   )","r":"","p":[{"t":"attrchar","d":""}]},"ncurses_border":{"s":"Draw a border around the screen using attributed characters","y":"int ncurses_border\n    ( int $left\n   , int $right\n   , int $top\n   , int $bottom\n   , int $tl_corner\n   , int $tr_corner\n   , int $bl_corner\n   , int $br_corner\n   )","r":"","p":[{"t":"left","d":""},{"t":"right","d":""},{"t":"top","d":""},{"t":"bottom","d":""},{"t":"tl_corner","d":"Top left corner"},{"t":"tr_corner","d":"Top right corner"},{"t":"bl_corner","d":"Bottom left corner"},{"t":"br_corner","d":"Bottom right corner"}]},"ncurses_bottom_panel":{"s":"Moves a visible panel to the bottom of the stack","y":"int ncurses_bottom_panel\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_can_change_color":{"s":"Checks if terminal color definitions can be changed","y":"bool ncurses_can_change_color\n    ( void\n   )","r":"Return TRUE if the programmer can change color definitions,\n   FALSE otherwise.","p":null},"ncurses_cbreak":{"s":"Switch off input buffering","y":"bool ncurses_cbreak\n    ( void\n   )","r":"Returns TRUE or NCURSES_ERR if any error occurred.","p":null},"ncurses_clrtobot":{"s":"Clear screen from current position to bottom ","y":"bool ncurses_clrtobot\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ncurses_clrtoeol":{"s":"Clear screen from current position to end of line ","y":"bool ncurses_clrtoeol\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ncurses_color_content":{"s":"Retrieves RGB components of a color","y":"int ncurses_color_content\n    ( int $color\n   , int &$r\n   , int &$g\n   , int &$b\n   )","r":"Returns -1 if the function was successful, and\n   0 if ncurses or terminal color capabilities have not been\n   initialized.","p":[{"t":"color","d":"The number of the color to retrieve information for. May be one of the\n       pre-defined color constants."},{"t":"r","d":"A reference to which to return the red component of the color. The value\n       returned to the reference will be between 0 and 1000."},{"t":"g","d":"A reference to which to return the green component of the color. The value\n       returned to the reference will be between 0 and 1000."},{"t":"b","d":"A reference to which to return the blue component of the color. The value\n       returned to the reference will be between 0 and 1000."}]},"ncurses_color_set":{"s":"Set active foreground and background colors","y":"int ncurses_color_set\n    ( int $pair\n   )","r":"Returns -1 on success, and 0 on failure.","p":[{"t":"pair","d":"The color pair from which to get the foreground and background colors\n       to set as the active colors."}]},"ncurses_curs_set":{"s":"Set cursor state ","y":"int ncurses_curs_set\n    ( int $visibility\n   )","r":"","p":[{"t":"visibility","d":""}]},"ncurses_define_key":{"s":"Define a keycode ","y":"int ncurses_define_key\n    ( string $definition\n   , int $keycode\n   )","r":"","p":[{"t":"definition","d":""},{"t":"keycode","d":""}]},"ncurses_def_prog_mode":{"s":"Saves terminals (program) mode","y":"bool ncurses_def_prog_mode\n    ( void\n   )","r":"Returns FALSE on success, otherwise TRUE.","p":null},"ncurses_def_shell_mode":{"s":"Saves terminals (shell) mode","y":"bool ncurses_def_shell_mode\n    ( void\n   )","r":"Returns FALSE on success, TRUE otherwise.","p":null},"ncurses_delay_output":{"s":"Delay output on terminal using padding characters ","y":"int ncurses_delay_output\n    ( int $milliseconds\n   )","r":"","p":[{"t":"milliseconds","d":""}]},"ncurses_delch":{"s":"Delete character at current position, move rest of line left ","y":"bool ncurses_delch\n    ( void\n   )","r":"Returns FALSE on success, TRUE otherwise.","p":null},"ncurses_deleteln":{"s":"Delete line at current position, move rest of screen up ","y":"bool ncurses_deleteln\n    ( void\n   )","r":"Returns FALSE on success, otherwise TRUE.","p":null},"ncurses_delwin":{"s":"Delete a ncurses window ","y":"bool ncurses_delwin\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_del_panel":{"s":"Remove panel from the stack and delete it (but not the associated window)","y":"bool ncurses_del_panel\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_doupdate":{"s":"Write all prepared refreshes to terminal ","y":"bool ncurses_doupdate\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ncurses_echo":{"s":"Activate keyboard input echo ","y":"bool ncurses_echo\n    ( void\n   )","r":"Returns FALSE on success, TRUE if any error occurred.","p":null},"ncurses_echochar":{"s":"Single character output including refresh ","y":"int ncurses_echochar\n    ( int $character\n   )","r":"","p":[{"t":"character","d":""}]},"ncurses_end":{"s":"Stop using ncurses, clean up the screen ","y":"int ncurses_end\n    ( void\n   )","r":"","p":null},"ncurses_erase":{"s":"Erase terminal screen ","y":"bool ncurses_erase\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ncurses_erasechar":{"s":"Returns current erase character ","y":"string ncurses_erasechar\n    ( void\n   )","r":"The current erase char, as a string.","p":null},"ncurses_filter":{"s":"Set LINES for iniscr() and newterm() to 1","y":"void ncurses_filter\n    ( void\n   )","r":"","p":null},"ncurses_flash":{"s":"Flash terminal screen (visual bell) ","y":"bool ncurses_flash\n    ( void\n   )","r":"Returns FALSE on success, otherwise TRUE.","p":null},"ncurses_flushinp":{"s":"Flush keyboard input buffer ","y":"bool ncurses_flushinp\n    ( void\n   )","r":"Returns FALSE on success, otherwise TRUE.","p":null},"ncurses_getch":{"s":"Read a character from keyboard ","y":"int ncurses_getch\n    ( void\n   )","r":"","p":null},"ncurses_getmaxyx":{"s":"Returns the size of a window","y":"void ncurses_getmaxyx\n    ( resource $window\n   , int &$y\n   , int &$x\n   )","r":"No value is returned.","p":[{"t":"window","d":"The measured window"},{"t":"y","d":"This will be set to the window height"},{"t":"x","d":"This will be set to the window width"}]},"ncurses_getmouse":{"s":"Reads mouse event","y":"bool ncurses_getmouse\n    ( array &$mevent\n   )","r":"Returns FALSE if a mouse event is actually visible in the given window,\n   otherwise returns TRUE.","p":[{"t":"mevent","d":"Event options will be delivered in this parameter which has to be an\n       array, passed by reference (see example below)."}]},"ncurses_getyx":{"s":"Returns the current cursor position for a window","y":"void ncurses_getyx\n    ( resource $window\n   , int &$y\n   , int &$x\n   )","r":"","p":[{"t":"window","d":""},{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_halfdelay":{"s":"Put terminal into halfdelay mode ","y":"int ncurses_halfdelay\n    ( int $tenth\n   )","r":"","p":[{"t":"tenth","d":""}]},"ncurses_has_colors":{"s":"Checks if terminal has color capabilities","y":"bool ncurses_has_colors\n    ( void\n   )","r":"Return TRUE if the terminal has color capabilities, FALSE otherwise.","p":null},"ncurses_has_ic":{"s":"Check for insert- and delete-capabilities ","y":"bool ncurses_has_ic\n    ( void\n   )","r":"Returns TRUE if the terminal has insert\/delete-capabilities, FALSE\n   otherwise.","p":null},"ncurses_has_il":{"s":"Check for line insert- and delete-capabilities ","y":"bool ncurses_has_il\n    ( void\n   )","r":"Returns TRUE if the terminal has insert\/delete-line capabilities,\n   FALSE otherwise.","p":null},"ncurses_has_key":{"s":"Check for presence of a function key on terminal keyboard ","y":"int ncurses_has_key\n    ( int $keycode\n   )","r":"","p":[{"t":"keycode","d":""}]},"ncurses_hide_panel":{"s":"Remove panel from the stack, making it invisible","y":"int ncurses_hide_panel\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_hline":{"s":"Draw a horizontal line at current position using an attributed character and max. n characters long ","y":"int ncurses_hline\n    ( int $charattr\n   , int $n\n   )","r":"","p":[{"t":"charattr","d":""},{"t":"n","d":""}]},"ncurses_inch":{"s":"Get character and attribute at current position ","y":"string ncurses_inch\n    ( void\n   )","r":"Returns the character, as a string.","p":null},"ncurses_init":{"s":"Initialize ncurses","y":"void ncurses_init\n    ( void\n   )","r":"No value is returned.","p":null},"ncurses_init_color":{"s":"Define a terminal color","y":"int ncurses_init_color\n    ( int $color\n   , int $r\n   , int $g\n   , int $b\n   )","r":"Returns -1 if the function was successful,\n   and 0 if ncurses or terminal\n   color capabilities have not been initialized or the terminal does not\n   have color changing capabilities.","p":[{"t":"color","d":"The identification number of the color to redefine. It may be one of\n       the default color constants."},{"t":"r","d":"A color value, between 0 and 1000, for the red component."},{"t":"g","d":"A color value, between 0 and 1000, for the green component."},{"t":"b","d":"A color value, between 0 and 1000, for the blue component."}]},"ncurses_init_pair":{"s":"Define a color pair","y":"int ncurses_init_pair\n    ( int $pair\n   , int $fg\n   , int $bg\n   )","r":"Returns -1 if the function was successful, and\n   0 if ncurses or color support were not initialized.","p":[{"t":"pair","d":"The number of the color pair to define."},{"t":"fg","d":"The foreground color for the color pair. May be one of the\n       pre-defined colors\n       or one defined by ncurses_init_color() if\n       the terminal has color changing capabilities."},{"t":"bg","d":"The background color for the color pair. May be one of the\n       pre-defined colors\n       or one defined by ncurses_init_color() if\n       the terminal has color changing capabilities."}]},"ncurses_insch":{"s":"Insert character moving rest of line including character at current position ","y":"int ncurses_insch\n    ( int $character\n   )","r":"","p":[{"t":"character","d":""}]},"ncurses_insdelln":{"s":"Insert lines before current line scrolling down (negative numbers delete and scroll up) ","y":"int ncurses_insdelln\n    ( int $count\n   )","r":"","p":[{"t":"count","d":""}]},"ncurses_insertln":{"s":"Insert a line, move rest of screen down ","y":"int ncurses_insertln\n    ( void\n   )","r":"","p":null},"ncurses_insstr":{"s":"Insert string at current position, moving rest of line right ","y":"int ncurses_insstr\n    ( string $text\n   )","r":"","p":[{"t":"text","d":""}]},"ncurses_instr":{"s":"Reads string from terminal screen","y":"int ncurses_instr\n    ( string &$buffer\n   )","r":"Returns the number of characters.","p":[{"t":"buffer","d":"The characters. Attributes will be stripped."}]},"ncurses_isendwin":{"s":"Ncurses is in endwin mode, normal screen output may be performed","y":"bool ncurses_isendwin\n    ( void\n   )","r":"Returns TRUE, if ncurses_end() has been called\n   without any subsequent calls to ncurses_wrefresh(),\n   FALSE otherwise.","p":null},"ncurses_keyok":{"s":"Enable or disable a keycode ","y":"int ncurses_keyok\n    ( int $keycode\n   , bool $enable\n   )","r":"","p":[{"t":"keycode","d":""},{"t":"enable","d":""}]},"ncurses_keypad":{"s":"Turns keypad on or off","y":"int ncurses_keypad\n    ( resource $window\n   , bool $bf\n   )","r":"","p":[{"t":"window","d":""},{"t":"bf","d":""}]},"ncurses_killchar":{"s":"Returns current line kill character ","y":"string ncurses_killchar\n    ( void\n   )","r":"Returns the kill character, as a string.","p":null},"ncurses_longname":{"s":"Returns terminals description","y":"string ncurses_longname\n    ( void\n   )","r":"Returns the description, as a string truncated to 128 characters.\n   On errors, returns NULL.","p":null},"ncurses_meta":{"s":"Enables\/Disable 8-bit meta key information","y":"int ncurses_meta\n    ( resource $window\n   , bool $8bit\n   )","r":"","p":[{"t":"window","d":""},{"t":"8bit","d":""}]},"ncurses_mouseinterval":{"s":"Set timeout for mouse button clicks ","y":"int ncurses_mouseinterval\n    ( int $milliseconds\n   )","r":"","p":[{"t":"milliseconds","d":""}]},"ncurses_mousemask":{"s":"Sets mouse options","y":"int ncurses_mousemask\n    ( int $newmask\n   , int &$oldmask\n   )","r":"Returns a mask to indicated which of the in parameter \n   newmask specified mouse events can be reported. On\n   complete failure, it returns 0.","p":[{"t":"newmask","d":"Mouse mask options can be set with the following predefined constants:\n       \n        NCURSES_BUTTON1_PRESSED"},{"t":"oldmask","d":"This will be set to the previous value of the mouse event mask."}]},"ncurses_mouse_trafo":{"s":"Transforms coordinates","y":"bool ncurses_mouse_trafo\n    ( int &$y\n   , int &$x\n   , bool $toscreen\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"toscreen","d":""}]},"ncurses_move":{"s":"Move output position ","y":"int ncurses_move\n    ( int $y\n   , int $x\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_move_panel":{"s":"Moves a panel so that its upper-left corner is at [startx, starty]","y":"int ncurses_move_panel\n    ( resource $panel\n   , int $startx\n   , int $starty\n   )","r":"","p":[{"t":"panel","d":""},{"t":"startx","d":""},{"t":"starty","d":""}]},"ncurses_mvaddch":{"s":"Move current position and add character ","y":"int ncurses_mvaddch\n    ( int $y\n   , int $x\n   , int $c\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"c","d":""}]},"ncurses_mvaddchnstr":{"s":"Move position and add attributed string with specified length ","y":"int ncurses_mvaddchnstr\n    ( int $y\n   , int $x\n   , string $s\n   , int $n\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"s","d":""},{"t":"n","d":""}]},"ncurses_mvaddchstr":{"s":"Move position and add attributed string ","y":"int ncurses_mvaddchstr\n    ( int $y\n   , int $x\n   , string $s\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"s","d":""}]},"ncurses_mvaddnstr":{"s":"Move position and add string with specified length ","y":"int ncurses_mvaddnstr\n    ( int $y\n   , int $x\n   , string $s\n   , int $n\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"s","d":""},{"t":"n","d":""}]},"ncurses_mvaddstr":{"s":"Move position and add string ","y":"int ncurses_mvaddstr\n    ( int $y\n   , int $x\n   , string $s\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"s","d":""}]},"ncurses_mvcur":{"s":"Move cursor immediately ","y":"int ncurses_mvcur\n    ( int $old_y\n   , int $old_x\n   , int $new_y\n   , int $new_x\n   )","r":"","p":[{"t":"old_y","d":""},{"t":"old_x","d":""},{"t":"new_y","d":""},{"t":"new_x","d":""}]},"ncurses_mvdelch":{"s":"Move position and delete character, shift rest of line left ","y":"int ncurses_mvdelch\n    ( int $y\n   , int $x\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_mvgetch":{"s":"Move position and get character at new position ","y":"int ncurses_mvgetch\n    ( int $y\n   , int $x\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_mvhline":{"s":"Set new position and draw a horizontal line using an attributed character and max. n characters long ","y":"int ncurses_mvhline\n    ( int $y\n   , int $x\n   , int $attrchar\n   , int $n\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"attrchar","d":""},{"t":"n","d":""}]},"ncurses_mvinch":{"s":"Move position and get attributed character at new position ","y":"int ncurses_mvinch\n    ( int $y\n   , int $x\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_mvvline":{"s":"Set new position and draw a vertical line using an attributed character and max. n characters long ","y":"int ncurses_mvvline\n    ( int $y\n   , int $x\n   , int $attrchar\n   , int $n\n   )","r":"","p":[{"t":"y","d":""},{"t":"x","d":""},{"t":"attrchar","d":""},{"t":"n","d":""}]},"ncurses_mvwaddstr":{"s":"Add string at new position in window ","y":"int ncurses_mvwaddstr\n    ( resource $window\n   , int $y\n   , int $x\n   , string $text\n   )","r":"","p":[{"t":"window","d":""},{"t":"y","d":""},{"t":"x","d":""},{"t":"text","d":""}]},"ncurses_napms":{"s":"Sleep","y":"int ncurses_napms\n    ( int $milliseconds\n   )","r":"","p":[{"t":"milliseconds","d":""}]},"ncurses_newpad":{"s":"Creates a new pad (window)","y":"resource ncurses_newpad\n    ( int $rows\n   , int $cols\n   )","r":"","p":[{"t":"rows","d":""},{"t":"cols","d":""}]},"ncurses_newwin":{"s":"Create a new window","y":"resource ncurses_newwin\n    ( int $rows\n   , int $cols\n   , int $y\n   , int $x\n   )","r":"Returns a resource ID for the new window.","p":[{"t":"rows","d":"Number of rows"},{"t":"cols","d":"Number of columns"},{"t":"y","d":"y-coordinate of the origin"},{"t":"x","d":"x-coordinate of the origin"}]},"ncurses_new_panel":{"s":"Create a new panel and associate it with window","y":"resource ncurses_new_panel\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_nocbreak":{"s":"Switch terminal to cooked mode ","y":"bool ncurses_nocbreak\n    ( void\n   )","r":"Returns TRUE if any error occurred, otherwise FALSE.","p":null},"ncurses_noecho":{"s":"Switch off keyboard input echo ","y":"bool ncurses_noecho\n    ( void\n   )","r":"Returns TRUE if any error occurred, FALSE otherwise.","p":null},"ncurses_nonl":{"s":"Do not translate newline and carriage return \/ line feed ","y":"bool ncurses_nonl\n    ( void\n   )","r":"","p":null},"ncurses_noqiflush":{"s":"Do not flush on signal characters","y":"void ncurses_noqiflush\n    ( void\n   )","r":"","p":null},"ncurses_noraw":{"s":"Switch terminal out of raw mode ","y":"bool ncurses_noraw\n    ( void\n   )","r":"Returns TRUE if any error occurred, otherwise FALSE.","p":null},"ncurses_pair_content":{"s":"Retrieves foreground and background colors of a color pair","y":"int ncurses_pair_content\n    ( int $pair\n   , int &$f\n   , int &$b\n   )","r":"Returns -1 if the function was successful, and\n   0 if ncurses or terminal color capabilities have\n   not been initialized.","p":[{"t":"pair","d":"The number of the color pair to retrieve information for."},{"t":"f","d":"A reference to which to return the foreground color of the color\n       pair. The information returned will be a color number referring to\n       one of the\n       pre-defined colors or a\n       color defined previously by\n       ncurses_init_color() if the terminal supports\n       color changing."},{"t":"b","d":"A reference to which to return the background color of the color\n       pair. The information returned will be a color number referring to\n       one of the\n       pre-defined colors or a\n       color defined previously by\n       ncurses_init_color() if the terminal supports\n       color changing."}]},"ncurses_panel_above":{"s":"Returns the panel above panel","y":"resource ncurses_panel_above\n    ( resource $panel\n   )","r":"If panel is null, returns the bottom panel in the stack.","p":[{"t":"panel","d":""}]},"ncurses_panel_window":{"s":"Returns the window associated with panel","y":"resource ncurses_panel_window\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_pnoutrefresh":{"s":"Copies a region from a pad into the virtual screen","y":"int ncurses_pnoutrefresh\n    ( resource $pad\n   , int $pminrow\n   , int $pmincol\n   , int $sminrow\n   , int $smincol\n   , int $smaxrow\n   , int $smaxcol\n   )","r":"","p":[{"t":"pad","d":""},{"t":"pminrow","d":""},{"t":"pmincol","d":""},{"t":"sminrow","d":""},{"t":"smincol","d":""},{"t":"smaxrow","d":""},{"t":"smaxcol","d":""}]},"ncurses_prefresh":{"s":"Copies a region from a pad into the virtual screen","y":"int ncurses_prefresh\n    ( resource $pad\n   , int $pminrow\n   , int $pmincol\n   , int $sminrow\n   , int $smincol\n   , int $smaxrow\n   , int $smaxcol\n   )","r":"","p":[{"t":"pad","d":""},{"t":"pminrow","d":""},{"t":"pmincol","d":""},{"t":"sminrow","d":""},{"t":"smincol","d":""},{"t":"smaxrow","d":""},{"t":"smaxcol","d":""}]},"ncurses_putp":{"s":"Apply padding information to the string and output it","y":"int ncurses_putp\n    ( string $text\n   )","r":"","p":[{"t":"text","d":""}]},"ncurses_raw":{"s":"Switch terminal into raw mode ","y":"bool ncurses_raw\n    ( void\n   )","r":"Returns TRUE if any error occurred, otherwise FALSE.","p":null},"ncurses_refresh":{"s":"Refresh screen ","y":"int ncurses_refresh\n    ( int $ch\n   )","r":"","p":[{"t":"ch","d":""}]},"ncurses_replace_panel":{"s":"Replaces the window associated with panel","y":"int ncurses_replace_panel\n    ( resource $panel\n   , resource $window\n   )","r":"","p":[{"t":"panel","d":""},{"t":"window","d":""}]},"ncurses_resetty":{"s":"Restores saved terminal state ","y":"bool ncurses_resetty\n    ( void\n   )","r":"Always returns FALSE.","p":null},"ncurses_reset_prog_mode":{"s":"Resets the prog mode saved by def_prog_mode","y":"int ncurses_reset_prog_mode\n    ( void\n   )","r":"","p":null},"ncurses_reset_shell_mode":{"s":"Resets the shell mode saved by def_shell_mode","y":"int ncurses_reset_shell_mode\n    ( void\n   )","r":"","p":null},"ncurses_savetty":{"s":"Saves terminal state ","y":"bool ncurses_savetty\n    ( void\n   )","r":"Always returns FALSE.","p":null},"ncurses_scrl":{"s":"Scroll window content up or down without changing current position ","y":"int ncurses_scrl\n    ( int $count\n   )","r":"","p":[{"t":"count","d":""}]},"ncurses_scr_dump":{"s":"Dump screen content to file ","y":"int ncurses_scr_dump\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":""}]},"ncurses_scr_init":{"s":"Initialize screen from file dump ","y":"int ncurses_scr_init\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":""}]},"ncurses_scr_restore":{"s":"Restore screen from file dump ","y":"int ncurses_scr_restore\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":""}]},"ncurses_scr_set":{"s":"Inherit screen from file dump ","y":"int ncurses_scr_set\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":""}]},"ncurses_show_panel":{"s":"Places an invisible panel on top of the stack, making it visible","y":"int ncurses_show_panel\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_slk_attr":{"s":"Returns current soft label key attribute","y":"int ncurses_slk_attr\n    ( void\n   )","r":"The attribute, as an integer.","p":null},"ncurses_slk_attroff":{"s":"Turn off the given attributes for soft function-key labels","y":"int ncurses_slk_attroff\n    ( int $intarg\n   )","r":"","p":[{"t":"intarg","d":""}]},"ncurses_slk_attron":{"s":"Turn on the given attributes for soft function-key labels","y":"int ncurses_slk_attron\n    ( int $intarg\n   )","r":"","p":[{"t":"intarg","d":""}]},"ncurses_slk_attrset":{"s":"Set given attributes for soft function-key labels","y":"int ncurses_slk_attrset\n    ( int $intarg\n   )","r":"","p":[{"t":"intarg","d":""}]},"ncurses_slk_clear":{"s":"Clears soft labels from screen","y":"bool ncurses_slk_clear\n    ( void\n   )","r":"Returns TRUE on errors, FALSE otherwise.","p":null},"ncurses_slk_color":{"s":"Sets color for soft label keys","y":"int ncurses_slk_color\n    ( int $intarg\n   )","r":"","p":[{"t":"intarg","d":""}]},"ncurses_slk_noutrefresh":{"s":"Copies soft label keys to virtual screen","y":"bool ncurses_slk_noutrefresh\n    ( void\n   )","r":"","p":null},"ncurses_slk_refresh":{"s":"Copies soft label keys to screen","y":"int ncurses_slk_refresh\n    ( void\n   )","r":"","p":null},"ncurses_slk_restore":{"s":"Restores soft label keys","y":"int ncurses_slk_restore\n    ( void\n   )","r":"","p":null},"ncurses_slk_set":{"s":"Sets function key labels","y":"bool ncurses_slk_set\n    ( int $labelnr\n   , string $label\n   , int $format\n   )","r":"","p":[{"t":"labelnr","d":""},{"t":"label","d":""},{"t":"format","d":""}]},"ncurses_slk_touch":{"s":"Forces output when ncurses_slk_noutrefresh is performed","y":"int ncurses_slk_touch\n    ( void\n   )","r":"","p":null},"ncurses_standend":{"s":"Stop using &#039;standout&#039; attribute ","y":"int ncurses_standend\n    ( void\n   )","r":"","p":null},"ncurses_standout":{"s":"Start using &#039;standout&#039; attribute ","y":"int ncurses_standout\n    ( void\n   )","r":"","p":null},"ncurses_start_color":{"s":"Initializes color functionality","y":"int ncurses_start_color\n    ( void\n   )","r":"Returns 0 on success, or -1 if the\n   color table could not be allocated or ncurses was not initialized.","p":null},"ncurses_termattrs":{"s":"Returns a logical OR of all attribute flags supported by terminal ","y":"bool ncurses_termattrs\n    ( void\n   )","r":"","p":null},"ncurses_termname":{"s":"Returns terminals (short)-name","y":"string ncurses_termname\n    ( void\n   )","r":"Returns the shortname of the terminal, truncated to 14 characters.\n   On errors, returns NULL.","p":null},"ncurses_timeout":{"s":"Set timeout for special key sequences ","y":"void ncurses_timeout\n    ( int $millisec\n   )","r":"","p":[{"t":"millisec","d":""}]},"ncurses_top_panel":{"s":"Moves a visible panel to the top of the stack","y":"int ncurses_top_panel\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"ncurses_typeahead":{"s":"Specify different filedescriptor for typeahead checking ","y":"int ncurses_typeahead\n    ( int $fd\n   )","r":"","p":[{"t":"fd","d":""}]},"ncurses_ungetch":{"s":"Put a character back into the input stream ","y":"int ncurses_ungetch\n    ( int $keycode\n   )","r":"","p":[{"t":"keycode","d":""}]},"ncurses_ungetmouse":{"s":"Pushes mouse event to queue","y":"bool ncurses_ungetmouse\n    ( array $mevent\n   )","r":"Returns FALSE on success, TRUE otherwise.","p":[{"t":"mevent","d":"An associative array specifying the event options:\n       \n        \n         &quot;id&quot; : Id to distinguish multiple devices"}]},"ncurses_update_panels":{"s":"Refreshes the virtual screen to reflect the relations between panels in the stack","y":"void ncurses_update_panels\n    ( void\n   )","r":"","p":null},"ncurses_use_default_colors":{"s":"Assign terminal default colors to color id -1 ","y":"bool ncurses_use_default_colors\n    ( void\n   )","r":"","p":null},"ncurses_use_env":{"s":"Control use of environment information about terminal size ","y":"void ncurses_use_env\n    ( bool $flag\n   )","r":"","p":[{"t":"flag","d":""}]},"ncurses_vidattr":{"s":"Display the string on the terminal in the video attribute mode","y":"int ncurses_vidattr\n    ( int $intarg\n   )","r":"","p":[{"t":"intarg","d":""}]},"ncurses_waddch":{"s":"Adds character at current position in a window and advance cursor","y":"int ncurses_waddch\n    ( resource $window\n   , int $ch\n   )","r":"","p":[{"t":"window","d":""},{"t":"ch","d":""}]},"ncurses_waddstr":{"s":"Outputs text at current postion in window","y":"int ncurses_waddstr\n    ( resource $window\n   , string $str\n   [, int $n\n  ] )","r":"","p":[{"t":"window","d":""},{"t":"str","d":""},{"t":"n","d":""}]},"ncurses_wattroff":{"s":"Turns off attributes for a window","y":"int ncurses_wattroff\n    ( resource $window\n   , int $attrs\n   )","r":"","p":[{"t":"window","d":""},{"t":"attrs","d":""}]},"ncurses_wattron":{"s":"Turns on attributes for a window","y":"int ncurses_wattron\n    ( resource $window\n   , int $attrs\n   )","r":"","p":[{"t":"window","d":""},{"t":"attrs","d":""}]},"ncurses_wattrset":{"s":"Set the attributes for a window","y":"int ncurses_wattrset\n    ( resource $window\n   , int $attrs\n   )","r":"","p":[{"t":"window","d":""},{"t":"attrs","d":""}]},"ncurses_wborder":{"s":"Draws a border around the window using attributed characters","y":"int ncurses_wborder\n    ( resource $window\n   , int $left\n   , int $right\n   , int $top\n   , int $bottom\n   , int $tl_corner\n   , int $tr_corner\n   , int $bl_corner\n   , int $br_corner\n   )","r":"","p":[{"t":"window","d":"The window on which we operate"},{"t":"left","d":""},{"t":"right","d":""},{"t":"top","d":""},{"t":"bottom","d":""},{"t":"tl_corner","d":"Top left corner"},{"t":"tr_corner","d":"Top right corner"},{"t":"bl_corner","d":"Bottom left corner"},{"t":"br_corner","d":"Bottom right corner"}]},"ncurses_wclear":{"s":"Clears window","y":"int ncurses_wclear\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wcolor_set":{"s":"Sets windows color pairings","y":"int ncurses_wcolor_set\n    ( resource $window\n   , int $color_pair\n   )","r":"","p":[{"t":"window","d":""},{"t":"color_pair","d":""}]},"ncurses_werase":{"s":"Erase window contents","y":"int ncurses_werase\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wgetch":{"s":"Reads a character from keyboard (window)","y":"int ncurses_wgetch\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_whline":{"s":"Draws a horizontal line in a window at current position using an attributed character and max. n characters long","y":"int ncurses_whline\n    ( resource $window\n   , int $charattr\n   , int $n\n   )","r":"","p":[{"t":"window","d":""},{"t":"charattr","d":""},{"t":"n","d":""}]},"ncurses_wmouse_trafo":{"s":"Transforms window\/stdscr coordinates","y":"bool ncurses_wmouse_trafo\n    ( resource $window\n   , int &$y\n   , int &$x\n   , bool $toscreen\n   )","r":"","p":[{"t":"window","d":""},{"t":"x","d":""},{"t":"y","d":""},{"t":"toscreen","d":""}]},"ncurses_wmove":{"s":"Moves windows output position","y":"int ncurses_wmove\n    ( resource $window\n   , int $y\n   , int $x\n   )","r":"","p":[{"t":"window","d":""},{"t":"y","d":""},{"t":"x","d":""}]},"ncurses_wnoutrefresh":{"s":"Copies window to virtual screen","y":"int ncurses_wnoutrefresh\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wrefresh":{"s":"Refresh window on terminal screen ","y":"int ncurses_wrefresh\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wstandend":{"s":"End standout mode for a window","y":"int ncurses_wstandend\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wstandout":{"s":"Enter standout mode for a window","y":"int ncurses_wstandout\n    ( resource $window\n   )","r":"","p":[{"t":"window","d":""}]},"ncurses_wvline":{"s":"Draws a vertical line in a window at current position using an attributed character and max. n characters long","y":"int ncurses_wvline\n    ( resource $window\n   , int $charattr\n   , int $n\n   )","r":"","p":[{"t":"window","d":""},{"t":"charattr","d":""},{"t":"n","d":""}]},"newt_bell":{"s":"Send a beep to the terminal","y":"void newt_bell\n    ( void\n   )","r":"No value is returned.","p":null},"newt_button":{"s":"Create a new button","y":"resource newt_button\n    ( int $left\n   , int $top\n   , string $text\n   )","r":"Returns a resource link to the created button component, or FALSE on\n   error.","p":[{"t":"left","d":"X-coordinate of the button."},{"t":"top","d":"Y-coordinate of the button."},{"t":"text","d":"The text which should be displayed in the button."}]},"newt_button_bar":{"s":"This function returns a grid containing the buttons created.","y":"resource newt_button_bar\n    ( array &$buttons\n   )","r":"Returns grid containing the buttons created.","p":[{"t":"buttons","d":""}]},"newt_centered_window":{"s":"Open a centered window of the specified size","y":"int newt_centered_window\n    ( int $width\n   , int $height\n   [, string $title\n  ] )","r":"Undefined value.","p":[{"t":"width","d":"Window width"},{"t":"height","d":"Window height"},{"t":"title","d":"Window title"}]},"newt_checkbox":{"s":"","y":"\n   resource newt_checkbox\n    ( int $left\n   , int $top\n   , string $text\n   , string $def_value\n   [, string $seq\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"text","d":""},{"t":"def_value","d":""},{"t":"seq","d":""}]},"newt_checkbox_get_value":{"s":"Retreives value of checkox resource","y":"string newt_checkbox_get_value\n    ( resource $checkbox\n   )","r":"Returns character indicating the value of the checkbox.","p":[{"t":"checkbox","d":""}]},"newt_checkbox_set_flags":{"s":"Configures checkbox resource","y":"void newt_checkbox_set_flags\n    ( resource $checkbox\n   , int $flags\n   , int $sense\n   )","r":"No value is returned.","p":[{"t":"checkbox","d":""},{"t":"flags","d":""},{"t":"sense","d":""}]},"newt_checkbox_set_value":{"s":"Sets the value of the checkbox","y":"void newt_checkbox_set_value\n    ( resource $checkbox\n   , string $value\n   )","r":"No value is returned.","p":[{"t":"checkbox","d":""},{"t":"value","d":""}]},"newt_checkbox_tree":{"s":"","y":"\n   resource newt_checkbox_tree\n    ( int $left\n   , int $top\n   , int $height\n   [, int $flags\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"height","d":""},{"t":"flags","d":""}]},"newt_checkbox_tree_add_item":{"s":"Adds new item to the checkbox tree","y":"void newt_checkbox_tree_add_item\n    ( resource $checkboxtree\n   , string $text\n   , mixed $data\n   , int $flags\n   , int $index\n   [, int $...\n  ] )","r":"No value is returned.","p":[{"t":"checkboxtree","d":""},{"t":"text","d":""},{"t":"data","d":""},{"t":"flags","d":""},{"t":"index","d":""}]},"newt_checkbox_tree_find_item":{"s":"Finds an item in the checkbox tree","y":"array newt_checkbox_tree_find_item\n    ( resource $checkboxtree\n   , mixed $data\n   )","r":"Returns checkbox tree item resource, or NULL if it wasn&#039;t found.","p":[{"t":"checkboxtree","d":""},{"t":"data","d":""}]},"newt_checkbox_tree_get_current":{"s":"Returns checkbox tree selected item","y":"mixed newt_checkbox_tree_get_current\n    ( resource $checkboxtree\n   )","r":"Returns current (selected) checkbox tree item.","p":[{"t":"checkboxtree","d":""}]},"newt_checkbox_tree_get_entry_value":{"s":"","y":"\n   string newt_checkbox_tree_get_entry_value\n    ( resource $checkboxtree\n   , mixed $data\n   )","p":[{"t":"checkboxtree","d":""},{"t":"data","d":""}]},"newt_checkbox_tree_get_multi_selection":{"s":"","y":"\n   array newt_checkbox_tree_get_multi_selection\n    ( resource $checkboxtree\n   , string $seqnum\n   )","p":[{"t":"checkboxtree","d":""},{"t":"seqnum","d":""}]},"newt_checkbox_tree_get_selection":{"s":"","y":"\n   array newt_checkbox_tree_get_selection\n    ( resource $checkboxtree\n   )","p":[{"t":"checkboxtree","d":""}]},"newt_checkbox_tree_multi":{"s":"","y":"\n   resource newt_checkbox_tree_multi\n    ( int $left\n   , int $top\n   , int $height\n   , string $seq\n   [, int $flags\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"height","d":""},{"t":"seq","d":""},{"t":"flags","d":""}]},"newt_checkbox_tree_set_current":{"s":"","y":"\n   void newt_checkbox_tree_set_current\n    ( resource $checkboxtree\n   , mixed $data\n   )","p":[{"t":"checkboxtree","d":""},{"t":"data","d":""}]},"newt_checkbox_tree_set_entry":{"s":"","y":"\n   void newt_checkbox_tree_set_entry\n    ( resource $checkboxtree\n   , mixed $data\n   , string $text\n   )","p":[{"t":"checkboxtree","d":""},{"t":"data","d":""},{"t":"text","d":""}]},"newt_checkbox_tree_set_entry_value":{"s":"","y":"\n   void newt_checkbox_tree_set_entry_value\n    ( resource $checkboxtree\n   , mixed $data\n   , string $value\n   )","p":[{"t":"checkboxtree","d":""},{"t":"data","d":""},{"t":"value","d":""}]},"newt_checkbox_tree_set_width":{"s":"","y":"\n   void newt_checkbox_tree_set_width\n    ( resource $checkbox_tree\n   , int $width\n   )","p":[{"t":"checkbox_tree","d":""},{"t":"width","d":""}]},"newt_compact_button":{"s":"","y":"\n   resource newt_compact_button\n    ( int $left\n   , int $top\n   , string $text\n   )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"text","d":""}]},"newt_component_add_callback":{"s":"","y":"\n   void newt_component_add_callback\n    ( resource $component\n   , mixed $func_name\n   , mixed $data\n   )","p":[{"t":"component","d":""},{"t":"func_name","d":""},{"t":"data","d":""}]},"newt_component_takes_focus":{"s":"","y":"\n   void newt_component_takes_focus\n    ( resource $component\n   , bool $takes_focus\n   )","p":[{"t":"component","d":""},{"t":"takes_focus","d":""}]},"newt_create_grid":{"s":"","y":"\n   resource newt_create_grid\n    ( int $cols\n   , int $rows\n   )","p":[{"t":"cols","d":""},{"t":"rows","d":""}]},"newt_delay":{"s":"","y":"\n   void newt_delay\n    ( int $microseconds\n   )","p":[{"t":"microseconds","d":""}]},"newt_draw_form":{"s":"","y":"\n   void newt_draw_form\n    ( resource $form\n   )","p":[{"t":"form","d":""}]},"newt_draw_root_text":{"s":"Displays the string text at the position indicated","y":"void newt_draw_root_text\n    ( int $left\n   , int $top\n   , string $text\n   )","r":"No value is returned.","p":[{"t":"left","d":"Column number"},{"t":"top","d":"Line number"},{"t":"text","d":"Text to display."}]},"newt_entry":{"s":"","y":"\n   resource newt_entry\n    ( int $left\n   , int $top\n   , int $width\n   [, string $init_value\n   [, int $flags\n  ]] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"width","d":""},{"t":"init_value","d":""},{"t":"flags","d":""}]},"newt_entry_get_value":{"s":"","y":"\n   string newt_entry_get_value\n    ( resource $entry\n   )","p":[{"t":"entry","d":""}]},"newt_entry_set":{"s":"","y":"\n   void newt_entry_set\n    ( resource $entry\n   , string $value\n   [, bool $cursor_at_end\n  ] )","p":[{"t":"entry","d":""},{"t":"value","d":""},{"t":"cursor_at_end","d":""}]},"newt_entry_set_filter":{"s":"","y":"\n   void newt_entry_set_filter\n    ( resource $entry\n   , callable $filter\n   , mixed $data\n   )","p":[{"t":"entry","d":""},{"t":"filter","d":""},{"t":"data","d":""}]},"newt_finished":{"s":"Uninitializes newt interface","y":"int newt_finished\n    ( void\n   )","r":"Returns 1 on success, 0 on failure.","p":null},"newt_form":{"s":"Create a form","y":"resource newt_form\n    ([ resource $vert_bar\n   [, string $help\n   [, int $flags\n  ]]] )","r":"Returns a resource link to the created form component, or FALSE on\n   error.","p":[{"t":"vert_bar","d":"Vertical scrollbar which should be associated with the form"},{"t":"help","d":"Help text string"},{"t":"flags","d":"Various flags"}]},"newt_form_add_component":{"s":"Adds a single component to the form","y":"void newt_form_add_component\n    ( resource $form\n   , resource $component\n   )","r":"No value is returned.","p":[{"t":"form","d":"Form to which component will be added"},{"t":"component","d":"Component to add to the form"}]},"newt_form_add_components":{"s":"Add several components to the form","y":"void newt_form_add_components\n    ( resource $form\n   , array $components\n   )","r":"No value is returned.","p":[{"t":"form","d":"Form to which components will be added"},{"t":"components","d":"Array of components to add to the form"}]},"newt_form_add_hot_key":{"s":"","y":"\n   void newt_form_add_hot_key\n    ( resource $form\n   , int $key\n   )","p":[{"t":"form","d":""},{"t":"key","d":""}]},"newt_form_destroy":{"s":"Destroys a form","y":"void newt_form_destroy\n    ( resource $form\n   )","r":"No value is returned.","p":[{"t":"form","d":"Form component, which is going to be destroyed"}]},"newt_form_get_current":{"s":"","y":"\n   resource newt_form_get_current\n    ( resource $form\n   )","p":[{"t":"form","d":""}]},"newt_form_run":{"s":"Runs a form","y":"void newt_form_run\n    ( resource $form\n   , array &$exit_struct\n   )","r":"No value is returned.","p":[{"t":"form","d":"Form component"},{"t":"exit_struct","d":"Array, used for returning information after running the form component.\n       Keys and values are described in the following table:\n       \n        Form Exit Structure\n        \n         \n          \n           Index Key\n           Value Type\n           Description\n          \n\n         \n\n         \n          \n           reason\n           integer\n           \n            The reason, why the form has been exited. Possible values are\n            defined here.\n           \n          \n\n          \n           watch\n           resource\n           Resource link, specified in\n           newt_form_watch_fd()\n          \n\n          \n           key\n           integer\n           Hotkey\n          \n\n          \n           component\n           resource\n           Component, which caused the form to exit"}]},"newt_form_set_background":{"s":"","y":"\n   void newt_form_set_background\n    ( resource $from\n   , int $background\n   )","p":[{"t":"from","d":""},{"t":"background","d":""}]},"newt_form_set_size":{"s":"","y":"\n   void newt_form_set_size\n    ( resource $form\n   )","p":[{"t":"form","d":""}]},"newt_form_set_timer":{"s":"","y":"\n   void newt_form_set_timer\n    ( resource $form\n   , int $milliseconds\n   )","p":[{"t":"form","d":""},{"t":"milliseconds","d":""}]},"newt_form_set_width":{"s":"","y":"\n   void newt_form_set_width\n    ( resource $form\n   , int $width\n   )","p":[{"t":"form","d":""},{"t":"width","d":""}]},"newt_form_watch_fd":{"s":"","y":"\n   void newt_form_watch_fd\n    ( resource $form\n   , resource $stream\n   [, int $flags\n  ] )","p":[{"t":"form","d":""},{"t":"stream","d":""},{"t":"flags","d":""}]},"newt_get_screen_size":{"s":"Fills in the passed references with the current size of the\n  terminal","y":"void newt_get_screen_size\n    ( int &$cols\n   , int &$rows\n   )","r":"No value is returned.","p":[{"t":"cols","d":"Number of columns in the terminal"},{"t":"rows","d":"Number of rows in the terminal"}]},"newt_grid_add_components_to_form":{"s":"","y":"\n   void newt_grid_add_components_to_form\n    ( resource $grid\n   , resource $form\n   , bool $recurse\n   )","p":[{"t":"grid","d":""},{"t":"form","d":""},{"t":"recurse","d":""}]},"newt_grid_basic_window":{"s":"","y":"\n   resource newt_grid_basic_window\n    ( resource $text\n   , resource $middle\n   , resource $buttons\n   )","p":[{"t":"text","d":""},{"t":"middle","d":""},{"t":"buttons","d":""}]},"newt_grid_free":{"s":"","y":"\n   void newt_grid_free\n    ( resource $grid\n   , bool $recurse\n   )","p":[{"t":"grid","d":""},{"t":"recurse","d":""}]},"newt_grid_get_size":{"s":"","y":"\n   void newt_grid_get_size\n    ( resouce $grid\n   , int &$width\n   , int &$height\n   )","p":[{"t":"grid","d":""},{"t":"width","d":""},{"t":"height","d":""}]},"newt_grid_h_close_stacked":{"s":"","y":"\n   resource newt_grid_h_close_stacked\n    ( int $element1_type\n   , resource $element1\n   [, int $...\n   [, resource $...\n  ]] )","p":[{"t":"element1_type","d":""},{"t":"element1","d":""}]},"newt_grid_h_stacked":{"s":"","y":"\n   resource newt_grid_h_stacked\n    ( int $element1_type\n   , resource $element1\n   [, int $...\n   [, resource $...\n  ]] )","p":[{"t":"element1_type","d":""},{"t":"element1","d":""}]},"newt_grid_place":{"s":"","y":"\n   void newt_grid_place\n    ( resource $grid\n   , int $left\n   , int $top\n   )","p":[{"t":"grid","d":""},{"t":"left","d":""},{"t":"top","d":""}]},"newt_grid_set_field":{"s":"","y":"\n   void newt_grid_set_field\n    ( resource $grid\n   , int $col\n   , int $row\n   , int $type\n   , resource $val\n   , int $pad_left\n   , int $pad_top\n   , int $pad_right\n   , int $pad_bottom\n   , int $anchor\n   [, int $flags\n  ] )","p":[{"t":"grid","d":""},{"t":"col","d":""},{"t":"row","d":""},{"t":"type","d":""},{"t":"val","d":""},{"t":"pad_left","d":""},{"t":"pad_top","d":""},{"t":"pad_right","d":""},{"t":"pad_bottom","d":""},{"t":"anchor","d":""},{"t":"flags","d":""}]},"newt_grid_simple_window":{"s":"","y":"\n   resource newt_grid_simple_window\n    ( resource $text\n   , resource $middle\n   , resource $buttons\n   )","p":[{"t":"text","d":""},{"t":"middle","d":""},{"t":"buttons","d":""}]},"newt_grid_v_close_stacked":{"s":"","y":"\n   resource newt_grid_v_close_stacked\n    ( int $element1_type\n   , resource $element1\n   [, int $...\n   [, resource $...\n  ]] )","p":[{"t":"element1_type","d":""},{"t":"element1","d":""}]},"newt_grid_v_stacked":{"s":"","y":"\n   resource newt_grid_v_stacked\n    ( int $element1_type\n   , resource $element1\n   [, int $...\n   [, resource $...\n  ]] )","p":[{"t":"element1_type","d":""},{"t":"element1","d":""}]},"newt_grid_wrapped_window":{"s":"","y":"\n   void newt_grid_wrapped_window\n    ( resource $grid\n   , string $title\n   )","p":[{"t":"grid","d":""},{"t":"title","d":""}]},"newt_grid_wrapped_window_at":{"s":"","y":"\n   void newt_grid_wrapped_window_at\n    ( resource $grid\n   , string $title\n   , int $left\n   , int $top\n   )","p":[{"t":"grid","d":""},{"t":"title","d":""},{"t":"left","d":""},{"t":"top","d":""}]},"newt_label":{"s":"","y":"\n   resource newt_label\n    ( int $left\n   , int $top\n   , string $text\n   )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"text","d":""}]},"newt_label_set_text":{"s":"","y":"\n   void newt_label_set_text\n    ( resource $label\n   , string $text\n   )","p":[{"t":"label","d":""},{"t":"text","d":""}]},"newt_listbox":{"s":"","y":"\n   resource newt_listbox\n    ( int $left\n   , int $top\n   , int $height\n   [, int $flags\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"height","d":""},{"t":"flags","d":""}]},"newt_listbox_append_entry":{"s":"","y":"\n   void newt_listbox_append_entry\n    ( resource $listbox\n   , string $text\n   , mixed $data\n   )","p":[{"t":"listbox","d":""},{"t":"text","d":""},{"t":"data","d":""}]},"newt_listbox_clear":{"s":"","y":"\n   void newt_listbox_clear\n    ( resource $listobx\n   )","p":[{"t":"listobx","d":""}]},"newt_listbox_clear_selection":{"s":"","y":"\n   void newt_listbox_clear_selection\n    ( resource $listbox\n   )","p":[{"t":"listbox","d":""}]},"newt_listbox_delete_entry":{"s":"","y":"\n   void newt_listbox_delete_entry\n    ( resource $listbox\n   , mixed $key\n   )","p":[{"t":"listbox","d":""},{"t":"key","d":""}]},"newt_listbox_get_current":{"s":"","y":"\n   string newt_listbox_get_current\n    ( resource $listbox\n   )","p":[{"t":"listbox","d":""}]},"newt_listbox_get_selection":{"s":"","y":"\n   array newt_listbox_get_selection\n    ( resource $listbox\n   )","p":[{"t":"listbox","d":""}]},"newt_listbox_insert_entry":{"s":"","y":"\n   void newt_listbox_insert_entry\n    ( resource $listbox\n   , string $text\n   , mixed $data\n   , mixed $key\n   )","p":[{"t":"listbox","d":""},{"t":"text","d":""},{"t":"data","d":""},{"t":"key","d":""}]},"newt_listbox_item_count":{"s":"","y":"\n   int newt_listbox_item_count\n    ( resource $listbox\n   )","p":[{"t":"listbox","d":""}]},"newt_listbox_select_item":{"s":"","y":"\n   void newt_listbox_select_item\n    ( resource $listbox\n   , mixed $key\n   , int $sense\n   )","p":[{"t":"listbox","d":""},{"t":"key","d":""},{"t":"sense","d":""}]},"newt_listbox_set_current":{"s":"","y":"\n   void newt_listbox_set_current\n    ( resource $listbox\n   , int $num\n   )","p":[{"t":"listbox","d":""},{"t":"num","d":""}]},"newt_listbox_set_current_by_key":{"s":"","y":"\n   void newt_listbox_set_current_by_key\n    ( resource $listbox\n   , mixed $key\n   )","p":[{"t":"listbox","d":""},{"t":"key","d":""}]},"newt_listbox_set_data":{"s":"","y":"\n   void newt_listbox_set_data\n    ( resource $listbox\n   , int $num\n   , mixed $data\n   )","p":[{"t":"listbox","d":""},{"t":"num","d":""},{"t":"data","d":""}]},"newt_listbox_set_entry":{"s":"","y":"\n   void newt_listbox_set_entry\n    ( resource $listbox\n   , int $num\n   , string $text\n   )","p":[{"t":"listbox","d":""},{"t":"num","d":""},{"t":"text","d":""}]},"newt_listbox_set_width":{"s":"","y":"\n   void newt_listbox_set_width\n    ( resource $listbox\n   , int $width\n   )","p":[{"t":"listbox","d":""},{"t":"width","d":""}]},"newt_listitem":{"s":"","y":"\n   resource newt_listitem\n    ( int $left\n   , int $top\n   , string $text\n   , bool $is_default\n   , resouce $prev_item\n   , mixed $data\n   [, int $flags\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"text","d":""},{"t":"is_default","d":""},{"t":"prev_item","d":""},{"t":"data","d":""},{"t":"flags","d":""}]},"newt_listitem_get_data":{"s":"","y":"\n   mixed newt_listitem_get_data\n    ( resource $item\n   )","p":[{"t":"item","d":""}]},"newt_listitem_set":{"s":"","y":"\n   void newt_listitem_set\n    ( resource $item\n   , string $text\n   )","p":[{"t":"item","d":""},{"t":"text","d":""}]},"newt_open_window":{"s":"Open a window of the specified size and position","y":"int newt_open_window\n    ( int $left\n   , int $top\n   , int $width\n   , int $height\n   [, string $title\n  ] )","r":"Returns 1 on success, 0 on failure.","p":[{"t":"left","d":"Location of the upper left-hand corner of the window (column number)"},{"t":"top","d":"Location of the upper left-hand corner of the window (row number)"},{"t":"width","d":"Window width"},{"t":"height","d":"Window height"},{"t":"title","d":"Window title"}]},"newt_pop_help_line":{"s":"Replaces the current help line with the one from the stack","y":"void newt_pop_help_line\n    ( void\n   )","r":"No value is returned.","p":null},"newt_pop_window":{"s":"Removes the top window from the display","y":"void newt_pop_window\n    ( void\n   )","r":"No value is returned.","p":null},"newt_push_help_line":{"s":"Saves the current help line on a stack, and displays the new line","y":"void newt_push_help_line\n    ([ string $text\n  ] )","r":"No value is returned.","p":[{"t":"text","d":"New help text message"}]},"newt_radiobutton":{"s":"","y":"\n   resource newt_radiobutton\n    ( int $left\n   , int $top\n   , string $text\n   , bool $is_default\n   [, resource $prev_button\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"text","d":""},{"t":"is_default","d":""},{"t":"prev_button","d":""}]},"newt_radio_get_current":{"s":"","y":"\n   resource newt_radio_get_current\n    ( resource $set_member\n   )","p":[{"t":"set_member","d":""}]},"newt_reflow_text":{"s":"","y":"\n   string newt_reflow_text\n    ( string $text\n   , int $width\n   , int $flex_down\n   , int $flex_up\n   , int &$actual_width\n   , int &$actual_height\n   )","p":[{"t":"text","d":""},{"t":"width","d":""},{"t":"flex_down","d":""},{"t":"flex_up","d":""},{"t":"actual_width","d":""},{"t":"actual_height","d":""}]},"newt_refresh":{"s":"Updates modified portions of the screen","y":"void newt_refresh\n    ( void\n   )","r":"No value is returned.","p":null},"newt_resize_screen":{"s":"","y":"\n   void newt_resize_screen\n    ([ bool $redraw\n  ] )","p":[{"t":"redraw","d":""}]},"newt_run_form":{"s":"Runs a form","y":"resource newt_run_form\n    ( resource $form\n   )","r":"The component which caused the form to stop running.","p":[{"t":"form","d":"Form component"}]},"newt_scale":{"s":"","y":"\n   resource newt_scale\n    ( int $left\n   , int $top\n   , int $width\n   , int $full_value\n   )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"width","d":""},{"t":"full_value","d":""}]},"newt_scale_set":{"s":"","y":"\n   void newt_scale_set\n    ( resource $scale\n   , int $amount\n   )","p":[{"t":"scale","d":""},{"t":"amount","d":""}]},"newt_scrollbar_set":{"s":"","y":"\n   void newt_scrollbar_set\n    ( resource $scrollbar\n   , int $where\n   , int $total\n   )","p":[{"t":"scrollbar","d":""},{"t":"where","d":""},{"t":"total","d":""}]},"newt_set_help_callback":{"s":"","y":"\n   void newt_set_help_callback\n    ( mixed $function\n   )","p":[{"t":"function","d":""}]},"newt_set_suspend_callback":{"s":"Set a callback function which gets invoked when user\n  presses the suspend key","y":"void newt_set_suspend_callback\n    ( callable $function\n   , mixed $data\n   )","r":"No value is returned.","p":[{"t":"function","d":"A callback function, which accepts one argument: data"},{"t":"data","d":"This data is been passed to the callback function"}]},"newt_suspend":{"s":"Tells newt to return the terminal to its initial state","y":"void newt_suspend\n    ( void\n   )","r":"No value is returned.","p":null},"newt_textbox":{"s":"","y":"\n   resource newt_textbox\n    ( int $left\n   , int $top\n   , int $width\n   , int $height\n   [, int $flags\n  ] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"width","d":""},{"t":"height","d":""},{"t":"flags","d":""}]},"newt_textbox_get_num_lines":{"s":"","y":"\n   int newt_textbox_get_num_lines\n    ( resource $textbox\n   )","p":[{"t":"textbox","d":""}]},"newt_textbox_set_height":{"s":"","y":"\n   void newt_textbox_set_height\n    ( resource $textbox\n   , int $height\n   )","p":[{"t":"textbox","d":""},{"t":"height","d":""}]},"newt_textbox_set_text":{"s":"","y":"\n   void newt_textbox_set_text\n    ( resource $textbox\n   , string $text\n   )","p":[{"t":"textbox","d":""},{"t":"text","d":""}]},"newt_vertical_scrollbar":{"s":"","y":"\n   resource newt_vertical_scrollbar\n    ( int $left\n   , int $top\n   , int $height\n   [, int $normal_colorset\n   [, int $thumb_colorset\n  ]] )","p":[{"t":"left","d":""},{"t":"top","d":""},{"t":"height","d":""},{"t":"normal_colorset","d":""},{"t":"thumb_colorset","d":""}]},"newt_wait_for_key":{"s":"Doesn&#039;t return until a key has been pressed","y":"void newt_wait_for_key\n    ( void\n   )","r":"No value is returned.","p":null},"newt_win_choice":{"s":"","y":"\n   int newt_win_choice\n    ( string $title\n   , string $button1_text\n   , string $button2_text\n   , string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","p":[{"t":"title","d":""},{"t":"button1_text","d":""},{"t":"button2_text","d":""},{"t":"format","d":""},{"t":"args","d":""}]},"newt_win_entries":{"s":"","y":"\n   int newt_win_entries\n    ( string $title\n   , string $text\n   , int $suggested_width\n   , int $flex_down\n   , int $flex_up\n   , int $data_width\n   , array &$items\n   , string $button1\n   [, string $...\n  ] )","p":[{"t":"title","d":""},{"t":"text","d":""},{"t":"suggested_width","d":""},{"t":"flex_down","d":""},{"t":"flex_up","d":""},{"t":"data_width","d":""},{"t":"items","d":""},{"t":"button1","d":""},{"t":"button2","d":""}]},"newt_win_menu":{"s":"","y":"\n   int newt_win_menu\n    ( string $title\n   , string $text\n   , int $suggestedWidth\n   , int $flexDown\n   , int $flexUp\n   , int $maxListHeight\n   , array $items\n   , int &$listItem\n   [, string $button1\n   [, string $...\n  ]] )","p":[{"t":"title","d":""},{"t":"text","d":""},{"t":"suggestedWidth","d":""},{"t":"flexDown","d":""},{"t":"flexUp","d":""},{"t":"maxListHeight","d":""},{"t":"items","d":""},{"t":"listItem","d":""},{"t":"button1","d":""}]},"newt_win_message":{"s":"","y":"\n   void newt_win_message\n    ( string $title\n   , string $button_text\n   , string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","p":[{"t":"title","d":""},{"t":"button_text","d":""},{"t":"format","d":""},{"t":"args","d":""}]},"newt_win_messagev":{"s":"","y":"\n   void newt_win_messagev\n    ( string $title\n   , string $button_text\n   , string $format\n   , array $args\n   )","p":[{"t":"title","d":""},{"t":"button_text","d":""},{"t":"format","d":""},{"t":"args","d":""}]},"newt_win_ternary":{"s":"","y":"\n   int newt_win_ternary\n    ( string $title\n   , string $button1_text\n   , string $button2_text\n   , string $button3_text\n   , string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","p":[{"t":"title","d":"Its description"},{"t":"button1_text","d":"Its description"},{"t":"button2_text","d":"Its description"},{"t":"button3_text","d":"Its description"},{"t":"format","d":"Its description"},{"t":"args","d":"Its description"}]},"next":{"s":"Advance the internal array pointer of an array","y":"mixed next\n    ( array &$array\n   )","r":"Returns the array value in the next place that&#039;s pointed to by the\n   internal array pointer, or FALSE if there are no more elements.","p":[{"t":"array","d":"The array being affected."}]},"nl2br":{"s":"Inserts HTML line breaks before all newlines in a string","y":"string nl2br\n    ( string $string\n   [, bool $is_xhtml = true\n  ] )","r":"Returns the altered string.","p":[{"t":"string","d":"The input string."},{"t":"is_xhtml","d":"Whether to use XHTML compatible line breaks or not."}]},"nl_langinfo":{"s":"Query language and locale information","y":"string nl_langinfo\n    ( int $item\n   )","r":"Returns the element as a string, or FALSE if item\n   is not valid.","p":[{"t":"item","d":"item may be an integer value of the element or the\n       constant name of the element. The following is a list of constant names\n       for item that may be used and their description.\n       Some of these constants may not be defined or hold no value for certain\n       locales.\n       \n        nl_langinfo Constants\n        \n         \n         \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LC_TIME Category Constants\n          \n\n          \n           ABDAY_(1-7)\n           Abbreviated name of n-th day of the week.\n          \n\n          \n           DAY_(1-7)\n           Name of the n-th day of the week (DAY_1 = Sunday).\n          \n\n          \n           ABMON_(1-12)\n           Abbreviated name of the n-th month of the year.\n          \n\n          \n           MON_(1-12)\n           Name of the n-th month of the year.\n          \n\n          \n           AM_STR\n           String for Ante meridian.\n          \n\n          \n           PM_STR\n           String for Post meridian.\n          \n\n          \n           D_T_FMT\n           String that can be used as the format string for strftime() to represent time and date.\n          \n\n          \n           D_FMT\n           String that can be used as the format string for strftime() to represent date.\n          \n\n          \n           T_FMT\n           String that can be used as the format string for strftime() to represent time.\n          \n\n          \n           T_FMT_AMPM\n           String that can be used as the format string for strftime() to represent time in 12-hour format with ante\/post meridian.\n          \n\n          \n           ERA\n           Alternate era.\n          \n\n          \n           ERA_YEAR\n           Year in alternate era format.\n          \n\n          \n           ERA_D_T_FMT\n           Date and time in alternate era format (string can be used in strftime()).\n          \n\n          \n           ERA_D_FMT\n           Date in alternate era format (string can be used in strftime()).\n          \n\n          \n           ERA_T_FMT\n           Time in alternate era format (string can be used in strftime()).\n          \n\n          \n           LC_MONETARY Category Constants\n          \n\n          \n           INT_CURR_SYMBOL\n           International currency symbol.\n          \n\n          \n           CURRENCY_SYMBOL\n           Local currency symbol.\n          \n\n          \n           CRNCYSTR\n           Same value as CURRENCY_SYMBOL.\n          \n\n          \n           MON_DECIMAL_POINT\n           Decimal point character.\n          \n\n          \n           MON_THOUSANDS_SEP\n           Thousands separator (groups of three digits).\n          \n\n          \n           MON_GROUPING\n           Like &quot;grouping&quot; element.\n          \n\n          \n           POSITIVE_SIGN\n           Sign for positive values.\n          \n\n          \n           NEGATIVE_SIGN\n           Sign for negative values.\n          \n\n          \n           INT_FRAC_DIGITS\n           International fractional digits.\n          \n\n          \n           FRAC_DIGITS\n           Local fractional digits.\n          \n\n          \n           P_CS_PRECEDES\n           Returns 1 if CURRENCY_SYMBOL precedes a positive value.\n          \n\n          \n           P_SEP_BY_SPACE\n           Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.\n          \n\n          \n           N_CS_PRECEDES\n           Returns 1 if CURRENCY_SYMBOL precedes a negative value.\n          \n\n          \n           N_SEP_BY_SPACE\n           Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.\n          \n\n          \n           P_SIGN_POSN\n           \n            \n             \n              \n                Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL.\n              \n             \n            \n           \n          \n\n          \n           N_SIGN_POSN\n          \n\n          \n           LC_NUMERIC Category Constants\n          \n\n          \n           DECIMAL_POINT\n           Decimal point character.\n          \n\n          \n           RADIXCHAR\n           Same value as DECIMAL_POINT.\n          \n\n          \n           THOUSANDS_SEP\n           Separator character for thousands (groups of three digits).\n          \n\n          \n           THOUSEP\n           Same value as THOUSANDS_SEP.\n          \n\n          \n           GROUPING\n           &nbsp;\n          \n\n          \n           LC_MESSAGES Category Constants\n          \n\n          \n           YESEXPR\n           Regex string for matching &quot;yes&quot; input.\n          \n\n          \n           NOEXPR\n           Regex string for matching &quot;no&quot; input.\n          \n\n          \n           YESSTR\n           Output string for &quot;yes&quot;.\n          \n\n          \n           NOSTR\n           Output string for &quot;no&quot;.\n          \n\n          \n           LC_CTYPE Category Constants\n          \n\n          \n           CODESET\n           Return a string with the name of the character encoding."}]},"notes_body":{"s":"Open the message msg_number in the specified mailbox on the specified server (leave serv","y":"array notes_body\n    ( string $server\n   , string $mailbox\n   , int $msg_number\n   )","r":"","p":null},"notes_copy_db":{"s":"Copy a Lotus Notes database","y":"bool notes_copy_db\n    ( string $from_database_name\n   , string $to_database_name\n   )","r":"","p":null},"notes_create_db":{"s":"Create a Lotus Notes database","y":"bool notes_create_db\n    ( string $database_name\n   )","r":"","p":null},"notes_create_note":{"s":"Create a note using form form_name","y":"bool notes_create_note\n    ( string $database_name\n   , string $form_name\n   )","r":"","p":null},"notes_drop_db":{"s":"Drop a Lotus Notes database","y":"bool notes_drop_db\n    ( string $database_name\n   )","r":"","p":null},"notes_find_note":{"s":"Returns a note id found in database_name","y":"int notes_find_note\n    ( string $database_name\n   , string $name\n   [, string $type\n  ] )","r":"","p":null},"notes_header_info":{"s":"Open the message msg_number in the specified mailbox on the specified server (leave serv","y":"object notes_header_info\n    ( string $server\n   , string $mailbox\n   , int $msg_number\n   )","r":"","p":null},"notes_list_msgs":{"s":"Returns the notes from a selected database_name","y":"bool notes_list_msgs\n    ( string $db\n   )","r":"","p":null},"notes_mark_read":{"s":"Mark a note_id as read for the User user_name","y":"bool notes_mark_read\n    ( string $database_name\n   , string $user_name\n   , string $note_id\n   )","r":"","p":null},"notes_mark_unread":{"s":"Mark a note_id as unread for the User user_name","y":"bool notes_mark_unread\n    ( string $database_name\n   , string $user_name\n   , string $note_id\n   )","r":"","p":null},"notes_nav_create":{"s":"Create a navigator name, in database_name","y":"bool notes_nav_create\n    ( string $database_name\n   , string $name\n   )","r":"","p":null},"notes_search":{"s":"Find notes that match keywords in database_name","y":"array notes_search\n    ( string $database_name\n   , string $keywords\n   )","r":"","p":null},"notes_unread":{"s":"Returns the unread note id&#039;s for the current User user_name","y":"array notes_unread\n    ( string $database_name\n   , string $user_name\n   )","r":"","p":null},"notes_version":{"s":"Get the version Lotus Notes","y":"float notes_version\n    ( string $database_name\n   )","r":"","p":null},"nsapi_request_headers":{"s":"Fetch all HTTP request headers","y":"array nsapi_request_headers\n    ( void\n   )","r":"Returns an associative array with all the HTTP headers.","p":null},"nsapi_virtual":{"s":"Perform an NSAPI sub-request","y":"bool nsapi_virtual\n    ( string $uri\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"uri","d":"The URI of the script."}]},"nthmac":{"s":"Obtain a nthmac key (needs 2 arguments)","y":"string nthmac\n    ( string $clent\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"number_format":{"s":"Format a number with grouped thousands","y":"string number_format\n    ( float $number\n   [, int $decimals = 0\n  ] )","r":"A formatted version of number.","p":[{"t":"number","d":"The number being formatted."},{"t":"decimals","d":"Sets the number of decimal points."},{"t":"dec_point","d":"Sets the separator for the decimal point."},{"t":"thousands_sep","d":"Sets the thousands separator."}]},"oauth_get_sbs":{"s":"Generate a Signature Base String","y":"string oauth_get_sbs\n    ( string $http_method\n   , string $uri\n   [, array $request_parameters\n  ] )","r":"Returns a Signature Base String.","p":[{"t":"http_method","d":"The HTTP method."},{"t":"uri","d":"URI to encode."},{"t":"request_parameters","d":"Array of request parameters."}]},"oauth_urlencode":{"s":"Encode a URI to RFC 3986","y":"string oauth_urlencode\n    ( string $uri\n   )","r":"Returns an &raquo;&nbsp;RFC 3986 encoded string.","p":[{"t":"uri","d":"URI to encode."}]},"ob_clean":{"s":"Clean (erase) the output buffer","y":"void ob_clean\n    ( void\n   )","r":"No value is returned.","p":null},"ob_deflatehandler":{"s":"Deflate output handler","y":"string ob_deflatehandler\n    ( string $data\n   , int $mode\n   )","r":"","p":null},"ob_end_clean":{"s":"Clean (erase) the output buffer and turn off output buffering","y":"bool ob_end_clean\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the\n   function without an active buffer or that for some reason a buffer could\n   not be deleted (possible for special buffer).","p":null},"ob_end_flush":{"s":"Flush (send) the output buffer and turn off output buffering","y":"bool ob_end_flush\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the\n   function without an active buffer or that for some reason a buffer could\n   not be deleted (possible for special buffer).","p":null},"ob_etaghandler":{"s":"ETag output handler","y":"string ob_etaghandler\n    ( string $data\n   , int $mode\n   )","r":"","p":null},"ob_flush":{"s":"Flush (send) the output buffer","y":"void ob_flush\n    ( void\n   )","r":"No value is returned.","p":null},"ob_get_clean":{"s":"Get current buffer contents and delete current output buffer","y":"string ob_get_clean\n    ( void\n   )","r":"Returns the contents of the output buffer and end output buffering.\n   If output buffering isn&#039;t active then FALSE is returned.","p":null},"ob_get_contents":{"s":"Return the contents of the output buffer","y":"string ob_get_contents\n    ( void\n   )","r":"This will return the contents of the output buffer or FALSE, if output\n   buffering isn&#039;t active.","p":null},"ob_get_flush":{"s":"Flush the output buffer, return it as a string and turn off output buffering","y":"string ob_get_flush\n    ( void\n   )","r":"Returns the output buffer or FALSE if no buffering is active.","p":null},"ob_get_level":{"s":"Return the nesting level of the output buffering mechanism","y":"int ob_get_level\n    ( void\n   )","r":"Returns the level of nested output buffering handlers or zero if output\n   buffering is not active.","p":null},"ob_get_status":{"s":"Get status of output buffers","y":"array ob_get_status\n    ([ bool  $full_status  = FALSE\n  ] )","r":"","p":[{"t":"full_status","d":"TRUE to return all active output buffer levels. If FALSE or not\n       set, only the top level output buffer is returned."}]},"ob_iconv_handler":{"s":"Convert character encoding as output buffer handler","y":"string ob_iconv_handler\n    ( string $contents\n   , int $status\n   )","r":"See ob_start() for information about this handler\n   return values.","p":null},"ob_implicit_flush":{"s":"Turn implicit flush on\/off","y":"void ob_implicit_flush\n    ([ int $flag = true\n  ] )","r":"No value is returned.","p":[{"t":"flag","d":"TRUE to turn implicit flushing on, FALSE otherwise."}]},"ob_inflatehandler":{"s":"Inflate output handler","y":"string ob_inflatehandler\n    ( string $data\n   , int $mode\n   )","r":"","p":null},"ob_list_handlers":{"s":"List all output handlers in use","y":"array ob_list_handlers\n    ( void\n   )","r":"This will return an array with the output handlers in use (if any). If\n   output_buffering is enabled or\n   an anonymous function was used with ob_start(),\n   ob_list_handlers() will return &quot;default output\n   handler&quot;.","p":null},"ob_start":{"s":"Turn on output buffering","y":"bool ob_start\n    ([ callable $output_callback = NULL\n   [, int $chunk_size = 0\n   [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"output_callback","d":"An optional output_callback function may be\n       specified. This function takes a string as a parameter and should\n       return a string. The function will be called when\n       the output buffer is flushed (sent) or cleaned (with\n       ob_flush(), ob_clean() or similar\n       function) or when the output buffer\n       is flushed to the browser at the end of the request.  When\n       output_callback is called, it will receive the\n       contents of the output buffer as its parameter and is expected to\n       return a new output buffer as a result, which will be sent to the\n       browser. If the output_callback is not a\n       callable function, this function will return FALSE.\n       This is the callback signature:"}]},"ocibindbyname":{"s":"Alias of oci_bind_by_name()","y":"","r":"","p":null},"ocicancel":{"s":"Alias of oci_cancel()","y":"","r":"","p":null},"ocicloselob":{"s":"Alias of OCI-Lob::close()","y":"","r":"","p":null},"ocicollappend":{"s":"Alias of OCI-Collection::append()","y":"","r":"","p":null},"ocicollassign":{"s":"Alias of OCI-Collection::assign()","y":"","r":"","p":null},"ocicollassignelem":{"s":"Alias of OCI-Collection::assignElem()","y":"","r":"","p":null},"ocicollgetelem":{"s":"Alias of OCI-Collection::getElem()","y":"","r":"","p":null},"ocicollmax":{"s":"Alias of OCI-Collection::max()","y":"","r":"","p":null},"ocicolltrim":{"s":"Alias of OCI-Collection::trim()","y":"","r":"","p":null},"ocicolumnisnull":{"s":"Alias of oci_field_is_null()","y":"","r":"","p":null},"ocicolumnname":{"s":"Alias of oci_field_name()","y":"","r":"","p":null},"ocicolumnprecision":{"s":"Alias of oci_field_precision()","y":"","r":"","p":null},"ocicolumnscale":{"s":"Alias of oci_field_scale()","y":"","r":"","p":null},"ocicolumnsize":{"s":"Alias of oci_field_size()","y":"","r":"","p":null},"ocicolumntype":{"s":"Alias of oci_field_type()","y":"","r":"","p":null},"ocicolumntyperaw":{"s":"Alias of oci_field_type_raw()","y":"","r":"","p":null},"ocicommit":{"s":"Alias of oci_commit()","y":"","r":"","p":null},"ocidefinebyname":{"s":"Alias of oci_define_by_name()","y":"","r":"","p":null},"ocierror":{"s":"Alias of oci_error()","y":"","r":"","p":null},"ociexecute":{"s":"Alias of oci_execute()","y":"","r":"","p":null},"ocifetch":{"s":"Alias of oci_fetch()","y":"","r":"","p":null},"ocifetchinto":{"s":"Obsolete variant of oci_fetch_array()","y":"","r":"","p":null},"ocifetchstatement":{"s":"Alias of oci_fetch_all()","y":"","r":"","p":null},"ocifreecollection":{"s":"Alias of OCI-Collection::free()","y":"","r":"","p":null},"ocifreecursor":{"s":"Alias of oci_free_statement()","y":"","r":"","p":null},"ocifreedesc":{"s":"Alias of OCI-Lob::free()","y":"","r":"","p":null},"ocifreestatement":{"s":"Alias of oci_free_statement()","y":"","r":"","p":null},"ociinternaldebug":{"s":"Alias of oci_internal_debug()","y":"","r":"","p":null},"ociloadlob":{"s":"Alias of OCI-Lob::load()","y":"","r":"","p":null},"ocilogoff":{"s":"Alias of oci_close()","y":"","r":"","p":null},"ocinewcollection":{"s":"Alias of oci_new_collection()","y":"","r":"","p":null},"ocinewcursor":{"s":"Alias of oci_new_cursor()","y":"","r":"","p":null},"ocinewdescriptor":{"s":"Alias of oci_new_descriptor()","y":"","r":"","p":null},"ocinlogon":{"s":"Alias of oci_new_connect()","y":"","r":"","p":null},"ocinumcols":{"s":"Alias of oci_num_fields()","y":"","r":"","p":null},"ociparse":{"s":"Alias of oci_parse()","y":"","r":"","p":null},"ociplogon":{"s":"Alias of oci_pconnect()","y":"","r":"","p":null},"ociresult":{"s":"Alias of oci_result()","y":"","r":"","p":null},"ocirollback":{"s":"Alias of oci_rollback()","y":"","r":"","p":null},"ocirowcount":{"s":"Alias of oci_num_rows()","y":"","r":"","p":null},"ocisavelob":{"s":"Alias of OCI-Lob::save()","y":"","r":"","p":null},"ocisavelobfile":{"s":"Alias of OCI-Lob::import()","y":"","r":"","p":null},"ociserverversion":{"s":"Alias of oci_server_version()","y":"","r":"","p":null},"ocisetprefetch":{"s":"Alias of oci_set_prefetch()","y":"","r":"","p":null},"ocistatementtype":{"s":"Alias of oci_statement_type()","y":"","r":"","p":null},"ociwritelobtofile":{"s":"Alias of OCI-Lob::export()","y":"","r":"","p":null},"ociwritetemporarylob":{"s":"Alias of OCI-Lob::writeTemporary()","y":"","r":"","p":null},"oci_bind_array_by_name":{"s":"Binds a PHP array to an Oracle PL\/SQL array parameter","y":"bool oci_bind_array_by_name\n    ( resource $statement\n   , string $name\n   , array &$var_array\n   , int $max_table_length\n   [, int $max_item_length = -1\n   [, int $type = SQLT_AFC\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"name","d":"The Oracle placeholder."},{"t":"var_array","d":"An array."},{"t":"max_table_length","d":"Sets the maximum length both for incoming and result arrays."},{"t":"max_item_length","d":"Sets maximum length for array items. If not specified or equals to -1,\n       oci_bind_array_by_name() will find the longest\n       element in the incoming array and will use it as the maximum length."},{"t":"type","d":"Should be used to set the type of PL\/SQL array items. See list of\n       available types below:"}]},"oci_bind_by_name":{"s":"Binds a PHP variable to an Oracle placeholder","y":"bool oci_bind_by_name\n    ( resource $statement\n   , string $bv_name\n   , mixed &$variable\n   [, int $maxlength = -1\n   [, int $type = SQLT_CHR\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI8 statement identifer."},{"t":"bv_name","d":"The colon-prefixed bind variable placeholder used in the\n       statement.  The colon is optional\n       in bv_name. Oracle does not use question\n       marks for placeholders."},{"t":"variable","d":"The PHP variable to be associated with bv_name"},{"t":"maxlength","d":"Sets the maximum length for the data. If you set it to -1, this\n       function will use the current length\n       of variable to set the maximum\n       length. In this case the variable must\n       exist and contain data\n       when oci_bind_by_name() is called."},{"t":"type","d":"The datatype that Oracle will treat the data as.  The\n       default type used\n       is SQLT_CHR. Oracle will convert the data\n       between this type and the database column (or PL\/SQL variable\n       type), when possible."}]},"oci_cancel":{"s":"Cancels reading from cursor","y":"bool oci_cancel\n    ( resource $statement\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"An OCI statement."}]},"oci_client_version":{"s":"Returns the Oracle client library version","y":"string oci_client_version\n    ( void\n   )","r":"Returns the version number as a string.","p":null},"oci_commit":{"s":"Commits the outstanding database transaction","y":"bool oci_commit\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by\n       oci_connect(), oci_pconnect(), or oci_new_connect()."}]},"oci_connect":{"s":"Connect to an Oracle database","y":"resource oci_connect\n    ( string $username\n   , string $password\n   [, string $connection_string\n   [, string $character_set\n   [, int $session_mode\n  ]]] )","r":"Returns a connection identifier or FALSE on error.","p":[{"t":"username","d":"The Oracle user name."},{"t":"password","d":"The password for username."},{"t":"connection_string","d":"Contains\nthe Oracle instance to connect to. It can be\nan &raquo;&nbsp;Easy Connect\nstring, or a Connect Name from\nthe tnsnames.ora file, or the name of a local\nOracle instance."},{"t":"character_set","d":"Determines\nthe character set used by the Oracle Client libraries.  The character\nset does not need to match the character set used by the database.  If\nit doesn&#039;t match, Oracle will do its best to convert data to and from\nthe database character set.  Depending on the character sets this may\nnot give usable results.  Conversion also adds some time overhead."},{"t":"session_mode","d":"This\nparameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the\nfollowing values: OCI_DEFAULT,\nOCI_SYSOPER and OCI_SYSDBA.\nIf either OCI_SYSOPER or\nOCI_SYSDBA were specified, this function will try\nto establish privileged connection using external credentials.\nPrivileged connections are disabled by default. To enable them you\nneed to set oci8.privileged_connect\nto On."}]},"oci_define_by_name":{"s":"Associates a PHP variable with a column for query fetches","y":"bool oci_define_by_name\n    ( resource $statement\n   , string $column_name\n   , mixed &$variable\n   [, int $type = SQLT_CHR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."},{"t":"column_name","d":"The column name used in the query."},{"t":"variable","d":"The PHP variable that will contain the returned column value."},{"t":"type","d":"The data type to be returned.  Generally not needed.  Note that\n        Oracle-style data conversions are not performed.  For example,\n        SQLT_INT will be ignored and the returned\n        data type will still be SQLT_CHR."}]},"oci_error":{"s":"Returns the last error found","y":"array oci_error\n    ([ resource $resource\n  ] )","r":"If no error is found, oci_error() returns\n   FALSE. Otherwise, oci_error() returns the\n   error information as an associative array.","p":[{"t":"resource","d":"For most errors, resource is the\n       resource handle that was passed to the failing function call.\n       For connection errors with oci_connect(),\n       oci_new_connect() or \n       oci_pconnect() do not pass resource."}]},"oci_execute":{"s":"Executes a statement","y":"bool oci_execute\n    ( resource $statement\n   [, int $mode = OCI_COMMIT_ON_SUCCESS\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"mode","d":"An optional second parameter can be one of the following constants:\n       \n        Execution Modes\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           OCI_COMMIT_ON_SUCCESS\n           Automatically commit all outstanding changes for\n             this connection when the statement has succeeded. This\n             is the default.\n          \n\n          \n           OCI_DESCRIBE_ONLY\n           Make query meta data available to functions\n             like oci_field_name() but do not\n             create a result set. Any subsequent fetch call such\n             as oci_fetch_array() will\n             fail.\n          \n\n          \n           OCI_NO_AUTO_COMMIT\n           Do not automatically commit changes.  Prior to PHP\n             5.3.2 (PECL OCI8 1.4)\n             use OCI_DEFAULT which is equivalent\n             to OCI_NO_AUTO_COMMIT."}]},"oci_fetch":{"s":"Fetches the next row from a query into internal buffers","y":"bool oci_fetch\n    ( resource $statement\n   )","r":"Returns TRUE on success or FALSE if there are no more rows in the\n   statement.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."}]},"oci_fetch_all":{"s":"Fetches multiple rows from a query into a two-dimensional array","y":"int oci_fetch_all\n    ( resource $statement\n   , array &$output\n   [, int $skip = 0\n   [, int $maxrows = -1\n   [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC\n  ]]] )","r":"Returns the number of rows in output, which\n   may be 0 or more,  or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."},{"t":"output","d":"The variable to contain the returned rows."},{"t":"skip","d":"The number of initial rows to discard when fetching the\n       result. The default value is 0, so the first row onwards is\n       returned."},{"t":"maxrows","d":"The number of rows to return.  The default is -1 meaning return\n       all the rows from skip + 1 onwards."},{"t":"flags","d":"Parameter flags indicates the array\n       structure and whether associative arrays should be used.\n       \n        oci_fetch_all() Array Structure Modes\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           OCI_FETCHSTATEMENT_BY_ROW\n           The outer array will contain one sub-array per query\n           row.\n          \n\n          \n           OCI_FETCHSTATEMENT_BY_COLUMN\n           The outer array will contain one sub-array per query\n           column. This is the default."}]},"oci_fetch_array":{"s":"Returns the next row from a query as an associative or numeric array","y":"array oci_fetch_array\n    ( resource $statement\n   [, int $mode\n  ] )","r":"Returns an array with associative and\/or numeric indices. If there\n   are no more rows in the statement then\n   FALSE is returned.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."},{"t":"mode","d":"An optional second parameter can be any combination of the following\n       constants:\n       \n        oci_fetch_array() Modes\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           OCI_BOTH\n           Returns an array with both associative and numeric\n            indices. This is the same\n            as OCI_ASSOC\n            + OCI_NUM and is the default\n            behavior.\n          \n\n          \n           OCI_ASSOC\n           Returns an associative array.\n          \n\n          \n           OCI_NUM\n           Returns a numeric array.\n          \n\n          \n           OCI_RETURN_NULLS\n           Creates elements for NULL fields.  The element\n             values will be a PHP NULL.\n           \n          \n\n          \n           OCI_RETURN_LOBS\n           Returns the contents of LOBs instead of the LOB\n             descriptors."}]},"oci_fetch_assoc":{"s":"Returns the next row from a query as an associative array","y":"array oci_fetch_assoc\n    ( resource $statement\n   )","r":"Returns an associative array. If there are no more rows in\n   the statement then FALSE is returned.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."}]},"oci_fetch_object":{"s":"Returns the next row from a query as an object","y":"object oci_fetch_object\n    ( resource $statement\n   )","r":"Returns an object.  Each attribute of the object corresponds to a\n   column of the row.  If there are no more rows in\n   the statement then FALSE is returned.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."}]},"oci_fetch_row":{"s":"Returns the next row from a query as a numeric array","y":"array oci_fetch_row\n    ( resource $statement\n   )","r":"Returns a numerically indexed array.  If there are no more rows in\n   the statement then FALSE is returned.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."}]},"oci_field_is_null":{"s":"Checks if a field in the currently fetched row is NULL","y":"bool oci_field_is_null\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns TRUE if field is NULL, FALSE otherwise. ","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_name":{"s":"Returns the name of a field from the statement","y":"string oci_field_name\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns the name as a string, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_precision":{"s":"Tell the precision of a field","y":"int oci_field_precision\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns the precision as an integer, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_scale":{"s":"Tell the scale of the field","y":"int oci_field_scale\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns the scale as an integer, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_size":{"s":"Returns field&#039;s size","y":"int oci_field_size\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns the size of a field in bytes, or FALSE on\n   errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_type":{"s":"Returns a field&#039;s data type name","y":"mixed oci_field_type\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns the field data type as a string, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_field_type_raw":{"s":"Tell the raw Oracle data type of the field","y":"int oci_field_type_raw\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns Oracle&#039;s raw data type as a number, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."},{"t":"field","d":"Can be the field&#039;s index (1-based) or name."}]},"oci_free_descriptor":{"s":"Frees a descriptor","y":"bool oci_free_descriptor\n    ( resource $descriptor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"oci_free_statement":{"s":"Frees all resources associated with statement or cursor","y":"bool oci_free_statement\n    ( resource $statement\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI statement identifier."}]},"oci_internal_debug":{"s":"Enables or disables internal debug output","y":"void oci_internal_debug\n    ( bool $onoff\n   )","r":"No value is returned.","p":[{"t":"onoff","d":"Set this to FALSE to turn debug output off or TRUE to turn it on."}]},"oci_lob_copy":{"s":"Copies large object","y":"bool oci_lob_copy\n    ( OCI-Lob $lob_to\n   , OCI-Lob $lob_from\n   [, int $length = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"lob_to","d":"The destination LOB."},{"t":"lob_from","d":"The copied LOB."},{"t":"length","d":"Indicates the length of data to be copied."}]},"oci_lob_is_equal":{"s":"Compares two LOB\/FILE locators for equality","y":"bool oci_lob_is_equal\n    ( OCI-Lob $lob1\n   , OCI-Lob $lob2\n   )","r":"Returns TRUE if these objects are equal, FALSE otherwise.","p":[{"t":"lob1","d":"A LOB identifier."},{"t":"lob2","d":"A LOB identifier."}]},"oci_new_collection":{"s":"Allocates new collection object","y":"OCI-Collection oci_new_collection\n    ( resource $connection\n   , string $tdo\n   [, string $schema = NULL\n  ] )","r":"Returns a new OCICollection object or FALSE on\n   error.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by \n       oci_connect() or oci_pconnect()."},{"t":"tdo","d":"Should be a valid named type (uppercase)."},{"t":"schema","d":"Should point to the scheme, where the named type was created. The name\n       of the current user is the default value."}]},"oci_new_connect":{"s":"Connect to the Oracle server using a unique connection","y":"resource oci_new_connect\n    ( string $username\n   , string $password\n   [, string $connection_string\n   [, string $character_set\n   [, int $session_mode\n  ]]] )","r":"Returns a connection identifier or FALSE on error.","p":[{"t":"username","d":"The Oracle user name."},{"t":"password","d":"The password for username."},{"t":"connection_string","d":"Contains\nthe Oracle instance to connect to. It can be\nan &raquo;&nbsp;Easy Connect\nstring, or a Connect Name from\nthe tnsnames.ora file, or the name of a local\nOracle instance."},{"t":"character_set","d":"Determines\nthe character set used by the Oracle Client libraries.  The character\nset does not need to match the character set used by the database.  If\nit doesn&#039;t match, Oracle will do its best to convert data to and from\nthe database character set.  Depending on the character sets this may\nnot give usable results.  Conversion also adds some time overhead."},{"t":"session_mode","d":"This\nparameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the\nfollowing values: OCI_DEFAULT,\nOCI_SYSOPER and OCI_SYSDBA.\nIf either OCI_SYSOPER or\nOCI_SYSDBA were specified, this function will try\nto establish privileged connection using external credentials.\nPrivileged connections are disabled by default. To enable them you\nneed to set oci8.privileged_connect\nto On."}]},"oci_new_cursor":{"s":"Allocates and returns a new cursor (statement handle)","y":"resource oci_new_cursor\n    ( resource $connection\n   )","r":"Returns a new statement handle, or FALSE on error.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by \n       oci_connect() or oci_pconnect()."}]},"oci_new_descriptor":{"s":"Initializes a new empty LOB or FILE descriptor","y":"OCI-Lob oci_new_descriptor\n    ( resource $connection\n   [, int $type = OCI_DTYPE_LOB\n  ] )","r":"Returns a new LOB or FILE descriptor on success, FALSE on error.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by \n       oci_connect() or oci_pconnect()."},{"t":"type","d":"Valid values for type are: \n       OCI_DTYPE_FILE, OCI_DTYPE_LOB and\n       OCI_DTYPE_ROWID."}]},"oci_num_fields":{"s":"Returns the number of result columns in a statement","y":"int oci_num_fields\n    ( resource $statement\n   )","r":"Returns the number of columns as an integer, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."}]},"oci_num_rows":{"s":"Returns number of rows affected during statement execution","y":"int oci_num_rows\n    ( resource $statement\n   )","r":"Returns the number of rows affected as an integer, or FALSE on errors.","p":[{"t":"statement","d":"A valid OCI statement identifier."}]},"oci_parse":{"s":"Prepares an Oracle statement for execution","y":"resource oci_parse\n    ( resource $connection\n   , string $sql_text\n   )","r":"Returns a statement handle on success, or FALSE on error.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by \n       oci_connect(), oci_pconnect(), or oci_new_connect()."},{"t":"sql_text","d":"The SQL or PL\/SQL statement."}]},"oci_password_change":{"s":"Changes password of Oracle&#039;s user","y":"bool oci_password_change\n    ( resource $connection\n   , string $username\n   , string $old_password\n   , string $new_password\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by \n       oci_connect() or oci_pconnect()."},{"t":"username","d":"The Oracle user name."},{"t":"old_password","d":"The old password."},{"t":"new_password","d":"The new password to be set."},{"t":"dbname","d":"The database name."}]},"oci_pconnect":{"s":"Connect to an Oracle database using a persistent connection","y":"resource oci_pconnect\n    ( string $username\n   , string $password\n   [, string $connection_string\n   [, string $character_set\n   [, int $session_mode\n  ]]] )","r":"Returns a connection identifier or FALSE on error.","p":[{"t":"username","d":"The Oracle user name."},{"t":"password","d":"The password for username."},{"t":"connection_string","d":"Contains\nthe Oracle instance to connect to. It can be\nan &raquo;&nbsp;Easy Connect\nstring, or a Connect Name from\nthe tnsnames.ora file, or the name of a local\nOracle instance."},{"t":"character_set","d":"Determines\nthe character set used by the Oracle Client libraries.  The character\nset does not need to match the character set used by the database.  If\nit doesn&#039;t match, Oracle will do its best to convert data to and from\nthe database character set.  Depending on the character sets this may\nnot give usable results.  Conversion also adds some time overhead."},{"t":"session_mode","d":"This\nparameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the\nfollowing values: OCI_DEFAULT,\nOCI_SYSOPER and OCI_SYSDBA.\nIf either OCI_SYSOPER or\nOCI_SYSDBA were specified, this function will try\nto establish privileged connection using external credentials.\nPrivileged connections are disabled by default. To enable them you\nneed to set oci8.privileged_connect\nto On."}]},"oci_result":{"s":"Returns field&#039;s value from the fetched row","y":"mixed oci_result\n    ( resource $statement\n   , mixed $field\n   )","r":"Returns everything as strings except for abstract types (ROWIDs, LOBs and\n   FILEs). Returns FALSE on error.","p":[{"t":"statement","d":""},{"t":"field","d":"Can be either use the column number (1-based) or the column name.\n       The case of the column name must be the case that Oracle meta data\n       describes the column as, which is uppercase for columns created\n       case insensitively."}]},"oci_rollback":{"s":"Rolls back the outstanding database transaction","y":"bool oci_rollback\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier, returned by\n       oci_connect(), oci_pconnect()\n       or oci_new_connect()."}]},"oci_server_version":{"s":"Returns the Oracle Database version","y":"string oci_server_version\n    ( resource $connection\n   )","r":"Returns the version information as a string or FALSE on error.","p":[{"t":"connection","d":""}]},"oci_set_action":{"s":"Sets the action name","y":"bool oci_set_action\n    ( resource $connection\n   , string $action_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier,\nreturned by oci_connect(), oci_pconnect(),\nor oci_new_connect()."},{"t":"action_name","d":"User chosen string up to 32 bytes long."}]},"oci_set_client_identifier":{"s":"Sets the client identifier","y":"bool oci_set_client_identifier\n    ( resource $connection\n   , string $client_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier,\nreturned by oci_connect(), oci_pconnect(),\nor oci_new_connect()."},{"t":"client_identifier","d":"User chosen string up to 64 bytes long."}]},"oci_set_edition":{"s":"Sets the database edition","y":"bool oci_set_edition\n    ( string $edition\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"edition","d":"Oracle Database edition name previously created with the SQL\n       &quot;CREATE EDITION&quot; command."}]},"oci_set_module_name":{"s":"Sets the module name","y":"bool oci_set_module_name\n    ( resource $connection\n   , string $module_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier,\nreturned by oci_connect(), oci_pconnect(),\nor oci_new_connect()."},{"t":"module_name","d":"User chosen string up to 48 bytes long."}]},"oci_set_prefetch":{"s":"Sets number of rows to be prefetched by queries","y":"bool oci_set_prefetch\n    ( resource $statement\n   , int $rows\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"statement","d":"A valid OCI8 statement\nidentifier created by oci_parse() and executed\nby oci_execute(), or a REF\nCURSOR statement identifier."},{"t":"rows","d":"The number of rows to be prefetched, &gt;= 0"}]},"oci_statement_type":{"s":"Returns the type of a statement","y":"string oci_statement_type\n    ( resource $statement\n   )","r":"Returns the type of statement as one of the\n   following strings.\n   \n    Statement type\n    \n     \n      \n       Return String\n       Notes\n      \n\n     \n\n     \n      \n       ALTER\n       &nbsp;\n      \n\n      \n       BEGIN\n       &nbsp;\n      \n\n      \n       CALL\n       Introduced in PHP 5.2.1 (PECL OCI8 1.2.3)\n      \n\n      \n       CREATE\n       &nbsp;\n      \n\n      \n       DECLARE\n       &nbsp;\n      \n\n      \n       DELETE\n       &nbsp;\n      \n\n      \n       DROP\n       &nbsp;\n      \n\n      \n       INSERT\n       &nbsp;\n      \n\n      \n       SELECT\n       &nbsp;\n      \n\n      \n       UPDATE\n       &nbsp;\n      \n\n      \n       UNKNOWN\n       &nbsp;","p":[{"t":"statement","d":"A valid OCI8 statement identifier from oci_parse()."}]},"octdec":{"s":"Octal to decimal","y":"number octdec\n     ( string $octal_string\n    )","r":"The decimal representation of octal_string","p":[{"t":"octal_string","d":"The octal string to convert"}]},"odbc_autocommit":{"s":"Toggle autocommit behaviour","y":"mixed odbc_autocommit\n    ( resource $connection_id\n   [, bool $OnOff = false\n  ] )","r":"Without the OnOff parameter, this function returns\n   auto-commit status for connection_id. Non-zero is\n   returned if auto-commit is on, 0 if it is off, or FALSE if an error\n   occurs.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"OnOff","d":"If OnOff is TRUE, auto-commit is enabled, if\n       it is FALSE auto-commit is disabled."}]},"odbc_binmode":{"s":"Handling of binary column data","y":"bool odbc_binmode\n    ( resource $result_id\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"The result identifier."},{"t":"mode","d":"Possible values for mode are:\n       \n        \n         \n          ODBC_BINMODE_PASSTHRU: Passthru BINARY data\n         \n        \n        \n         \n          ODBC_BINMODE_RETURN: Return as is\n         \n        \n        \n         \n          ODBC_BINMODE_CONVERT: Convert to char and return"}]},"odbc_close":{"s":"Close an ODBC connection","y":"void odbc_close\n    ( resource $connection_id\n   )","r":"No value is returned.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."}]},"odbc_close_all":{"s":"Close all ODBC connections","y":"void odbc_close_all\n    ( void\n   )","r":"No value is returned.","p":null},"odbc_columnprivileges":{"s":"Lists columns and associated privileges for the given table","y":"resource odbc_columnprivileges\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table_name\n   , string $column_name\n   )","r":"Returns an ODBC result identifier or FALSE on failure.\n   This result identifier can be used to fetch a list of columns and\n   associated privileges.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner."},{"t":"table_name","d":"The table name."},{"t":"column_name","d":"The column_name argument accepts search\n       patterns (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a\n       single character)."}]},"odbc_columns":{"s":"Lists the column names in specified tables","y":"resource odbc_columns\n    ( resource $connection_id\n   [, string $qualifier\n   [, string $schema\n   [, string $table_name\n   [, string $column_name\n  ]]]] )","r":"Returns an ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"schema","d":"The owner."},{"t":"table_name","d":"The table name."},{"t":"column_name","d":"The column name."}]},"odbc_commit":{"s":"Commit an ODBC transaction","y":"bool odbc_commit\n    ( resource $connection_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."}]},"odbc_connect":{"s":"Connect to a datasource","y":"resource odbc_connect\n    ( string $dsn\n   , string $user\n   , string $password\n   [, int $cursor_type\n  ] )","r":"Returns an ODBC connection or (FALSE) on error.","p":[{"t":"dsn","d":"The database source name for the connection. Alternatively, a\n       DSN-less connection string can be used."},{"t":"user","d":"The username."},{"t":"password","d":"The password."},{"t":"cursor_type","d":"This sets the type of cursor to be used\n       for this connection. This parameter is not normally needed, but\n       can be useful for working around problems with some ODBC drivers."}]},"odbc_cursor":{"s":"Get cursorname","y":"string odbc_cursor\n    ( resource $result_id\n   )","r":"Returns the cursor name, as a string.","p":[{"t":"result_id","d":"The result identifier."}]},"odbc_data_source":{"s":"Returns information about a current connection","y":"array odbc_data_source\n    ( resource $connection_id\n   , int $fetch_type\n   )","r":"Returns FALSE on error, and an array upon success.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"fetch_type","d":"The fetch_type can be one of two constant types:\n       SQL_FETCH_FIRST, SQL_FETCH_NEXT.\n       Use SQL_FETCH_FIRST the first time this function is\n       called, thereafter use the SQL_FETCH_NEXT."}]},"odbc_do":{"s":"Alias of odbc_exec()","y":"","r":"","p":null},"odbc_error":{"s":"Get the last error code","y":"string odbc_error\n    ([ resource $connection_id\n  ] )","r":"If connection_id is specified, the last state\n   of that connection is returned, else the last state of any connection\n   is returned.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."}]},"odbc_errormsg":{"s":"Get the last error message","y":"string odbc_errormsg\n    ([ resource $connection_id\n  ] )","r":"If connection_id is specified, the last state\n   of that connection is returned, else the last state of any connection\n   is returned.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."}]},"odbc_exec":{"s":"Prepare and execute an SQL statement","y":"resource odbc_exec\n    ( resource $connection_id\n   , string $query_string\n   [, int $flags\n  ] )","r":"Returns an ODBC result identifier if the SQL command was executed\n   successfully, or FALSE on error.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"query_string","d":"The SQL statement."},{"t":"flags","d":"This parameter is currently not used."}]},"odbc_execute":{"s":"Execute a prepared statement","y":"bool odbc_execute\n    ( resource $result_id\n   [, array $parameters_array\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"The result id resource, from odbc_prepare()."},{"t":"parameters_array","d":"Parameters in parameter_array will be\n       substituted for placeholders in the prepared statement in order.\n       Elements of this array will be converted to strings by calling this\n       function."}]},"odbc_fetch_array":{"s":"Fetch a result row as an associative array","y":"array odbc_fetch_array\n    ( resource $result\n   [, int $rownumber\n  ] )","r":"Returns an array that corresponds to the fetched row, or FALSE if there \n   are no more rows.","p":[{"t":"result","d":"The result resource from odbc_exec()."},{"t":"rownumber","d":"Optionally choose which row number to retrieve."}]},"odbc_fetch_object":{"s":"Fetch a result row as an object","y":"object odbc_fetch_object\n    ( resource $result\n   [, int $rownumber\n  ] )","r":"Returns an object that corresponds to the fetched row, or FALSE if there \n   are no more rows.","p":[{"t":"result","d":"The result resource from odbc_exec()."},{"t":"rownumber","d":"Optionally choose which row number to retrieve."}]},"odbc_fetch_row":{"s":"Fetch a row","y":"bool odbc_fetch_row\n    ( resource $result_id\n   [, int $row_number\n  ] )","r":"Returns TRUE if there was a row, FALSE otherwise.","p":[{"t":"result_id","d":"The result identifier."},{"t":"row_number","d":"If row_number is not specified,\n       odbc_fetch_row() will try to fetch the next row in\n       the result set. Calls to odbc_fetch_row() with and\n       without row_number can be mixed."}]},"odbc_field_len":{"s":"Get the length (precision) of a field","y":"int odbc_field_len\n    ( resource $result_id\n   , int $field_number\n   )","r":"Returns the field name as a string, or FALSE on error.","p":[{"t":"result_id","d":"The result identifier."},{"t":"field_number","d":"The field number. Field numbering starts at 1."}]},"odbc_field_name":{"s":"Get the columnname","y":"string odbc_field_name\n    ( resource $result_id\n   , int $field_number\n   )","r":"Returns the field name as a string, or FALSE on error.","p":[{"t":"result_id","d":"The result identifier."},{"t":"field_number","d":"The field number. Field numbering starts at 1."}]},"odbc_field_num":{"s":"Return column number","y":"int odbc_field_num\n    ( resource $result_id\n   , string $field_name\n   )","r":"Returns the field number as a integer, or FALSE on error.\n   Field numbering starts at 1.","p":[{"t":"result_id","d":"The result identifier."},{"t":"field_name","d":"The field name."}]},"odbc_field_precision":{"s":"Alias of odbc_field_len()","y":"","r":"","p":null},"odbc_field_scale":{"s":"Get the scale of a field","y":"int odbc_field_scale\n    ( resource $result_id\n   , int $field_number\n   )","r":"Returns the field scale as a integer, or FALSE on error.","p":[{"t":"result_id","d":"The result identifier."},{"t":"field_number","d":"The field number. Field numbering starts at 1."}]},"odbc_field_type":{"s":"Datatype of a field","y":"string odbc_field_type\n    ( resource $result_id\n   , int $field_number\n   )","r":"Returns the field type as a string, or FALSE on error.","p":[{"t":"result_id","d":"The result identifier."},{"t":"field_number","d":"The field number. Field numbering starts at 1."}]},"odbc_foreignkeys":{"s":"Retrieves a list of foreign keys","y":"resource odbc_foreignkeys\n    ( resource $connection_id\n   , string $pk_qualifier\n   , string $pk_owner\n   , string $pk_table\n   , string $fk_qualifier\n   , string $fk_owner\n   , string $fk_table\n   )","r":"Returns an ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"pk_qualifier","d":"The primary key qualifier."},{"t":"pk_owner","d":"The primary key owner."},{"t":"pk_table","d":"The primary key table."},{"t":"fk_qualifier","d":"The foreign key qualifier."},{"t":"fk_owner","d":"The foreign key owner."},{"t":"fk_table","d":"The foreign key table."}]},"odbc_free_result":{"s":"Free resources associated with a result","y":"bool odbc_free_result\n    ( resource $result_id\n   )","r":"Always returns TRUE.","p":[{"t":"result_id","d":"The result identifier."}]},"odbc_gettypeinfo":{"s":"Retrieves information about data types supported by the data source","y":"resource odbc_gettypeinfo\n    ( resource $connection_id\n   [, int $data_type\n  ] )","r":"Returns an ODBC result identifier or\n   FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"data_type","d":"The data type, which can be used to restrict the information to a\n       single data type."}]},"odbc_longreadlen":{"s":"Handling of LONG columns","y":"bool odbc_longreadlen\n    ( resource $result_id\n   , int $length\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"The result identifier."},{"t":"length","d":"The number of bytes returned to PHP is controlled by the parameter\n       length. If it is set to 0, Long column data is passed through to the\n       client."}]},"odbc_next_result":{"s":"Checks if multiple results are available","y":"bool odbc_next_result\n    ( resource $result_id\n   )","r":"Returns TRUE if there are more result sets, FALSE otherwise.","p":[{"t":"result_id","d":"The result identifier."}]},"odbc_num_fields":{"s":"Number of columns in a result","y":"int odbc_num_fields\n    ( resource $result_id\n   )","r":"Returns the number of fields, or -1 on error.","p":[{"t":"result_id","d":"The result identifier returned by odbc_exec()."}]},"odbc_num_rows":{"s":"Number of rows in a result","y":"int odbc_num_rows\n    ( resource $result_id\n   )","r":"Returns the number of rows in an ODBC result.\n   This function will return -1 on error.","p":[{"t":"result_id","d":"The result identifier returned by odbc_exec()."}]},"odbc_pconnect":{"s":"Open a persistent database connection","y":"resource odbc_pconnect\n    ( string $dsn\n   , string $user\n   , string $password\n   [, int $cursor_type\n  ] )","r":"Returns an ODBC connection id or 0 (FALSE) on\n   error.","p":null},"odbc_prepare":{"s":"Prepares a statement for execution","y":"resource odbc_prepare\n    ( resource $connection_id\n   , string $query_string\n   )","r":"Returns an ODBC result identifier if the SQL command was prepared\n   successfully. Returns FALSE on error.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"query_string","d":"The query string statement being prepared."}]},"odbc_primarykeys":{"s":"Gets the primary keys for a table","y":"resource odbc_primarykeys\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table\n   )","r":"Returns an ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":""},{"t":"owner","d":""},{"t":"table","d":""}]},"odbc_procedurecolumns":{"s":"Retrieve information about parameters to procedures","y":"resource odbc_procedurecolumns\n    ( resource $connection_id\n   )","r":"Returns the list of input and output parameters, as well as the\n   columns that make up the result set for the specified procedures. \n   Returns an ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character."},{"t":"proc","d":"The proc.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character."},{"t":"column","d":"The column.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character."}]},"odbc_procedures":{"s":"Get the list of procedures stored in a specific data source","y":"resource odbc_procedures\n    ( resource $connection_id\n   )","r":"Returns an ODBC\n   result identifier containing the information or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character."},{"t":"name","d":"The name.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character."}]},"odbc_result_all":{"s":"Print result as HTML table","y":"int odbc_result_all\n    ( resource $result_id\n   [, string $format\n  ] )","r":"Returns the number of rows in the result or FALSE on error.","p":[{"t":"result_id","d":"The result identifier."},{"t":"format","d":"Additional overall table formatting."}]},"odbc_rollback":{"s":"Rollback a transaction","y":"bool odbc_rollback\n    ( resource $connection_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."}]},"odbc_setoption":{"s":"Adjust ODBC settings","y":"bool odbc_setoption\n    ( resource $id\n   , int $function\n   , int $option\n   , int $param\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"Is a connection id or result id on which to change the settings.\n       For SQLSetConnectOption(), this is a connection id.\n       For SQLSetStmtOption(), this is a result id."},{"t":"function","d":"Is the ODBC function to use. The value should be\n       1 for SQLSetConnectOption() and\n       2 for SQLSetStmtOption()."},{"t":"option","d":"The option to set."},{"t":"param","d":"The value for the given option."}]},"odbc_specialcolumns":{"s":"Retrieves special columns","y":"resource odbc_specialcolumns\n    ( resource $connection_id\n   , int $type\n   , string $qualifier\n   , string $owner\n   , string $table\n   , int $scope\n   , int $nullable\n   )","r":"Returns an ODBC result identifier or FALSE on\n   failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"type","d":""},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner."},{"t":"table","d":"The table."},{"t":"scope","d":"The scope, which orders the result set."},{"t":"nullable","d":"The nullable option."}]},"odbc_statistics":{"s":"Retrieve statistics about a table","y":"resource odbc_statistics\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table_name\n   , int $unique\n   , int $accuracy\n   )","r":"Returns an ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner."},{"t":"table_name","d":"The table name."},{"t":"unique","d":"The unique attribute."},{"t":"accuracy","d":"The accuracy."}]},"odbc_tableprivileges":{"s":"Lists tables and the privileges associated with each table","y":"resource odbc_tableprivileges\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $name\n   )","r":"An ODBC result identifier or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner. Accepts the following search patterns:\n       (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)"},{"t":"name","d":"The name. Accepts the following search patterns:\n       (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)"}]},"odbc_tables":{"s":"Get the list of table names stored in a specific data source","y":"resource odbc_tables\n    ( resource $connection_id\n   [, string $qualifier\n   [, string $owner\n   [, string $name\n   [, string $types\n  ]]]] )","r":"Returns an ODBC result identifier containing the information \n   or FALSE on failure.","p":[{"t":"connection_id","d":"The ODBC connection identifier,\nsee odbc_connect() for details."},{"t":"qualifier","d":"The qualifier."},{"t":"owner","d":"The owner. Accepts search patterns (&#039;%&#039; to match zero or more\n       characters and &#039;_&#039; to match a single character)."},{"t":"name","d":"The name. Accepts search patterns (&#039;%&#039; to match zero or more\n       characters and &#039;_&#039; to match a single character)."},{"t":"types","d":"If table_type is not an empty string, it\n       must contain a list of comma-separated values for the types of\n       interest; each value may be enclosed in single quotes (&#039;) or\n       unquoted. For example, &quot;&#039;TABLE&#039;,&#039;VIEW&#039;&quot; or &quot;TABLE, VIEW&quot;.  If the\n       data source does not support a specified table type,\n       odbc_tables() does not return any results for\n       that type."}]},"opcache_compile_file":{"s":"Compiles and caches a PHP script without executing it","y":"boolean opcache_compile_file\n    ( string $file\n   )","r":"Returns TRUE if file was compiled successfully\n    or FALSE on failure.","p":[{"t":"file","d":"The path to the PHP script to be compiled."}]},"opcache_get_configuration":{"s":"Get configuration information about the cache","y":"array opcache_get_configuration\n    ( void\n   )","r":"Returns an array of information, including ini, blacklist and version","p":null},"opcache_get_status":{"s":"Get status information about the cache","y":"array opcache_get_status\n    ([ boolean $get_scripts = TRUE\n  ] )","r":"Returns an array of information, optionally containing script specific state information","p":[{"t":"get_scripts","d":"Include script specific state information"}]},"opcache_invalidate":{"s":"Invalidates a cached script","y":"boolean opcache_invalidate\n    ( string $script\n   [, boolean $force = FALSE\n  ] )","r":"Returns TRUE if the opcode cache for script was\n   invalidated or if there was nothing to invalidate, or FALSE if the opcode\n   cache is disabled.","p":[{"t":"script","d":"The path to the script being invalidated."},{"t":"force","d":"If set to TRUE, the script will be invalidated regardless of whether\n      invalidation is necessary."}]},"opcache_reset":{"s":"Resets the contents of the opcode cache","y":"boolean opcache_reset\n    ( void\n   )","r":"Returns TRUE if the opcode cache was reset, or FALSE if the opcode\n   cache is disabled.","p":null},"openal_buffer_data":{"s":"Load a buffer with data","y":"bool openal_buffer_data\n    ( resource $buffer\n   , int $format\n   , string $data\n   , int $freq\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"buffer","d":"An Open AL(Buffer) resource\n      (previously created by openal_buffer_create())."},{"t":"format","d":"Format of data, one of: \n      AL_FORMAT_MONO8,\n      AL_FORMAT_MONO16,\n      AL_FORMAT_STEREO8 and\n      AL_FORMAT_STEREO16"},{"t":"data","d":"Block of binary audio data in the format and\n      freq specified."},{"t":"freq","d":"Frequency of data given in Hz."}]},"openal_buffer_destroy":{"s":"Destroys an OpenAL buffer","y":"bool openal_buffer_destroy\n    ( resource $buffer\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"buffer","d":"An Open AL(Buffer) resource\n      (previously created by openal_buffer_create())."}]},"openal_buffer_loadwav":{"s":"Load a .wav file into a buffer","y":"bool openal_buffer_loadwav\n    ( resource $buffer\n   , string $wavfile\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"buffer","d":"An Open AL(Buffer) resource\n      (previously created by openal_buffer_create())."},{"t":"wavfile","d":"Path to .wav file on\n      local file system."}]},"openal_context_create":{"s":"Create an audio processing context ","y":"resource openal_context_create\n    ( resource $device\n   )","r":"Returns an Open AL(Context) resource on success or\n   FALSE on failure.","p":[{"t":"device","d":"An Open AL(Device) resource\n      (previously created by openal_device_open())."}]},"openal_context_current":{"s":"Make the specified context current","y":"bool openal_context_current\n    ( resource $context\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"An Open AL(Context) resource\n      (previously created by openal_context_create())."}]},"openal_context_destroy":{"s":"Destroys a context","y":"bool openal_context_destroy\n    ( resource $context\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"An Open AL(Context) resource\n      (previously created by openal_context_create())."}]},"openal_context_process":{"s":"Process the specified context","y":"bool openal_context_process\n    ( resource $context\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"An Open AL(Context) resource\n      (previously created by openal_context_create())."}]},"openal_context_suspend":{"s":"Suspend the specified context","y":"bool openal_context_suspend\n    ( resource $context\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"context","d":"An Open AL(Context) resource\n      (previously created by openal_context_create())."}]},"openal_device_close":{"s":"Close an OpenAL device","y":"bool openal_device_close\n    ( resource $device\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"device","d":"An Open AL(Device) resource\n      (previously created by openal_device_open())\n      to be closed."}]},"openal_device_open":{"s":"Initialize the OpenAL audio layer","y":"resource openal_device_open\n    ([ string $device_desc\n  ] )","r":"Returns an Open AL(Device) resource on success or \n   FALSE on failure.","p":[{"t":"device_desc","d":"Open an audio device optionally specified by device_desc.\n      If device_desc is not specified the first available audio\n      device will be used."}]},"openal_listener_get":{"s":"Retrieve a listener property","y":"mixed openal_listener_get\n    ( int $property\n   )","r":"Returns a float or array of floats (as appropriate) or FALSE on failure.","p":[{"t":"property","d":"Property to retrieve, one of:\n      AL_GAIN (float),\n      AL_POSITION (array(float,float,float)),\n      AL_VELOCITY (array(float,float,float)) and\n      AL_ORIENTATION (array(float,float,float))."}]},"openal_listener_set":{"s":"Set a listener property","y":"bool openal_listener_set\n    ( int $property\n   , mixed $setting\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"property","d":"Property to set, one of:\n      AL_GAIN (float),\n      AL_POSITION (array(float,float,float)),\n      AL_VELOCITY (array(float,float,float)) and\n      AL_ORIENTATION (array(float,float,float))."},{"t":"setting","d":"Value to set, either float, or an array of floats as appropriate."}]},"openal_source_get":{"s":"Retrieve an OpenAL source property","y":"mixed openal_source_get\n    ( resource $source\n   , int $property\n   )","r":"Returns the type associated with the property being retrieved\n   or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."},{"t":"property","d":"Property to get, one of:\n      AL_SOURCE_RELATIVE (int),\n      AL_SOURCE_STATE (int),\n      AL_PITCH (float),\n      AL_GAIN (float),\n      AL_MIN_GAIN (float),\n      AL_MAX_GAIN (float),\n      AL_MAX_DISTANCE (float),\n      AL_ROLLOFF_FACTOR (float),\n      AL_CONE_OUTER_GAIN (float),\n      AL_CONE_INNER_ANGLE (float),\n      AL_CONE_OUTER_ANGLE (float),\n      AL_REFERENCE_DISTANCE (float),\n      AL_POSITION (array(float,float,float)),\n      AL_VELOCITY (array(float,float,float)),\n      AL_DIRECTION (array(float,float,float))."}]},"openal_source_pause":{"s":"Pause the source","y":"bool openal_source_pause\n    ( resource $source\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."}]},"openal_source_play":{"s":"Start playing the source","y":"bool openal_source_play\n    ( resource $source\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."}]},"openal_source_rewind":{"s":"Rewind the source","y":"bool openal_source_rewind\n    ( resource $source\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."}]},"openal_source_set":{"s":"Set source property","y":"bool openal_source_set\n    ( resource $source\n   , int $property\n   , mixed $setting\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."},{"t":"property","d":"Property to set, one of:\n      AL_BUFFER (OpenAL(Source)),\n      AL_LOOPING (bool),\n      AL_SOURCE_RELATIVE (int),\n      AL_SOURCE_STATE (int),\n      AL_PITCH (float),\n      AL_GAIN (float),\n      AL_MIN_GAIN (float),\n      AL_MAX_GAIN (float),\n      AL_MAX_DISTANCE (float),\n      AL_ROLLOFF_FACTOR (float),\n      AL_CONE_OUTER_GAIN (float),\n      AL_CONE_INNER_ANGLE (float),\n      AL_CONE_OUTER_ANGLE (float),\n      AL_REFERENCE_DISTANCE (float),\n      AL_POSITION (array(float,float,float)),\n      AL_VELOCITY (array(float,float,float)),\n      AL_DIRECTION (array(float,float,float))."},{"t":"setting","d":"Value to assign to specified property.\n      Refer to the description of property\n      for a description of the value(s) expected."}]},"openal_source_stop":{"s":"Stop playing the source","y":"bool openal_source_stop\n    ( resource $source\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."}]},"openal_stream":{"s":"Begin streaming on a source","y":"resource openal_stream\n    ( resource $source\n   , int $format\n   , int $rate\n   )","r":"Returns a stream resource on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."},{"t":"format","d":"Format of data, one of:\n      AL_FORMAT_MONO8,\n      AL_FORMAT_MONO16,\n      AL_FORMAT_STEREO8 and\n      AL_FORMAT_STEREO16"},{"t":"rate","d":"Frequency of data to stream given in Hz."}]},"opendir":{"s":"Open directory handle","y":"resource opendir\n    ( string $path\n   [, resource $context\n  ] )","r":"Returns a directory handle resource on success, or\n   FALSE on failure.","p":[{"t":"path","d":"The directory path that is to be opened"},{"t":"context","d":"For a description of the context parameter, \n       refer to the streams section of\n       the manual."}]},"openlog":{"s":"Open connection to system logger","y":"bool openlog\n    ( string $ident\n   , int $option\n   , int $facility\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"ident","d":"The string ident is added to each message."},{"t":"option","d":"The option argument is used to indicate\n       what logging options will be used when generating a log message.\n       \n        openlog() Options\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_CONS\n           \n            if there is an error while sending data to the system logger,\n            write directly to the system console\n           \n          \n\n          \n           LOG_NDELAY\n           \n            open the connection to the logger immediately\n           \n          \n\n          \n           LOG_ODELAY\n           \n            (default) delay opening the connection until the first\n            message is logged\n           \n          \n\n          \n           LOG_PERROR\n           print log message also to standard error\n          \n\n          \n           LOG_PID\n           include PID with each message\n          \n\n         \n        \n       \n\n       You can use one or more of this options. When using multiple options\n       you need to OR them, i.e. to open the connection\n       immediately, write to the console and include the PID in each message,\n       you will use: LOG_CONS | LOG_NDELAY | LOG_PID"},{"t":"facility","d":"The facility argument is used to specify what\n       type of program is logging the message. This allows you to specify\n       (in your machine&#039;s syslog configuration) how messages coming from\n       different facilities will be handled.\n       \n        openlog() Facilities\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_AUTH\n           \n            security\/authorization messages (use \n            LOG_AUTHPRIV instead\n            in systems where that constant is defined)\n           \n          \n\n          \n           LOG_AUTHPRIV\n           security\/authorization messages (private)\n          \n\n          \n           LOG_CRON\n           clock daemon (cron and at)\n          \n\n          \n           LOG_DAEMON\n           other system daemons\n          \n\n          \n           LOG_KERN\n           kernel messages\n          \n\n          \n           LOG_LOCAL0 ... LOG_LOCAL7\n           reserved for local use, these are not available in Windows\n          \n\n          \n           LOG_LPR\n           line printer subsystem\n          \n\n          \n           LOG_MAIL\n           mail subsystem\n          \n\n          \n           LOG_NEWS\n           USENET news subsystem\n          \n\n          \n           LOG_SYSLOG\n           messages generated internally by syslogd\n          \n\n          \n           LOG_USER\n           generic user-level messages\n          \n\n          \n           LOG_UUCP\n           UUCP subsystem"}]},"openssl_cipher_iv_length":{"s":"Gets the cipher iv length","y":"int openssl_cipher_iv_length\n    ( string $method\n   )","r":"Returns the cipher length on success, or FALSE on failure. ","p":[{"t":"method","d":"The cipher method, see openssl_get_cipher_methods() for a list of potential values."}]},"openssl_csr_export":{"s":"Exports a CSR as a string","y":"bool openssl_csr_export\n    ( resource $csr\n   , string &$out\n   [, bool $notext = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"csr","d":""},{"t":"out","d":""},{"t":"notext","d":"The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE."}]},"openssl_csr_export_to_file":{"s":"Exports a CSR to a file","y":"bool openssl_csr_export_to_file\n    ( resource $csr\n   , string $outfilename\n   [, bool $notext = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"csr","d":""},{"t":"outfilename","d":"Path to the output file."},{"t":"notext","d":"The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE."}]},"openssl_csr_get_public_key":{"s":"Returns the public key of a CERT","y":"resource openssl_csr_get_public_key\n    ( mixed $csr\n   [, bool $use_shortnames = true\n  ] )","r":"","p":null},"openssl_csr_get_subject":{"s":"Returns the subject of a CERT","y":"array openssl_csr_get_subject\n    ( mixed $csr\n   [, bool $use_shortnames = true\n  ] )","r":"","p":null},"openssl_csr_new":{"s":"Generates a CSR","y":"mixed openssl_csr_new\n    ( array $dn\n   , resource &$privkey\n   [, array $configargs\n   [, array $extraattribs\n  ]] )","r":"Returns the CSR.","p":[{"t":"dn","d":"The Distinguished Name to be used in the certificate."},{"t":"privkey","d":"privkey should be set to a private key that was\n       previously generated by openssl_pkey_new() (or\n       otherwise obtained from the other openssl_pkey family of functions).\n       The corresponding public portion of the key will be used to sign the\n       CSR."},{"t":"configargs","d":"By default, the information in your system openssl.conf\n       is used to initialize the request; you can specify a configuration file\n       section by setting the config_section_section key of\n       configargs.  You can also specify an alternative\n       openssl configuration file by setting the value of the\n       config key to the path of the file you want to use.\n       The following keys, if present in configargs\n       behave as their equivalents in the openssl.conf, as\n       listed in the table below.\n       \n        Configuration overrides\n        \n         \n          \n           configargs key\n           type\n           openssl.conf equivalent\n           description\n          \n\n         \n\n         \n          \n           digest_alg\n           string\n           default_md\n           Selects which digest method to use\n          \n\n          \n           x509_extensions\n           string\n           x509_extensions\n           Selects which extensions should be used when creating an x509\n           certificate\n          \n\n          \n           req_extensions\n           string\n           req_extensions\n           Selects which extensions should be used when creating a CSR\n          \n\n          \n           private_key_bits\n           integer\n           default_bits\n           Specifies how many bits should be used to generate a private\n            key\n          \n\n          \n           private_key_type\n           integer\n           none\n           Specifies the type of private key to create.  This can be one\n            of OPENSSL_KEYTYPE_DSA,\n            OPENSSL_KEYTYPE_DH or\n            OPENSSL_KEYTYPE_RSA.\n            The default value is OPENSSL_KEYTYPE_RSA which\n            is currently the only supported key type.\n           \n          \n\n          \n           encrypt_key\n           boolean\n           encrypt_key\n           Should an exported key (with passphrase) be encrypted?\n          \n\n          \n           encrypt_key_cipher\n           integer\n           none\n           \n            One of cipher constants."},{"t":"extraattribs","d":"extraattribs is used to specify additional\n       configuration options for the CSR.  Both dn and\n       extraattribs are associative arrays whose keys are\n       converted to OIDs and applied to the relevant part of the request."}]},"openssl_csr_sign":{"s":"Sign a CSR with another certificate (or itself) and generate a certificate","y":"resource openssl_csr_sign\n    ( mixed $csr\n   , mixed $cacert\n   , mixed $priv_key\n   , int $days\n   [, array $configargs\n   [, int $serial = 0\n  ]] )","r":"Returns an x509 certificate resource on success, FALSE on failure.","p":[{"t":"csr","d":"A CSR previously generated by openssl_csr_new().\n       It can also be the path to a PEM encoded CSR when specified as\n       file:\/\/path\/to\/csr or an exported string generated\n       by openssl_csr_export()."},{"t":"cacert","d":"The generated certificate will be signed by cacert.\n       If cacert is NULL, the generated certificate\n       will be a self-signed certificate."},{"t":"priv_key","d":"priv_key is the private key that corresponds to\n       cacert."},{"t":"days","d":"days specifies the length of time for which the\n       generated certificate will be valid, in days."},{"t":"configargs","d":"You can finetune the CSR signing by configargs.\n       See openssl_csr_new() for more information about\n       configargs."},{"t":"serial","d":"An optional the serial number of issued certificate. If not specified\n       it will default to 0."}]},"openssl_decrypt":{"s":"Decrypts data","y":"string openssl_decrypt\n    ( string $data\n   , string $method\n   , string $password\n   [, int $options = 0\n   [, string $iv = &quot;&quot;\n  ]] )","r":"The decrypted string on success or FALSE on failure.","p":[{"t":"data","d":"The data."},{"t":"method","d":"The cipher method."},{"t":"password","d":"The password."},{"t":"options","d":"options can be one of\n        OPENSSL_RAW_DATA,\n        OPENSSL_ZERO_PADDING."},{"t":"iv","d":"A non-NULL Initialization Vector."}]},"openssl_dh_compute_key":{"s":"Computes shared secret for public value of remote DH key and local DH key","y":"string openssl_dh_compute_key\n    ( string $pub_key\n   , resource $dh_key\n   )","r":"Returns computed key on success or FALSE on failure.","p":[{"t":"pub_key","d":"Public key"},{"t":"dh_key","d":"DH key"}]},"openssl_digest":{"s":"Computes a digest","y":"string openssl_digest\n    ( string $data\n   , string $method\n   [, bool $raw_output = false\n  ] )","r":"Returns the digested hash value on success or FALSE on failure.","p":[{"t":"data","d":"The data."},{"t":"method","d":"The digest method."},{"t":"raw_output","d":"Setting to TRUE will return as raw output data, otherwise the return\n       value is binhex encoded."}]},"openssl_encrypt":{"s":"Encrypts data","y":"string openssl_encrypt\n    ( string $data\n   , string $method\n   , string $password\n   [, int $options = 0\n   [, string $iv = &quot;&quot;\n  ]] )","r":"Returns the encrypted string on success or FALSE on failure.","p":[{"t":"data","d":"The data."},{"t":"method","d":"The cipher method."},{"t":"password","d":"The password."},{"t":"options","d":"options can be one of\n          OPENSSL_RAW_DATA,\n          OPENSSL_ZERO_PADDING."},{"t":"iv","d":"A non-NULL Initialization Vector."}]},"openssl_error_string":{"s":"Return openSSL error message","y":"string openssl_error_string\n    ( void\n   )","r":"Returns an error message string, or FALSE if there are no more error\n   messages to return.","p":null},"openssl_free_key":{"s":"Free key resource","y":"void openssl_free_key\n    ( resource $key_identifier\n   )","r":"No value is returned.","p":[{"t":"key_identifier","d":""}]},"openssl_get_cipher_methods":{"s":"Gets available cipher methods","y":"array openssl_get_cipher_methods\n    ([ bool $aliases = false\n  ] )","r":"An array of available cipher methods.","p":[{"t":"aliases","d":"Set to TRUE if cipher aliases should be included within the\n       returned array."}]},"openssl_get_md_methods":{"s":"Gets available digest methods","y":"array openssl_get_md_methods\n    ([ bool $aliases = false\n  ] )","r":"An array of available digest methods.","p":[{"t":"aliases","d":"Set to TRUE if digest aliases should be included within the\n       returned array."}]},"openssl_get_privatekey":{"s":"Alias of openssl_pkey_get_private()","y":"","r":"","p":null},"openssl_get_publickey":{"s":"Alias of openssl_pkey_get_public()","y":"","r":"","p":null},"openssl_open":{"s":"Open sealed data","y":"bool openssl_open\n    ( string $sealed_data\n   , string &$open_data\n   , string $env_key\n   , mixed $priv_key_id\n   [, string $method\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sealed_data","d":""},{"t":"open_data","d":"If the call is successful the opened data is returned in this\n       parameter."},{"t":"env_key","d":""},{"t":"priv_key_id","d":""}]},"openssl_pbkdf2":{"s":"Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1","y":"string openssl_pbkdf2\n    ( string $password\n   , string $salt\n   , int $key_length\n   , int $iterations\n   [, string $digest_algorithm\n  ] )","r":"Returns string or FALSE on failure.","p":[{"t":"password","d":""},{"t":"salt","d":""},{"t":"key_length","d":""},{"t":"iterations","d":""},{"t":"digest_algorithm","d":""}]},"openssl_pkcs12_export":{"s":"Exports a PKCS#12 Compatible Certificate Store File to variable.","y":"bool openssl_pkcs12_export\n    ( mixed $x509\n   , string &$out\n   , mixed $priv_key\n   , string $pass\n   [, array $args\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"x509","d":"See Key\/Certificate parameters for a list of valid values."},{"t":"out","d":"On success, this will hold the PKCS#12."},{"t":"priv_key","d":"Private key component of PKCS#12 file."},{"t":"pass","d":"Encryption password for unlocking the PKCS#12 file."},{"t":"args","d":""}]},"openssl_pkcs12_read":{"s":"Parse a PKCS#12 Certificate Store into an array","y":"bool openssl_pkcs12_read\n    ( string $pkcs12\n   , array &$certs\n   , string $pass\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pkcs12","d":""},{"t":"certs","d":"On success, this will hold the Certificate Store Data."},{"t":"pass","d":"Encryption password for unlocking the PKCS#12 file."}]},"openssl_pkcs7_decrypt":{"s":"Decrypts an S\/MIME encrypted message","y":"bool openssl_pkcs7_decrypt\n    ( string $infilename\n   , string $outfilename\n   , mixed $recipcert\n   [, mixed $recipkey\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"infilename","d":""},{"t":"outfilename","d":"The decrypted message is written to the file specified by\n       outfilename."},{"t":"recipcert","d":""},{"t":"recipkey","d":""}]},"openssl_pkcs7_encrypt":{"s":"Encrypt an S\/MIME message","y":"bool openssl_pkcs7_encrypt\n    ( string $infile\n   , string $outfile\n   , mixed $recipcerts\n   , array $headers\n   [, int $flags = 0\n   [, int $cipherid = OPENSSL_CIPHER_RC2_40\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"infile","d":""},{"t":"outfile","d":""},{"t":"recipcerts","d":"Either a lone X.509 certificate, or an array of X.509 certificates."},{"t":"headers","d":"headers is an array of headers that\n       will be prepended to the data after it has been encrypted."},{"t":"flags","d":"flags can be used to specify options that affect\n       the encoding process - see PKCS7\n       constants."},{"t":"cipherid","d":"One of cipher constants."}]},"openssl_pkcs7_sign":{"s":"Sign an S\/MIME message","y":"bool openssl_pkcs7_sign\n    ( string $infilename\n   , string $outfilename\n   , mixed $signcert\n   , mixed $privkey\n   , array $headers\n   [, int $flags = PKCS7_DETACHED\n   [, string $extracerts\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"infilename","d":""},{"t":"outfilename","d":""},{"t":"signcert","d":""},{"t":"privkey","d":""},{"t":"headers","d":"headers is an array of headers that\n       will be prepended to the data after it has been signed (see\n       openssl_pkcs7_encrypt() for more information about\n       the format of this parameter)."},{"t":"flags","d":"flags can be used to alter the output - see PKCS7 constants."},{"t":"extracerts","d":"extracerts specifies the name of a file containing\n       a bunch of extra certificates to include in the signature which can for\n       example be used to help the recipient to verify the certificate that you used."}]},"openssl_pkcs7_verify":{"s":"Verifies the signature of an S\/MIME signed message","y":"mixed openssl_pkcs7_verify\n    ( string $filename\n   , int $flags\n   [, string $outfilename\n   [, array $cainfo\n   [, string $extracerts\n   [, string $content\n  ]]]] )","r":"Returns TRUE if the signature is verified, FALSE if it is not correct\n   (the message has been tampered with, or the signing certificate is invalid),\n   or -1 on error.","p":[{"t":"filename","d":"Path to the message."},{"t":"flags","d":"flags can be used to affect how the signature is\n       verified - see PKCS7 constants\n       for more information."},{"t":"outfilename","d":"If the outfilename is specified, it should be a\n       string holding the name of a file into which the certificates of the\n       persons that signed the messages will be stored in PEM format."},{"t":"cainfo","d":"If the cainfo is specified, it should hold\n       information about the trusted CA certificates to use in the verification\n       process - see certificate\n       verification for more information about this parameter."},{"t":"extracerts","d":"If the extracerts is specified, it is the filename\n       of a file containing a bunch of certificates to use as untrusted CAs."},{"t":"content","d":"You can specify a filename with content that will\n       be filled with the verified data, but with the signature information\n       stripped."}]},"openssl_pkey_export":{"s":"Gets an exportable representation of a key into a string","y":"bool openssl_pkey_export\n    ( mixed $key\n   , string &$out\n   [, string $passphrase\n   [, array $configargs\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":""},{"t":"out","d":""},{"t":"passphrase","d":"The key is optionally protected by passphrase."},{"t":"configargs","d":"configargs can be used to fine-tune the export\n       process by specifying and\/or overriding options for the openssl\n       configuration file.  See openssl_csr_new() for more\n       information about configargs."}]},"openssl_pkey_export_to_file":{"s":"Gets an exportable representation of a key into a file ","y":"bool openssl_pkey_export_to_file\n    ( mixed $key\n   , string $outfilename\n   [, string $passphrase\n   [, array $configargs\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":""},{"t":"outfilename","d":"Path to the output file."},{"t":"passphrase","d":"The key can be optionally protected by a\n       passphrase."},{"t":"configargs","d":"configargs can be used to fine-tune the export\n       process by specifying and\/or overriding options for the openssl\n       configuration file. See openssl_csr_new() for more\n       information about configargs."}]},"openssl_pkey_free":{"s":"Frees a private key","y":"void openssl_pkey_free\n    ( resource $key\n   )","r":"No value is returned.","p":[{"t":"key","d":"Resource holding the key."}]},"openssl_pkey_get_details":{"s":"Returns an array with the key details","y":"array openssl_pkey_get_details\n    ( resource $key\n   )","r":"Returns an array with the key details in success or FALSE in failure.\n   Returned array has indexes bits (number of bits),\n   key (string representation of the public key) and\n   type (type of the key which is one of\n   OPENSSL_KEYTYPE_RSA,\n   OPENSSL_KEYTYPE_DSA,\n   OPENSSL_KEYTYPE_DH,\n   OPENSSL_KEYTYPE_EC or -1 meaning unknown).","p":[{"t":"key","d":"Resource holding the key."}]},"openssl_pkey_get_private":{"s":"Get a private key","y":"resource openssl_pkey_get_private\n    ( mixed $key\n   [, string $passphrase = &quot;&quot;\n  ] )","r":"Returns a positive key resource identifier on success, or FALSE on error.","p":[{"t":"key","d":"key can be one of the following:\n       \n        a string having the format\n          file:\/\/path\/to\/file.pem. The named file must\n          contain a PEM encoded certificate\/private key (it may contain both).\n         \n        \n        A PEM formatted private key."},{"t":"passphrase","d":"The optional parameter passphrase must be used\n       if the specified key is encrypted (protected by a passphrase)."}]},"openssl_pkey_get_public":{"s":"Extract public key from certificate and prepare it for use","y":"resource openssl_pkey_get_public\n    ( mixed $certificate\n   )","r":"Returns a positive key resource identifier on success, or FALSE on error.","p":[{"t":"certificate","d":"certificate can be one of the following:\n       \n        an X.509 certificate resource\n        a string having the format\n          file:\/\/path\/to\/file.pem. The named file must\n          contain a PEM encoded certificate\/public key (it may contain both).\n         \n        \n        A PEM formatted public key."}]},"openssl_pkey_new":{"s":"Generates a new private key ","y":"resource openssl_pkey_new\n    ([ array $configargs\n  ] )","r":"Returns a resource identifier for the pkey on success, or FALSE on\n   error.","p":[{"t":"configargs","d":"You can finetune the key generation (such as specifying the number of\n       bits) using configargs.  See\n       openssl_csr_new() for more information about\n       configargs."}]},"openssl_private_decrypt":{"s":"Decrypts data with private key ","y":"bool openssl_private_decrypt\n    ( string $data\n   , string &$decrypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":""},{"t":"decrypted","d":""},{"t":"key","d":"key must be the private key corresponding that\n       was used to encrypt the data."},{"t":"padding","d":"padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_SSLV23_PADDING,\n       OPENSSL_PKCS1_OAEP_PADDING,\n       OPENSSL_NO_PADDING."}]},"openssl_private_encrypt":{"s":"Encrypts data with private key ","y":"bool openssl_private_encrypt\n    ( string $data\n   , string &$crypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":""},{"t":"crypted","d":""},{"t":"key","d":""},{"t":"padding","d":"padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_NO_PADDING."}]},"openssl_public_decrypt":{"s":"Decrypts data with public key ","y":"bool openssl_public_decrypt\n    ( string $data\n   , string &$decrypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":""},{"t":"decrypted","d":""},{"t":"key","d":"key must be the public key corresponding that\n       was used to encrypt the data."},{"t":"padding","d":"padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_NO_PADDING."}]},"openssl_public_encrypt":{"s":"Encrypts data with public key ","y":"bool openssl_public_encrypt\n    ( string $data\n   , string &$crypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":""},{"t":"crypted","d":"This will hold the result of the encryption."},{"t":"key","d":"The public key."},{"t":"padding","d":"padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_SSLV23_PADDING,\n       OPENSSL_PKCS1_OAEP_PADDING,\n       OPENSSL_NO_PADDING."}]},"openssl_random_pseudo_bytes":{"s":"Generate a pseudo-random string of bytes","y":"string openssl_random_pseudo_bytes\n    ( int $length\n   [, bool &$crypto_strong\n  ] )","r":"Returns the generated string of bytes on success,  or FALSE on failure.","p":[{"t":"length","d":"The length of the desired string of bytes. Must be a positive integer. PHP will\n       try to cast this parameter to a non-null integer to use it."},{"t":"crypto_strong","d":"If passed into the function, this will hold a boolean value that determines\n       if the algorithm used was &quot;cryptographically strong&quot;, e.g., safe for usage with GPG, \n       passwords, etc. TRUE if it did, otherwise FALSE"}]},"openssl_seal":{"s":"Seal (encrypt) data","y":"int openssl_seal\n    ( string $data\n   , string &$sealed_data\n   , array &$env_keys\n   , array $pub_key_ids\n   [, string $method\n  ] )","r":"Returns the length of the sealed data on success, or FALSE on error.\n   If successful the sealed data is returned in\n   sealed_data, and the envelope keys in\n   env_keys.","p":[{"t":"data","d":""},{"t":"sealed_data","d":""},{"t":"env_keys","d":""},{"t":"pub_key_ids","d":""}]},"openssl_sign":{"s":"Generate signature","y":"bool openssl_sign\n    ( string $data\n   , string &$signature\n   , mixed $priv_key_id\n   [, mixed $signature_alg = OPENSSL_ALGO_SHA1\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":"The string of data you wish to sign"},{"t":"signature","d":"If the call was successful the signature is returned in\n       signature."},{"t":"priv_key_id","d":"resource - a key, returned by openssl_get_privatekey()"},{"t":"signature_alg","d":"int - one of these Signature Algorithms."}]},"openssl_verify":{"s":"Verify signature","y":"int openssl_verify\n    ( string $data\n   , string $signature\n   , mixed $pub_key_id\n   [, mixed $signature_alg = OPENSSL_ALGO_SHA1\n  ] )","r":"Returns 1 if the signature is correct, 0 if it is incorrect, and\n   -1 on error.","p":[{"t":"data","d":"The string of data used to generate the signature previously"},{"t":"signature","d":"A raw binary string, generated by openssl_sign() or similar means"},{"t":"pub_key_id","d":"resource - a key, returned by openssl_get_publickey()"},{"t":"signature_alg","d":"int - one of these Signature Algorithms."}]},"openssl_x509_checkpurpose":{"s":"Verifies if a certificate can be used for a particular purpose","y":"int openssl_x509_checkpurpose\n    ( mixed $x509cert\n   , int $purpose\n   [, array $cainfo = array()\n   [, string $untrustedfile\n  ]] )","r":"Returns TRUE if the certificate can be used for the intended purpose,\n   FALSE if it cannot, or -1 on error.","p":[{"t":"x509cert","d":"The examined certificate."},{"t":"purpose","d":"openssl_x509_checkpurpose() purposes\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           X509_PURPOSE_SSL_CLIENT\n           Can the certificate be used for the client side of an SSL\n           connection?\n          \n\n          \n           X509_PURPOSE_SSL_SERVER\n           Can the certificate be used for the server side of an SSL\n           connection?\n          \n\n          \n           X509_PURPOSE_NS_SSL_SERVER\n           Can the cert be used for Netscape SSL server?\n          \n\n          \n           X509_PURPOSE_SMIME_SIGN\n           Can the cert be used to sign S\/MIME email?\n          \n\n          \n           X509_PURPOSE_SMIME_ENCRYPT\n           Can the cert be used to encrypt S\/MIME email?\n          \n\n          \n           X509_PURPOSE_CRL_SIGN\n           Can the cert be used to sign a certificate revocation list\n           (CRL)?\n          \n\n          \n           X509_PURPOSE_ANY\n           Can the cert be used for Any\/All purposes?\n          \n\n         \n        \n       \n\n       These options are not bitfields - you may specify one only!"},{"t":"cainfo","d":"cainfo should be an array of trusted CA files\/dirs\n       as described in Certificate\n       Verification."},{"t":"untrustedfile","d":"If specified, this should be the name of a PEM encoded file holding\n       certificates that can be used to help verify the certificate, although\n       no trust is placed in the certificates that come from that file."}]},"openssl_x509_check_private_key":{"s":"Checks if a private key corresponds to a certificate","y":"bool openssl_x509_check_private_key\n    ( mixed $cert\n   , mixed $key\n   )","r":"Returns TRUE if key is the private key that\n   corresponds to cert, or FALSE otherwise.","p":[{"t":"cert","d":"The certificate."},{"t":"key","d":"The private key."}]},"openssl_x509_export":{"s":"Exports a certificate as a string","y":"bool openssl_x509_export\n    ( mixed $x509\n   , string &$output\n   [, bool $notext = TRUE\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"x509","d":"See Key\/Certificate parameters for a list of valid values."},{"t":"output","d":"On success, this will hold the PEM."},{"t":"notext","d":"The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE."}]},"openssl_x509_export_to_file":{"s":"Exports a certificate to file","y":"bool openssl_x509_export_to_file\n    ( mixed $x509\n   , string $outfilename\n   [, bool $notext = TRUE\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"x509","d":"See Key\/Certificate parameters for a list of valid values."},{"t":"outfilename","d":"Path to the output file."},{"t":"notext","d":"The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE."}]},"openssl_x509_free":{"s":"Free certificate resource","y":"void openssl_x509_free\n    ( resource $x509cert\n   )","r":"No value is returned.","p":[{"t":"x509cert","d":""}]},"openssl_x509_parse":{"s":"Parse an X509 certificate and return the information as an array","y":"array openssl_x509_parse\n    ( mixed $x509cert\n   [, bool $shortnames = true\n  ] )","r":"The structure of the returned data is (deliberately) not\n   yet documented, as it is still subject to change.","p":[{"t":"x509cert","d":""},{"t":"shortnames","d":"shortnames controls how the data is indexed in the\n       array - if shortnames is TRUE (the default) then\n       fields will be indexed with the short name form, otherwise, the long name\n       form will be used - e.g.: CN is the shortname form of commonName."}]},"ord":{"s":"Return ASCII value of character","y":"int ord\n    ( string $string\n   )","r":"Returns the ASCII value as an integer.","p":[{"t":"string","d":"A character."}]},"output_add_rewrite_var":{"s":"Add URL rewriter values","y":"bool output_add_rewrite_var\n    ( string $name\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"name","d":"The variable name."},{"t":"value","d":"The variable value."}]},"output_reset_rewrite_vars":{"s":"Reset URL rewriter values","y":"bool output_reset_rewrite_vars\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"override_function":{"s":"Overrides built-in functions","y":"bool override_function\n    ( string $function_name\n   , string $function_args\n   , string $function_code\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"function_name","d":"The function to override."},{"t":"function_args","d":"The function arguments, as a comma separated string."},{"t":"function_code","d":"The new code for the function."}]},"ovrimos_close":{"s":"Closes the connection to ovrimos","y":"void ovrimos_close\n    ( int $connection\n   )","r":"No value is returned.","p":[{"t":"connection","d":"The Ovrimos connection identifier, returned by \n       ovrimos_connect()."}]},"ovrimos_commit":{"s":"Commits the transaction","y":"bool ovrimos_commit\n    ( int $connection_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection_id","d":"The Ovrimos connection identifier, returned by \n       ovrimos_connect()."}]},"ovrimos_connect":{"s":"Connect to the specified database","y":"int ovrimos_connect\n    ( string $host\n   , string $dborport\n   , string $user\n   , string $password\n   )","r":"Returns a connection identifier (greater than 0) on success, or 0 on\n   failure.","p":[{"t":"host","d":"A host name or IP address."},{"t":"dborport","d":"Either a database name, or the port number to connect to."},{"t":"user","d":"The user name."},{"t":"password","d":"Password associated with user."}]},"ovrimos_cursor":{"s":"Returns the name of the cursor","y":"string ovrimos_cursor\n    ( int $result_id\n   )","r":"Returns the name as a string, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."}]},"ovrimos_exec":{"s":"Executes an SQL statement","y":"int ovrimos_exec\n    ( int $connection_id\n   , string $query\n   )","r":"Returns the result identifier as an integer, or FALSE on error.","p":[{"t":"connection_id","d":"The Ovrimos connection identifier, returned by \n       ovrimos_connect()."},{"t":"query","d":"The SQL statement. Evidently, it should not contain parameters.\n       Use ovrimos_prepare() for prepared statements."}]},"ovrimos_execute":{"s":"Executes a prepared SQL statement","y":"bool ovrimos_execute\n    ( int $result_id\n   [, array $parameters_array\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"An Ovrimos result identifier prepared with\n       ovrimos_prepare()."},{"t":"parameters_array","d":"If the prepared statement contained parameters (question marks in the\n       statement), the correct number of parameters should be passed in an\n       array."}]},"ovrimos_fetch_into":{"s":"Fetches a row from the result set","y":"bool ovrimos_fetch_into\n    ( int $result_id\n   , array &$result_array\n   [, string $how\n   [, int $rownumber\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"result_array","d":"You must provide an array by reference. It will be filled with the\n       fetched values."},{"t":"how","d":"Determines how the rows are fetched. This can be one of the following\n       strings (case is not significant):\n       \n        \n         \n          \n           Option\n           Notes\n          \n\n         \n\n         \n          \n           Next\n           \n            Forward direction from current position.\n            This is the default value.\n           \n          \n\n          \n           Prev\n           \n            Backward direction from current position.\n           \n          \n\n          \n           First\n           \n            Forward direction from the start.\n           \n          \n\n          \n           Last\n           \n            Backward direction from the end.\n           \n          \n\n          \n           Absolute\n           \n            Absolute position from the start.\n            Requires rownumber."},{"t":"rownumber","d":"The row number, first one is 0. Only needed when \n       how is set to\n       Absolute."}]},"ovrimos_fetch_row":{"s":"Fetches a row from the result set","y":"bool ovrimos_fetch_row\n    ( int $result_id\n   [, int $how\n   [, int $row_number\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"how","d":"Determines how the rows are fetched. This can be one of the following\n       strings (case is not significant):\n       \n        \n         \n          \n           Option\n           Notes\n          \n\n         \n\n         \n          \n           Next\n           \n            Forward direction from current position.\n            This is the default value.\n           \n          \n\n          \n           Prev\n           \n            Backward direction from current position.\n           \n          \n\n          \n           First\n           \n            Forward direction from the start.\n           \n          \n\n          \n           Last\n           \n            Backward direction from the end.\n           \n          \n\n          \n           Absolute\n           \n            Absolute position from the start.\n            Requires rownumber."},{"t":"rownumber","d":"The row number, first one is 0. Only needed when \n       how is set to\n       Absolute."}]},"ovrimos_field_len":{"s":"Returns the length of the output column","y":"int ovrimos_field_len\n    ( int $result_id\n   , int $field_number\n   )","r":"Returns the length as an integer, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"field_number","d":"The field number. Starts at 1."}]},"ovrimos_field_name":{"s":"Returns the output column name","y":"string ovrimos_field_name\n    ( int $result_id\n   , int $field_number\n   )","r":"Returns the field name as a string, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"field_number","d":"The field number. Starts at 1."}]},"ovrimos_field_num":{"s":"Returns the (1-based) index of the output column","y":"int ovrimos_field_num\n    ( int $result_id\n   , string $field_name\n   )","r":"Returns the index, starting at 1, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"field_name","d":"The field name."}]},"ovrimos_field_type":{"s":"Returns the type of the output column","y":"int ovrimos_field_type\n    ( int $result_id\n   , int $field_number\n   )","r":"Returns the field type as an integer, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"field_number","d":"A 1-based index."}]},"ovrimos_free_result":{"s":"Frees the specified result_id","y":"bool ovrimos_free_result\n    ( int $result_id\n   )","r":"Returns TRUE.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."}]},"ovrimos_longreadlen":{"s":"Specifies how many bytes are to be retrieved from long datatypes","y":"bool ovrimos_longreadlen\n    ( int $result_id\n   , int $length\n   )","r":"Returns TRUE.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"length","d":"The number of bytes to retrieve. Default is zero."}]},"ovrimos_num_fields":{"s":"Returns the number of columns","y":"int ovrimos_num_fields\n    ( int $result_id\n   )","r":"Returns the number of columns as an integer, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."}]},"ovrimos_prepare":{"s":"Prepares an SQL statement","y":"int ovrimos_prepare\n    ( int $connection_id\n   , string $query\n   )","r":"Returns a result identifier on success, or FALSE on error.","p":[{"t":"connection_id","d":"The Ovrimos connection identifier, returned by \n       ovrimos_connect()."},{"t":"query","d":"The SQL statement."}]},"ovrimos_result":{"s":"Retrieves the output column","y":"string ovrimos_result\n    ( int $result_id\n   , mixed $field\n   )","r":"Returns the column as a string, FALSE on failure.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"field","d":"Either as a string with the field name or as an 1-based index."}]},"ovrimos_result_all":{"s":"Prints the whole result set as an HTML table","y":"int ovrimos_result_all\n    ( int $result_id\n   [, string $format\n  ] )","r":"Returns the number of rows in the generated table.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."},{"t":"format","d":"Optional HTML attributes for the generated table element."}]},"ovrimos_rollback":{"s":"Rolls back the transaction","y":"bool ovrimos_rollback\n    ( int $connection_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection_id","d":"The Ovrimos connection identifier, returned by \n       ovrimos_connect()."}]},"pack":{"s":"Pack data into binary string","y":"string pack\n    ( string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","r":"Returns a binary string containing data.","p":[{"t":"format","d":"The format string consists of format codes\n       followed by an optional repeater argument. The repeater argument can\n       be either an integer value or * for repeating to\n       the end of the input data. For a, A, h, H the repeat count specifies\n       how many characters of one data argument are taken, for @ it is the\n       absolute position where to put the next data, for everything else the\n       repeat count specifies how many data arguments are consumed and packed\n       into the resulting binary string."},{"t":"args","d":""}]},"parsekit_compile_string":{"s":"Compile a string of PHP code and return the resulting op array","y":"array parsekit_compile_string\n    ( string $phpcode\n   [, array &$errors\n   [, int $options = PARSEKIT_QUIET\n  ]] )","r":"Returns a complex multi-layer array structure as detailed below.","p":[{"t":"phpcode","d":"A string containing phpcode. Similar to the argument to eval()."},{"t":"errors","d":"A 2D hash of errors (including fatal errors) encountered during compilation.\n       Returned by reference."},{"t":"options","d":"One of either PARSEKIT_QUIET or \n       PARSEKIT_SIMPLE. To produce varying\n       degrees of verbosity in the returned output."}]},"parsekit_func_arginfo":{"s":"Return information regarding function argument(s)","y":"array parsekit_func_arginfo\n    ( mixed $function\n   )","r":"Returns an array containing argument information.","p":[{"t":"function","d":"A string describing a function, or an array describing a class\/method."}]},"parse_ini_file":{"s":"Parse a configuration file","y":"array parse_ini_file\n    ( string $filename\n   [, bool $process_sections = false\n   [, int $scanner_mode = INI_SCANNER_NORMAL\n  ]] )","r":"The settings are returned as an associative array on success,\n   and FALSE on failure.","p":[{"t":"filename","d":"The filename of the ini file being parsed."},{"t":"process_sections","d":"By setting the process_sections\n       parameter to TRUE, you get a multidimensional array, with\n       the section names and settings included. The default\n       for process_sections is FALSE"},{"t":"scanner_mode","d":"Can either be INI_SCANNER_NORMAL (default) or \n       INI_SCANNER_RAW. If INI_SCANNER_RAW \n       is supplied, then option values will not be parsed."}]},"parse_ini_string":{"s":"Parse a configuration string","y":"array parse_ini_string\n    ( string $ini\n   [, bool $process_sections = false\n   [, int $scanner_mode = INI_SCANNER_NORMAL\n  ]] )","r":"The settings are returned as an associative array on success,\n   and FALSE on failure.","p":[{"t":"ini","d":"The contents of the ini file being parsed."},{"t":"process_sections","d":"By setting the process_sections\n       parameter to TRUE, you get a multidimensional array, with\n       the section names and settings included. The default\n       for process_sections is FALSE"},{"t":"scanner_mode","d":"Can either be INI_SCANNER_NORMAL (default) or \n       INI_SCANNER_RAW. If INI_SCANNER_RAW \n       is supplied, then option values will not be parsed."}]},"parse_str":{"s":"Parses the string into variables","y":"void parse_str\n    ( string $str\n   [, array &$arr\n  ] )","r":"No value is returned.","p":[{"t":"str","d":"The input string."},{"t":"arr","d":"If the second parameter arr is present,\n       variables are stored in this variable as array elements instead."}]},"parse_url":{"s":"Parse a URL and return its components","y":"mixed parse_url\n    ( string $url\n   [, int $component = -1\n  ] )","r":"On seriously malformed URLs, parse_url() may return\n   FALSE.","p":[{"t":"url","d":"The URL to parse. Invalid characters are replaced by\n       _."},{"t":"component","d":"Specify one of PHP_URL_SCHEME,\n       PHP_URL_HOST, PHP_URL_PORT,\n       PHP_URL_USER, PHP_URL_PASS,\n       PHP_URL_PATH, PHP_URL_QUERY\n       or PHP_URL_FRAGMENT to retrieve just a specific\n       URL component as a string (except when\n       PHP_URL_PORT is given, in which case the return\n       value will be an integer)."}]},"passthru":{"s":"Execute an external program and display raw output","y":"void passthru\n    ( string $command\n   [, int &$return_var\n  ] )","r":"No value is returned.","p":[{"t":"command","d":"The command that will be executed."},{"t":"return_var","d":"If the return_var argument is present, the \n       return status of the Unix command will be placed here."}]},"password_get_info":{"s":"Returns information about the given hash","y":"array password_get_info\n    ( string $hash\n   )","r":"Returns an associative array with three elements: \n   \n    \n     \n       algo, which will match a\n       password algorithm constant\n     \n    \n    \n     \n      algoName, which has the human readable name of the\n      algorithm\n     \n    \n    \n     \n      options, which includes the options\n      provided when calling password_hash()","p":[{"t":"hash","d":"A hash created by password_hash()."}]},"password_hash":{"s":"Creates a password hash","y":"string password_hash\n    ( string $password\n   , integer $algo\n   [, array $options\n  ] )","r":"Returns the hashed password,  or FALSE on failure.","p":[{"t":"password","d":"The user&#039;s password."}]},"password_needs_rehash":{"s":"Checks if the given hash matches the given options","y":"boolean password_needs_rehash\n    ( string $hash\n   , integer $algo\n   [, array $options\n  ] )","r":"Returns TRUE if the hash should be rehashed to match the given\n   algo and options, or FALSE\n   otherwise.","p":[{"t":"hash","d":"A hash created by password_hash()."},{"t":"algo","d":"A password algorithm constant denoting the algorithm to use when hashing the password."},{"t":"options","d":"An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm."}]},"password_verify":{"s":"Verifies that a password matches a hash","y":"boolean password_verify\n    ( string $password\n   , string $hash\n   )","r":"Returns TRUE if the password and hash match, or FALSE otherwise.","p":[{"t":"password","d":"The user&#039;s password."},{"t":"hash","d":"A hash created by password_hash()."}]},"pathinfo":{"s":"Returns information about a file path","y":"mixed pathinfo\n    ( string $path\n   [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME\n  ] )","r":"If the options parameter is not passed, an\n   associative array containing the following elements is\n   returned:\n   dirname, basename,\n   extension (if any), and filename.","p":[{"t":"path","d":"The path to be parsed."},{"t":"options","d":"If present, specifies a specific element to be returned; one of\n       PATHINFO_DIRNAME,\n       PATHINFO_BASENAME,\n       PATHINFO_EXTENSION or\n       PATHINFO_FILENAME."}]},"pclose":{"s":"Closes process file pointer","y":"int pclose\n    ( resource $handle\n   )","r":"Returns the termination status of the process that was run. In case of \n   an error then -1 is returned.","p":[{"t":"handle","d":"The file pointer must be valid, and must have been returned by a\n       successful call to popen()."}]},"pcntl_alarm":{"s":"Set an alarm clock for delivery of a signal","y":"int pcntl_alarm\n    ( int $seconds\n   )","r":"Returns the time in seconds that any previously scheduled alarm had\n   remaining before it was to be delivered, or 0 if there\n   was no previously scheduled alarm.","p":[{"t":"seconds","d":"The number of seconds to wait. If seconds is\n       zero, no new alarm is created."}]},"pcntl_errno":{"s":"Alias of pcntl_strerror()","y":"","r":"","p":null},"pcntl_exec":{"s":"Executes specified program in current process space","y":"void pcntl_exec\n    ( string $path\n   [, array $args\n   [, array $envs\n  ]] )","r":"Returns FALSE on error and does not return on success.","p":[{"t":"path","d":"path must be the path to a binary executable or a\n       script with a valid path pointing to an executable in the shebang (\n       #!\/usr\/local\/bin\/perl for example) as the first line.  See your system&#039;s\n       man execve(2) page for additional information."},{"t":"args","d":"args is an array of argument strings passed to the\n       program."},{"t":"envs","d":"envs is an array of strings which are passed as\n       environment to the program.  The array is in the format of name =&gt; value,\n       the key being the name of the environmental variable and the value being\n       the value of that variable."}]},"pcntl_fork":{"s":"Forks the currently running process","y":"int pcntl_fork\n    ( void\n   )","r":"On success, the PID of the child process is returned in the\n   parent&#039;s thread of execution, and a 0 is returned in the child&#039;s\n   thread of execution.  On failure, a -1 will be returned in the\n   parent&#039;s context, no child process will be created, and a PHP\n   error is raised.","p":null},"pcntl_getpriority":{"s":"Get the priority of any process","y":"int pcntl_getpriority\n    ([ int $pid = getmypid()\n   [, int $process_identifier = PRIO_PROCESS\n  ]] )","r":"pcntl_getpriority() returns the priority of the process\n   or FALSE on error.  A lower numerical value causes more favorable\n   scheduling.","p":[{"t":"pid","d":"If not specified, the pid of the current process is used."},{"t":"process_identifier","d":"One of PRIO_PGRP, PRIO_USER\n       or PRIO_PROCESS."}]},"pcntl_get_last_error":{"s":"Retrieve the error number set by the last pcntl function which failed","y":"int pcntl_get_last_error\n    ( void\n   )","r":"Returns error code.","p":null},"pcntl_setpriority":{"s":"Change the priority of any process","y":"bool pcntl_setpriority\n    ( int $priority\n   [, int $pid = getmypid()\n   [, int $process_identifier = PRIO_PROCESS\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"priority","d":"priority is generally a value in the range\n       -20 to 20. The default priority\n       is 0 while a lower numerical value causes more\n       favorable scheduling.  Because priority levels can differ between\n       system types and kernel versions, please see your system&#039;s setpriority(2)\n       man page for specific details."},{"t":"pid","d":"If not specified, the pid of the current process is used."},{"t":"process_identifier","d":"One of PRIO_PGRP, PRIO_USER\n       or PRIO_PROCESS."}]},"pcntl_signal":{"s":"Installs a signal handler","y":"bool pcntl_signal\n    ( int $signo\n   , callable|int $handler\n   [, bool $restart_syscalls = true\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"signo","d":"The signal number."},{"t":"handler","d":"The signal handler. This may be either a callable, which\n       will be invoked to handle the signal, or either of the two global\n       constants SIG_IGN or SIG_DFL,\n       which will ignore the signal or restore the default signal handler\n       respectively."}]},"pcntl_signal_dispatch":{"s":"Calls signal handlers for pending signals","y":"bool pcntl_signal_dispatch\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"pcntl_sigprocmask":{"s":"Sets and retrieves blocked signals","y":"bool pcntl_sigprocmask\n    ( int $how\n   , array $set\n   [, array &$oldset\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"how","d":"Sets the behavior of pcntl_sigprocmask(). Possible\n       values: \n       \n        SIG_BLOCK: Add the signals to the\n         currently blocked signals.\n        SIG_UNBLOCK: Remove the signals from the\n         currently blocked signals.\n        SIG_SETMASK: Replace the currently\n         blocked signals by the given list of signals."},{"t":"set","d":"List of signals."},{"t":"oldset","d":"The oldset parameter is set to an array\n       containing the list of the previously blocked signals."}]},"pcntl_sigtimedwait":{"s":"Waits for signals, with a timeout","y":"int pcntl_sigtimedwait\n    ( array $set\n   [, array &$siginfo\n   [, int $seconds = 0\n   [, int $nanoseconds = 0\n  ]]] )","r":"On success, pcntl_sigtimedwait() returns a signal number.","p":[{"t":"set","d":"Array of signals to wait for."},{"t":"siginfo","d":"The siginfo is set to an array containing\n       informations about the signal. See\n       pcntl_sigwaitinfo()."},{"t":"seconds","d":"Timeout in seconds."},{"t":"nanoseconds","d":"Timeout in nanoseconds."}]},"pcntl_sigwaitinfo":{"s":"Waits for signals","y":"int pcntl_sigwaitinfo\n    ( array $set\n   [, array &$siginfo\n  ] )","r":"On success, pcntl_sigwaitinfo() returns a signal number.","p":[{"t":"set","d":"Array of signals to wait for."},{"t":"siginfo","d":"The siginfo parameter is set to an array containing\n       informations about the signal."}]},"pcntl_strerror":{"s":"Retrieve the system error message associated with the given errno","y":"string pcntl_strerror\n    ( int $errno\n   )","r":"Returns error description on success or FALSE on failure.","p":[{"t":"errno","d":""}]},"pcntl_wait":{"s":"Waits on or returns the status of a forked child","y":"int pcntl_wait\n    ( int &$status\n   [, int $options = 0\n  ] )","r":"pcntl_wait() returns the process ID of the\n   child which exited, -1 on error or zero if WNOHANG was provided as an\n   option (on wait3-available systems) and no child was available.","p":[{"t":"status","d":"pcntl_wait() will store status information\n       in the status parameter which can be\n       evaluated using the following functions:\n       pcntl_wifexited(),\n       pcntl_wifstopped(),\n       pcntl_wifsignaled(),\n       pcntl_wexitstatus(),\n       pcntl_wtermsig() and\n       pcntl_wstopsig()."},{"t":"options","d":"If wait3 is available on your system (mostly BSD-style systems), you can\n       provide the optional options parameter.  If this\n       parameter is not provided, wait will be used for the system call.  If\n       wait3 is not available, providing a value for options\n        will have no effect. The value of options\n        is the value of zero or more of the following two constants\n       OR&#039;ed together:\n       \n        Possible values for options\n        \n         \n          \n           WNOHANG\n           \n            Return immediately if no child has exited.\n           \n          \n\n          \n           WUNTRACED\n           \n            Return for children which are stopped, and whose status has\n            not been reported."}]},"pcntl_waitpid":{"s":"Waits on or returns the status of a forked child","y":"int pcntl_waitpid\n    ( int $pid\n   , int &$status\n   [, int $options = 0\n  ] )","r":"pcntl_waitpid() returns the process ID of the\n   child which exited, -1 on error or zero if WNOHANG was used and no\n   child was available","p":[{"t":"pid","d":"The value of pid can be one of the following:\n       \n        possible values for pid\n        \n         \n          \n           &lt; -1\n           \n            wait for any child process whose process group ID is equal to\n            the absolute value of pid.\n           \n          \n\n          \n           -1\n           \n            wait for any child process; this is the same behaviour that\n            the wait function exhibits.\n           \n          \n\n          \n           0\n           \n            wait for any child process whose process group ID is equal to\n            that of the calling process.\n           \n          \n\n          \n           &gt; 0\n           \n            wait for the child whose process ID is equal to the value of\n            pid."},{"t":"status","d":"pcntl_waitpid() will store status information\n       in the status parameter which can be\n       evaluated using the following functions:\n       pcntl_wifexited(),\n       pcntl_wifstopped(),\n       pcntl_wifsignaled(),\n       pcntl_wexitstatus(),\n       pcntl_wtermsig() and\n       pcntl_wstopsig()."},{"t":"options","d":"The value of options is the value of zero\n       or more of the following two global constants\n       OR&#039;ed together:\n       \n        possible values for options\n        \n         \n          \n           WNOHANG\n           \n            return immediately if no child has exited.\n           \n          \n\n          \n           WUNTRACED\n           \n            return for children which are stopped, and whose status has\n            not been reported."}]},"pcntl_wexitstatus":{"s":"Returns the return code of a terminated child","y":"int pcntl_wexitstatus\n    ( int $status\n   )","r":"Returns the return code, as an integer.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pcntl_wifexited":{"s":"Checks if status code represents a normal exit","y":"bool pcntl_wifexited\n    ( int $status\n   )","r":"Returns TRUE if the child status code represents a normal exit, FALSE\n   otherwise.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pcntl_wifsignaled":{"s":"Checks whether the status code represents a termination due to a signal","y":"bool pcntl_wifsignaled\n    ( int $status\n   )","r":"Returns TRUE if the child process exited because of a signal which was\n   not caught, FALSE otherwise.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pcntl_wifstopped":{"s":"Checks whether the child process is currently stopped","y":"bool pcntl_wifstopped\n    ( int $status\n   )","r":"Returns TRUE if the child process which caused the return is\n   currently stopped, FALSE otherwise.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pcntl_wstopsig":{"s":"Returns the signal which caused the child to stop","y":"int pcntl_wstopsig\n    ( int $status\n   )","r":"Returns the signal number.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pcntl_wtermsig":{"s":"Returns the signal which caused the child to terminate","y":"int pcntl_wtermsig\n    ( int $status\n   )","r":"Returns the signal number, as an integer.","p":[{"t":"status","d":"The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid()."}]},"pfsockopen":{"s":"Open persistent Internet or Unix domain socket connection","y":"resource pfsockopen\n    ( string $hostname\n   [, int $port = -1\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n  ]]]] )","r":"","p":null},"pg_affected_rows":{"s":"Returns number of affected records (tuples)","y":"int pg_affected_rows\n    ( resource $result\n   )","r":"The number of rows affected by the query.  If no tuple is\n   affected, it will return 0.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_cancel_query":{"s":"Cancel an asynchronous query","y":"bool pg_cancel_query\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_client_encoding":{"s":"Gets the client encoding","y":"string pg_client_encoding\n    ([ resource $connection\n  ] )","r":"The client encoding, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_close":{"s":"Closes a PostgreSQL connection","y":"bool pg_close\n    ([ resource $connection\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_connect":{"s":"Open a PostgreSQL connection","y":"resource pg_connect\n    ( string $connection_string\n   [, int $connect_type\n  ] )","r":"PostgreSQL connection resource on success, FALSE on failure.","p":[{"t":"connection_string","d":"The connection_string can be empty to use all default parameters, or it \n       can contain one or more parameter settings separated by whitespace. \n       Each parameter setting is in the form keyword = value. Spaces around \n       the equal sign are optional. To write an empty value or a value \n       containing spaces, surround it with single quotes, e.g., keyword = \n       &#039;a value&#039;. Single quotes and backslashes within the value must be \n       escaped with a backslash, i.e., \\&#039; and \\\\."},{"t":"connect_type","d":"If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection\n       is created, even if the connection_string is identical to\n       an existing connection."}]},"pg_connection_busy":{"s":"Get connection is busy or not","y":"bool pg_connection_busy\n    ( resource $connection\n   )","r":"Returns TRUE if the connection is busy, FALSE otherwise.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_connection_reset":{"s":"Reset connection (reconnect)","y":"bool pg_connection_reset\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_connection_status":{"s":"Get connection status","y":"int pg_connection_status\n    ( resource $connection\n   )","r":"PGSQL_CONNECTION_OK or \n    PGSQL_CONNECTION_BAD.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_convert":{"s":"Convert associative array values into suitable for SQL statement","y":"array pg_convert\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = 0\n  ] )","r":"An array of converted values, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table against which to convert types."},{"t":"assoc_array","d":"Data to be converted."},{"t":"options","d":"Any number of PGSQL_CONV_IGNORE_DEFAULT,\n       PGSQL_CONV_FORCE_NULL or\n       PGSQL_CONV_IGNORE_NOT_NULL, combined."}]},"pg_copy_from":{"s":"Insert records into a table from an array","y":"bool pg_copy_from\n    ( resource $connection\n   , string $table_name\n   , array $rows\n   [, string $delimiter\n   [, string $null_as\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table into which to copy the rows."},{"t":"rows","d":"An array of data to be copied into table_name.\n       Each value in rows becomes a row in table_name.\n       Each value in rows should be a delimited string of the values\n       to insert into each field.  Values should be linefeed terminated."},{"t":"delimiter","d":"The token that separates values for each field in each element of\n       rows.  Default is TAB."},{"t":"null_as","d":"How SQL NULL values are represented in the\n       rows.  Default is \\N (&quot;\\\\N&quot;)."}]},"pg_copy_to":{"s":"Copy a table to an array","y":"array pg_copy_to\n    ( resource $connection\n   , string $table_name\n   [, string $delimiter\n   [, string $null_as\n  ]] )","r":"An array with one element for each line of COPY data.\n    It returns FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table from which to copy the data into rows."},{"t":"delimiter","d":"The token that separates values for each field in each element of\n       rows.  Default is TAB."},{"t":"null_as","d":"How SQL NULL values are represented in the\n       rows.  Default is \\N (&quot;\\\\N&quot;)."}]},"pg_dbname":{"s":"Get the database name","y":"string pg_dbname\n    ([ resource $connection\n  ] )","r":"A string containing the name of the database the \n   connection is to, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_delete":{"s":"Deletes records","y":"mixed pg_delete\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )","r":"Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table from which to delete rows."},{"t":"assoc_array","d":"An array whose keys are field names in the table table_name,\n       and whose values are the values of those fields that are to be deleted."},{"t":"options","d":"Any number of PGSQL_CONV_FORCE_NULL,\n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_ESCAPE,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned. When PGSQL_DML_NO_CONV\n       or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally."}]},"pg_end_copy":{"s":"Sync with PostgreSQL backend","y":"bool pg_end_copy\n    ([ resource $connection\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_escape_bytea":{"s":"Escape a string for insertion into a bytea field","y":"string pg_escape_bytea\n    ([ resource $connection\n   ], string $data\n   )","r":"A string containing the escaped data.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"data","d":"A string containing text or binary data to be inserted into a bytea\n       column."}]},"pg_escape_identifier":{"s":"Escape a identifier for insertion into a text field","y":"string pg_escape_identifier\n    ([ resource $connection\n   ], string $data\n   )","r":"A string containing the escaped data.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"data","d":"A string containing text to be escaped."}]},"pg_escape_literal":{"s":"Escape a literal for insertion into a text field","y":"string pg_escape_literal\n    ([ resource $connection\n   ], string $data\n   )","r":"A string containing the escaped data.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"data","d":"A string containing text to be escaped."}]},"pg_escape_string":{"s":"Escape a string for query","y":"string pg_escape_string\n    ([ resource $connection\n   ], string $data\n   )","r":"A string containing the escaped data.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"data","d":"A string containing text to be escaped."}]},"pg_execute":{"s":"Sends a request to execute a prepared statement with given parameters, and waits for the result.","y":"resource pg_execute\n    ([ resource $connection\n   ], string $stmtname\n   , array $params\n   )","r":"A query result resource on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"stmtname","d":"The name of the prepared statement to execute.  if\n       &quot;&quot; is specified, then the unnamed statement is executed.  The name must have\n       been previously prepared using pg_prepare(), \n       pg_send_prepare() or a PREPARE SQL\n       command."},{"t":"params","d":"An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders."}]},"pg_fetch_all":{"s":"Fetches all rows from a result as an array","y":"array pg_fetch_all\n    ( resource $result\n   )","r":"An array with all rows in the result.  Each row is an array\n   of field values indexed by field name.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_fetch_all_columns":{"s":"Fetches all rows in a particular result column as an array","y":"array pg_fetch_all_columns\n    ( resource $result\n   [, int $column = 0\n  ] )","r":"An array with all values in the result column.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"column","d":"Column number, zero-based, to be retrieved from the result resource.  Defaults\n       to the first column if not specified."}]},"pg_fetch_array":{"s":"Fetch a row as an array","y":"array pg_fetch_array\n    ( resource $result\n   [, int $row\n   [, int $result_type = PGSQL_BOTH\n  ]] )","r":"An array indexed numerically (beginning with 0) or\n   associatively (indexed by field name), or both.\n   Each value in the array is represented as a \n   string.  Database NULL\n   values are returned as NULL.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched."},{"t":"result_type","d":"An optional parameter that controls\n       how the returned array is indexed.\n       result_type is a constant and can take the\n       following values: PGSQL_ASSOC, \n       PGSQL_NUM and PGSQL_BOTH.\n       Using PGSQL_NUM, pg_fetch_array()\n       will return an array with numerical indices, using\n       PGSQL_ASSOC it will return only associative indices\n       while PGSQL_BOTH, the default, will return both\n       numerical and associative indices."}]},"pg_fetch_assoc":{"s":"Fetch a row as an associative array","y":"array pg_fetch_assoc\n    ( resource $result\n   [, int $row\n  ] )","r":"An array indexed associatively (by field name).\n   Each value in the array is represented as a \n   string.  Database NULL\n   values are returned as NULL.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched."}]},"pg_fetch_result":{"s":"Returns values from a result resource","y":"string pg_fetch_result\n    ( resource $result\n   , int $row\n   , mixed $field\n   )","r":"Boolean is returned as &quot;t&quot; or &quot;f&quot;.  All\n   other types, including arrays are returned as strings formatted\n   in the same default PostgreSQL manner that you would see in the\n   psql program.  Database NULL\n   values are returned as NULL.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,\n       next row is fetched."},{"t":"field","d":"A string representing the name of the field (column) to fetch, otherwise\n       an int representing the field number to fetch.  Fields are\n       numbered from 0 upwards."}]},"pg_fetch_row":{"s":"Get a row as an enumerated array","y":"array pg_fetch_row\n    ( resource $result\n   [, int $row\n   \n  ] )","r":"An array, indexed from 0 upwards, with each value\n   represented as a string.  Database NULL\n   values are returned as NULL.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched."}]},"pg_field_is_null":{"s":"Test if a field is SQL NULL","y":"int pg_field_is_null\n    ( resource $result\n   , int $row\n   , mixed $field\n   )","r":"Returns 1 if the field in the given row is SQL NULL, 0\n   if not.  FALSE is returned if the row is out of range, or upon any other error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,\n       current row is fetched."},{"t":"field","d":"Field number (starting from 0) as an integer or \n        the field name as a string."}]},"pg_field_name":{"s":"Returns the name of a field","y":"string pg_field_name\n    ( resource $result\n   , int $field_number\n   )","r":"The field name, or FALSE on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_number","d":"Field number, starting from 0."}]},"pg_field_prtlen":{"s":"Returns the printed length","y":"int pg_field_prtlen\n    ( resource $result\n   , int $row_number\n   , mixed $field_name_or_number\n   )","r":"The field printed length, or FALSE on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result.  Rows are numbered from 0 upwards.  If omitted,\n       current row is fetched."}]},"pg_field_size":{"s":"Returns the internal storage size of the named field","y":"int pg_field_size\n    ( resource $result\n   , int $field_number\n   )","r":"The internal field storage size (in bytes).  -1 indicates a variable\n   length field.  FALSE is returned on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_number","d":"Field number, starting from 0."}]},"pg_field_table":{"s":"Returns the name or oid of the tables field","y":"mixed pg_field_table\n    ( resource $result\n   , int $field_number\n   [, bool $oid_only = false\n  ] )","r":"On success either the fields table name or oid. Or, FALSE on failure.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_number","d":"Field number, starting from 0."},{"t":"oid_only","d":"By default the tables name that field belongs to is returned but\n        if oid_only is set to TRUE, then the\n        oid will instead be returned."}]},"pg_field_type":{"s":"Returns the type name for the corresponding field number","y":"string pg_field_type\n    ( resource $result\n   , int $field_number\n   )","r":"A string containing the base name of the field&#039;s type, or FALSE\n   on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_number","d":"Field number, starting from 0."}]},"pg_field_type_oid":{"s":"Returns the type ID (OID) for the corresponding field number","y":"int pg_field_type_oid\n    ( resource $result\n   , int $field_number\n   )","r":"The OID of the field&#039;s base type. FALSE is returned on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_number","d":"Field number, starting from 0."}]},"pg_free_result":{"s":"Free result memory","y":"bool pg_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_get_notify":{"s":"Gets SQL NOTIFY message","y":"array pg_get_notify\n    ( resource $connection\n   [, int $result_type\n  ] )","r":"An array containing the NOTIFY message name and backend PID.\n   Otherwise if no NOTIFY is waiting, then FALSE is returned.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"result_type","d":"An optional parameter that controls\n       how the returned array is indexed.\n       result_type is a constant and can take the\n       following values: PGSQL_ASSOC, \n       PGSQL_NUM and PGSQL_BOTH.\n       Using PGSQL_NUM, pg_get_notify()\n       will return an array with numerical indices, using\n       PGSQL_ASSOC it will return only associative indices\n       while PGSQL_BOTH, the default, will return both\n       numerical and associative indices."}]},"pg_get_pid":{"s":"Gets the backend&#039;s process ID","y":"int pg_get_pid\n    ( resource $connection\n   )","r":"The backend database process ID.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_get_result":{"s":"Get asynchronous query result","y":"resource pg_get_result\n    ([ resource $connection\n  ] )","r":"The result resource, or FALSE if no more results are available.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_host":{"s":"Returns the host name associated with the connection","y":"string pg_host\n    ([ resource $connection\n  ] )","r":"A string containing the name of the host the \n   connection is to, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_insert":{"s":"Insert array into table","y":"mixed pg_insert\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )","r":"Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table into which to insert rows.  The table table_name must at least \n       have as many columns as assoc_array has elements."},{"t":"assoc_array","d":"An array whose keys are field names in the table table_name,\n       and whose values are the values of those fields that are to be inserted."},{"t":"options","d":"Any number of PGSQL_CONV_OPTS,\n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_ESCAPE,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned. When PGSQL_DML_NO_CONV\n       or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally."}]},"pg_last_error":{"s":"Get the last error message string of a connection","y":"string pg_last_error\n    ([ resource $connection\n  ] )","r":"A string containing the last error message on the \n   given connection, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_last_notice":{"s":"Returns the last notice message from PostgreSQL server","y":"string pg_last_notice\n    ( resource $connection\n   )","r":"A string containing the last notice on the \n   given connection, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_last_oid":{"s":"Returns the last row&#039;s OID","y":"string pg_last_oid\n    ( resource $result\n   )","r":"A string containing the OID assigned to the most recently inserted\n   row in the specified connection, or FALSE on error or\n   no available OID.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_lo_close":{"s":"Close a large object","y":"bool pg_lo_close\n    ( resource $large_object\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."}]},"pg_lo_create":{"s":"Create a large object","y":"int pg_lo_create\n    ([ resource $connection\n   [, mixed $object_id\n  ]] )","r":"A large object OID or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"object_id","d":"If an object_id is given the function\n       will try to create a large object with this id, else a free\n       object id is assigned by the server. The parameter\n       was added in PHP 5.3 and relies on functionality that first\n       appeared in PostgreSQL 8.1."}]},"pg_lo_export":{"s":"Export a large object to file","y":"bool pg_lo_export\n    ([ resource $connection\n   ], int $oid\n   , string $pathname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"oid","d":"The OID of the large object in the database."},{"t":"pathname","d":"The full path and file name of the file in which to write the\n       large object on the client filesystem."}]},"pg_lo_import":{"s":"Import a large object from file","y":"int pg_lo_import\n    ([ resource $connection\n   ], string $pathname\n   [, mixed $object_id\n  ] )","r":"The OID of the newly created large object, or\n   FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"pathname","d":"The full path and file name of the file on the client\n       filesystem from which to read the large object data."},{"t":"object_id","d":"If an object_id is given the function\n       will try to create a large object with this id, else a free\n       object id is assigned by the server. The parameter\n       was added in PHP 5.3 and relies on functionality that first\n       appeared in PostgreSQL 8.1."}]},"pg_lo_open":{"s":"Open a large object","y":"resource pg_lo_open\n    ( resource $connection\n   , int $oid\n   , string $mode\n   )","r":"A large object resource or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"oid","d":"The OID of the large object in the database."},{"t":"mode","d":"Can be either &quot;r&quot; for read-only, &quot;w&quot; for write only or &quot;rw&quot; for read and \n       write."}]},"pg_lo_read":{"s":"Read a large object","y":"string pg_lo_read\n    ( resource $large_object\n   [, int $len = 8192\n  ] )","r":"A string containing len bytes from the\n   large object, or FALSE on error.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."},{"t":"len","d":"An optional maximum number of bytes to return."}]},"pg_lo_read_all":{"s":"Reads an entire large object and send straight to browser","y":"int pg_lo_read_all\n    ( resource $large_object\n   )","r":"Number of bytes read or FALSE on error.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."}]},"pg_lo_seek":{"s":"Seeks position within a large object","y":"bool pg_lo_seek\n    ( resource $large_object\n   , int $offset\n   [, int $whence = PGSQL_SEEK_CUR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."},{"t":"offset","d":"The number of bytes to seek."},{"t":"whence","d":"One of the constants PGSQL_SEEK_SET (seek from object start), \n       PGSQL_SEEK_CUR (seek from current position)\n       or PGSQL_SEEK_END (seek from object end) ."}]},"pg_lo_tell":{"s":"Returns current seek position a of large object","y":"int pg_lo_tell\n    ( resource $large_object\n   )","r":"The current seek offset (in number of bytes) from the beginning of the large\n   object.  If there is an error, the return value is negative.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."}]},"pg_lo_truncate":{"s":"Truncates a large object","y":"bool pg_lo_truncate\n    ( resource $large_object\n   , int $size\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."},{"t":"size","d":"The number of bytes to truncate."}]},"pg_lo_unlink":{"s":"Delete a large object","y":"bool pg_lo_unlink\n    ( resource $connection\n   , int $oid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"oid","d":"The OID of the large object in the database."}]},"pg_lo_write":{"s":"Write to a large object","y":"int pg_lo_write\n    ( resource $large_object\n   , string $data\n   [, int $len\n  ] )","r":"The number of bytes written to the large object, or FALSE on error.","p":[{"t":"large_object","d":"PostgreSQL large object (LOB) resource, returned by pg_lo_open()."},{"t":"data","d":"The data to be written to the large object.  If len is\n       specified and is less than the length of data, only\n       len bytes will be written."},{"t":"len","d":"An optional maximum number of bytes to write.  Must be greater than zero\n       and no greater than the length of data.  Defaults to\n       the length of data."}]},"pg_meta_data":{"s":"Get meta data for table","y":"array pg_meta_data\n    ( resource $connection\n   , string $table_name\n   [, bool $extended\n  ] )","r":"An array of the table definition, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"The name of the table."},{"t":"extended","d":"Flag for returning extended meta data. Default to FALSE."}]},"pg_num_rows":{"s":"Returns the number of rows in a result","y":"int pg_num_rows\n    ( resource $result\n   )","r":"The number of rows in the result. On error, -1 is returned.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_options":{"s":"Get the options associated with the connection","y":"string pg_options\n    ([ resource $connection\n  ] )","r":"A string containing the connection\n   options, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_parameter_status":{"s":"Looks up a current parameter setting of the server.","y":"string pg_parameter_status\n    ([ resource $connection\n   ], string $param_name\n   )","r":"A string containing the value of the parameter, FALSE on failure or invalid\n  param_name.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"param_name","d":"Possible param_name values include server_version, \n        server_encoding, client_encoding, \n        is_superuser, session_authorization, \n        DateStyle, TimeZone, and \n        integer_datetimes."}]},"pg_pconnect":{"s":"Open a persistent PostgreSQL connection","y":"resource pg_pconnect\n    ( string $connection_string\n   [, int $connect_type\n  ] )","r":"PostgreSQL connection resource on success, FALSE on failure.","p":[{"t":"connection_string","d":"The connection_string can be empty to use all default parameters, or it \n       can contain one or more parameter settings separated by whitespace. \n       Each parameter setting is in the form keyword = value. Spaces around \n       the equal sign are optional. To write an empty value or a value \n       containing spaces, surround it with single quotes, e.g., keyword = \n       &#039;a value&#039;. Single quotes and backslashes within the value must be \n       escaped with a backslash, i.e., \\&#039; and \\\\."},{"t":"connect_type","d":"If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection\n       is created, even if the connection_string is identical to\n       an existing connection."}]},"pg_ping":{"s":"Ping database connection","y":"bool pg_ping\n    ([ resource $connection\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_port":{"s":"Return the port number associated with the connection","y":"int pg_port\n    ([ resource $connection\n  ] )","r":"An int containing the port number of the database\n   server the connection is to, \n   or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_prepare":{"s":" Submits a request to create a prepared statement with the \n  given parameters, and waits for completion.","y":"resource pg_prepare\n    ([ resource $connection\n   ], string $stmtname\n   , string $query\n   )","r":"A query result resource on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"stmtname","d":"The name to give the prepared statement.  Must be unique per-connection.  If\n       &quot;&quot; is specified, then an unnamed statement is created, overwriting any\n       previously defined unnamed statement."},{"t":"query","d":"The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc."}]},"pg_put_line":{"s":"Send a NULL-terminated string to PostgreSQL backend","y":"bool pg_put_line\n    ([ resource $connection\n   ], string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"data","d":"A line of text to be sent directly to the PostgreSQL backend.  A NULL\n       terminator is added automatically."}]},"pg_query":{"s":"Execute a query","y":"resource pg_query\n    ([ resource $connection\n   ], string $query\n   )","r":"A query result resource on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"query","d":"The SQL statement or statements to be executed. When multiple statements are passed to the function,\n       they are automatically executed as one transaction, unless there are explicit BEGIN\/COMMIT commands\n       included in the query string. However, using multiple transactions in one function call is not recommended."}]},"pg_query_params":{"s":"Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.","y":"resource pg_query_params\n    ([ resource $connection\n   ], string $query\n   , array $params\n   )","r":"A query result resource on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"query","d":"The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc."},{"t":"params","d":"An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders."}]},"pg_result_error":{"s":"Get error message associated with result","y":"string pg_result_error\n    ( resource $result\n   )","r":"Returns a string if there is an error associated with the\n   result parameter, FALSE otherwise.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"pg_result_error_field":{"s":"Returns an individual field of an error report.","y":"string pg_result_error_field\n    ( resource $result\n   , int $fieldcode\n   )","r":"A string containing the contents of the error field, NULL if the field does not exist or FALSE\n  on failure.","p":[{"t":"result","d":"A PostgreSQL query result resource from a previously executed\n       statement."},{"t":"fieldcode","d":"Possible fieldcode values are: PGSQL_DIAG_SEVERITY,\n         PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY,\n         PGSQL_DIAG_MESSAGE_DETAIL,\n         PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,\n         PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only),\n         PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only),\n         PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE,\n         PGSQL_DIAG_SOURCE_LINE or\n         PGSQL_DIAG_SOURCE_FUNCTION."}]},"pg_result_seek":{"s":"Set internal row offset in result resource","y":"bool pg_result_seek\n    ( resource $result\n   , int $offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"offset","d":"Row to move the internal offset to in the result resource.\n       Rows are numbered starting from zero."}]},"pg_result_status":{"s":"Get status of query result","y":"mixed pg_result_status\n    ( resource $result\n   [, int $type = PGSQL_STATUS_LONG\n  ] )","r":"Possible return values are PGSQL_EMPTY_QUERY,\n   PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT,\n   PGSQL_COPY_IN, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and\n   PGSQL_FATAL_ERROR if PGSQL_STATUS_LONG is\n   specified.  Otherwise, a string containing the PostgreSQL command tag is returned.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"type","d":"Either PGSQL_STATUS_LONG to return the numeric status \n       of the result, or PGSQL_STATUS_STRING \n       to return the command tag of the result.\n       If not specified, PGSQL_STATUS_LONG is the default."}]},"pg_select":{"s":"Select records","y":"mixed pg_select\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )","r":"Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table from which to select rows."},{"t":"assoc_array","d":"An array whose keys are field names in the table table_name,\n       and whose values are the conditions that a row must meet to be retrieved."},{"t":"options","d":"Any number of PGSQL_CONV_FORCE_NULL,\n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_ESCAPE,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned. When PGSQL_DML_NO_CONV\n       or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally."}]},"pg_send_execute":{"s":"Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).","y":"bool pg_send_execute\n    ( resource $connection\n   , string $stmtname\n   , array $params\n   )","r":"Returns TRUE on success, FALSE on failure.  Use pg_get_result()\n  to determine the query result.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"stmtname","d":"The name of the prepared statement to execute.  if\n       &quot;&quot; is specified, then the unnamed statement is executed.  The name must have\n       been previously prepared using pg_prepare(), \n       pg_send_prepare() or a PREPARE SQL\n       command."},{"t":"params","d":"An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders."}]},"pg_send_prepare":{"s":"Sends a request to create a prepared statement with the given parameters, without waiting for completion.","y":"bool pg_send_prepare\n    ( resource $connection\n   , string $stmtname\n   , string $query\n   )","r":"Returns TRUE on success, FALSE on failure.  Use pg_get_result()\n  to determine the query result.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"stmtname","d":"The name to give the prepared statement.  Must be unique per-connection.  If\n       &quot;&quot; is specified, then an unnamed statement is created, overwriting any\n       previously defined unnamed statement."},{"t":"query","d":"The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc."}]},"pg_send_query":{"s":"Sends asynchronous query","y":"bool pg_send_query\n    ( resource $connection\n   , string $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"query","d":"The SQL statement or statements to be executed."}]},"pg_send_query_params":{"s":"Submits a command and separate parameters to the server without waiting for the result(s).","y":"bool pg_send_query_params\n    ( resource $connection\n   , string $query\n   , array $params\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"query","d":"The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc."},{"t":"params","d":"An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders."}]},"pg_set_client_encoding":{"s":"Set the client encoding","y":"int pg_set_client_encoding\n    ([ resource $connection\n   ], string $encoding\n   )","r":"Returns 0 on success or -1 on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"encoding","d":"The required client encoding.  One of SQL_ASCII, EUC_JP, \n       EUC_CN, EUC_KR, EUC_TW, \n       UNICODE, MULE_INTERNAL, LATINX (X=1...9), \n       KOI8, WIN, ALT, SJIS, \n       BIG5 or WIN1250."}]},"pg_set_error_verbosity":{"s":"Determines the verbosity of messages returned by pg_last_error()","y":"int pg_set_error_verbosity\n    ([ resource $connection\n   ], int $verbosity\n   )","r":"The previous verbosity level: PGSQL_ERRORS_TERSE,\n   PGSQL_ERRORS_DEFAULT\n   or PGSQL_ERRORS_VERBOSE.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."},{"t":"verbosity","d":"The required verbosity: PGSQL_ERRORS_TERSE,\n       PGSQL_ERRORS_DEFAULT\n       or PGSQL_ERRORS_VERBOSE."}]},"pg_trace":{"s":"Enable tracing a PostgreSQL connection","y":"bool pg_trace\n    ( string $pathname\n   [, string $mode = &quot;w&quot;\n   [, resource $connection\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pathname","d":"The full path and file name of the file in which to write the\n       trace log.  Same as in fopen()."},{"t":"mode","d":"An optional file access mode, same as for fopen()."},{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_transaction_status":{"s":"Returns the current in-transaction status of the server.","y":"int pg_transaction_status\n    ( resource $connection\n   )","r":"The status can be PGSQL_TRANSACTION_IDLE (currently idle),\n    PGSQL_TRANSACTION_ACTIVE (a command is in progress),\n    PGSQL_TRANSACTION_INTRANS (idle, in a valid transaction block),\n    or PGSQL_TRANSACTION_INERROR (idle, in a failed transaction block).\n    PGSQL_TRANSACTION_UNKNOWN is reported if the connection is bad.\n    PGSQL_TRANSACTION_ACTIVE is reported only when a query\n    has been sent to the server and not yet completed.","p":[{"t":"connection","d":"PostgreSQL database connection resource."}]},"pg_tty":{"s":"Return the TTY name associated with the connection","y":"string pg_tty\n    ([ resource $connection\n  ] )","r":"A string containing the debug TTY of \n   the connection, or FALSE on error.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_unescape_bytea":{"s":"Unescape binary for bytea type","y":"string pg_unescape_bytea\n    ( string $data\n   )","r":"A string containing the unescaped data.","p":[{"t":"data","d":"A string containing PostgreSQL bytea data to be converted into\n       a PHP binary string."}]},"pg_untrace":{"s":"Disable tracing of a PostgreSQL connection","y":"bool pg_untrace\n    ([ resource $connection\n  ] )","r":"Always returns TRUE.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"pg_update":{"s":"Update table","y":"mixed pg_update\n    ( resource $connection\n   , string $table_name\n   , array $data\n   , array $condition\n   [, int $options = PGSQL_DML_EXEC\n  ] )","r":"Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.","p":[{"t":"connection","d":"PostgreSQL database connection resource."},{"t":"table_name","d":"Name of the table into which to update rows."},{"t":"data","d":"An array whose keys are field names in the table table_name,\n       and whose values are what matched rows are to be updated to."},{"t":"condition","d":"An array whose keys are field names in the table table_name,\n       and whose values are the conditions that a row must meet to be updated."},{"t":"options","d":"Any number of PGSQL_CONV_FORCE_NULL,\n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_ESCAPE,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned. When PGSQL_DML_NO_CONV\n       or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally."}]},"phpcredits":{"s":"Prints out the credits for PHP","y":"bool phpcredits\n    ([ int $flag = CREDITS_ALL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"flag","d":"To generate a custom credits page, you may want to use the\n       flag parameter."}]},"phpinfo":{"s":"Outputs information about PHP&#039;s configuration","y":"bool phpinfo\n    ([ int $what = INFO_ALL\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"what","d":"The output may be customized by passing one or more of the\n       following constants bitwise values summed\n       together in the optional what parameter.\n       One can also combine the respective constants or bitwise values\n       together with the or operator."}]},"phpversion":{"s":"Gets the current PHP version","y":"string phpversion\n    ([ string $extension\n  ] )","r":"If the optional extension parameter is\n   specified, phpversion() returns the version of that\n   extension, or FALSE if there is no version information associated or\n   the extension isn&#039;t enabled.","p":[{"t":"extension","d":"An optional extension name."}]},"php_check_syntax":{"s":"Check the PHP syntax of (and execute) the specified file","y":"bool php_check_syntax\n    ( string $filename\n   [, string &$error_message\n  ] )","r":"Returns TRUE if the lint check passed, and FALSE if the link check\n   failed or if filename cannot be opened.","p":[{"t":"filename","d":"The name of the file being checked."},{"t":"error_message","d":"If the error_message parameter is used, it will\n       contain the error message generated by the syntax check. \n       error_message is passed by \n       reference."}]},"php_ini_loaded_file":{"s":"Retrieve a path to the loaded php.ini file","y":"string php_ini_loaded_file\n    ( void\n   )","r":"The loaded php.ini path, or FALSE if one is not loaded.","p":null},"php_ini_scanned_files":{"s":"Return a list of .ini files parsed from the additional ini dir","y":"string php_ini_scanned_files\n    ( void\n   )","r":"Returns a comma-separated string of .ini files on success. Each comma is\n   followed by a newline. If the directive --with-config-file-scan-dir\n wasn&#039;t set,\n   FALSE is returned.  If it was set and the directory was empty, an\n   empty string is returned.  If a file is unrecognizable, the file will\n   still make it into the returned string but a PHP error will also result.\n   This PHP error will be seen both at compile time and while using\n   php_ini_scanned_files().","p":null},"php_logo_guid":{"s":"Gets the logo guid","y":"string php_logo_guid\n    ( void\n   )","r":"Returns PHPE9568F34-D428-11d2-A769-00AA001ACF42.","p":null},"php_sapi_name":{"s":"Returns the type of interface between web server and PHP","y":"string php_sapi_name\n    ( void\n   )","r":"Returns the interface type, as a lowercase string.","p":null},"php_uname":{"s":"Returns information about the operating system PHP is running on","y":"string php_uname\n    ([ string $mode = &quot;a&quot;\n  ] )","r":"Returns the description, as a string.","p":[{"t":"mode","d":"mode is a single character that defines what\n       information is returned:\n       \n        \n         \n          &#039;a&#039;: This is the default. Contains all modes in\n          the sequence &quot;s n r v m&quot;.\n         \n        \n        \n         \n          &#039;s&#039;: Operating system name. eg.\n           FreeBSD.\n         \n        \n        \n         \n          &#039;n&#039;: Host name. eg. \n          localhost.example.com.\n         \n        \n        \n         \n          &#039;r&#039;: Release name. eg. \n          5.1.2-RELEASE.\n         \n        \n        \n         \n          &#039;v&#039;: Version information. Varies a lot between\n          operating systems.\n         \n        \n        \n         \n          &#039;m&#039;: Machine type. eg. i386."}]},"pi":{"s":"Get value of pi","y":"float pi\n     ( void\n    )","r":"The value of pi as float.","p":null},"png2wbmp":{"s":"Convert PNG image file to WBMP image file","y":"bool png2wbmp\n    ( string $pngname\n   , string $wbmpname\n   , int $dest_height\n   , int $dest_width\n   , int $threshold\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pngname","d":"Path to PNG file."},{"t":"wbmpname","d":"Path to destination WBMP file."},{"t":"dest_height","d":"Destination image height."},{"t":"dest_width","d":"Destination image width."},{"t":"threshold","d":"Threshold value, between 0 and 8 (inclusive)."}]},"popen":{"s":"Opens process file pointer","y":"resource popen\n    ( string $command\n   , string $mode\n   )","r":"Returns a file pointer identical to that returned by\n   fopen(), except that it is unidirectional (may\n   only be used for reading or writing) and must be closed with\n   pclose(). This pointer may be used with\n   fgets(), fgetss(), and\n   fwrite(). When the mode is &#039;r&#039;, the returned\n   file pointer equals to the STDOUT of the command, when the mode\n   is &#039;w&#039;, the returned file pointer equals to the STDIN of the\n   command.","p":[{"t":"command","d":"The command"},{"t":"mode","d":"The mode"}]},"pos":{"s":"Alias of current()","y":"","r":"","p":null},"posix_access":{"s":"Determine accessibility of a file","y":"bool posix_access\n    ( string $file\n   [, int $mode = POSIX_F_OK\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"file","d":"The name of the file to be tested."},{"t":"mode","d":"A mask consisting of one or more of POSIX_F_OK,\n        POSIX_R_OK, POSIX_W_OK and\n        POSIX_X_OK."}]},"posix_ctermid":{"s":"Get path name of controlling terminal","y":"string posix_ctermid\n    ( void\n   )","r":"Upon successful completion, returns string of the pathname to \n   the current controlling terminal.  Otherwise FALSE is returned and errno\n   is set, which can be checked with posix_get_last_error().","p":null},"posix_errno":{"s":"Alias of posix_get_last_error()","y":"","r":"","p":null},"posix_getcwd":{"s":"Pathname of current directory","y":"string posix_getcwd\n    ( void\n   )","r":"Returns a string of the absolute pathname on success.  \n   On error, returns FALSE and sets errno which can be checked with\n   posix_get_last_error().","p":null},"posix_getegid":{"s":"Return the effective group ID of the current process","y":"int posix_getegid\n    ( void\n   )","r":"Returns an integer of the effective group ID.","p":null},"posix_geteuid":{"s":"Return the effective user ID of the current process","y":"int posix_geteuid\n    ( void\n   )","r":"Returns the user id, as an integer","p":null},"posix_getgid":{"s":"Return the real group ID of the current process","y":"int posix_getgid\n    ( void\n   )","r":"Returns the real group id, as an integer.","p":null},"posix_getgrgid":{"s":"Return info about a group by group id","y":"array posix_getgrgid\n    ( int $gid\n   )","r":"The array elements returned are:\n   \n    The group information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the name of the group. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        group, not the real, full name.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the group&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       gid\n       \n        Group ID, should be the same as the\n        gid parameter used when calling the\n        function, and hence redundant.\n       \n      \n\n      \n       members\n       \n        This consists of an array of\n        string&#039;s for all the members in the group.","p":[{"t":"gid","d":"The group id."}]},"posix_getgrnam":{"s":"Return info about a group by name","y":"array posix_getgrnam\n    ( string $name\n   )","r":"The array elements returned are:\n   \n    The group information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the name of the group. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        group, not the real, full name.  This should be the same as\n        the name parameter used when\n        calling the function, and hence redundant.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the group&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       gid\n       \n        Group ID of the group in numeric form.\n       \n      \n\n      \n       members\n       \n        This consists of an array of\n        string&#039;s for all the members in the group.","p":[{"t":"name","d":"The name of the group"}]},"posix_getgroups":{"s":"Return the group set of the current process","y":"array posix_getgroups\n    ( void\n   )","r":"Returns an array of integers containing the numeric group ids of the group\n   set of the current process.","p":null},"posix_getlogin":{"s":"Return login name","y":"string posix_getlogin\n    ( void\n   )","r":"Returns the login name of the user, as a string.","p":null},"posix_getpgid":{"s":"Get process group id for job control","y":"int posix_getpgid\n    ( int $pid\n   )","r":"Returns the identifier, as an integer.","p":[{"t":"pid","d":"The process id."}]},"posix_getpgrp":{"s":"Return the current process group identifier","y":"int posix_getpgrp\n    ( void\n   )","r":"Returns the identifier, as an integer.","p":null},"posix_getpid":{"s":"Return the current process identifier","y":"int posix_getpid\n    ( void\n   )","r":"Returns the identifier, as an integer.","p":null},"posix_getppid":{"s":"Return the parent process identifier","y":"int posix_getppid\n    ( void\n   )","r":"Returns the identifier, as an integer.","p":null},"posix_getpwnam":{"s":"Return info about a user by username","y":"array posix_getpwnam\n    ( string $username\n   )","r":"On success an array with the following elements is returned, else \n   FALSE is returned:\n   \n    The user information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the username of the user. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        user, not the real, full name. This should be the same as\n        the username parameter used when\n        calling the function, and hence redundant.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the user&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       uid\n       \n        User ID of the user in numeric form.\n       \n      \n\n      \n       gid\n       \n        The group ID of the user. Use the function\n        posix_getgrgid() to resolve the group\n        name and a list of its members.\n       \n      \n\n      \n       gecos\n       \n        GECOS is an obsolete term that refers to the finger\n        information field on a Honeywell batch processing system.\n        The field, however, lives on, and its contents have been\n        formalized by POSIX. The field contains a comma separated\n        list containing the user&#039;s full name, office phone, office\n        number, and home phone number. On most systems, only the\n        user&#039;s full name is available.\n       \n      \n\n      \n       dir\n       \n        This element contains the absolute path to the home\n        directory of the user.\n       \n      \n\n      \n       shell\n       \n        The shell element contains the absolute path to the\n        executable of the user&#039;s default shell.","p":[{"t":"username","d":"An alphanumeric username."}]},"posix_getpwuid":{"s":"Return info about a user by user id","y":"array posix_getpwuid\n    ( int $uid\n   )","r":"Returns an associative array with the following elements:\n   \n    The user information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the username of the user. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        user, not the real, full name.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the user&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       uid\n       \n        User ID, should be the same as the\n        uid parameter used when calling the\n        function, and hence redundant.\n       \n      \n\n      \n       gid\n       \n        The group ID of the user. Use the function\n        posix_getgrgid() to resolve the group\n        name and a list of its members.\n       \n      \n\n      \n       gecos\n       \n        GECOS is an obsolete term that refers to the finger\n        information field on a Honeywell batch processing system.\n        The field, however, lives on, and its contents have been\n        formalized by POSIX. The field contains a comma separated\n        list containing the user&#039;s full name, office phone, office\n        number, and home phone number. On most systems, only the\n        user&#039;s full name is available.\n       \n      \n\n      \n       dir\n       \n        This element contains the absolute path to the\n        home directory of the user.\n       \n      \n\n      \n       shell\n       \n        The shell element contains the absolute path to the\n        executable of the user&#039;s default shell.","p":[{"t":"uid","d":"The user identifier."}]},"posix_getrlimit":{"s":"Return info about system resource limits","y":"array posix_getrlimit\n    ( void\n   )","r":"Returns an associative array of elements for each\n   limit that is defined. Each limit has a soft and a hard limit.\n   \n    List of possible limits returned\n    \n     \n      \n       Limit name\n       Limit description\n      \n\n     \n\n     \n      \n       core\n       \n        The maximum size of the core file.  When 0, not core files are\n        created.  When core files are larger than this size, they will\n        be truncated at this size.\n       \n      \n\n      \n       totalmem\n       \n        The maximum size of the memory of the process, in bytes.\n       \n      \n\n      \n       virtualmem\n       \n        The maximum size of the virtual memory for the process, in bytes.\n       \n      \n \n      \n       data\n       \n        The maximum size of the data segment for the process, in bytes.\n       \n      \n\n      \n       stack\n       \n        The maximum size of the process stack, in bytes.\n       \n      \n\n      \n       rss\n       \n        The maximum number of virtual pages resident in RAM\n       \n      \n\n      \n       maxproc\n       \n        The maximum number of processes that can be created for the\n        real user ID of the calling process.\n       \n      \n\n      \n       memlock\n       \n        The maximum number of bytes of memory that may be locked into RAM.\n       \n      \n\n      \n       cpu\n       \n        The amount of time the process is allowed to use the CPU.\n       \n      \n\n      \n       filesize\n       \n        The maximum size of the data segment for the process, in bytes.\n       \n      \n\n      \n       openfiles\n       \n        One more than the maximum number of open file descriptors.","p":null},"posix_getsid":{"s":"Get the current sid of the process","y":"int posix_getsid\n    ( int $pid\n   )","r":"Returns the identifier, as an integer.","p":[{"t":"pid","d":"The process identifier. If set to 0, the current process is\n       assumed.  If an invalid pid is\n       specified, then FALSE is returned and an error is set which\n       can be checked with posix_get_last_error()."}]},"posix_getuid":{"s":"Return the real user ID of the current process","y":"int posix_getuid\n    ( void\n   )","r":"Returns the user id, as an integer","p":null},"posix_get_last_error":{"s":"Retrieve the error number set by the last posix function that failed","y":"int posix_get_last_error\n    ( void\n   )","r":"Returns the errno (error number) set by the last posix function that\n   failed.  If no errors exist, 0 is returned. ","p":null},"posix_initgroups":{"s":"Calculate the group access list","y":"bool posix_initgroups\n    ( string $name\n   , int $base_group_id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"name","d":"The user to calculate the list for."},{"t":"base_group_id","d":"Typically the group number from the password file."}]},"posix_isatty":{"s":"Determine if a file descriptor is an interactive terminal","y":"bool posix_isatty\n    ( int $fd\n   )","r":"Returns TRUE if fd is an open descriptor connected\n   to a terminal and FALSE otherwise.","p":[{"t":"fd","d":"The file descriptor."}]},"posix_kill":{"s":"Send a signal to a process","y":"bool posix_kill\n    ( int $pid\n   , int $sig\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pid","d":"The process identifier."},{"t":"sig","d":"One of the PCNTL signals constants."}]},"posix_mkfifo":{"s":"Create a fifo special file (a named pipe)","y":"bool posix_mkfifo\n    ( string $pathname\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pathname","d":"Path to the FIFO file."},{"t":"mode","d":"The second parameter mode has to be given in\n       octal notation (e.g. 0644). The permission of the newly created\n       FIFO also depends on the setting of the current\n       umask(). The permissions of the created file are\n       (mode &amp; ~umask)."}]},"posix_mknod":{"s":"Create a special or ordinary file (POSIX.1)","y":"bool posix_mknod\n    ( string $pathname\n   , int $mode\n   [, int $major = 0\n   [, int $minor = 0\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pathname","d":"The file to create"},{"t":"mode","d":"This parameter is constructed by a bitwise OR between file type (one of\n       the following constants: POSIX_S_IFREG,\n       POSIX_S_IFCHR, POSIX_S_IFBLK,\n       POSIX_S_IFIFO or\n       POSIX_S_IFSOCK) and permissions."},{"t":"major","d":"The major device kernel identifier (required to pass when using\n       S_IFCHR or S_IFBLK)."},{"t":"minor","d":"The minor device kernel identifier."}]},"posix_setegid":{"s":"Set the effective GID of the current process","y":"bool posix_setegid\n    ( int $gid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"gid","d":"The group id."}]},"posix_seteuid":{"s":"Set the effective UID of the current process","y":"bool posix_seteuid\n    ( int $uid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"uid","d":"The user id."}]},"posix_setgid":{"s":"Set the GID of the current process","y":"bool posix_setgid\n    ( int $gid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"gid","d":"The group id."}]},"posix_setpgid":{"s":"Set process group id for job control","y":"bool posix_setpgid\n    ( int $pid\n   , int $pgid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pid","d":"The process id."},{"t":"pgid","d":"The process group id."}]},"posix_setsid":{"s":"Make the current process a session leader","y":"int posix_setsid\n    ( void\n   )","r":"Returns the session id, or -1 on errors.","p":null},"posix_setuid":{"s":"Set the UID of the current process","y":"bool posix_setuid\n    ( int $uid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"uid","d":"The user id."}]},"posix_strerror":{"s":"Retrieve the system error message associated with the given errno","y":"string posix_strerror\n    ( int $errno\n   )","r":"Returns the error message, as a string.","p":[{"t":"errno","d":"A POSIX error number, returned by \n       posix_get_last_error(). If set to 0, then the\n       string &quot;Success&quot; is returned."}]},"posix_times":{"s":"Get process times","y":"array posix_times\n    ( void\n   )","r":"Returns a hash of strings with information about the current\n   process CPU usage. The indices of the hash are:\n   \n    \n     \n      ticks - the number of clock ticks that have elapsed since\n      reboot.\n     \n    \n    \n     \n      utime - user time used by the current process.\n     \n    \n    \n     \n      stime - system time used by the current process.\n     \n    \n    \n     \n      cutime - user time used by current process and children.\n     \n    \n    \n     \n      cstime - system time used by current process and children.","p":null},"posix_ttyname":{"s":"Determine terminal device name","y":"string posix_ttyname\n    ( int $fd\n   )","r":"On success, returns a string of the absolute path of the\n   fd. On failure, returns FALSE","p":[{"t":"fd","d":"The file descriptor."}]},"posix_uname":{"s":"Get system name","y":"array posix_uname\n    ( void\n   )","r":"Returns a hash of strings with information about the\n   system. The indices of the hash are\n   \n    \n      sysname - operating system name (e.g. Linux)\n     \n    \n      nodename - system name (e.g. valiant)\n     \n    \n      release - operating system release (e.g. 2.2.10)\n     \n    \n      version - operating system version (e.g. #4 Tue Jul 20\n      17:01:36 MEST 1999)\n     \n    \n      machine - system architecture (e.g. i586)\n     \n    \n      domainname - DNS domainname (e.g. example.com)","p":null},"pow":{"s":"Exponential expression","y":"number pow\n     ( number $base\n    , number $exp\n    )","r":"base raised to the power of exp.\n   If both arguments are non-negative integers and the result can be represented\n   as an integer, the result will be returned with integer type,\n   otherwise it will be returned as a float.","p":[{"t":"base","d":"The base to use"},{"t":"exp","d":"The exponent"}]},"preg_filter":{"s":"Perform a regular expression search and replace","y":"mixed preg_filter\n    ( mixed $pattern\n   , mixed $replacement\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )","r":"Returns an array if the subject\n   parameter is an array, or a string otherwise.","p":null},"preg_last_error":{"s":"Returns the error code of the last PCRE regex execution","y":"int preg_last_error\n    ( void\n   )","r":"Returns one of the following constants (explained on their own page):\n   \n    PREG_NO_ERROR\n    PREG_INTERNAL_ERROR\n    PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)\n    PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)\n    PREG_BAD_UTF8_ERROR\n    PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)","p":null},"preg_match":{"s":"Perform a regular expression match","y":"int preg_match\n    ( string $pattern\n   , string $subject\n   [, array &$matches\n   [, int $flags = 0\n   [, int $offset = 0\n  ]]] )","r":"preg_match() returns 1 if the pattern\n   matches given subject, 0 if it does not, or FALSE\n   if an error occurred.","p":[{"t":"pattern","d":"The pattern to search for, as a string."},{"t":"subject","d":"The input string."},{"t":"matches","d":"If matches is provided, then it is filled with\n       the results of search. $matches[0] will contain the\n       text that matched the full pattern, $matches[1]\n       will have the text that matched the first captured parenthesized\n       subpattern, and so on."},{"t":"flags","d":""},{"t":"matches","d":""},{"t":"offset","d":"Normally, the search starts from the beginning of the subject string.\n       The optional parameter offset can be used to\n       specify the alternate place from which to start the search (in bytes)."}]},"preg_match_all":{"s":"Perform a global regular expression match","y":"int preg_match_all\n    ( string $pattern\n   , string $subject\n   [, array &$matches\n   [, int $flags = PREG_PATTERN_ORDER\n   [, int $offset = 0\n  ]]] )","r":"Returns the number of full pattern matches (which might be zero),\n   or FALSE if an error occurred.","p":[{"t":"pattern","d":"The pattern to search for, as a string."},{"t":"subject","d":"The input string."},{"t":"matches","d":"Array of all matches in multi-dimensional array ordered according to\n       flags."},{"t":"flags","d":""},{"t":"","d":"Orders results so that $matches[0] is an array of full\n           pattern matches, $matches[1] is an array of strings matched by\n           the first parenthesized subpattern, and so on."}]},"preg_quote":{"s":"Quote regular expression characters","y":"string preg_quote\n    ( string $str\n  [, string $delimiter = NULL\n  ] )","r":"Returns the quoted (escaped) string.","p":[{"t":"str","d":"The input string."},{"t":"delimiter","d":"If the optional delimiter is specified, it\n       will also be escaped.  This is useful for escaping the delimiter\n       that is required by the PCRE functions. The \/ is the most commonly\n       used delimiter."}]},"preg_replace":{"s":"Perform a regular expression search and replace","y":"mixed preg_replace\n    ( mixed $pattern\n   , mixed $replacement\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )","r":"preg_replace() returns an array if the\n   subject parameter is an array, or a string\n   otherwise.","p":[{"t":"pattern","d":"The pattern to search for. It can be either a string or an array with\n       strings."},{"t":"replacement","d":"The string or an array with strings to replace. If this parameter is a\n       string and the pattern parameter is an array,\n       all patterns will be replaced by that string. If both\n       pattern and replacement\n       parameters are arrays, each pattern will be\n       replaced by the replacement counterpart. If\n       there are fewer elements in the replacement\n       array than in the pattern array, any extra\n       patterns will be replaced by an empty string."},{"t":"subject","d":"The string or an array with strings to search and replace."},{"t":"limit","d":"The maximum possible replacements for each pattern in each\n       subject string. Defaults to\n       -1 (no limit)."},{"t":"count","d":"If specified, this variable will be filled with the number of\n       replacements done."}]},"preg_replace_callback":{"s":"Perform a regular expression search and replace using a callback","y":"mixed preg_replace_callback\n    ( mixed $pattern\n   , callable $callback\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )","r":"preg_replace_callback() returns an array if the\n   subject parameter is an array, or a string\n   otherwise. On errors the return value is NULL","p":[{"t":"pattern","d":"The pattern to search for. It can be either a string or an array with\n       strings."},{"t":"callback","d":"A callback that will be called and passed an array of matched elements\n       in the subject string. The callback should\n       return the replacement string. This is the callback signature:"}]},"preg_split":{"s":"Split string by a regular expression","y":"array preg_split\n    ( string $pattern\n   , string $subject\n   [, int $limit = -1\n   [, int $flags = 0\n  ]] )","r":"Returns an array containing substrings of subject\n   split along boundaries matched by pattern.","p":[{"t":"pattern","d":"The pattern to search for, as a string."},{"t":"subject","d":"The input string."},{"t":"limit","d":"If specified, then only substrings up to limit\n       are returned with the rest of the string being placed in the last\n       substring.  A limit of -1, 0 or NULL means &quot;no limit&quot;\n       and, as is standard across PHP, you can use NULL to skip to the \n       flags parameter."},{"t":"flags","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"subject","d":"If this flag is set, for every occurring match the appendant string\n           offset will also be returned. Note that this changes the return\n           value in an array where every element is an array consisting of the\n           matched string at offset 0 and its string offset\n           into subject at offset 1."}]},"prev":{"s":"Rewind the internal array pointer","y":"mixed prev\n    ( array &$array\n   )","r":"Returns the array value in the previous place that&#039;s pointed to by\n   the internal array pointer, or FALSE if there are no more\n   elements.","p":[{"t":"array","d":"The input array."}]},"print":{"s":"Output a string","y":"int print\n    ( string $arg\n   )","r":"Returns 1, always.","p":[{"t":"arg","d":"The input data."}]},"printer_abort":{"s":"Deletes the printer&#039;s spool file","y":"void printer_abort\n    ( resource $printer_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a printer."}]},"printer_close":{"s":"Close an open printer connection","y":"void printer_close\n    ( resource $printer_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a printer."}]},"printer_create_brush":{"s":"Create a new brush","y":"resource printer_create_brush\n    ( int $style\n   , string $color\n   )","r":"Returns a brush handle or FALSE on error.","p":[{"t":"style","d":"style must be one of the following constants:\n       \n        \n         \n          PRINTER_BRUSH_SOLID:\n          creates a brush with a solid color.\n         \n        \n        \n         \n          PRINTER_BRUSH_DIAGONAL:\n          creates a brush with a 45-degree upward left-to-right hatch ( \/ ).\n         \n        \n        \n         \n          PRINTER_BRUSH_CROSS:\n          creates a brush with a cross hatch ( + ).\n         \n        \n        \n         \n          PRINTER_BRUSH_DIAGCROSS:\n          creates a brush with a 45 cross hatch ( x ).\n         \n        \n        \n         \n          PRINTER_BRUSH_FDIAGONAL:\n          creates a brush with a 45-degree downward left-to-right hatch ( \\ ).\n         \n        \n        \n         \n          PRINTER_BRUSH_HORIZONTAL:\n          creates a brush with a horizontal hatch ( - ).\n         \n        \n        \n         \n          PRINTER_BRUSH_VERTICAL:\n          creates a brush with a vertical hatch ( | ).\n         \n        \n        \n         \n          PRINTER_BRUSH_CUSTOM:\n          creates a custom brush from an BMP file. The second parameter\n          is used to specify the BMP instead of the RGB color code."},{"t":"color","d":"color must be a color in RGB hex format, i.e. \n       &quot;000000&quot; for black."}]},"printer_create_dc":{"s":"Create a new device context","y":"void printer_create_dc\n    ( resource $printer_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."}]},"printer_create_font":{"s":"Create a new font","y":"resource printer_create_font\n    ( string $face\n   , int $height\n   , int $width\n   , int $font_weight\n   , bool $italic\n   , bool $underline\n   , bool $strikeout\n   , int $orientation\n   )","r":"Returns a font handle on success or FALSE on error.","p":[{"t":"face","d":"face must be a string specifying the font face."},{"t":"height","d":"height specifies the font height."},{"t":"width","d":"width specifies the font width."},{"t":"font_weight","d":"The font_weight specifies the font weight\n       (400 is normal), and can be one of the following predefined constants.\n       \n        \n         \n          PRINTER_FW_THIN:\n          sets the font weight to thin (100).\n         \n        \n        \n         \n          PRINTER_FW_ULTRALIGHT:\n          sets the font weight to ultra light (200).\n         \n        \n        \n         \n          PRINTER_FW_LIGHT:\n          sets the font weight to light (300).\n         \n        \n        \n         \n          PRINTER_FW_NORMAL:\n          sets the font weight to normal (400).\n         \n        \n        \n         \n          PRINTER_FW_MEDIUM:\n          sets the font weight to medium (500).\n         \n        \n        \n         \n          PRINTER_FW_BOLD:\n          sets the font weight to bold (700).\n         \n        \n        \n         \n          PRINTER_FW_ULTRABOLD:\n          sets the font weight to ultra bold (800).\n         \n        \n        \n         \n          PRINTER_FW_HEAVY:\n          sets the font weight to heavy (900)."},{"t":"italic","d":"italic can be TRUE or FALSE,\n       and sets whether the font should be italic."},{"t":"underline","d":"underline can be TRUE or FALSE,\n       and sets whether the font should be underlined."},{"t":"strikeout","d":"strikeout can be TRUE or FALSE,\n       and sets whether the font should be stroked out."},{"t":"orientaton","d":"orientation specifies a rotation."}]},"printer_delete_brush":{"s":"Delete a brush","y":"void printer_delete_brush\n    ( resource $brush_handle\n   )","r":"No value is returned.","p":[{"t":"brush_handle","d":"brush_handle must be a valid handle to a brush."}]},"printer_delete_dc":{"s":"Delete a device context","y":"bool printer_delete_dc\n    ( resource $printer_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."}]},"printer_delete_font":{"s":"Delete a font","y":"void printer_delete_font\n    ( resource $font_handle\n   )","r":"No value is returned.","p":[{"t":"font_handle","d":"font_handle must be a valid handle to a font."}]},"printer_delete_pen":{"s":"Delete a pen","y":"void printer_delete_pen\n    ( resource $pen_handle\n   )","r":"No value is returned.","p":[{"t":"pen_handle","d":"pen_handle must be a valid pen handle."}]},"printer_draw_bmp":{"s":"Draw a bmp","y":"bool printer_draw_bmp\n    ( resource $printer_handle\n   , string $filename\n   , int $x\n   , int $y\n   [, int $width\n   ], int $height\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"filename","d":"Path to the bitmap."},{"t":"x","d":"x is the upper left x coordinate of the bitmap."},{"t":"y","d":"y is the upper left y coordinate of the bitmap."},{"t":"width","d":"The bitmap width."},{"t":"height","d":"The bitmap height."}]},"printer_draw_chord":{"s":"Draw a chord","y":"void printer_draw_chord\n    ( resource $printer_handle\n   , int $rec_x\n   , int $rec_y\n   , int $rec_x1\n   , int $rec_y1\n   , int $rad_x\n   , int $rad_y\n   , int $rad_x1\n   , int $rad_y1\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"rec_x","d":"rec_x is the upper left x coordinate of the\n       bounding rectangle."},{"t":"rec_y","d":"rec_y is the upper left y coordinate of\n       the bounding rectangle."},{"t":"rec_x1","d":"rec_x1 is the lower right x coordinate of\n       the bounding rectangle."},{"t":"rec_y1","d":"rec_y1 is the lower right y coordinate of\n       the bounding rectangle."},{"t":"rad_x","d":"rad_x is x coordinate of the radial defining\n       the beginning of the chord."},{"t":"rad_y","d":"rad_y is y coordinate of the radial defining\n       the beginning of the chord."},{"t":"rad_x1","d":"rad_x1 is x coordinate of the radial defining\n       the end of the chord."},{"t":"rad_y1","d":"rad_y1 is y coordinate of the radial defining\n       the end of the chord."}]},"printer_draw_elipse":{"s":"Draw an ellipse","y":"void printer_draw_elipse\n    ( resource $printer_handle\n   , int $ul_x\n   , int $ul_y\n   , int $lr_x\n   , int $lr_y\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"ul_x","d":"ul_x is the upper left x coordinate of the ellipse."},{"t":"ul_y","d":"ul_y is the upper left y coordinate of the ellipse."},{"t":"lr_x","d":"lr_x is the lower right x coordinate of the ellipse."},{"t":"lr_y","d":"lr_y is the lower right y coordinate of the ellipse."}]},"printer_draw_line":{"s":"Draw a line","y":"void printer_draw_line\n    ( resource $printer_handle\n   , int $from_x\n   , int $from_y\n   , int $to_x\n   , int $to_y\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"from_x","d":"from_x is the x coordinate of the origin point."},{"t":"from_y","d":"from_y is the y coordinate of the origin point."},{"t":"to_x","d":"to_x is the x coordinate of the destination point."},{"t":"to_y","d":"to_y is the y coordinate of the destination point."}]},"printer_draw_pie":{"s":"Draw a pie","y":"void printer_draw_pie\n    ( resource $printer_handle\n   , int $rec_x\n   , int $rec_y\n   , int $rec_x1\n   , int $rec_y1\n   , int $rad1_x\n   , int $rad1_y\n   , int $rad2_x\n   , int $rad2_y\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"rec_x","d":"rec_x is the upper left x coordinate of the\n       bounding rectangle."},{"t":"rec_y","d":"rec_y is the upper left y coordinate of\n       the bounding rectangle."},{"t":"rec_x1","d":"rec_x1 is the lower right x coordinate of\n       the bounding rectangle."},{"t":"rec_y1","d":"rec_y1 is the lower right y coordinate of\n       the bounding rectangle."},{"t":"rad1_x","d":"rad1_x is x coordinate of the first\n       radial&#039;s ending."},{"t":"rad1_y","d":"rad1_y is y coordinate of the first\n       radial&#039;s ending."},{"t":"rad2_x","d":"rad2_x is x coordinate of the second\n       radial&#039;s ending."},{"t":"rad2_y","d":"rad2_y is y coordinate of the second\n       radial&#039;s ending."}]},"printer_draw_rectangle":{"s":"Draw a rectangle","y":"void printer_draw_rectangle\n    ( resource $printer_handle\n   , int $ul_x\n   , int $ul_y\n   , int $lr_x\n   , int $lr_y\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"ul_x","d":"ul_x is the upper left x coordinate of the rectangle."},{"t":"ul_y","d":"ul_y is the upper left y coordinate of the rectangle."},{"t":"lr_x","d":"lr_x is the lower right x coordinate of the rectangle."},{"t":"lr_y","d":"lr_y is the lower right y coordinate of the rectangle."}]},"printer_draw_roundrect":{"s":"Draw a rectangle with rounded corners","y":"void printer_draw_roundrect\n    ( resource $printer_handle\n   , int $ul_x\n   , int $ul_y\n   , int $lr_x\n   , int $lr_y\n   , int $width\n   , int $height\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"ul_x","d":"ul_x is the upper left x coordinate of the rectangle."},{"t":"ul_y","d":"ul_y is the upper left y coordinate of the rectangle."},{"t":"lr_x","d":"lr_x is the lower right x coordinate of the rectangle."},{"t":"lr_y","d":"lr_y is the lower right y coordinate of the rectangle."},{"t":"width","d":"width is the width of the ellipse."},{"t":"height","d":"height is the height of the ellipse."}]},"printer_draw_text":{"s":"Draw text","y":"void printer_draw_text\n    ( resource $printer_handle\n   , string $text\n   , int $x\n   , int $y\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a\n       printer."},{"t":"text","d":"The text to be written."},{"t":"x","d":"x is the x coordinate of the position."},{"t":"y","d":"y is the y coordinate of the position."}]},"printer_end_doc":{"s":"Close document","y":"bool printer_end_doc\n    ( resource $printer_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a\n       printer."}]},"printer_end_page":{"s":"Close active page","y":"bool printer_end_page\n    ( resource $printer_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a printer."}]},"printer_get_option":{"s":"Retrieve printer configuration data","y":"mixed printer_get_option\n    ( resource $printer_handle\n   , string $option\n   )","r":"Returns the value of option.","p":[{"t":"printer_handle","d":"printer_handle must be a valid handle to a\n       printer."},{"t":"option","d":"Take a look at printer_set_option() for the settings that can\n       be retrieved, additionally the following settings can be retrieved:\n       \n        \n         \n          PRINTER_DEVICENAME\n          returns the devicename of the printer.\n         \n        \n        \n         \n          PRINTER_DRIVERVERSION\n          returns the printer driver version."}]},"printer_list":{"s":"Return an array of printers attached to the server","y":"array printer_list\n    ( int $enumtype\n   [, string $name\n   [, int $level\n  ]] )","r":"Return an array of printers.","p":[{"t":"enumtype","d":"enumtype must be one of the following predefined\n       constants:\n       \n        \n         \n          PRINTER_ENUM_LOCAL:\n          enumerates the locally installed printers.\n         \n        \n        \n         \n          PRINTER_ENUM_NAME:\n          enumerates the printer of name, can be a server,\n          domain or print provider.\n         \n        \n        \n         \n          PRINTER_ENUM_SHARED:\n          this parameter can&#039;t be used alone, it has to be OR&#039;ed with other\n          parameters, i.e. PRINTER_ENUM_LOCAL to detect the locally shared\n          printers.\n         \n        \n        \n         \n          PRINTER_ENUM_DEFAULT:\n          (Win9.x only) enumerates the default printer.\n         \n        \n        \n         \n          PRINTER_ENUM_CONNECTIONS:\n          (WinNT\/2000 only) enumerates the printers to which the user has\n          made connections.\n         \n        \n        \n         \n          PRINTER_ENUM_NETWORK:\n          (WinNT\/2000 only) enumerates network printers in the computer&#039;s\n          domain. Only valid if level is 1.\n         \n        \n        \n         \n          PRINTER_ENUM_REMOTE:\n          (WinNT\/2000 only) enumerates network printers and print servers in the\n          computer&#039;s domain. Only valid if level is 1."},{"t":"name","d":"Used with PRINTER_ENUM_NAME."},{"t":"level","d":"level sets the level of information request.\n       Can be 1,2,4 or 5."}]},"printer_logical_fontheight":{"s":"Get logical font height","y":"int printer_logical_fontheight\n    ( resource $printer_handle\n   , int $height\n   )","r":"Returns the logical font height or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"height","d":"The font height."}]},"printer_open":{"s":"Opens a connection to a printer","y":"resource printer_open\n    ([ string $printername\n  ] )","r":"Returns a printer handle on success or FALSE on failure.","p":[{"t":"printername","d":"The printer name. If no parameter was given it tries to open a\n       connection to the default printer (if not specified in php.ini as\n       printer.default_printer, PHP tries to detect it)."}]},"printer_select_brush":{"s":"Select a brush","y":"void printer_select_brush\n    ( resource $printer_handle\n   , resource $brush_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"brush_handle","d":"brush_handle must be a valid brush handle."}]},"printer_select_font":{"s":"Select a font","y":"void printer_select_font\n    ( resource $printer_handle\n   , resource $font_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"font_handle","d":"font_handle must be a valid font handle."}]},"printer_select_pen":{"s":"Select a pen","y":"void printer_select_pen\n    ( resource $printer_handle\n   , resource $pen_handle\n   )","r":"No value is returned.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"pen_handle","d":"pen_handle must be a valid pen handle."}]},"printer_set_option":{"s":"Configure the printer connection","y":"bool printer_set_option\n    ( resource $printer_handle\n   , int $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"option","d":"Option can be one of the following constants:\n       \n        \n         \n          PRINTER_COPIES:\n          sets how many copies should be printed, value\n          must be an integer.\n         \n        \n        \n         \n          PRINTER_MODE:\n          specifies the type of data (text, raw or emf),\n          value must be a string.\n         \n        \n        \n         \n          PRINTER_TITLE:\n          specifies the name of the document, value\n          must be a string.\n         \n        \n        \n         \n          PRINTER_ORIENTATION:\n          specifies the orientation of the paper, value\n          can be either PRINTER_ORIENTATION_PORTRAIT or\n          PRINTER_ORIENTATION_LANDSCAPE\n         \n        \n        \n         \n          PRINTER_RESOLUTION_Y:\n          specifies the y-resolution in DPI, value\n          must be an integer.\n         \n        \n        \n         \n          PRINTER_RESOLUTION_X:\n          specifies the x-resolution in DPI, value\n          must be an integer.\n         \n        \n        \n         \n          PRINTER_PAPER_FORMAT:\n          specifies a predefined paper format, set value\n          to PRINTER_FORMAT_CUSTOM if you want to specify a custom format with\n          PRINTER_PAPER_WIDTH and PRINTER_PAPER_LENGTH.\n          value can be one of the following constants.\n         \n         \n          \n           \n            PRINTER_FORMAT_CUSTOM:\n            let&#039;s you specify a custom paper format.\n           \n          \n          \n           \n            PRINTER_FORMAT_LETTER:\n            specifies standard letter format (8 1\/2- by 11-inches).\n           \n          \n          \n           \n            PRINTER_FORMAT_LEGAL:\n            specifies standard legal format (8 1\/2- by 14-inches).\n           \n          \n          \n           \n            PRINTER_FORMAT_A3:\n            specifies standard A3 format (297- by 420-millimeters).\n           \n          \n          \n           \n            PRINTER_FORMAT_A4:\n            specifies standard A4 format (210- by 297-millimeters).\n           \n          \n          \n           \n            PRINTER_FORMAT_A5:\n            specifies standard A5 format (148- by 210-millimeters).\n           \n          \n          \n           \n            PRINTER_FORMAT_B4:\n            specifies standard B4 format (250- by 354-millimeters).\n           \n          \n          \n           \n            PRINTER_FORMAT_B5:\n            specifies standard B5 format (182- by 257-millimeter).\n           \n          \n          \n           \n            PRINTER_FORMAT_FOLIO:\n            specifies standard FOLIO format (8 1\/2- by 13-inch).\n           \n          \n         \n        \n        \n         \n          PRINTER_PAPER_LENGTH:\n          if PRINTER_PAPER_FORMAT is set to\n          PRINTER_FORMAT_CUSTOM,\n          PRINTER_PAPER_LENGTH specifies a custom paper length in mm,\n          value must be an integer.\n         \n        \n        \n         \n          PRINTER_PAPER_WIDTH:\n          if PRINTER_PAPER_FORMAT is set to PRINTER_FORMAT_CUSTOM,\n          PRINTER_PAPER_WIDTH specifies a custom paper width in mm,\n          value must be an integer.\n         \n        \n        \n         \n          PRINTER_SCALE:\n          specifies the factor by which the printed output is to be scaled.\n          the page size is scaled from the physical page size by a factor\n          of scale\/100. for example if you set the scale to 50, the output\n          would be half of its original size. value\n          must be an integer.\n         \n        \n        \n         \n          PRINTER_BACKGROUND_COLOR:\n          specifies the background color for the actual device context,\n          value must be a string containing the rgb\n          information in hex format i.e. &quot;005533&quot;.\n         \n        \n        \n         \n          PRINTER_TEXT_COLOR:\n          specifies the text color for the actual device context,\n          value must be a string containing the rgb\n          information in hex format i.e. &quot;005533&quot;.\n         \n        \n        \n         \n          PRINTER_TEXT_ALIGN:\n          specifies the text alignment for the actual device context,\n          value can be combined through OR&#039;ing the\n          following constants:\n         \n         \n          \n           \n            PRINTER_TA_BASELINE:\n            text will be aligned at the base line.\n           \n          \n          \n           \n            PRINTER_TA_BOTTOM:\n            text will be aligned at the bottom.\n           \n          \n          \n           \n            PRINTER_TA_TOP:\n            text will be aligned at the top.\n           \n          \n          \n           \n            PRINTER_TA_CENTER:\n            text will be aligned at the center.\n           \n          \n          \n           \n            PRINTER_TA_LEFT:\n            text will be aligned at the left.\n           \n          \n          \n           \n            PRINTER_TA_RIGHT:\n            text will be aligned at the right."},{"t":"value","d":"The option value."}]},"printer_start_page":{"s":"Start a new page","y":"bool printer_start_page\n    ( resource $printer_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."}]},"printer_write":{"s":"Write data to the printer","y":"bool printer_write\n    ( resource $printer_handle\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"content","d":"The data to be written."}]},"printf":{"s":"Output a formatted string","y":"int printf\n    ( string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","r":"Returns the length of the outputted string.","p":[{"t":"format","d":"See sprintf() for a description of\n       format."},{"t":"args","d":""},{"t":"...","d":""}]},"print_r":{"s":"Prints human-readable information about a variable","y":"mixed print_r\n    ( mixed $expression\n   [, bool $return = false\n  ] )","r":"If given a string, integer or float,\n   the value itself will be printed.  If given an array, values\n   will be presented in a format that shows keys and elements.  Similar\n   notation is used for objects.","p":[{"t":"expression","d":"The expression to be printed."},{"t":"return","d":"If you would like to capture the output of print_r(), \n       use the return parameter.  When this parameter is set\n       to TRUE, print_r() will return the information rather than print it."}]},"proc_close":{"s":"Close a process opened by proc_open()","y":"int proc_close\n    ( resource $process\n   )","r":"Returns the termination status of the process that was run. In case of \n   an error then -1 is returned.","p":[{"t":"process","d":"The proc_open() resource that will\n       be closed."}]},"proc_get_status":{"s":"Get information about a process opened by proc_open()","y":"array proc_get_status\n    ( resource $process\n   )","r":"An array of collected information on success, and FALSE\n   on failure. The returned array contains the following elements:","p":[{"t":"process","d":"The proc_open() resource that will\n       be evaluated."}]},"proc_nice":{"s":"Change the priority of the current process","y":"bool proc_nice\n    ( int $increment\n   )","r":"Returns TRUE on success or FALSE on failure.\n   If an error occurs, like the user lacks permission to change the priority, \n   an error of level E_WARNING is also generated.","p":[{"t":"increment","d":"The increment value of the priority change."}]},"proc_open":{"s":"Execute a command and open file pointers for input\/output","y":"resource proc_open\n       ( string $cmd\n      , array $descriptorspec\n      , array &$pipes\n      [, string $cwd\n      [, array $env\n      [, array $other_options\n     ]]] )","r":"Returns a resource representing the process, which should be freed using\n   proc_close() when you are finished with it. On failure\n   returns FALSE.","p":[{"t":"cmd","d":"The command to execute"},{"t":"descriptorspec","d":"An indexed array where the key represents the descriptor number and the\n       value represents how PHP will pass that descriptor to the child\n       process. 0 is stdin, 1 is stdout, while 2 is stderr."},{"t":"pipes","d":"Will be set to an indexed array of file pointers that correspond to\n       PHP&#039;s end of any pipes that are created."},{"t":"cwd","d":"The initial working dir for the command. This must be an\n       absolute directory path, or NULL\n       if you want to use the default value (the working dir of the current\n       PHP process)"},{"t":"env","d":"An array with the environment variables for the command that will be\n       run, or NULL to use the same environment as the current PHP process"},{"t":"other_options","d":"Allows you to specify additional options. Currently supported options\n       include:\n       \n        \n         suppress_errors (windows only): suppresses errors\n         generated by this function when it&#039;s set to TRUE\n        \n        \n         bypass_shell (windows only): bypass\n         cmd.exe shell when set to TRUE"}]},"proc_terminate":{"s":"Kills a process opened by proc_open","y":"bool proc_terminate\n    ( resource $process\n   [, int $signal = 15\n  ] )","r":"Returns the termination status of the process that was run.","p":[{"t":"process","d":"The proc_open() resource that will\n       be closed."},{"t":"signal","d":"This optional parameter is only useful on POSIX\n       operating systems; you may specify a signal to send to the process\n       using the kill(2) system call.  The default is\n       SIGTERM."}]},"property_exists":{"s":"Checks if the object or class has a property","y":"bool property_exists\n    ( mixed $class\n   , string $property\n   )","r":"Returns TRUE if the property exists, FALSE if it doesn&#039;t exist or\n   NULL in case of an error.","p":[{"t":"class","d":"The class name or an object of the class to test for"},{"t":"property","d":"The name of the property"}]},"pspell_add_to_personal":{"s":"Add the word to a personal wordlist","y":"bool pspell_add_to_personal\n    ( int $dictionary_link\n   , string $word\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"word","d":"The added word."}]},"pspell_add_to_session":{"s":"Add the word to the wordlist in the current session","y":"bool pspell_add_to_session\n    ( int $dictionary_link\n   , string $word\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"word","d":"The added word."}]},"pspell_check":{"s":"Check a word","y":"bool pspell_check\n    ( int $dictionary_link\n   , string $word\n   )","r":"Returns TRUE if the spelling is correct, FALSE if not.","p":[{"t":"dictionary_link","d":""},{"t":"word","d":"The tested word."}]},"pspell_clear_session":{"s":"Clear the current session","y":"bool pspell_clear_session\n    ( int $dictionary_link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""}]},"pspell_config_create":{"s":"Create a config used to open a dictionary","y":"int pspell_config_create\n    ( string $language\n   [, string $spelling\n   [, string $jargon\n   [, string $encoding\n  ]]] )","r":"Retuns a pspell config identifier, or FALSE on error.","p":[{"t":"language","d":"The language parameter is the language code which consists of the\n       two letter ISO 639 language code and an optional two letter ISO\n       3166 country code after a dash or underscore."},{"t":"spelling","d":"The spelling parameter is the requested spelling for languages\n       with more than one spelling such as English. Known values are\n       &#039;american&#039;, &#039;british&#039;, and &#039;canadian&#039;."},{"t":"jargon","d":"The jargon parameter contains extra information to distinguish\n       two different words lists that have the same language and\n       spelling parameters."},{"t":"encoding","d":"The encoding parameter is the encoding that words are expected to\n       be in.  Valid values are &#039;utf-8&#039;, &#039;iso8859-*&#039;, &#039;koi8-r&#039;,\n       &#039;viscii&#039;, &#039;cp1252&#039;, &#039;machine unsigned 16&#039;, &#039;machine unsigned\n       32&#039;. This parameter is largely untested, so be careful when\n       using."}]},"pspell_config_data_dir":{"s":"location of language data files","y":"bool pspell_config_data_dir\n    ( int $conf\n   , string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"pspell_config_dict_dir":{"s":"Location of the main word list","y":"bool pspell_config_dict_dir\n    ( int $conf\n   , string $directory\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"pspell_config_ignore":{"s":"Ignore words less than N characters long","y":"bool pspell_config_ignore\n    ( int $dictionary_link\n   , int $n\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"n","d":"Words less than n characters will be skipped."}]},"pspell_config_mode":{"s":"Change the mode number of suggestions returned","y":"bool pspell_config_mode\n    ( int $dictionary_link\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"mode","d":"The mode parameter is the mode in which spellchecker will work.\n       There are several modes available:\n       \n        \n         \n          PSPELL_FAST - Fast mode (least number of\n          suggestions)\n         \n        \n        \n         \n          PSPELL_NORMAL - Normal mode (more suggestions)\n         \n        \n        \n         \n          PSPELL_BAD_SPELLERS - Slow mode (a lot of\n          suggestions)"}]},"pspell_config_personal":{"s":"Set a file that contains personal wordlist","y":"bool pspell_config_personal\n    ( int $dictionary_link\n   , string $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"file","d":"The personal wordlist. If the file does not exist, it will be created.\n       The file should be writable by whoever PHP runs as (e.g. nobody)."}]},"pspell_config_repl":{"s":"Set a file that contains replacement pairs","y":"bool pspell_config_repl\n    ( int $dictionary_link\n   , string $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"file","d":"The file should be writable by whoever PHP runs as (e.g. nobody)."}]},"pspell_config_runtogether":{"s":"Consider run-together words as valid compounds","y":"bool pspell_config_runtogether\n    ( int $dictionary_link\n   , bool $flag\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"flag","d":"TRUE if run-together words should be treated as legal compounds,\n       FALSE otherwise."}]},"pspell_config_save_repl":{"s":"Determine whether to save a replacement pairs list\n  along with the wordlist","y":"bool pspell_config_save_repl\n    ( int $dictionary_link\n   , bool $flag\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":""},{"t":"flag","d":"TRUE if replacement pairs should be saved, FALSE otherwise."}]},"pspell_new":{"s":"Load a new dictionary","y":"int pspell_new\n    ( string $language\n   [, string $spelling\n   [, string $jargon\n   [, string $encoding\n   [, int $mode = 0\n  ]]]] )","r":"Returns the dictionary link identifier on success or FALSE on failure.","p":[{"t":"language","d":"The language parameter is the language code which consists of the\n       two letter ISO 639 language code and an optional two letter ISO\n       3166 country code after a dash or underscore."},{"t":"spelling","d":"The spelling parameter is the requested spelling for languages\n       with more than one spelling such as English. Known values are\n       &#039;american&#039;, &#039;british&#039;, and &#039;canadian&#039;."},{"t":"jargon","d":"The jargon parameter contains extra information to distinguish\n       two different words lists that have the same language and\n       spelling parameters."},{"t":"encoding","d":"The encoding parameter is the encoding that words are expected to\n       be in.  Valid values are &#039;utf-8&#039;, &#039;iso8859-*&#039;, &#039;koi8-r&#039;,\n       &#039;viscii&#039;, &#039;cp1252&#039;, &#039;machine unsigned 16&#039;, &#039;machine unsigned\n       32&#039;. This parameter is largely untested, so be careful when\n       using."},{"t":"mode","d":"The mode parameter is the mode in which spellchecker will work.\n       There are several modes available:\n       \n        \n         \n          PSPELL_FAST - Fast mode (least number of\n          suggestions)\n         \n        \n        \n         \n          PSPELL_NORMAL - Normal mode (more suggestions)\n         \n        \n        \n         \n          PSPELL_BAD_SPELLERS - Slow mode (a lot of\n          suggestions)\n         \n        \n        \n         \n          PSPELL_RUN_TOGETHER - Consider run-together words\n          as legal compounds.  That is, &quot;thecat&quot; will be a legal compound,\n          although there should be a space between the two words. Changing this\n          setting only affects the results returned by\n          pspell_check(); pspell_suggest()\n          will still return suggestions.\n         \n        \n       \n       Mode is a bitmask constructed from different constants listed above.\n       However, PSPELL_FAST,\n       PSPELL_NORMAL and\n       PSPELL_BAD_SPELLERS are mutually exclusive, so you\n       should select only one of them."}]},"pspell_new_config":{"s":"Load a new dictionary with settings based on a given config","y":"int pspell_new_config\n    ( int $config\n   )","r":"Returns a dictionary link identifier on success.","p":[{"t":"config","d":"The config parameter is the one returned by\n       pspell_config_create() when the config was created."}]},"pspell_new_personal":{"s":"Load a new dictionary with personal wordlist","y":"int pspell_new_personal\n    ( string $personal\n   , string $language\n   [, string $spelling\n   [, string $jargon\n   [, string $encoding\n   [, int $mode = 0\n  ]]]] )","r":"Returns the dictionary link identifier for use in other pspell functions.","p":[{"t":"personal","d":"The file where words added to the personal list will be stored.\n       It should be an absolute filename beginning with &#039;\/&#039; because otherwise\n       it will be relative to $HOME, which is &quot;\/root&quot; for most systems, and\n       is probably not what you want."},{"t":"language","d":"The language code which consists of the two letter ISO 639 language\n       code and an optional two letter ISO 3166 country code after a dash\n       or underscore."},{"t":"spelling","d":"The requested spelling for languages with more than one spelling such\n       as English. Known values are &#039;american&#039;, &#039;british&#039;, and &#039;canadian&#039;."},{"t":"jargon","d":"Extra information to distinguish two different words lists that have\n       the same language and spelling parameters."},{"t":"encoding","d":"The encoding that words are expected to be in.  Valid values are\n       utf-8, iso8859-*, \n       koi8-r, viscii, \n       cp1252, machine unsigned 16, \n       machine unsigned 32."},{"t":"mode","d":"The mode in which spellchecker will work. There are several modes available:\n       \n        \n         \n          PSPELL_FAST - Fast mode (least number of\n          suggestions)\n         \n        \n        \n         \n          PSPELL_NORMAL - Normal mode (more suggestions)\n         \n        \n        \n         \n          PSPELL_BAD_SPELLERS - Slow mode (a lot of\n          suggestions)\n         \n        \n        \n         \n          PSPELL_RUN_TOGETHER - Consider run-together words\n          as legal compounds.  That is, &quot;thecat&quot; will be a legal compound,\n          although there should be a space between the two words. Changing this\n          setting only affects the results returned by\n          pspell_check(); pspell_suggest()\n          will still return suggestions.\n         \n        \n       \n       Mode is a bitmask constructed from different constants listed above.\n       However, PSPELL_FAST,\n       PSPELL_NORMAL and\n       PSPELL_BAD_SPELLERS are mutually exclusive, so you\n       should select only one of them."}]},"pspell_save_wordlist":{"s":"Save the personal wordlist to a file","y":"bool pspell_save_wordlist\n    ( int $dictionary_link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":"A dictionary link identifier opened with\n       pspell_new_personal()."}]},"pspell_store_replacement":{"s":"Store a replacement pair for a word","y":"bool pspell_store_replacement\n    ( int $dictionary_link\n   , string $misspelled\n   , string $correct\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dictionary_link","d":"A dictionary link identifier, opened with\n       pspell_new_personal()"},{"t":"misspelled","d":"The misspelled word."},{"t":"correct","d":"The fixed spelling for the misspelled word."}]},"pspell_suggest":{"s":"Suggest spellings of a word","y":"array pspell_suggest\n    ( int $dictionary_link\n   , string $word\n   )","r":"Returns an array of possible spellings.","p":[{"t":"dictionary_link","d":""},{"t":"word","d":"The tested word."}]},"ps_add_bookmark":{"s":"Add bookmark to current page","y":"int ps_add_bookmark\n    ( resource $psdoc\n   , string $text\n   [, int $parent = 0\n   [, int $open = 0\n  ]] )","r":"The returned value is a reference for the bookmark. It is only used if\n   the bookmark shall be used as a parent. The value is greater zero if\n   the function succeeds. In case of an error zero will\n   be returned.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text used for displaying the bookmark."},{"t":"parent","d":"A bookmark previously created by this function which\n       is used as the parent of the new bookmark."},{"t":"open","d":"If open is unequal to zero the bookmark will\n       be shown open by the pdf viewer."}]},"ps_add_launchlink":{"s":"Adds link which launches file","y":"bool ps_add_launchlink\n    ( resource $psdoc\n   , float $llx\n   , float $lly\n   , float $urx\n   , float $ury\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"llx","d":"The x-coordinate of the lower left corner."},{"t":"lly","d":"The y-coordinate of the lower left corner."},{"t":"urx","d":"The x-coordinate of the upper right corner."},{"t":"ury","d":"The y-coordinate of the upper right corner."},{"t":"filename","d":"The path of the program to be started, when the link is clicked on."}]},"ps_add_locallink":{"s":"Adds link to a page in the same document","y":"bool ps_add_locallink\n    ( resource $psdoc\n   , float $llx\n   , float $lly\n   , float $urx\n   , float $ury\n   , int $page\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"llx","d":"The x-coordinate of the lower left corner."},{"t":"lly","d":"The y-coordinate of the lower left corner."},{"t":"urx","d":"The x-coordinate of the upper right corner."},{"t":"ury","d":"The y-coordinate of the upper right corner."},{"t":"page","d":"The number of the page displayed when clicking on the link."},{"t":"dest","d":"The parameter dest determines how the document\n       is being viewed. It can be fitpage,\n       fitwidth, fitheight, or\n       fitbbox."}]},"ps_add_note":{"s":"Adds note to current page","y":"bool ps_add_note\n    ( resource $psdoc\n   , float $llx\n   , float $lly\n   , float $urx\n   , float $ury\n   , string $contents\n   , string $title\n   , string $icon\n   , int $open\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"llx","d":"The x-coordinate of the lower left corner."},{"t":"lly","d":"The y-coordinate of the lower left corner."},{"t":"urx","d":"The x-coordinate of the upper right corner."},{"t":"ury","d":"The y-coordinate of the upper right corner."},{"t":"contents","d":"The text of the note."},{"t":"title","d":"The title of the note as displayed in the header of the note."},{"t":"icon","d":"The icon shown if the note is folded. This parameter can be set\n       to comment, insert,\n       note, paragraph,\n       newparagraph, key, or\n       help."},{"t":"open","d":"If open is unequal to zero the note will\n       be shown unfolded after opening the document with a pdf viewer."}]},"ps_add_pdflink":{"s":"Adds link to a page in a second pdf document","y":"bool ps_add_pdflink\n    ( resource $psdoc\n   , float $llx\n   , float $lly\n   , float $urx\n   , float $ury\n   , string $filename\n   , int $page\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"llx","d":"The x-coordinate of the lower left corner."},{"t":"lly","d":"The y-coordinate of the lower left corner."},{"t":"urx","d":"The x-coordinate of the upper right corner."},{"t":"ury","d":"The y-coordinate of the upper right corner."},{"t":"filename","d":"The name of the pdf document to be opened when clicking on\n       this link."},{"t":"page","d":"The page number of the destination pdf document"},{"t":"dest","d":"The parameter dest determines how the document\n       is being viewed. It can be fitpage,\n       fitwidth, fitheight, or\n       fitbbox."}]},"ps_add_weblink":{"s":"Adds link to a web location","y":"bool ps_add_weblink\n    ( resource $psdoc\n   , float $llx\n   , float $lly\n   , float $urx\n   , float $ury\n   , string $url\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"llx","d":"The x-coordinate of the lower left corner."},{"t":"lly","d":"The y-coordinate of the lower left corner."},{"t":"urx","d":"The x-coordinate of the upper right corner."},{"t":"ury","d":"The y-coordinate of the upper right corner."},{"t":"url","d":"The url of the hyperlink to be opened when clicking on\n       this link, e.g. http:\/\/www.php.net."}]},"ps_arc":{"s":"Draws an arc counterclockwise","y":"bool ps_arc\n    ( resource $psdoc\n   , float $x\n   , float $y\n   , float $radius\n   , float $alpha\n   , float $beta\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"The x-coordinate of the circle&#039;s middle point."},{"t":"y","d":"The y-coordinate of the circle&#039;s middle point."},{"t":"radius","d":"The radius of the circle"},{"t":"alpha","d":"The start angle given in degrees."},{"t":"beta","d":"The end angle given in degrees."}]},"ps_arcn":{"s":"Draws an arc clockwise","y":"bool ps_arcn\n    ( resource $psdoc\n   , float $x\n   , float $y\n   , float $radius\n   , float $alpha\n   , float $beta\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"The x-coordinate of the circle&#039;s middle point."},{"t":"y","d":"The y-coordinate of the circle&#039;s middle point."},{"t":"radius","d":"The radius of the circle"},{"t":"alpha","d":"The starting angle given in degrees."},{"t":"beta","d":"The end angle given in degrees."}]},"ps_begin_page":{"s":"Start a new page","y":"bool ps_begin_page\n    ( resource $psdoc\n   , float $width\n   , float $height\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"width","d":"The width of the page in pixel, e.g. 596 for A4 format."},{"t":"height","d":"The height of the page in pixel, e.g. 842 for A4 format."}]},"ps_begin_pattern":{"s":"Start a new pattern","y":"int ps_begin_pattern\n    ( resource $psdoc\n   , float $width\n   , float $height\n   , float $xstep\n   , float $ystep\n   , int $painttype\n   )","r":"The identifier of the pattern  or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"width","d":"The width of the pattern in pixel."},{"t":"height","d":"The height of the pattern in pixel."},{"t":"x-step","d":"The distance in pixel of placements of the pattern in\n       horizontal direction."},{"t":"y-step","d":"The distance in pixel of placements of the pattern in\n       vertical direction."},{"t":"painttype","d":"Must be 1 or 2."}]},"ps_begin_template":{"s":"Start a new template","y":"int ps_begin_template\n    ( resource $psdoc\n   , float $width\n   , float $height\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"width","d":"The width of the template in pixel."},{"t":"height","d":"The height of the template in pixel."}]},"ps_circle":{"s":"Draws a circle","y":"bool ps_circle\n    ( resource $psdoc\n   , float $x\n   , float $y\n   , float $radius\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"The x-coordinate of the circle&#039;s middle point."},{"t":"y","d":"The y-coordinate of the circle&#039;s middle point."},{"t":"radius","d":"The radius of the circle"}]},"ps_clip":{"s":"Clips drawing to current path","y":"bool ps_clip\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_close":{"s":"Closes a PostScript document","y":"bool ps_close\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_closepath":{"s":"Closes path","y":"bool ps_closepath\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_closepath_stroke":{"s":"Closes and strokes path","y":"bool ps_closepath_stroke\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_close_image":{"s":"Closes image and frees memory","y":"void ps_close_image\n    ( resource $psdoc\n   , int $imageid\n   )","r":"Returns NULL on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"imageid","d":"Resource identifier of the image as returned by\n       ps_open_image() or\n       ps_open_image_file()."}]},"ps_continue_text":{"s":"Continue text in next line","y":"bool ps_continue_text\n    ( resource $psdoc\n   , string $text\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text to output."}]},"ps_curveto":{"s":"Draws a curve","y":"bool ps_curveto\n    ( resource $psdoc\n   , float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $x3\n   , float $y3\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x1","d":"x-coordinate of first control point."},{"t":"y1","d":"y-coordinate of first control point."},{"t":"x2","d":"x-coordinate of second control point."},{"t":"y2","d":"y-coordinate of second control point."},{"t":"x3","d":"x-coordinate of third control point."},{"t":"y3","d":"y-coordinate of third control point."}]},"ps_delete":{"s":"Deletes all resources of a PostScript document","y":"bool ps_delete\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_end_page":{"s":"End a page","y":"bool ps_end_page\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_end_pattern":{"s":"End a pattern","y":"bool ps_end_pattern\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_end_template":{"s":"End a template","y":"bool ps_end_template\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_fill":{"s":"Fills the current path","y":"bool ps_fill\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_fill_stroke":{"s":"Fills and strokes the current path","y":"bool ps_fill_stroke\n    ( resource $psdoc   \n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_findfont":{"s":"Loads a font","y":"int ps_findfont\n    ( resource $psdoc\n   , string $fontname\n   , string $encoding\n   [, bool $embed = false\n  ] )","r":"Returns the identifier of the font or zero in case of an error. The\n   identifier is a positive number.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"fontname","d":"The name of the font."},{"t":"encoding","d":"ps_findfont() will try to load the file passed in\n       the parameter encoding. Encoding files are of\n       the same syntax as those used by dvips(1). They\n       contain a font encoding vector (which is currently not used but must be\n       present) and a list of extra ligatures to extend the list of ligatures\n       derived from the afm file."},{"t":"embed","d":"If set to a value &gt;0 the font will be embedded into the document. This\n       requires the font outline (.pfb file) to be present."}]},"ps_get_buffer":{"s":"Fetches the full buffer containig the generated PS data","y":"string ps_get_buffer\n    ( resource $psdoc\n   )","r":"","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_get_parameter":{"s":"Gets certain parameters","y":"string ps_get_parameter\n    ( resource $psdoc\n   , string $name\n   [, float $modifier\n  ] )","r":"Returns the value of the parameter  or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"name","d":"Name of the parameter."},{"t":"modifier","d":"An identifier needed if a parameter of a resource is requested,\n       e.g. the size of an image. In such a case the resource id is\n       passed."}]},"ps_get_value":{"s":"Gets certain values","y":"float ps_get_value\n    ( resource $psdoc\n   , string $name\n   [, float $modifier\n  ] )","r":"Returns the value of the parameter or FALSE.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"name","d":"Name of the value."},{"t":"modifier","d":"The parameter modifier specifies the resource\n       for which the value is to be retrieved. This can be the id of a font or\n       an image."}]},"ps_hyphenate":{"s":"Hyphenates a word","y":"array ps_hyphenate\n    ( resource $psdoc\n   , string $text\n   )","r":"An array of integers indicating the position of possible breaks in\n   the text  or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"text should not contain any non alpha\n       characters. Possible positions for breaks are returned in an array of\n       interger numbers. Each number is the position of the char in \n       text after which a hyphenation can take place."}]},"ps_include_file":{"s":"Reads an external file with raw PostScript code","y":"bool ps_include_file\n    ( resource $psdoc\n   , string $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"file","d":""}]},"ps_lineto":{"s":"Draws a line","y":"bool ps_lineto\n    ( resource $psdoc\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"x-coordinate of the end point of the line."},{"t":"y","d":"y-coordinate of the end point of the line."}]},"ps_makespotcolor":{"s":"Create spot color","y":"int ps_makespotcolor\n    ( resource $psdoc\n   , string $name\n   [, int $reserved = 0\n  ] )","r":"The id of the new spot color or 0 in case of an error.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"name","d":"Name of the spot color, e.g. Pantone 5565."}]},"ps_moveto":{"s":"Sets current point","y":"bool ps_moveto\n    ( resource $psdoc\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"x-coordinate of the point to move to."},{"t":"y","d":"y-coordinate of the point to move to."}]},"ps_new":{"s":"Creates a new PostScript document object","y":"resource ps_new\n    ( void\n   )","r":"Resource of PostScript document or FALSE on failure. The return value\n   is passed to all other functions as the first argument.","p":null},"ps_open_file":{"s":"Opens a file for output","y":"bool ps_open_file\n    ( resource $psdoc\n   [, string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"filename","d":"The name of the postscript file.\n       If filename is not passed the document will be\n       created in memory and all output will go straight to the browser."}]},"ps_open_image":{"s":"Reads an image for later placement","y":"int ps_open_image\n    ( resource $psdoc\n   , string $type\n   , string $source\n   , string $data\n   , int $lenght\n   , int $width\n   , int $height\n   , int $components\n   , int $bpc\n   , string $params\n   )","r":"Returns identifier of image or zero in case of an error. The identifier is\n   a positive number greater than 0.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The type of the image. Possible values are png,\n       jpeg, or eps."},{"t":"source","d":"Not used."},{"t":"data","d":"The image data."},{"t":"length","d":"The length of the image data."},{"t":"width","d":"The width of the image."},{"t":"height","d":"The height of the image."},{"t":"components","d":"The number of components for each pixel. This can be\n       1 (gray scale images), 3 (rgb images), or 4 (cmyk, rgba images)."},{"t":"bpc","d":"Number of bits per component (quite often 8)."},{"t":"params","d":""}]},"ps_open_image_file":{"s":"Opens image from file","y":"int ps_open_image_file\n    ( resource $psdoc\n   , string $type\n   , string $filename\n   [, string $stringparam\n   [, int $intparam = 0\n  ]] )","r":"Returns identifier of image or zero in case of an error. The identifier is\n   a positive number greater than 0.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The type of the image. Possible values are png,\n       jpeg, or eps."},{"t":"filename","d":"The name of the file containing the image data."},{"t":"stringparam","d":"Not used."},{"t":"intparam","d":"Not used."}]},"ps_open_memory_image":{"s":"Takes an GD image and returns an image for placement in a PS document","y":"int ps_open_memory_image\n    ( resource $psdoc\n   , int $gd\n   )","r":"","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"gd","d":""}]},"ps_place_image":{"s":"Places image on the page","y":"bool ps_place_image\n    ( resource $psdoc\n   , int $imageid\n   , float $x\n   , float $y\n   , float $scale\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"imageid","d":"The resource identifier of the image as returned by \n       ps_open_image() or\n       ps_open_image_file()."},{"t":"x","d":"x-coordinate of the lower left corner of the image."},{"t":"y","d":"y-coordinate of the lower left corner of the image."},{"t":"scale","d":"The scaling factor for the image. A scale of 1.0 will result\n       in a resolution of 72 dpi, because each pixel is equivalent to\n       1 point."}]},"ps_rect":{"s":"Draws a rectangle","y":"bool ps_rect\n    ( resource $psdoc\n   , float $x\n   , float $y\n   , float $width\n   , float $height\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"x-coordinate of the lower left corner of the rectangle."},{"t":"y","d":"y-coordinate of the lower left corner of the rectangle."},{"t":"width","d":"The width of the image."},{"t":"height","d":"The height of the image."}]},"ps_restore":{"s":"Restore previously save context","y":"bool ps_restore\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_rotate":{"s":"Sets rotation factor","y":"bool ps_rotate\n    ( resource $psdoc\n   , float $rot\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"rot","d":"Angle of rotation in degree."}]},"ps_save":{"s":"Save current context","y":"bool ps_save\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_scale":{"s":"Sets scaling factor","y":"bool ps_scale\n    ( resource $psdoc\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"Scaling factor in horizontal direction."},{"t":"y","d":"Scaling factor in vertical direction."}]},"ps_setdash":{"s":"Sets appearance of a dashed line","y":"bool ps_setdash\n    ( resource $psdoc\n   , float $on\n   , float $off\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"on","d":"The length of the dash."},{"t":"off","d":"The length of the gap between dashes."}]},"ps_setflat":{"s":"Sets flatness","y":"bool ps_setflat\n    ( resource $psdoc\n   , float $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"value","d":"The value must be between 0.2 and 1."}]},"ps_setfont":{"s":"Sets font to use for following output","y":"bool ps_setfont\n    ( resource $psdoc\n   , int $fontid\n   , float $size\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"fontid","d":"The font identifier as returned by ps_findfont()."},{"t":"size","d":"The size of the font."}]},"ps_setgray":{"s":"Sets gray value","y":"bool ps_setgray\n    ( resource $psdoc\n   , float $gray\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"gray","d":"The value must be between 0 (white) and 1 (black)."}]},"ps_setlinecap":{"s":"Sets appearance of line ends","y":"bool ps_setlinecap\n    ( resource $psdoc\n   , int $type\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The type of line ends. Possible values are\n       PS_LINECAP_BUTT,\n       PS_LINECAP_ROUND, or\n       PS_LINECAP_SQUARED."}]},"ps_setlinejoin":{"s":"Sets how contected lines are joined","y":"bool ps_setlinejoin\n    ( resource $psdoc\n   , int $type\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The way lines are joined. Possible values are\n       PS_LINEJOIN_MITER,\n       PS_LINEJOIN_ROUND, or\n       PS_LINEJOIN_BEVEL."}]},"ps_setlinewidth":{"s":"Sets width of a line","y":"bool ps_setlinewidth\n    ( resource $psdoc\n   , float $width\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"width","d":"The width of lines in points."}]},"ps_setmiterlimit":{"s":"Sets the miter limit","y":"bool ps_setmiterlimit\n    ( resource $psdoc\n   , float $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"value","d":"The maximum ratio between the miter length and the line width. Larger\n       values (&gt; 10) will result in very long spikes when two lines meet\n       in a small angle. Keep the default unless you know what you are doing."}]},"ps_setoverprintmode":{"s":"Sets overprint mode","y":"bool ps_setoverprintmode\n    ( resource $psdoc\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"mode","d":""}]},"ps_setpolydash":{"s":"Sets appearance of a dashed line","y":"bool ps_setpolydash\n    ( resource $psdoc\n   , float $arr\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"arr","d":"arr is a list of length elements alternately for\n       the black and white portion."}]},"ps_set_border_color":{"s":"Sets color of border for annotations","y":"bool ps_set_border_color\n    ( resource $psdoc\n   , float $red\n   , float $green\n   , float $blue\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"red","d":"The red component of the border color."},{"t":"green","d":"The green component of the border color."},{"t":"blue","d":"The blue component of the border color."}]},"ps_set_border_dash":{"s":"Sets length of dashes for border of annotations","y":"bool ps_set_border_dash\n    ( resource $psdoc\n   , float $black\n   , float $white\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"black","d":"The length of the dash."},{"t":"white","d":"The length of the gap between dashes."}]},"ps_set_border_style":{"s":"Sets border style of annotations","y":"bool ps_set_border_style\n    ( resource $psdoc\n   , string $style\n   , float $width\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"style","d":"style can be solid or\n       dashed."},{"t":"width","d":"The line width of the border."}]},"ps_set_info":{"s":"Sets information fields of document","y":"bool ps_set_info\n    ( resource $p\n   , string $key\n   , string $val\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"key","d":"The name of the information field to set. The values which can be\n       set are Keywords, Subject,\n       Title, Creator,\n       Author, BoundingBox, and\n       Orientation. Be aware that some of them has a\n       meaning to PostScript viewers."},{"t":"value","d":"The value of the information field. The field\n       Orientation can be set to either\n       Portrait or Landscape. The\n       BoundingBox is a string consisting of four numbers.\n       The first two numbers are the coordinates of the lower left corner of\n       the page. The last two numbers are the coordinates of the upper\n       right corner."}]},"ps_set_parameter":{"s":"Sets certain parameters","y":"bool ps_set_parameter\n    ( resource $psdoc\n   , string $name\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"name","d":"For a list of possible names see ps_get_parameter()."},{"t":"value","d":"The value of the parameter."}]},"ps_set_value":{"s":"Sets certain values","y":"bool ps_set_value\n    ( resource $psdoc\n   , string $name\n   , float $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"name","d":""},{"t":"","d":"The way how text is shown."},{"t":"","d":"The x coordinate for text output."},{"t":"","d":"The y coordinate for text output."},{"t":"","d":"The distance between words relative to the width of a space."},{"t":"","d":"The distance between lines in pixels."},{"t":"value","d":"The value of the parameter."}]},"ps_shading":{"s":"Creates a shading for later use","y":"int ps_shading\n    ( resource $psdoc\n   , string $type\n   , float $x0\n   , float $y0\n   , float $x1\n   , float $y1\n   , float $c1\n   , float $c2\n   , float $c3\n   , float $c4\n   , string $optlist\n   )","r":"Returns the identifier of the pattern  or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The type of shading can be either radial or\n       axial. Each shading starts with the current fill\n       color and ends with the given color values passed in the parameters\n       c1 to c4\n       (see ps_setcolor() for their meaning)."},{"t":"x0, x1, y0, y1","d":"The coordinates x0, y0,\n       x1, y1 are the start and\n       end point of the shading. If the type of shading is\n       radial the two points are the middle points of\n       a starting and ending circle."},{"t":"c1, c2, c3, c4","d":"See ps_setcolor() for their meaning."},{"t":"optlist","d":"If the shading is of type radial the\n       optlist must also contain the parameters\n       r0 and r1 with the radius of the\n       start and end circle."}]},"ps_shading_pattern":{"s":"Creates a pattern based on a shading","y":"int ps_shading_pattern\n    ( resource $psdoc\n   , int $shadingid\n   , string $optlist\n   )","r":"The identifier of the pattern  or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"shadingid","d":"The identifier of a shading previously created with\n       ps_shading()."},{"t":"optlist","d":"This argument is not currently used."}]},"ps_shfill":{"s":"Fills an area with a shading","y":"bool ps_shfill\n    ( resource $psdoc\n   , int $shadingid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"shadingid","d":"The identifier of a shading previously created with\n       ps_shading()."}]},"ps_show":{"s":"Output text","y":"bool ps_show\n    ( resource $psdoc\n   , string $text\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text to be output."}]},"ps_show2":{"s":"Output a text at current position","y":"bool ps_show2\n    ( resource $psdoc\n   , string $text\n   , int $len\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text to be output."},{"t":"len","d":"The maximum number of characters to print."}]},"ps_show_xy":{"s":"Output text at given position","y":"bool ps_show_xy\n    ( resource $psdoc\n   , string $text\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text to be output."},{"t":"x","d":"x-coordinate of the lower left corner of the box surrounding the text."},{"t":"y","d":"y-coordinate of the lower left corner of the box surrounding the text."}]},"ps_show_xy2":{"s":"Output text at position","y":"bool ps_show_xy2\n    ( resource $psdoc\n   , string $text\n   , int $len\n   , float $xcoor\n   , float $ycoor\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"ps_stringwidth":{"s":"Gets width of a string","y":"float ps_stringwidth\n    ( resource $psdoc\n   , string $text\n   [, int $fontid = 0\n   [, float $size = 0.0\n  ]] )","r":"Width of a string in points.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text for which the width is to be calculated."},{"t":"fontid","d":"The identifier of the font to be used. If not font is specified\n       the current font will be used."},{"t":"size","d":"The size of the font. If no size is specified the current size\n       is used."}]},"ps_string_geometry":{"s":"Gets geometry of a string","y":"array ps_string_geometry\n    ( resource $psdoc\n   , string $text\n   [, int $fontid = 0\n   [, float $size = 0.0\n  ]] )","r":"An array of the dimensions of a string. The element &#039;width&#039; contains the\n   width of the string as returned by ps_stringwidth(). The\n   element &#039;descender&#039; contains the maximum descender and &#039;ascender&#039; the\n   maximum ascender of the string.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text for which the geometry is to be calculated."},{"t":"fontid","d":"The identifier of the font to be used. If not font is specified\n       the current font will be used."},{"t":"size","d":"The size of the font. If no size is specified the current size\n       is used."}]},"ps_stroke":{"s":"Draws the current path","y":"bool ps_stroke\n    ( resource $psdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."}]},"ps_symbol":{"s":"Output a glyph","y":"bool ps_symbol\n    ( resource $psdoc\n   , int $ord\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"ord","d":"The position of the glyph in the font encoding vector."}]},"ps_symbol_name":{"s":"Gets name of a glyph","y":"string ps_symbol_name\n    ( resource $psdoc\n   , int $ord\n   [, int $fontid = 0\n  ] )","r":"The name of a glyph in the given font.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"ord","d":"The parameter ord is the position of the glyph\n       in the font encoding vector."},{"t":"fontid","d":"The identifier of the font to be used. If not font is specified\n       the current font will be used."}]},"ps_symbol_width":{"s":"Gets width of a glyph","y":"float ps_symbol_width\n    ( resource $psdoc\n   , int $ord\n   [, int $fontid = 0\n   [, float $size = 0.0\n  ]] )","r":"The width of a glyph in points.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"ord","d":"The position of the glyph in the font encoding vector."},{"t":"fontid","d":"The identifier of the font to be used. If not font is specified\n       the current font will be used."},{"t":"size","d":"The size of the font. If no size is specified the current size\n       is used."}]},"ps_translate":{"s":"Sets translation","y":"bool ps_translate\n    ( resource $psdoc\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"x-coordinate of the origin of the translated coordinate system."},{"t":"y","d":"y-coordinate of the origin of the translated coordinate system."}]},"putenv":{"s":"Sets the value of an environment variable","y":"bool putenv\n    ( string $setting\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"setting","d":"The setting, like &quot;FOO=BAR&quot;"}]},"px_close":{"s":"Closes a paradox database","y":"bool px_close\n    ( resource $pxdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."}]},"px_create_fp":{"s":"Create a new paradox database","y":"bool px_create_fp\n    ( resource $pxdoc\n   , resource $file\n   , array $fielddesc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"file","d":"File handle as returned by fopen()."},{"t":"fielddesc","d":"fielddesc\n is an array containing one element for each\n       field specification. A field specification is an array itself with\n       either two or three elements.The first element is always a string value\n       used as the name of the field. It may not be larger than ten\n       characters. The second element contains the field type which is one of\n       the constants listed in the table Constants for field types.\n       In the case of a character field or bcd field, you will have to provide\n       a third element specifying the length respectively the precesion of the\n       field. If your field specification contains blob fields, you will have\n       to make sure to either make the field large enough for all field values\n       to fit or specify a blob file with\n       px_set_blob_file() for storing the blobs. If this is\n       not done the field data is truncated."}]},"px_date2string":{"s":"Converts a date into a string.","y":"string px_date2string\n    ( resource $pxdoc\n   , int $value\n   , string $format\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"value","d":"Value as stored in paradox database field of type\n       PX_FIELD_DATE."},{"t":"format","d":"String format similar to the format used by date().\n        The placeholders support by this function is a subset of those\n        supported by date() (Y, y, m, n, d, j, L)."}]},"px_delete":{"s":"Deletes resource of paradox database","y":"bool px_delete\n    ( resource $pxdoc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."}]},"px_delete_record":{"s":"Deletes record from paradox database","y":"bool px_delete_record\n    ( resource $pxdoc\n   , int $num\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"num","d":"The record number is an artificial number counting records in the order\n       as they are stored in the database. The first record has number 0."}]},"px_get_field":{"s":"Returns the specification of a single field","y":"array px_get_field\n    ( resource $pxdoc\n   , int $fieldno\n   )","r":"Returns the specification of the fieldno\n&#039;th database\n   field as an associated array. The array contains three fields named\n   name, type, and\n   size.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"fieldno","d":"Number of the field. The first field has number 0. Specifying a field\n       number less than 0 and greater or equal the number of fields will\n       trigger an error."}]},"px_get_parameter":{"s":"Gets a parameter","y":"string px_get_parameter\n    ( resource $pxdoc\n   , string $name\n   )","r":"Returns the value of the parameter or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"name","d":"The name can be one of the following:"},{"t":"","d":"The name of the table as it will be stored in the database header."},{"t":"","d":"The encoding for the output. Data which is being read from character\n          fields with px_get_record() or\n          px_retrieve_record() is recoded into the\n          targetencoding. If it is not set, then the data\n          will be delivered as stored in the database file."},{"t":"","d":"The encoding of the input data which is to be stored into the database.\n          When storing data of character fields in the database, the data is\n          expected to be delivered in this encoding."}]},"px_get_record":{"s":"Returns record of paradox database","y":"array px_get_record\n    ( resource $pxdoc\n   , int $num\n   [, int $mode = 0\n  ] )","r":"Returns the num&#039;th record from the paradox\n   database. The record is returned as an associated array with its keys\n   being the field names.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"num","d":"The record number is an artificial number counting records in the order\n       as they are stored in the database. The first record has number 0."},{"t":"mode","d":"The optional mode can be\n       PX_KEYTOLOWER or PX_KEYTOUPPER\n       in order to convert the keys of the returned array into lower or\n       upper case. If\n       mode is not passed or is 0, then the key will be\n       exactly like the field name. The element values will contain the field\n       values. NULL values will be retained and are different from 0.0, 0 or\n       the empty string. Fields of type PX_FIELD_TIME\n       will be returned as an integer counting the number of milliseconds\n       starting at midnight. A timestamp\n       (PX_FIELD_TIMESTAMP) and date\n       (PX_FIELD_DATE) are floating point respectively\n       int values counting milliseconds respectively days starting\n       at the beginning of julian calendar.\n       Use the functions px-timestamp2string() and\n       px-date2string() to convert them into a character\n       representation."}]},"px_get_schema":{"s":"Returns the database schema","y":"array px_get_schema\n    ( resource $pxdoc\n   [, int $mode = 0\n  ] )","r":"Returns the schema of a database file as an associated array. The key name\n   is equal to the field name. Each array element is itself an associated\n   array containing the two fields type and\n   size. type is one of the constants in\n   table Constants for field\n   types. size is the number of bytes this field\n   consumes in the record. The total of all field sizes is equal to the\n   record size as it can be retrieved with px-get-info().","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"mode","d":"If the optional mode is\n       PX_KEYTOLOWER or\n       PX_KEYTOUPPER the keys of the returned array\n       will be converted to lower\n       or upper case. If mode is 0 or not passed at all,\n       then the key name will be identical to the field name."}]},"px_get_value":{"s":"Gets a value","y":"float px_get_value\n    ( resource $pxdoc\n   , string $name\n   )","r":"Returns the value of the parameter or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"name","d":""},{"t":"","d":"The number of primary keys. Paradox databases always use the\n             first numprimkeys fields for the primary\n             index."}]},"px_insert_record":{"s":"Inserts record into paradox database","y":"int px_insert_record\n    ( resource $pxdoc\n   , array $data\n   )","r":"Returns FALSE on failure or the record number in case of success.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"data","d":"Associated or indexed array containing the field values as e.g.\n       returned by px_retrieve_record()."}]},"px_new":{"s":"Create a new paradox object","y":"resource px_new\n    ( void\n   )","r":"Returns FALSE on failure.","p":null},"px_numfields":{"s":"Returns number of fields in a database","y":"int px_numfields\n    ( resource $pxdoc\n   )","r":"Returns the number of fields in a database file. The return value of this\n   function is identical to the element numfields in the\n   array returned by px_get_info().","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."}]},"px_numrecords":{"s":"Returns number of records in a database","y":"int px_numrecords\n    ( resource $pxdoc\n   )","r":"Returns the number of records in a database file. The return value of this\n   function is identical to the element numrecords in the\n   array returned by px_get_info().","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."}]},"px_open_fp":{"s":"Open paradox database","y":"bool px_open_fp\n    ( resource $pxdoc\n   , resource $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"file","d":"file is the return value from\n       fopen() with the actual database file as parameter.\n       Make sure the database is writable if you plan to update or insert\n       records."}]},"px_put_record":{"s":"Stores record into paradox database","y":"bool px_put_record\n    ( resource $pxdoc\n   , array $record\n   [, int $recpos = -1\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"record","d":"Associated or indexed array containing the field values as e.g.\n       returned by px_retrieve_record()."},{"t":"recpos","d":"This optional parameter may be used to specify a record number\n       greater than the current number of records in the database. The\n       function will add as many empty records as needed. There is hardly\n       any need for this parameter."}]},"px_retrieve_record":{"s":"Returns record of paradox database","y":"array px_retrieve_record\n    ( resource $pxdoc\n   , int $num\n   [, int $mode = 0\n  ] )","r":"Returns the num&#039;th record from the paradox\n   database. The record is returned as an associated array with its keys\n   being the field names.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"num","d":"The record number is an artificial number counting records in the order\n       as they are stored in the database. The first record has number 0."},{"t":"mode","d":"The optional mode can be\n       PX_KEYTOLOWER or PX_KEYTOUPPER\n       in order to convert the keys into lower or upper case. If\n       mode is not passed or is 0, then the key will be\n       exactly like the field name. The element values will contain the field\n       values. NULL values will be retained and are different from 0.0, 0 or\n       the empty string. Fields of type PX_FIELD_TIME\n       will be returned as an integer counting the number of milliseconds\n       starting at midnight. A timestamp is a floating point value also\n       counting milliseconds starting at the beginning of julian calendar."}]},"px_set_blob_file":{"s":"Sets the file where blobs are read from","y":"bool px_set_blob_file\n    ( resource $pxdoc\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"filename","d":"The name of the file. Its extension should be .MB."}]},"px_set_parameter":{"s":"Sets a parameter","y":"bool px_set_parameter\n    ( resource $pxdoc\n   , string $name\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"name","d":"Depending on the parameter you want to set, name\n       can be one of the following."},{"t":"","d":"The name of the table as it will be stored in the database header."},{"t":"","d":"The encoding for the output. Data which is being read from\n           character fields is recoded into the targetencoding."},{"t":"","d":"The encoding of the input data which is to be stored into the\n           database."},{"t":"value","d":"The value of parameter to set. For inputencoding and targetencoding\n       this must be the name of the encoding as understood by iconv or\n       recode, e.g. iso-8859-1, utf-8, cp850."}]},"px_set_targetencoding":{"s":"Sets the encoding for character fields (deprecated)","y":"bool px_set_targetencoding\n    ( resource $pxdoc\n   , string $encoding\n   )","r":"Returns FALSE if the encoding could not be set, e.g. the encoding is\n   unknown, or pxlib does not support recoding at all. In the second case a\n   warning will be issued.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"encoding","d":"The encoding for the output. Data which is being read from\n       character fields is recoded into the targetencoding."}]},"px_set_value":{"s":"Sets a value","y":"bool px_set_value\n    ( resource $pxdoc\n   , string $name\n   , float $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"name","d":"name can be one of the following."},{"t":"","d":"The number of primary keys. Paradox databases always use the first\n           numprimkeys\n fields for the primary index."},{"t":"value","d":""}]},"px_update_record":{"s":"Updates record in paradox database","y":"bool px_update_record\n    ( resource $pxdoc\n   , array $data\n   , int $num\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"data","d":"Associated array containing the field values as returned by\n       px_retrieve_record()."},{"t":"num","d":"The record number is an artificial number counting records in the order\n       as they are stored in the database. The first record has number 0."}]},"qdom_error":{"s":"Returns the error string from the last QDOM operation or FALSE if no errors occurred","y":"string qdom_error\n    ( void\n   )","r":"","p":null},"qdom_tree":{"s":"Creates a tree of an XML string","y":"QDomDocument qdom_tree\n    ( string $doc\n   )","r":"","p":null},"quoted_printable_decode":{"s":"Convert a quoted-printable string to an 8 bit string","y":"string quoted_printable_decode\n    ( string $str\n   )","r":"Returns the 8-bit binary string.","p":[{"t":"str","d":"The input string."}]},"quoted_printable_encode":{"s":"Convert a 8 bit string to a quoted-printable string","y":"string quoted_printable_encode\n    ( string $str\n   )","r":"Returns the encoded string.","p":[{"t":"str","d":"The input string."}]},"quotemeta":{"s":"Quote meta characters","y":"string quotemeta\n    ( string $str\n   )","r":"Returns the string with meta characters quoted, or FALSE if an empty\n   string is given as str.","p":[{"t":"str","d":"The input string."}]},"rad2deg":{"s":"Converts the radian number to the equivalent number in degrees","y":"float rad2deg\n     ( float $number\n    )","r":"The equivalent of number in degrees","p":[{"t":"number","d":"A radian value"}]},"radius_acct_open":{"s":"Creates a Radius handle for accounting","y":"resource radius_acct_open\n    ( void\n   )","r":"Returns a handle on success, FALSE on error. This function only fails if\n   insufficient memory is available.","p":null},"radius_add_server":{"s":"Adds a server","y":"bool radius_add_server\n    ( resource $radius_handle\n   , string $hostname\n   , int $port\n   , string $secret\n   , int $timeout\n   , int $max_tries\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":""},{"t":"hostname","d":"The hostname parameter specifies the server host,\n       either as a fully qualified domain name or as a dotted-quad IP address\n       in text form."},{"t":"port","d":"The port specifies the UDP port to contact on\n       the server. If port is given as 0, the library looks up the\n       radius\/udp or\n       radacct\/udp service in the\n       network services database, and uses the port found there.  If no entry\n       is found, the library uses the standard Radius ports, 1812 for\n       authentication and 1813 for accounting."},{"t":"secret","d":"The shared secret for the server host is passed to the\n       secret parameter. The Radius protocol ignores\n       all but the leading 128 bytes of the shared secret."},{"t":"timeout","d":"The timeout for receiving replies from the server is passed to the\n       timeout parameter, in units of seconds."},{"t":"max_tries","d":"The maximum number of repeated requests to make before giving up is\n       passed into the max_tries."}]},"radius_auth_open":{"s":"Creates a Radius handle for authentication","y":"resource radius_auth_open\n    ( void\n   )","r":"Returns a handle on success, FALSE on error. This function only fails if\n   insufficient memory is available.","p":null},"radius_close":{"s":"Frees all ressources","y":"bool radius_close\n    ( resource $radius_handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"radius_config":{"s":"Causes the library to read the given configuration file","y":"bool radius_config\n    ( resource $radius_handle\n   , string $file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":""},{"t":"file","d":"The pathname of the configuration file is passed as the file argument\n       to radius_config(). The library can also be\n       configured programmatically by calls to\n       radius_add_server()."}]},"radius_create_request":{"s":"Create accounting or authentication request","y":"bool radius_create_request\n   ( resource $radius_handle\n  , int $type      \n  )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":""},{"t":"type","d":"Type is RADIUS_ACCESS_REQUEST or\n       RADIUS_ACCOUNTING_REQUEST."}]},"radius_cvt_addr":{"s":"Converts raw data to IP-Address","y":"string radius_cvt_addr\n    ( string $data\n   )","r":"","p":null},"radius_cvt_int":{"s":"Converts raw data to integer","y":"int radius_cvt_int\n    ( string $data\n   )","r":"","p":null},"radius_cvt_string":{"s":"Converts raw data to string","y":"string radius_cvt_string\n    ( string $data\n   )","r":"","p":null},"radius_demangle":{"s":"Demangles data","y":"string radius_demangle\n    ( resource $radius_handle\n   , string $mangled\n   )","r":"Returns the demangled string, or FALSE on error.","p":null},"radius_demangle_mppe_key":{"s":"Derives mppe-keys from mangled data","y":"string radius_demangle_mppe_key\n    ( resource $radius_handle      \n   , string $mangled\n   )","r":"Returns the demangled string, or FALSE on error.","p":null},"radius_get_attr":{"s":"Extracts an attribute","y":"mixed radius_get_attr\n    ( resource $radius_handle\n   )","r":"Returns an associative array containing the attribute-type and the data, or\n   error number &lt;= 0.","p":null},"radius_get_tagged_attr_data":{"s":"Extracts the data from a tagged attribute","y":"string radius_get_tagged_attr_data\n    ( string $data\n   )","r":"Returns the data from the tagged attribute  or FALSE on failure.","p":[{"t":"data","d":"The tagged attribute to be decoded."}]},"radius_get_tagged_attr_tag":{"s":"Extracts the tag from a tagged attribute","y":"integer radius_get_tagged_attr_tag\n    ( string $data\n   )","r":"Returns the tag from the tagged attribute  or FALSE on failure.","p":[{"t":"data","d":"The tagged attribute to be decoded."}]},"radius_get_vendor_attr":{"s":"Extracts a vendor specific attribute","y":"array radius_get_vendor_attr\n    ( string $data\n   )","r":"Returns an associative array containing the attribute-type, vendor and the\n   data, or FALSE on error.","p":null},"radius_put_attr":{"s":"Attaches a binary attribute","y":"bool radius_put_attr\n    ( resource $radius_handle\n   , int $type      \n   , string $value            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value, which will be treated as a raw binary string."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_int":{"s":"Attaches an integer attribute","y":"bool radius_put_int\n    ( resource $radius_handle\n   , int $type      \n   , int $value            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_string":{"s":"Attaches a string attribute","y":"bool radius_put_string\n    ( resource $radius_handle\n   , int $type      \n   , string $value            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value. This value is expected by the underlying library\n       to be null terminated, therefore this parameter is not binary safe."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_vendor_addr":{"s":"Attaches a vendor specific IP address attribute","y":"bool radius_put_vendor_addr\n    ( resource $radius_handle\n   , int $vendor            \n   , int $type      \n   , string $addr            \n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"vendor","d":"The vendor ID."},{"t":"type","d":"The attribute type."},{"t":"addr","d":"An IPv4 address in string form, such as 10.0.0.1."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_vendor_attr":{"s":"Attaches a vendor specific binary attribute","y":"bool radius_put_vendor_attr\n    ( resource $radius_handle\n   , int $vendor\n   , int $type\n   , string $value\n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"vendor","d":"The vendor ID."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value, which will be treated as a raw binary string."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_vendor_int":{"s":"Attaches a vendor specific integer attribute","y":"bool radius_put_vendor_int\n    ( resource $radius_handle\n   , int $vendor            \n   , int $type      \n   , int $value            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"vendor","d":"The vendor ID."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_put_vendor_string":{"s":"Attaches a vendor specific string attribute","y":"bool radius_put_vendor_string\n    ( resource $radius_handle\n   , int $vendor            \n   , int $type      \n   , string $value            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"vendor","d":"The vendor ID."},{"t":"type","d":"The attribute type."},{"t":"value","d":"The attribute value. This value is expected by the underlying library\n       to be null terminated, therefore this parameter is not binary safe."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"radius_request_authenticator":{"s":"Returns the request authenticator","y":"string radius_request_authenticator\n    ( resource $radius_handle\n   )","r":"Returns the request authenticator as string, or FALSE on error.","p":null},"radius_send_request":{"s":"Sends the request and waites for a reply","y":"int radius_send_request\n    ( resource $radius_handle\n   )","r":"If a valid response is received, radius_send_request()\n   returns the Radius code which specifies the type of the response. This will\n   typically be RADIUS_ACCESS_ACCEPT,\n   RADIUS_ACCESS_REJECT, or\n   RADIUS_ACCESS_CHALLENGE. If no valid response is\n   received, radius_send_request() returns FALSE.","p":null},"radius_server_secret":{"s":"Returns the shared secret","y":"string radius_server_secret\n    ( resource $radius_handle\n   )","r":"Returns the server&#039;s shared secret as string, or FALSE on error.","p":null},"rand":{"s":"Generate a random integer","y":"int rand\n    ( void\n   )","r":"A pseudo random value between min\n   (or 0) and max (or getrandmax(), inclusive).","p":[{"t":"min","d":"The lowest value to return (default: 0)"},{"t":"max","d":"The highest value to return (default: getrandmax())"}]},"range":{"s":"Create an array containing a range of elements","y":"array range\n    ( mixed $start\n   , mixed $end\n   [, number $step = 1\n  ] )","r":"Returns an array of elements from start to\n   end, inclusive.","p":[{"t":"start","d":"First value of the sequence."},{"t":"end","d":"The sequence is ended upon reaching the\n       end value."},{"t":"step","d":"If a step value is given, it will be used as the\n       increment between elements in the sequence.  step\n       should be given as a positive number.  If not specified,\n       step will default to 1."}]},"rar_wrapper_cache_stats":{"s":"Cache hits and misses for the URL wrapper","y":"string rar_wrapper_cache_stats\n    ( void\n   )","r":"","p":null},"rawurldecode":{"s":"Decode URL-encoded strings","y":"string rawurldecode\n    ( string $str\n   )","r":"Returns the decoded URL, as a string.","p":[{"t":"str","d":"The URL to be decoded."}]},"readdir":{"s":"Read entry from directory handle","y":"string readdir\n    ([ resource $dir_handle\n  ] )","r":"Returns the entry name on success or FALSE on failure.","p":[{"t":"dir_handle","d":"The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed."}]},"readfile":{"s":"Outputs a file","y":"int readfile\n    ( string $filename\n   [, bool $use_include_path = false\n   [, resource $context\n  ]] )","r":"Returns the number of bytes read from the file. If an error\n   occurs, FALSE is returned and unless the function was called as\n   @readfile(), an error message is printed.","p":[{"t":"filename","d":"The filename being read."},{"t":"use_include_path","d":"You can use the optional second parameter and set it to TRUE, if\n       you want to search for the file in the include_path, too."},{"t":"context","d":"A context stream resource."}]},"readgzfile":{"s":"Output a gz-file","y":"int readgzfile\n    ( string $filename\n   [, int $use_include_path = 0\n  ] )","r":" \n   Returns the number of (uncompressed) bytes read from the file. If\n   an error occurs, FALSE is returned and unless the function was\n   called as @readgzfile, an error message is\n   printed.","p":[{"t":"filename","d":"The file name. This file will be opened from the filesystem and its\n       contents written to standard output."},{"t":"use_include_path","d":"You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too."}]},"readline":{"s":"Reads a line","y":"string readline\n    ([ string $prompt\n  ] )","r":"Returns a single string from the user. The line returned has the ending\n   newline removed.","p":[{"t":"prompt","d":"You may specify a string with which to prompt the user."}]},"readline_add_history":{"s":"Adds a line to the history","y":"bool readline_add_history\n    ( string $line\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"line","d":"The line to be added in the history."}]},"readline_callback_handler_install":{"s":"Initializes the readline callback interface and terminal, prints the prompt and returns immediately","y":"bool readline_callback_handler_install\n    ( string $prompt\n   , callable $callback\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"prompt","d":"The prompt message."},{"t":"callback","d":"The callback function takes one parameter; the\n       user input returned."}]},"readline_callback_handler_remove":{"s":"Removes a previously installed callback handler and restores terminal settings","y":"bool readline_callback_handler_remove\n    ( void\n   )","r":"Returns TRUE if a previously installed callback handler was removed, or\n   FALSE if one could not be found.","p":null},"readline_callback_read_char":{"s":"Reads a character and informs the readline callback interface when a line is received","y":"void readline_callback_read_char\n    ( void\n   )","r":"No value is returned.","p":null},"readline_clear_history":{"s":"Clears the history","y":"bool readline_clear_history\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"readline_completion_function":{"s":"Registers a completion function","y":"bool readline_completion_function\n    ( callable $function\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"function","d":"You must supply the name of an existing function which accepts a\n       partial command line and returns an array of possible matches."}]},"readline_info":{"s":"Gets\/sets various internal readline variables","y":"mixed readline_info\n    ([ string $varname\n   [, string $newvalue\n  ]] )","r":"If called with no parameters, this function returns an array of\n   values for all the setting readline uses.  The elements will\n   be indexed by the following values: done, end, erase_empty_line,\n   library_version, line_buffer, mark, pending_input, point, prompt,\n   readline_name, and terminal_name.","p":[{"t":"varname","d":"A variable name."},{"t":"newvalue","d":"If provided, this will be the new value of the setting."}]},"readline_list_history":{"s":"Lists the history","y":"array readline_list_history\n    ( void\n   )","r":"Returns an array of the entire command line history.  The elements are\n   indexed by integers starting at zero.","p":null},"readline_on_new_line":{"s":"Inform readline that the cursor has moved to a new line","y":"void readline_on_new_line\n    ( void\n   )","r":"No value is returned.","p":null},"readline_read_history":{"s":"Reads the history","y":"bool readline_read_history\n    ([ string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the filename containing the command history."}]},"readline_redisplay":{"s":"Redraws the display","y":"void readline_redisplay\n    ( void\n   )","r":"No value is returned.","p":null},"readline_write_history":{"s":"Writes the history","y":"bool readline_write_history\n    ([ string $filename\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the saved file."}]},"readlink":{"s":"Returns the target of a symbolic link","y":"string readlink\n    ( string $path\n   )","r":"Returns the contents of the symbolic link path or FALSE on error.","p":[{"t":"path","d":"The symbolic link path."}]},"read_exif_data":{"s":"Alias of exif_read_data()","y":"","r":"","p":null},"realpath":{"s":"Returns canonicalized absolute pathname","y":"string realpath\n    ( string $path\n   )","r":"Returns the canonicalized absolute pathname on success. The resulting path \n   will have no symbolic link, &#039;\/.\/&#039; or &#039;\/..\/&#039; components.","p":[{"t":"path","d":"The path being checked.\n       Note: \n        \n         Whilst a path must be supplied, the value can be blank or NULL\n         In these cases, the value is interpreted as the current directory."}]},"realpath_cache_get":{"s":"Get realpath cache entries","y":"array realpath_cache_get\n    ( void\n   )","r":"Returns an array of realpath cache entries. The keys are original path\n   entries, and the values are arrays of data items, containing the resolved\n   path, expiration date, and other options kept in the cache.","p":null},"realpath_cache_size":{"s":"Get realpath cache size","y":"int realpath_cache_size\n    ( void\n   )","r":"Returns how much memory realpath cache is using.","p":null},"recode":{"s":"Alias of recode_string()","y":"","r":"","p":null},"recode_file":{"s":"Recode from file to file according to recode request","y":"bool recode_file\n    ( string $request\n   , resource $input\n   , resource $output\n   )","r":"Returns FALSE, if unable to comply, TRUE otherwise.","p":[{"t":"request","d":"The desired recode request type"},{"t":"input","d":"A local file handle resource for \n       the input"},{"t":"output","d":"A local file handle resource for \n       the output"}]},"recode_string":{"s":"Recode a string according to a recode request","y":"string recode_string\n    ( string $request\n   , string $string\n   )","r":"Returns the recoded string or FALSE, if unable to \n   perform the recode request.","p":[{"t":"request","d":"The desired recode request type"},{"t":"string","d":"The string to be recoded"}]},"register_shutdown_function":{"s":"Register a function for execution on shutdown","y":"void register_shutdown_function\n    ( callable $callback\n   [, mixed $parameter\n   [, mixed $...\n  ]] )","r":"No value is returned.","p":[{"t":"callback","d":"The shutdown callback to register."},{"t":"parameter","d":"It is possible to pass parameters to the shutdown function by passing\n       additional parameters."},{"t":"...","d":""}]},"register_tick_function":{"s":"Register a function for execution on each tick","y":"bool register_tick_function\n    ( callable $function\n   [, mixed $arg\n   [, mixed $...\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"function","d":"The function name as a string, or an array consisting of an object and\n       a method."},{"t":"arg","d":""},{"t":"...","d":""}]},"rename":{"s":"Renames a file or directory","y":"bool rename\n    ( string $oldname\n   , string $newname\n   [, resource $context\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"oldname","d":""},{"t":"newname","d":"The new name."},{"t":"context","d":""}]},"rename_function":{"s":"Renames orig_name to new_name in the global function table","y":"bool rename_function\n    ( string $original_name\n   , string $new_name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"original_name","d":"The original function name."},{"t":"new_name","d":"The new name for the original_name function."}]},"reset":{"s":"Set the internal pointer of an array to its first element","y":"mixed reset\n    ( array &$array\n   )","r":"Returns the value of the first array element, or FALSE if the array is\n   empty.","p":[{"t":"array","d":"The input array."}]},"restore_error_handler":{"s":"Restores the previous error handler function","y":"bool restore_error_handler\n    ( void\n   )","r":"This function always returns TRUE.","p":null},"restore_include_path":{"s":"Restores the value of the include_path configuration option","y":"void restore_include_path\n    ( void\n   )","r":"No value is returned.","p":null},"rewind":{"s":"Rewind the position of a file pointer","y":"bool rewind\n    ( resource $handle\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to a file\n       successfully opened by fopen()."}]},"rewinddir":{"s":"Rewind directory handle","y":"void rewinddir\n    ([ resource $dir_handle\n  ] )","r":"","p":[{"t":"dir_handle","d":"The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed."}]},"rmdir":{"s":"Removes directory","y":"bool rmdir\n    ( string $dirname\n   [, resource $context\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dirname","d":"Path to the directory."},{"t":"context","d":""}]},"round":{"s":"Rounds a float","y":"float round\n     ( float $val\n    [, int $precision = 0\n    [, int $mode = PHP_ROUND_HALF_UP\n   ]] )","r":"The rounded value","p":[{"t":"val","d":"The value to round"},{"t":"precision","d":"The optional number of decimal digits to round to."},{"t":"mode","d":"Use one of the following constants to specify the mode in which rounding occurs.\n       \n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           PHP_ROUND_HALF_UP\n           \n            Round val up to precision decimal places\n            away from zero, when it is half way there. Making 1.5 into 2 and -1.5 into -2.\n           \n          \n\n          \n           PHP_ROUND_HALF_DOWN\n           \n            Round val down to precision decimal places\n            towards zero, when it is half way there. Making 1.5 into 1 and -1.5 into -1.\n           \n          \n\n          \n           PHP_ROUND_HALF_EVEN\n           \n            Round val to precision decimal places\n            towards the next even value.\n           \n          \n\n          \n           PHP_ROUND_HALF_ODD\n           \n            Round val to precision decimal places\n            towards the next odd value."}]},"rpm_get_tag":{"s":"Retrieves a header tag from an RPM file","y":"mixed rpm_get_tag\n    ( resource $rpmr\n   , int $tagnum\n   )","r":"The return value can be of various types depending on the\n    tagnum supplied to the function.","p":[{"t":"rpmr","d":"A file pointer resource successfully opened by\n        rpm_open()."},{"t":"tagnum","d":"The tag number to retrieve from the RPM header.  This value\n        can be specified using the list of constants defined by this\n        module."}]},"rpm_is_valid":{"s":"Tests a filename for validity as an RPM file","y":"bool rpm_is_valid\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The filename of the RPM file you wish to check for validity."}]},"rpm_open":{"s":"Opens an RPM file","y":"resource rpm_open\n    ( string $filename\n   )","r":"If the open succeeds, then rpm_open() will\n    return a file pointer resource to the newly opened file.  On\n    error, the function will return FALSE.","p":[{"t":"filename","d":"The filename of the RPM file you wish to open."}]},"rrdc_disconnect":{"s":"Close any outstanding connection to rrd caching daemon","y":"void rrdc_disconnect\n    ( void\n   )","r":"No value is returned.","p":null},"rrd_create":{"s":"Creates rrd database file","y":"bool rrd_create\n    ( string $filename\n   , array $options\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Filename for newly created rrd file."},{"t":"options","d":"Options for rrd create - list of strings. See man page of rrd create\n      for whole list of options."}]},"rrd_error":{"s":"Gets latest error message.","y":"string rrd_error\n    ( void\n   )","r":"Latest error message.","p":null},"rrd_fetch":{"s":"Fetch the data for graph as array.","y":"array rrd_fetch\n    ( string $filename\n   , array $options\n   )","r":"Returns information about retrieved graph data.","p":[{"t":"filename","d":"RRD database file name."},{"t":"options","d":"Array of options for resolution specification."}]},"rrd_first":{"s":"Gets the timestamp of the first sample from rrd file.","y":"int rrd_first\n    ( string $file\n   [, int $raaindex = 0\n  ] )","r":"Integer number of unix timestamp, FALSE if some error occurs.","p":[{"t":"file","d":"RRD database file name."},{"t":"raaindex","d":"The index number of the RRA that is to be examined. Default value is 0."}]},"rrd_graph":{"s":"Creates image from a data.","y":"array rrd_graph\n    ( string $filename\n   , array $options\n   )","r":"Array with information about generated image is returned, FALSE when error\n   occurs.","p":[{"t":"filename","d":"The filename to output the graph to. This will generally end in either\n      .png, .svg or\n      .eps, depending on the format you want to output."},{"t":"options","d":"Options for generating image. See man page of rrd graph for all\n      possible options. All options (data definitions, variable defintions, etc.)\n      are allowed."}]},"rrd_info":{"s":"Gets information about rrd file","y":"array rrd_info\n    ( string $filename\n   )","r":"Array with information about requsted RRD file, FALSE when error occurs.","p":[{"t":"file","d":"RRD database file name."}]},"rrd_last":{"s":"Gets unix timestamp of the last sample.","y":"int rrd_last\n    ( string $filename\n   )","r":"Integer as unix timestamp of the most recent data from the RRD database.","p":[{"t":"filename","d":"RRD database file name."}]},"rrd_lastupdate":{"s":"Gets information about last updated data.","y":"array rrd_lastupdate\n    ( string $filename\n   )","r":"Array of information about last update, FALSE when error occurs.","p":[{"t":"file","d":"RRD database file name."}]},"rrd_restore":{"s":"Restores the RRD file from XML dump.","y":"bool rrd_restore\n    ( string $xml_file\n   , string $rrd_file\n   [, array $options\n  ] )","r":"Returns TRUE on success, FALSE otherwise.","p":[{"t":"xml_file","d":"XML filename with the dump of the original RRD database file."},{"t":"rrd_file","d":"Restored RRD database file name."},{"t":"options","d":"Array of options for restoring. See man page for rrd restore."}]},"rrd_tune":{"s":"Tunes some RRD database file header options.","y":"bool rrd_tune\n    ( string $filename\n   , array $options\n   )","r":"Returns TRUE on success, FALSE otherwise.","p":[{"t":"filename","d":"RRD database file name."},{"t":"options","d":"Options with RRD database file properties which will be changed. See\n      rrd tune man page for details."}]},"rrd_update":{"s":"Updates the RRD database.","y":"bool rrd_update\n    ( string $filename\n   , array $options\n   )","r":"Returns TRUE on success, FALSE when error occurs.","p":[{"t":"filename","d":"RRD database file name. This database will be updated."},{"t":"options","d":"Options for updating the RRD database. This is list of strings. See man page of rrd update\n      for whole list of options."}]},"rrd_version":{"s":"Gets information about underlying rrdtool library","y":"string rrd_version\n    ( void\n   )","r":"String with rrdtool version number e.g. &quot;1.4.3&quot;.","p":null},"rrd_xport":{"s":"Exports the information about RRD database.","y":"array rrd_xport\n    ( array $options\n   )","r":"Array with information about RRD database file, FALSE when error occurs.","p":[{"t":"options","d":"Array of options for the export, see rrd xport man page."}]},"rsort":{"s":"Sort an array in reverse order","y":"bool rsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details see\n       sort()."}]},"rtrim":{"s":"Strip whitespace (or other characters) from the end of a string","y":"string rtrim\n    ( string $str\n   [, string $character_mask\n  ] )","r":"Returns the modified string.","p":[{"t":"str","d":"The input string."},{"t":"character_mask","d":"You can also specify the characters you want to strip, by means\n       of the character_mask parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters."}]},"runkit_class_adopt":{"s":"Convert a base class to an inherited class, add ancestral methods when appropriate","y":"bool runkit_class_adopt\n    ( string $classname\n   , string $parentname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"Name of class to be adopted"},{"t":"parentname","d":"Parent class which child class is extending"}]},"runkit_class_emancipate":{"s":"Convert an inherited class to a base class, removes any method whose scope is ancestral","y":"bool runkit_class_emancipate\n    ( string $classname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"Name of class to emancipate"}]},"runkit_constant_add":{"s":"Similar to define(), but allows defining in class definitions as well","y":"bool runkit_constant_add\n    ( string $constname\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"constname","d":"Name of constant to declare.  Either a string to indicate a global constant,\n       or classname::constname to indicate a class constant."},{"t":"value","d":"NULL, Bool, Long, Double, String, or Resource value to store in the new constant."}]},"runkit_constant_redefine":{"s":"Redefine an already defined constant","y":"bool runkit_constant_redefine\n    ( string $constname\n   , mixed $newvalue\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"constname","d":"Constant to redefine.  Either string indicating global constant,\n       or classname::constname indicating class constant."},{"t":"newvalue","d":"New value to assign to constant."}]},"runkit_constant_remove":{"s":"Remove\/Delete an already defined constant","y":"bool runkit_constant_remove\n    ( string $constname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"constname","d":"Name of constant to remove.  Either a string indicating a global constant,\n       or classname::constname indicating a class constant."}]},"runkit_function_add":{"s":"Add a new function, similar to create_function()","y":"bool runkit_function_add\n    ( string $funcname\n   , string $arglist\n   , string $code\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"funcname","d":"Name of function to be created"},{"t":"arglist","d":"Comma separated argument list"},{"t":"code","d":"Code making up the function"}]},"runkit_function_copy":{"s":"Copy a function to a new function name","y":"bool runkit_function_copy\n    ( string $funcname\n   , string $targetname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"funcname","d":"Name of existing function"},{"t":"targetname","d":"Name of new function to copy definition to"}]},"runkit_function_redefine":{"s":"Replace a function definition with a new implementation","y":"bool runkit_function_redefine\n    ( string $funcname\n   , string $arglist\n   , string $code\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"funcname","d":"Name of function to redefine"},{"t":"arglist","d":"New list of arguments to be accepted by function"},{"t":"code","d":"New code implementation"}]},"runkit_function_remove":{"s":"Remove a function definition","y":"bool runkit_function_remove\n    ( string $funcname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"funcname","d":"Name of function to be deleted"}]},"runkit_function_rename":{"s":"Change a function&#039;s name","y":"bool runkit_function_rename\n    ( string $funcname\n   , string $newname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"funcname","d":"Current function name"},{"t":"newname","d":"New function name"}]},"runkit_import":{"s":"Process a PHP file importing function and class definitions, overwriting where appropriate","y":"bool runkit_import\n    ( string $filename\n   [, int $flags = RUNKIT_IMPORT_CLASS_METHODS\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Filename to import function and class definitions from"},{"t":"flags","d":"Bitwise OR of the RUNKIT_IMPORT_* family of constants."}]},"runkit_lint":{"s":"Check the PHP syntax of the specified php code","y":"bool runkit_lint\n    ( string $code\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"code","d":"PHP Code to be lint checked"}]},"runkit_lint_file":{"s":"Check the PHP syntax of the specified file","y":"bool runkit_lint_file\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"File containing PHP Code to be lint checked"}]},"runkit_method_add":{"s":"Dynamically adds a new method to a given class","y":"bool runkit_method_add\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = RUNKIT_ACC_PUBLIC\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class to which this method will be added"},{"t":"methodname","d":"The name of the method to add"},{"t":"args","d":"Comma-delimited list of arguments for the newly-created method"},{"t":"code","d":"The code to be evaluated when methodname\n       is called"},{"t":"flags","d":"The type of method to create, can be\n       RUNKIT_ACC_PUBLIC,\n       RUNKIT_ACC_PROTECTED or\n       RUNKIT_ACC_PRIVATE"}]},"runkit_method_copy":{"s":"Copies a method from class to another","y":"bool runkit_method_copy\n    ( string $dClass\n   , string $dMethod\n   , string $sClass\n   [, string $sMethod\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"dClass","d":"Destination class for copied method"},{"t":"dMethod","d":"Destination method name"},{"t":"sClass","d":"Source class of the method to copy"},{"t":"sMethod","d":"Name of the method to copy from the source class. If this parameter is\n       omitted, the value of dMethod is assumed."}]},"runkit_method_redefine":{"s":"Dynamically changes the code of the given method","y":"bool runkit_method_redefine\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = RUNKIT_ACC_PUBLIC\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to redefine the method"},{"t":"methodname","d":"The name of the method to redefine"},{"t":"args","d":"Comma-delimited list of arguments for the redefined method"},{"t":"code","d":"The new code to be evaluated when methodname\n       is called"},{"t":"flags","d":"The redefined method can be\n       RUNKIT_ACC_PUBLIC,\n       RUNKIT_ACC_PROTECTED or\n       RUNKIT_ACC_PRIVATE"}]},"runkit_method_remove":{"s":"Dynamically removes the given method","y":"bool runkit_method_remove\n    ( string $classname\n   , string $methodname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to remove the method"},{"t":"methodname","d":"The name of the method to remove"}]},"runkit_method_rename":{"s":"Dynamically changes the name of the given method","y":"bool runkit_method_rename\n    ( string $classname\n   , string $methodname\n   , string $newname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"classname","d":"The class in which to rename the method"},{"t":"methodname","d":"The name of the method to rename"},{"t":"newname","d":"The new name to give to the renamed method"}]},"runkit_return_value_used":{"s":"Determines if the current functions return value will be used","y":"bool runkit_return_value_used\n    ( void\n   )","r":"Returns TRUE if the function&#039;s return value is used by the calling scope,\n   otherwise FALSE","p":null},"runkit_sandbox_output_handler":{"s":"Specify a function to capture and\/or process output from a runkit sandbox","y":"mixed runkit_sandbox_output_handler\n    ( object $sandbox\n   [, mixed $callback\n  ] )","r":"Returns the name of the previously defined output handler callback, or\n   FALSE if no handler was previously defined.","p":[{"t":"sandbox","d":"Object instance of Runkit_Sandbox class on which to set output handling."},{"t":"callback","d":"Name of a function which expects one parameter.\n       Output generated by sandbox will be passed\n       to this callback.  Anything returned by the callback will be displayed\n       normally.  If this parameter is not passed then output handling will not be changed.\n       If a non-truth value is passed, output handling will be disabled and will revert to\n       direct display."}]},"scandir":{"s":"List files and directories inside the specified path","y":"array scandir\n    ( string $directory\n   [, int $sorting_order = SCANDIR_SORT_ASCENDING\n   [, resource $context\n  ]] )","r":"Returns an array of filenames on success, or FALSE on \n   failure. If directory is not a directory, then \n   boolean FALSE is returned, and an error of level \n   E_WARNING is generated.","p":[{"t":"directory","d":"The directory that will be scanned."},{"t":"sorting_order","d":"By default, the sorted order is alphabetical in ascending order.  If\n       the optional sorting_order is set to\n       SCANDIR_SORT_DESCENDING, then the sort order is\n       alphabetical in descending order. If it is set to\n       SCANDIR_SORT_NONE then the result is unsorted."},{"t":"context","d":"For a description of the context parameter, \n       refer to the streams section of\n       the manual."}]},"sem_acquire":{"s":"Acquire a semaphore","y":"bool sem_acquire\n    ( resource $sem_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sem_identifier","d":"sem_identifier is a semaphore resource,\n       obtained from sem_get()."}]},"sem_get":{"s":"Get a semaphore id","y":"resource sem_get\n    ( int $key\n   [, int $max_acquire = 1\n   [, int $perm = 0666\n   [, int $auto_release = 1\n  ]]] )","r":"Returns a positive semaphore identifier on success, or FALSE on\n   error.","p":[{"t":"key","d":""},{"t":"max_acquire","d":"The number of processes that can acquire the semaphore simultaneously\n       is set to max_acquire."},{"t":"perm","d":"The semaphore permissions. Actually this value is\n       set only if the process finds it is the only process currently\n       attached to the semaphore."},{"t":"auto_release","d":"Specifies if the semaphore should be automatically released on request\n       shutdown."}]},"sem_release":{"s":"Release a semaphore","y":"bool sem_release\n    ( resource $sem_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sem_identifier","d":"A Semaphore resource handle as returned by\n       sem_get()."}]},"sem_remove":{"s":"Remove a semaphore","y":"bool sem_remove\n    ( resource $sem_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sem_identifier","d":"A semaphore resource identifier as returned\n       by sem_get()."}]},"serialize":{"s":"Generates a storable representation of a value","y":"string serialize\n     ( mixed $value\n    )","r":"Returns a string containing a byte-stream representation of \n   value that can be stored anywhere.","p":[{"t":"value","d":"The value to be serialized. serialize()\n       handles all types, except the resource-type.\n       You can even serialize() arrays that contain\n       references to itself. Circular references inside the array\/object you \n       are serializing will also be stored. Any other \n       reference will be lost."}]},"session_cache_expire":{"s":"Return current cache expire","y":"int session_cache_expire\n    ([ string $new_cache_expire\n  ] )","r":"Returns the current setting of session.cache_expire.\n   The value returned should be read in minutes, defaults to 180. ","p":[{"t":"new_cache_expire","d":"If new_cache_expire is given, the current cache\n       expire is replaced with new_cache_expire."}]},"session_cache_limiter":{"s":"Get and\/or set the current cache limiter","y":"string session_cache_limiter\n    ([ string $cache_limiter\n  ] )","r":"Returns the name of the current cache limiter.","p":[{"t":"cache_limiter","d":"If cache_limiter is specified, the name of the\n       current cache limiter is changed to the new value."}]},"session_commit":{"s":"Alias of session_write_close()","y":"","r":"","p":null},"session_decode":{"s":"Decodes session data from a session encoded string","y":"bool session_decode\n    ( string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"data","d":"The encoded data to be stored."}]},"session_destroy":{"s":"Destroys all data registered to a session","y":"bool session_destroy\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"session_encode":{"s":"Encodes the current session data as a session encoded string","y":"string session_encode\n    ( void\n   )","r":"Returns the contents of the current session encoded.","p":null},"session_get_cookie_params":{"s":"Get the session cookie parameters","y":"array session_get_cookie_params\n    ( void\n   )","r":"Returns an array with the current session cookie information, the array\n   contains the following items:\n   \n    \n     \n      &quot;lifetime&quot; -  The\n      lifetime of the cookie in seconds.\n     \n    \n    \n     \n      &quot;path&quot; -  The path where\n      information is stored.\n     \n    \n    \n     \n      &quot;domain&quot; -  The domain\n      of the cookie.\n     \n    \n    \n     \n      &quot;secure&quot; -  The cookie\n      should only be sent over secure connections.\n     \n    \n    \n     \n      &quot;httponly&quot; - The\n      cookie can only be accessed through the HTTP protocol.","p":null},"session_id":{"s":"Get and\/or set the current session id","y":"string session_id\n    ([ string $id\n  ] )","r":"session_id() returns the session id for the current\n   session or the empty string (&quot;&quot;) if there is no current\n   session (no current session id exists).","p":[{"t":"id","d":"If id is specified, it will replace the current\n        session id. session_id() needs to be called before\n        session_start() for that purpose. Depending on the\n        session handler, not all characters are allowed within the session id.\n        For example, the file session handler only allows characters in the\n        range a-z A-Z 0-9 , (comma) and - (minus)!"}]},"session_is_registered":{"s":"Find out whether a global variable is registered in a session","y":"bool session_is_registered\n    ( string $name\n   )","r":"session_is_registered() returns TRUE if there is a\n   global variable with the name name registered in\n   the current session, FALSE otherwise.","p":[{"t":"name","d":"The variable name."}]},"session_module_name":{"s":"Get and\/or set the current session module","y":"string session_module_name\n    ([ string $module\n  ] )","r":"Returns the name of the current session module.","p":[{"t":"module","d":"If module is specified, that module will be\n       used instead."}]},"session_name":{"s":"Get and\/or set the current session name","y":"string session_name\n    ([ string $name\n  ] )","r":"Returns the name of the current session.","p":[{"t":"name","d":"The session name references the name of the session, which is \n       used in cookies and URLs (e.g. PHPSESSID). It\n       should contain only alphanumeric characters; it should be short and\n       descriptive (i.e. for users with enabled cookie warnings).\n       If name is specified, the name of the current\n       session is changed to its value."}]},"session_pgsql_add_error":{"s":"Increments error counts and sets last error message","y":"bool session_pgsql_add_error\n    ( int $error_level\n   [, string $error_message\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"error_level","d":""},{"t":"error_message","d":""}]},"session_pgsql_get_error":{"s":"Returns number of errors and last error message","y":"array session_pgsql_get_error\n    ([ bool $with_error_message = false\n  ] )","r":"The number of errors are returned as array.","p":[{"t":"with_error_message","d":"Set to TRUE the literal error message for each error is also returned."}]},"session_pgsql_get_field":{"s":"Get custom field value","y":"string session_pgsql_get_field\n    ( void\n   )","r":"","p":null},"session_pgsql_reset":{"s":"Reset connection to session database servers","y":"bool session_pgsql_reset\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"session_pgsql_set_field":{"s":"Set custom field value","y":"bool session_pgsql_set_field\n    ( string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"value","d":""}]},"session_pgsql_status":{"s":"Get current save handler status","y":"array session_pgsql_status\n    ( void\n   )","r":"","p":null},"session_regenerate_id":{"s":"Update the current session id with a newly generated one","y":"bool session_regenerate_id\n    ([ bool $delete_old_session = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"delete_old_session","d":"Whether to delete the old associated session file or not."}]},"session_register":{"s":"Register one or more global variables with the current session","y":"bool session_register\n    ( mixed $name\n   [, mixed $...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"name","d":"A string holding the name of a variable or an array consisting of\n       variable names or other arrays."},{"t":"...","d":""}]},"session_register_shutdown":{"s":"Session shutdown function","y":"void session_register_shutdown\n    ( void\n   )","r":"No value is returned.","p":null},"session_save_path":{"s":"Get and\/or set the current session save path","y":"string session_save_path\n    ([ string $path\n  ] )","r":"Returns the path of the current directory used for data storage.","p":[{"t":"path","d":"Session data path. If specified, the path to which data is saved will\n       be changed. session_save_path() needs to be called\n       before session_start() for that purpose."}]},"session_set_cookie_params":{"s":"Set the session cookie parameters","y":"void session_set_cookie_params\n    ( int $lifetime\n   [, string $path\n   [, string $domain\n   [, bool $secure = false\n   [, bool $httponly = false\n  ]]]] )","r":"No value is returned.","p":[{"t":"lifetime","d":"Lifetime of the\n       session cookie, defined in seconds."},{"t":"path","d":"Path on the domain where\n       the cookie will work. Use a single slash (&#039;\/&#039;) for all paths on the\n       domain."},{"t":"domain","d":"Cookie domain, for\n       example &#039;www.php.net&#039;. To make cookies visible on all subdomains then\n       the domain must be prefixed with a dot like &#039;.php.net&#039;."},{"t":"secure","d":"If TRUE cookie will only be sent over\n       secure connections."},{"t":"httponly","d":"If set to TRUE then PHP will attempt to send the\n       httponly\n       flag when setting the session cookie."}]},"session_set_save_handler":{"s":"Sets user-level session storage functions","y":"bool session_set_save_handler\n    ( callable $open\n   , callable $close\n   , callable $read\n   , callable $write\n   , callable $destroy\n   , callable $gc\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sessionhandler","d":"An instance of a class implementing\n       SessionHandlerInterface, such as\n       SessionHandler, to register as the session\n       handler. Since PHP 5.4 only."},{"t":"register_shutdown","d":"Register session_write_close() as a\n       register_shutdown_function() function."},{"t":"open(string $savePath, string $sessionName)","d":"The open callback works like a constructor in classes and is\n       executed when the session is being opened.  It is the first callback\n       function executed when the session is started automatically or\n       manually with session_start().\n       Return value is TRUE for success, FALSE for failure."},{"t":"close()","d":"The close callback works like a destructor in classes and is\n       executed after the session write callback has been called. It is also invoked when\n       session_write_close() is called.\n       Return value should be TRUE for success, FALSE for failure."},{"t":"read(string $sessionId)","d":"The read callback must always return a session encoded (serialized)\n       string, or an empty string if there is no data to read."},{"t":"write(string $sessionId, string $data)","d":"The write callback is called when the session needs to be saved and closed. This\n       callback receives the current session ID a serialized version the $_SESSION superglobal.  The serialization\n       method used internally by PHP is specified in the session.serialize_handler ini setting."},{"t":"destroy($sessionId)","d":"This callback is executed when a session is destroyed with session_destroy() or with\n       session_regenerate_id() with the destroy parameter set to TRUE.\n       Return value should be TRUE for success, FALSE for failure."},{"t":"gc($lifetime)","d":"The garbage collector callback is invoked internally by PHP periodically in order to\n       purge old session data.  The frequency is controlled by\n       session.gc_probability and session.gc_divisor.\n       The value of lifetime which is passed to this callback can be set in session.gc_maxlifetime.\n       Return value should be TRUE for success, FALSE for failure."}]},"session_start":{"s":"Start new or resume existing session","y":"bool session_start\n    ( void\n   )","r":"This function returns TRUE if a session was successfully started,\n   otherwise FALSE.","p":null},"session_status":{"s":"Returns the current session status","y":"int session_status\n    ( void\n   )","r":"PHP_SESSION_DISABLED if sessions are disabled.\n    \n    \n     PHP_SESSION_NONE if sessions are enabled, but none exists.\n    \n    \n     PHP_SESSION_ACTIVE if sessions are enabled, and one exists.","p":null},"session_unregister":{"s":"Unregister a global variable from the current session","y":"bool session_unregister\n    ( string $name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"name","d":"The variable name."}]},"session_unset":{"s":"Free all session variables","y":"void session_unset\n    ( void\n   )","r":"No value is returned.","p":null},"session_write_close":{"s":"Write session data and end session","y":"void session_write_close\n    ( void\n   )","r":"No value is returned.","p":null},"setcookie":{"s":"Send a cookie","y":"bool setcookie\n    ( string $name\n   [, string $value\n   [, int $expire = 0\n   [, string $path\n   [, string $domain\n   [, bool $secure = false\n   [, bool $httponly = false\n  ]]]]]] )","r":"If output exists prior to calling this function,\n   setcookie() will fail and return FALSE. If\n   setcookie() successfully runs, it will return TRUE.\n   This does not indicate whether the user accepted the cookie.","p":[{"t":"name","d":"The name of the cookie."},{"t":"value","d":"The value of the cookie.  This value is stored on the clients computer;\n       do not store sensitive information.  Assuming the\n       name is &#039;cookiename&#039;, this\n       value is retrieved through $_COOKIE['cookiename']"},{"t":"expire","d":"The time the cookie expires.  This is a Unix timestamp so is\n       in number of seconds since the epoch.  In other words, you&#039;ll\n       most likely set this with the time() function\n       plus the number of seconds before you want it to expire.  Or\n       you might use mktime().\n       time()+60*60*24*30 will set the cookie to\n       expire in 30 days. If set to 0, or omitted, the cookie will expire at\n       the end of the session (when the browser closes)."},{"t":"path","d":"The path on the server in which the cookie will be available on.\n       If set to &#039;\/&#039;, the cookie will be available\n       within the entire domain.  If set to\n       &#039;\/foo\/&#039;, the cookie will only be available\n       within the \/foo\/ directory and all\n       sub-directories such as \/foo\/bar\/ of\n       domain.  The default value is the\n       current directory that the cookie is being set in."},{"t":"domain","d":"The domain that the cookie is available to. Setting the domain to\n       &#039;www.example.com&#039; will make the cookie\n       available in the www subdomain and higher subdomains.\n       Cookies available to a lower domain, such as\n       &#039;example.com&#039; will be available to higher subdomains,\n       such as &#039;www.example.com&#039;.\n       \n       Older browsers still implementing the deprecated\n       &raquo;&nbsp;RFC 2109 may require a leading\n       . to match all subdomains."},{"t":"secure","d":"Indicates that the cookie should only be transmitted over a\n       secure HTTPS connection from the client. When set to TRUE, the\n       cookie will only be set if a secure connection exists.\n       On the server-side, it&#039;s on the programmer to send this\n       kind of cookie only on secure connection (e.g. with respect to\n       $_SERVER[\"HTTPS\"])."},{"t":"httponly","d":"When TRUE the cookie will be made accessible only through the HTTP\n       protocol. This means that the cookie won&#039;t be accessible by\n       scripting languages, such as JavaScript. It has been suggested that\n       this setting can effectively help to reduce identity theft through\n       XSS attacks (although it is not supported by all browsers), but that\n       claim is often disputed. Added in PHP 5.2.0.\n       TRUE or FALSE"}]},"setlocale":{"s":"Set locale information","y":"string setlocale\n    ( int $category\n   , string $locale\n   [, string $...\n  ] )","r":"Returns the new current locale, or FALSE if the locale functionality is\n   not implemented on your platform, the specified locale does not exist or\n   the category name is invalid.","p":[{"t":"category","d":"category is a named constant specifying the\n       category of the functions affected by the locale setting:\n       \n        \n         \n          LC_ALL for all of the below\n         \n        \n        \n         \n          LC_COLLATE for string comparison, see\n          strcoll()\n         \n        \n        \n         \n          LC_CTYPE for character classification and conversion, for\n          example strtoupper()\n         \n        \n        \n         \n          LC_MONETARY for localeconv()\n         \n        \n        \n         \n          LC_NUMERIC for decimal separator (See also\n          localeconv())\n         \n        \n        \n         \n          LC_TIME for date and time formatting with\n          strftime()\n         \n        \n        \n         \n          LC_MESSAGES for system responses (available if PHP was compiled with\n          libintl)"},{"t":"locale","d":"If locale is NULL or the empty string\n       &quot;&quot;, the locale names will be set from the\n       values of environment variables with the same names as the above\n       categories, or from &quot;LANG&quot;."},{"t":"...","d":"(Optional string or array parameters to try as locale settings until\n       success.)"}]},"setproctitle":{"s":"Set the process title","y":"void setproctitle\n    ( string $title\n   )","r":"No value is returned.","p":[{"t":"title","d":"The title to use as the process title."}]},"setrawcookie":{"s":"Send a cookie without urlencoding the cookie value","y":"bool setrawcookie\n    ( string $name\n   [, string $value\n   [, int $expire = 0\n   [, string $path\n   [, string $domain\n   [, bool $secure = false\n   [, bool $httponly = false\n  ]]]]]] )","r":"Returns TRUE on success or FALSE on failure.","p":null},"setthreadtitle":{"s":"Set the thread title","y":"bool setthreadtitle\n    ( string $title\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"title","d":"The title to use as the thread title."}]},"settype":{"s":"Set the type of a variable","y":"bool settype\n    ( mixed &$var\n   , string $type\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"var","d":"The variable being converted."},{"t":"type","d":"Possibles values of type are:\n       \n        \n         \n          &quot;boolean&quot; (or, since PHP 4.2.0, &quot;bool&quot;)\n         \n        \n        \n         \n          &quot;integer&quot; (or, since PHP 4.2.0, &quot;int&quot;)\n         \n        \n        \n         \n          &quot;float&quot; (only possible since PHP 4.2.0, for older versions use the\n          deprecated variant &quot;double&quot;)\n         \n        \n        \n         \n          &quot;string&quot;\n         \n        \n        \n         \n          &quot;array&quot;\n         \n        \n        \n         \n          &quot;object&quot;\n         \n        \n        \n         \n          &quot;null&quot; (since PHP 4.2.0)"}]},"set_error_handler":{"s":"Sets a user-defined error handler function","y":"mixed set_error_handler\n    ( callable $error_handler\n   [, int $error_types = E_ALL | E_STRICT\n  ] )","r":"Returns a string containing the previously defined error handler (if any). If\n   the built-in error handler is used NULL is returned. NULL is also returned\n   in case of an error such as an invalid callback. If the previous error handler\n   was a class method, this function will return an indexed array with the class\n   and the method name.","p":[{"t":"error_handler","d":"A callback with the following signature.\n       NULL may be passed instead, to reset this handler to its default state."}]},"set_exception_handler":{"s":"Sets a user-defined exception handler function ","y":"callable set_exception_handler\n    ( callable $exception_handler\n   )","r":"Returns the name of the previously defined exception handler, or NULL on error. If\n   no previous handler was defined, NULL is also returned.","p":[{"t":"exception_handler","d":"Name of the function to be called when an uncaught exception occurs.\n       This handler function\n       needs to accept one parameter, which will be the exception object that\n       was thrown. This is the handler signature:"}]},"set_file_buffer":{"s":"Alias of stream_set_write_buffer()","y":"","r":"","p":null},"set_include_path":{"s":"Sets the include_path configuration option","y":"string set_include_path\n    ( string $new_include_path\n   )","r":"Returns the old include_path on\n   success or FALSE on failure.","p":[{"t":"new_include_path","d":"The new value for the include_path"}]},"set_magic_quotes_runtime":{"s":"Sets the current active configuration setting of magic_quotes_runtime","y":"bool set_magic_quotes_runtime\n    ( bool $new_setting\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"new_setting","d":"FALSE for off, TRUE for on."}]},"set_socket_blocking":{"s":"Alias of stream_set_blocking()","y":"","r":"","p":null},"set_time_limit":{"s":"Limits the maximum execution time","y":"void set_time_limit\n    ( int $seconds\n   )","r":"No value is returned.","p":[{"t":"seconds","d":"The maximum execution time, in seconds. If set to zero, no time limit\n       is imposed."}]},"sha1":{"s":"Calculate the sha1 hash of a string","y":"string sha1\n    ( string $str\n   [, bool $raw_output = false\n  ] )","r":"Returns the sha1 hash as a string.","p":[{"t":"str","d":"The input string."},{"t":"raw_output","d":"If the optional raw_output is set to TRUE,\n       then the sha1 digest is instead returned in raw binary format with a\n       length of 20, otherwise the returned value is a 40-character\n       hexadecimal number."}]},"sha1_file":{"s":"Calculate the sha1 hash of a file","y":"string sha1_file\n    ( string $filename\n   [, bool $raw_output = false\n  ] )","r":"Returns a string on success, FALSE otherwise.","p":[{"t":"filename","d":"The filename of the file to hash."},{"t":"raw_output","d":"When TRUE, returns the digest in raw binary format with a length of\n       20."}]},"shell_exec":{"s":"Execute command via shell and return the complete output as a string","y":"string shell_exec\n    ( string $cmd\n   )","r":"The output from the executed command or NULL if an error occurred or the\n   command produces no output.","p":[{"t":"cmd","d":"The command that will be executed."}]},"shmop_close":{"s":"Close shared memory block","y":"void shmop_close\n    ( int $shmid\n   )","r":"No value is returned.","p":[{"t":"shmid","d":"The shared memory block identifier created by \n       shmop_open()"}]},"shmop_delete":{"s":"Delete shared memory block","y":"bool shmop_delete\n    ( int $shmid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"shmid","d":"The shared memory block identifier created by \n       shmop_open()"}]},"shmop_open":{"s":"Create or open shared memory block","y":"int shmop_open\n    ( int $key\n   , string $flags\n   , int $mode\n   , int $size\n   )","r":"On success shmop_open() will return an id that you can\n   use to access the shared memory segment you&#039;ve created. FALSE is \n   returned on failure.","p":[{"t":"key","d":"System&#039;s id for the shared memory block.\n       Can be passed as a decimal or hex."},{"t":"flags","d":"The flags that you can use:\n       \n        \n         \n          &quot;a&quot; for access (sets SHM_RDONLY for shmat)\n          use this flag when you need to open an existing shared memory\n          segment for read only\n         \n        \n        \n         \n          &quot;c&quot; for create (sets IPC_CREATE)\n          use this flag when you need to create a new shared memory segment\n          or if a segment with the same key exists, try to open it for read\n          and write\n         \n        \n        \n         \n          &quot;w&quot; for read &amp; write access\n          use this flag when you need to read and write to a shared memory\n          segment, use this flag in most cases.\n         \n        \n        \n         \n          &quot;n&quot; create a new memory segment (sets IPC_CREATE|IPC_EXCL)\n          use this flag when you want to create a new shared memory segment\n          but if one already exists with the same flag, fail. This is useful\n          for security purposes, using this you can prevent race condition\n          exploits."},{"t":"mode","d":"The permissions that you wish to assign to your memory segment, those\n       are the same as permission for a file. Permissions need to be passed\n       in octal form, like for example 0644"},{"t":"size","d":"The size of the shared memory block you wish to create in bytes"}]},"shmop_read":{"s":"Read data from shared memory block","y":"string shmop_read\n    ( int $shmid\n   , int $start\n   , int $count\n   )","r":"Returns the data or FALSE on failure.","p":[{"t":"shmid","d":"The shared memory block identifier created by \n       shmop_open()"},{"t":"start","d":"Offset from which to start reading"},{"t":"count","d":"The number of bytes to read"}]},"shmop_size":{"s":"Get size of shared memory block","y":"int shmop_size\n   ( int $shmid\n  )","r":"Returns an int, which represents the number of bytes the shared memory\n   block occupies.","p":[{"t":"shmid","d":"The shared memory block identifier created by \n       shmop_open()"}]},"shmop_write":{"s":"Write data into shared memory block","y":"int shmop_write\n    ( int $shmid\n   , string $data\n   , int $offset\n   )","r":"The size of the written data, or FALSE on \n   failure.","p":[{"t":"shmid","d":"The shared memory block identifier created by \n       shmop_open()"},{"t":"data","d":"A string to write into shared memory block"},{"t":"offset","d":"Specifies where to start writing data inside the shared memory\n       segment."}]},"shm_attach":{"s":"Creates or open a shared memory segment","y":"resource shm_attach\n    ( int $key\n   [, int $memsize\n   [, int $perm = 0666\n  ]] )","r":"Returns a shared memory segment identifier.","p":[{"t":"key","d":"A numeric shared memory segment ID"},{"t":"memsize","d":"The memory size. If not provided, default to the\n       sysvshm.init_mem in the php.ini, otherwise 10000\n       bytes."},{"t":"perm","d":"The optional permission bits. Default to 0666."}]},"shm_detach":{"s":"Disconnects from shared memory segment","y":"bool shm_detach\n    ( resource $shm_identifier\n   )","r":"shm_detach() always returns TRUE.","p":[{"t":"shm_identifier","d":"A shared memory resource handle as returned by\n       shm_attach()"}]},"shm_has_var":{"s":"Check whether a specific entry exists","y":"bool shm_has_var\n    ( resource $shm_identifier\n   , int $variable_key\n   )","r":"Returns TRUE if the entry exists, otherwise FALSE","p":[{"t":"shm_identifier","d":"Shared memory segment, obtained from shm_attach()."},{"t":"variable_key","d":"The variable key."}]},"shm_put_var":{"s":"Inserts or updates a variable in shared memory","y":"bool shm_put_var\n    ( resource $shm_identifier\n   , int $variable_key\n   , mixed $variable\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"shm_identifier","d":"A shared memory resource handle as returned by\n       shm_attach()"},{"t":"variable_key","d":"The variable key."},{"t":"variable","d":"The variable. All variable types\n       that serialize() supports may be used: generally\n       this means all types except for resources and some internal objects\n       that cannot be serialized."}]},"shm_remove":{"s":"Removes shared memory from Unix systems","y":"bool shm_remove\n    ( resource $shm_identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"shm_identifier","d":"The shared memory identifier as returned by\n       shm_attach()"}]},"shm_remove_var":{"s":"Removes a variable from shared memory","y":"bool shm_remove_var\n    ( resource $shm_identifier\n   , int $variable_key\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"shm_identifier","d":"The shared memory identifier as returned by\n       shm_attach()"},{"t":"variable_key","d":"The variable key."}]},"show_source":{"s":"Alias of highlight_file()","y":"","r":"","p":null},"shuffle":{"s":"Shuffle an array","y":"bool shuffle\n    ( array &$array\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The array."}]},"signeurlpaiement":{"s":"Obtain the payment url (needs 2 arguments)","y":"string nthmac\n    ( string $clent\n   , string $data\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"similar_text":{"s":"Calculate the similarity between two strings","y":"int similar_text\n    ( string $first\n   , string $second\n   [, float &$percent\n  ] )","r":"Returns the number of matching chars in both strings.","p":[{"t":"first","d":"The first string."},{"t":"second","d":"The second string."},{"t":"percent","d":"By passing a reference as third argument,\n       similar_text() will calculate the similarity in\n       percent for you."}]},"simplexml_import_dom":{"s":"Get a SimpleXMLElement object from a DOM node.","y":"SimpleXMLElement simplexml_import_dom\n    ( DOMNode $node\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n  ] )","r":"Returns a SimpleXMLElement or FALSE on failure.","p":[{"t":"node","d":"A DOM Element node"},{"t":"class_name","d":"You may use this optional parameter so that\n       simplexml_import_dom() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class."}]},"simplexml_load_file":{"s":"Interprets an XML file into an object","y":"SimpleXMLElement simplexml_load_file\n    ( string $filename\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n   [, int $options = 0\n   [, string $ns = &quot;&quot;\n   [, bool $is_prefix = false\n  ]]]] )","r":"Returns an object of class SimpleXMLElement with\n   properties containing the data held within the XML document, or FALSE on failure.","p":[{"t":"filename","d":"Path to the XML file"},{"t":"class_name","d":"You may use this optional parameter so that\n       simplexml_load_file() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class."},{"t":"options","d":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n       options parameter to specify additional Libxml parameters."},{"t":"ns","d":"Namespace prefix or URI."},{"t":"is_prefix","d":"TRUE if ns is a prefix, FALSE if it&#039;s a URI;\n       defaults to FALSE."}]},"simplexml_load_string":{"s":"Interprets a string of XML into an object","y":"SimpleXMLElement simplexml_load_string\n    ( string $data\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n   [, int $options = 0\n   [, string $ns = &quot;&quot;\n   [, bool $is_prefix = false\n  ]]]] )","r":"Returns an object of class SimpleXMLElement with\n   properties containing the data held within the xml document, or FALSE on failure.","p":[{"t":"data","d":"A well-formed XML string"},{"t":"class_name","d":"You may use this optional parameter so that\n       simplexml_load_string() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class."},{"t":"options","d":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n       options parameter to specify additional Libxml parameters."},{"t":"ns","d":"Namespace prefix or URI."},{"t":"is_prefix","d":"TRUE if ns is a prefix, FALSE if it&#039;s a URI;\n       defaults to FALSE."}]},"sin":{"s":"Sine","y":"float sin\n     ( float $arg\n    )","r":"The sine of arg","p":[{"t":"arg","d":"A value in radians"}]},"sinh":{"s":"Hyperbolic sine","y":"float sinh\n     ( float $arg\n    )","r":"The hyperbolic sine of arg","p":[{"t":"arg","d":"The argument to process"}]},"sizeof":{"s":"Alias of count()","y":"","r":"","p":null},"sleep":{"s":"Delay execution","y":"int sleep\n    ( int $seconds\n   )","r":"Returns zero on success, or FALSE on error.","p":[{"t":"seconds","d":"Halt time in seconds."}]},"snmp2_get":{"s":"Fetch an SNMP object","y":"string snmp2_get\n    ( string $host\n   , string $community\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.","p":[{"t":"host","d":"The SNMP agent."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp2_getnext":{"s":"Fetch the SNMP object which follows the given object id","y":"string snmp2_getnext\n    ( string $host\n   , string $community\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object id which precedes the wanted one."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp2_real_walk":{"s":"Return all objects including their respective object ID within the specified one","y":"array snmp2_real_walk\n    ( string $host\n   , string $community\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns an associative array of the SNMP object ids and their values on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object id which precedes the wanted one."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp2_set":{"s":"Set the value of an SNMP object","y":"bool snmp2_set\n    ( string $host\n   , string $community\n   , string $object_id\n   , string $type\n   , string $value\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The write community."},{"t":"object_id","d":"The SNMP object id."},{"t":"type","d":"The MIB defines the type of each object id. It has to be specified as a single character from the below list."},{"t":"value","d":"The new value."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp2_walk":{"s":"Fetch all the SNMP objects from an agent","y":"array snmp2_walk\n    ( string $host\n   , string $community\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns an array of SNMP object values starting from the\n   object_id as root or FALSE on error.","p":[{"t":"host","d":"The SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"If NULL, object_id is taken as the root of\n      the SNMP objects tree and all objects under that tree are returned as\n      an array."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp3_get":{"s":"Fetch an SNMP object","y":"string snmp3_get\n    ( string $host\n   , string $sec_name\n   , string $sec_level\n   , string $auth_protocol\n   , string $auth_passphrase\n   , string $priv_protocol\n   , string $priv_passphrase\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"sec_name","d":"the security name, usually some kind of username"},{"t":"sec_level","d":"the security level (noAuthNoPriv|authNoPriv|authPriv)"},{"t":"auth_protocol","d":"the authentication protocol (MD5 or SHA)"},{"t":"auth_passphrase","d":"the authentication pass phrase"},{"t":"priv_protocol","d":"the privacy protocol (DES or AES)"},{"t":"priv_passphrase","d":"the privacy pass phrase"},{"t":"object_id","d":"The SNMP object id."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp3_getnext":{"s":"Fetch the SNMP object which follows the given object id","y":"string snmp3_getnext\n    ( string $host\n   , string $sec_name\n   , string $sec_level\n   , string $auth_protocol\n   , string $auth_passphrase\n   , string $priv_protocol\n   , string $priv_passphrase\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the\n      SNMP agent (server)."},{"t":"sec_name","d":"the security name, usually some kind of username"},{"t":"sec_level","d":"the security level (noAuthNoPriv|authNoPriv|authPriv)"},{"t":"auth_protocol","d":"the authentication protocol (MD5 or SHA)"},{"t":"auth_passphrase","d":"the authentication pass phrase"},{"t":"priv_protocol","d":"the privacy protocol (DES or AES)"},{"t":"priv_passphrase","d":"the privacy pass phrase"},{"t":"object_id","d":"The SNMP object id."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp3_real_walk":{"s":"Return all objects including their respective object ID within the specified one","y":"array \n   snmp3_real_walk\n    ( \n    string\n     $host\n   \n   , \n    string\n     $sec_name\n   \n   , \n    string\n     $sec_level\n   \n   , \n    string\n     $auth_protocol\n   \n   , \n    string\n     $auth_passphrase\n   \n   , \n    string\n     $priv_protocol\n   \n   , \n    string\n     $priv_passphrase\n   \n   , \n    string\n     $object_id\n   \n   [, \n    string\n     $timeout\n     = 1000000\n   \n   [, \n    string\n     $retries\n     = 5\n   \n  ]] )","r":"Returns an associative array of the\n   SNMP object ids and their values on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the\n      SNMP agent (server)."},{"t":"sec_name","d":"the security name, usually some kind of username"},{"t":"sec_level","d":"the security level (noAuthNoPriv|authNoPriv|authPriv)"},{"t":"auth_protocol","d":"the authentication protocol (MD5 or SHA)"},{"t":"auth_passphrase","d":"the authentication pass phrase"},{"t":"priv_protocol","d":"the privacy protocol (DES or AES)"},{"t":"priv_passphrase","d":"the privacy pass phrase"},{"t":"object_id","d":"The SNMP object id."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp3_set":{"s":"Set the value of an SNMP object","y":"bool snmp3_set\n    ( string $host\n   , string $sec_name\n   , string $sec_level\n   , string $auth_protocol\n   , string $auth_passphrase\n   , string $priv_protocol\n   , string $priv_passphrase\n   , string $object_id\n   , string $type\n   , string $value\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"sec_name","d":"the security name, usually some kind of username"},{"t":"sec_level","d":"the security level (noAuthNoPriv|authNoPriv|authPriv)"},{"t":"auth_protocol","d":"the authentication protocol (MD5 or SHA)"},{"t":"auth_passphrase","d":"the authentication pass phrase"},{"t":"priv_protocol","d":"the privacy protocol (DES or AES)"},{"t":"priv_passphrase","d":"the privacy pass phrase"},{"t":"object_id","d":"The SNMP object id."},{"t":"type","d":"The MIB defines the type of each object id. It has to be specified as a single character from the below list."},{"t":"value","d":"The new value"},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp3_walk":{"s":"Fetch all the SNMP objects from an agent","y":"array snmp3_walk\n    ( string $host\n   , string $sec_name\n   , string $sec_level\n   , string $auth_protocol\n   , string $auth_passphrase\n   , string $priv_protocol\n   , string $priv_passphrase\n   , string $object_id\n   [, string $timeout = 1000000\n   [, string $retries = 5\n  ]] )","r":"Returns an array of SNMP object values starting from the\n   object_id as root or FALSE on error.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"sec_name","d":"the security name, usually some kind of username"},{"t":"sec_level","d":"the security level (noAuthNoPriv|authNoPriv|authPriv)"},{"t":"auth_protocol","d":"the authentication protocol (MD5 or SHA)"},{"t":"auth_passphrase","d":"the authentication pass phrase"},{"t":"priv_protocol","d":"the privacy protocol (DES or AES)"},{"t":"priv_passphrase","d":"the privacy pass phrase"},{"t":"object_id","d":"If NULL, object_id is taken as the root of\n      the SNMP objects tree and all objects under that tree are returned as\n      an array."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmpgetnext":{"s":"Fetch the SNMP object which follows the given object id","y":"string snmpgetnext\n    ( string $host\n   , string $community\n   , string $object_id\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object id which precedes the wanted one."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmprealwalk":{"s":"Return all objects including their respective object ID within the specified one","y":"array snmprealwalk\n    ( string $host\n   , string $community\n   , string $object_id\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns an associative array of the SNMP object ids and their values on success or FALSE on error.\n   In case of an error, an E_WARNING message is shown.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object id which precedes the wanted one."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmpset":{"s":"Set the value of an SNMP object","y":"bool snmpset\n    ( string $host\n   , string $community\n   , string $object_id\n   , string $type\n   , mixed $value\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"host","d":"The hostname of the SNMP agent (server)."},{"t":"community","d":"The write community."},{"t":"object_id","d":"The SNMP object id."},{"t":"type","d":"The MIB defines the type of each object id. It has to be specified as a single character from the below list."},{"t":"value","d":"The new value."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmpwalk":{"s":"Fetch all the SNMP objects from an agent","y":"array snmpwalk\n    ( string $hostname\n   , string $community\n   , string $object_id\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns an array of SNMP object values starting from the\n   object_id as root or FALSE on error.","p":[{"t":"hostname","d":"The SNMP agent (server)."},{"t":"community","d":"The read community."},{"t":"object_id","d":"If NULL, object_id is taken as the root of\n       the SNMP objects tree and all objects under that tree are returned as\n       an array."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmpwalkoid":{"s":"Query for a tree of information about a network entity","y":"array snmpwalkoid\n    ( string $hostname\n   , string $community\n   , string $object_id\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns an associative array with object ids and their respective\n   object value starting from the object_id\n   as root or FALSE on error.","p":[{"t":"hostname","d":"The SNMP agent."},{"t":"community","d":"The read community."},{"t":"object_id","d":"If NULL, object_id is taken as the root of\n       the SNMP objects tree and all objects under that tree are returned as\n       an array."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"snmp_read_mib":{"s":"Reads and parses a MIB file into the active MIB tree","y":"bool snmp_read_mib\n    ( string $filename\n   )","r":"","p":[{"t":"filename","d":"The filename of the MIB."}]},"snmp_set_enum_print":{"s":"Return all values that are enums with their enum value instead of the raw integer","y":"bool snmp_set_enum_print\n    ( int $enum_print\n   )","r":"","p":[{"t":"enum_print","d":"As the value is interpreted as boolean by the Net-SNMP library, it can only be &quot;0&quot; or &quot;1&quot;."}]},"snmp_set_oid_output_format":{"s":"Set the OID output format","y":"bool snmp_set_oid_output_format\n    ( int $oid_format = SNMP_OID_OUTPUT_MODULE\n   )","r":"No value is returned.","p":[{"t":"oid_format","d":""}]},"snmp_set_quick_print":{"s":"Set the value of quick_print within the UCD SNMP library","y":"bool snmp_set_quick_print\n    ( bool $quick_print\n   )","r":"No value is returned.","p":[{"t":"quick_print","d":""}]},"snmp_set_valueretrieval":{"s":"Specify the method how the SNMP values will be returned","y":"bool \n   snmp_set_valueretrieval\n    ( \n    int\n     $method\n     = SNMP_VALUE_LIBRARY\n   \n   )","r":"","p":[{"t":"method","d":""}]},"socket_accept":{"s":"Accepts a connection on a socket","y":"resource socket_accept\n    ( resource $socket\n   )","r":"Returns a new socket resource on success, or FALSE on error. The actual\n   error code can be retrieved by calling\n   socket_last_error(). This error code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."}]},"socket_bind":{"s":"Binds a name to a socket","y":"bool socket_bind\n    ( resource $socket\n   , string $address\n   [, int $port = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."},{"t":"address","d":"If the socket is of the AF_INET family, the\n       address is an IP in dotted-quad notation\n       (e.g. 127.0.0.1)."},{"t":"port","d":"The port parameter is only used when\n       binding an AF_INET socket, and designates\n       the port on which to listen for connections."}]},"socket_clear_error":{"s":"Clears the error on the socket or the last error code","y":"void socket_clear_error\n    ([ resource $socket\n  ] )","r":"No value is returned.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."}]},"socket_close":{"s":"Closes a socket resource","y":"void socket_close\n    ( resource $socket\n   )","r":"No value is returned.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n        or socket_accept()."}]},"socket_cmsg_space":{"s":"Calculate message buffer size","y":"int socket_cmsg_space\n    ( int $level\n   , int $type\n   )","r":"","p":[{"t":"level","d":""},{"t":"type","d":""}]},"socket_connect":{"s":"Initiates a connection on a socket","y":"bool socket_connect\n    ( resource $socket\n   , string $address\n   [, int $port = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure. The error code can be retrieved with\n   socket_last_error(). This code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"socket","d":""},{"t":"address","d":"The address parameter is either an IPv4 address\n       in dotted-quad notation (e.g. 127.0.0.1) if \n       socket is AF_INET, a valid \n       IPv6 address (e.g. ::1) if IPv6 support is enabled and \n       socket is AF_INET6\n       or the pathname of a Unix domain socket, if the socket family is\n       AF_UNIX."},{"t":"port","d":"The port parameter is only used and is mandatory\n       when connecting to an AF_INET or an \n       AF_INET6 socket, and designates\n       the port on the remote host to which a connection should be made."}]},"socket_create":{"s":"Create a socket (endpoint for communication)","y":"resource socket_create\n    ( int $domain\n   , int $type\n   , int $protocol\n   )","r":"socket_create() returns a socket resource on success,\n   or FALSE on error. The actual error code can be retrieved by calling\n   socket_last_error(). This error code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"domain","d":"The domain parameter specifies the protocol\n       family to be used by the socket."},{"t":"type","d":"The type parameter selects the type of communication\n       to be used by the socket."},{"t":"protocol","d":"The protocol parameter sets the specific\n       protocol within the specified domain to be used\n       when communicating on the returned socket. The proper value can be\n       retrieved by name by using getprotobyname(). If\n       the desired protocol is TCP, or UDP the corresponding constants\n       SOL_TCP, and SOL_UDP\n       can also be used."}]},"socket_create_listen":{"s":"Opens a socket on port to accept connections ","y":"resource socket_create_listen\n    ( int $port\n   [, int $backlog = 128\n  ] )","r":"socket_create_listen() returns a new socket resource\n   on success or FALSE on error. The error code can be retrieved with\n   socket_last_error(). This code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"port","d":"The port on which to listen on all interfaces."},{"t":"backlog","d":"The backlog parameter defines the maximum length\n       the queue of pending connections may grow to.\n       SOMAXCONN may be passed as\n       backlog parameter, see\n       socket_listen() for more information."}]},"socket_create_pair":{"s":"Creates a pair of indistinguishable sockets and stores them in an array","y":"bool socket_create_pair\n    ( int $domain\n   , int $type\n   , int $protocol\n   , array &$fd\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"domain","d":"The domain parameter specifies the protocol\n       family to be used by the socket. See socket_create()\n       for the full list."},{"t":"type","d":"The type parameter selects the type of communication\n       to be used by the socket. See socket_create() for the \n       full list."},{"t":"protocol","d":"The protocol parameter sets the specific\n       protocol within the specified domain to be used\n       when communicating on the returned socket. The proper value can be retrieved by\n       name by using getprotobyname(). If\n       the desired protocol is TCP, or UDP the corresponding constants\n       SOL_TCP, and SOL_UDP\n       can also be used."},{"t":"fd","d":"Reference to an array in which the two socket resources will be inserted."}]},"socket_getpeername":{"s":"Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","y":"bool socket_getpeername\n    ( resource $socket\n   , string &$address\n   [, int &$port\n  ] )","r":"Returns TRUE on success or FALSE on failure. socket_getpeername() may also return\n   FALSE if the socket type is not any of AF_INET,\n   AF_INET6, or AF_UNIX, in which\n   case the last socket error code is not updated.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."},{"t":"address","d":"If the given socket is of type AF_INET or\n       AF_INET6, socket_getpeername()\n       will return the peers (remote) IP address in\n       appropriate notation (e.g. 127.0.0.1 or\n       fe80::1) in the address\n       parameter and, if the optional port parameter is\n       present, also the associated port."},{"t":"port","d":"If given, this will hold the port associated to\n       address."}]},"socket_getsockname":{"s":"Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","y":"bool socket_getsockname\n    ( resource $socket\n   , string &$addr\n   [, int &$port\n  ] )","r":"Returns TRUE on success or FALSE on failure. socket_getsockname() may also return\n   FALSE if the socket type is not any of AF_INET,\n   AF_INET6, or AF_UNIX, in which\n   case the last socket error code is not updated.","p":[{"t":"socket","d":"A valid socket resource created with socket_create() \n       or socket_accept()."},{"t":"addr","d":"If the given socket is of type AF_INET\n       or AF_INET6, socket_getsockname()\n       will return the local IP address in appropriate notation (e.g.\n       127.0.0.1 or fe80::1) in the\n       address parameter and, if the optional\n       port parameter is present, also the associated port."},{"t":"port","d":"If provided, this will hold the associated port."}]},"socket_get_option":{"s":"Gets socket options for the socket ","y":"mixed socket_get_option\n    ( resource $socket\n   , int $level\n   , int $optname\n   )","r":"Returns the value of the given option, or FALSE on errors.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."},{"t":"level","d":"The level parameter specifies the protocol\n       level at which the option resides. For example, to retrieve options at\n       the socket level, a level parameter of\n       SOL_SOCKET would be used. Other levels, such as\n       TCP, can be used by\n       specifying the protocol number of that level. Protocol numbers can be\n       found by using the getprotobyname() function."},{"t":"optname","d":""}]},"socket_get_status":{"s":"Alias of stream_get_meta_data()","y":"","r":"","p":null},"socket_import_stream":{"s":"Import a stream","y":"resource socket_import_stream\n    ( resource $stream\n   )","r":"Returns FALSE or NULL on failure.","p":[{"t":"stream","d":"The stream resource to import."}]},"socket_last_error":{"s":"Returns the last error on the socket ","y":"int socket_last_error\n    ([ resource $socket\n  ] )","r":"This function returns a socket error code.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."}]},"socket_listen":{"s":"Listens for a connection on a socket","y":"bool socket_listen\n    ( resource $socket\n   [, int $backlog = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure. The error code can be retrieved with\n   socket_last_error(). This code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."},{"t":"backlog","d":"A maximum of backlog incoming connections will be\n       queued for processing. If a connection request arrives with the queue\n       full the client may receive an error with an indication of\n       ECONNREFUSED, or, if the underlying protocol supports\n       retransmission, the request may be ignored so that retries may succeed."}]},"socket_read":{"s":"Reads a maximum of length bytes from a socket","y":"string socket_read\n    ( resource $socket\n   , int $length\n   [, int $type = PHP_BINARY_READ\n  ] )","r":"socket_read() returns the data as a string on success,\n   or FALSE on error (including if the remote host has closed the\n   connection). The error code can be retrieved with\n   socket_last_error(). This code may be passed to\n   socket_strerror() to get a textual representation of\n   the error.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."},{"t":"length","d":"The maximum number of bytes read is specified by the\n       length parameter. Otherwise you can use\n       \\r, \\n,\n       or \\0 to end reading (depending on the type\n       parameter, see below)."},{"t":"type","d":"Optional type parameter is a named constant:\n       \n        \n         \n          PHP_BINARY_READ (Default) - use the system\n          recv() function. Safe for reading binary data.\n         \n        \n        \n         \n          PHP_NORMAL_READ - reading stops at\n          \\n or \\r."}]},"socket_recv":{"s":"Receives data from a connected socket ","y":"int socket_recv\n    ( resource $socket\n   , string &$buf\n   , int $len\n   , int $flags\n   )","r":"socket_recv() returns the number of bytes received,\n   or FALSE if there was an error. The actual error code can be retrieved by \n   calling socket_last_error(). This error code may be\n   passed to socket_strerror() to get a textual explanation\n   of the error.","p":[{"t":"socket","d":"The socket must be a socket resource previously\n       created by socket_create()."},{"t":"buf","d":"The data received will be fetched to the variable specified with\n       buf. If an error occurs, if the\n       connection is reset, or if no data is\n       available, buf will be set to NULL."},{"t":"len","d":"Up to len bytes will be fetched from remote host."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator."}]},"socket_recvfrom":{"s":"Receives data from a socket whether or not it is connection-oriented","y":"int socket_recvfrom\n    ( resource $socket\n   , string &$buf\n   , int $len\n   , int $flags\n   , string &$name\n   [, int &$port\n  ] )","r":"socket_recvfrom() returns the number of bytes received,\n   or FALSE if there was an error. The actual error code can be retrieved by \n   calling socket_last_error(). This error code may be\n   passed to socket_strerror() to get a textual explanation\n   of the error.","p":[{"t":"socket","d":"The socket must be a socket resource previously\n       created by socket_create()."},{"t":"buf","d":"The data received will be fetched to the variable specified with\n       buf."},{"t":"len","d":"Up to len bytes will be fetched from remote host."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator."},{"t":"name","d":"If the socket is of the type AF_UNIX type,\n       name is the path to the file. Else, for\n       unconnected sockets, name is the IP address of,\n       the remote host, or NULL if the socket is connection-oriented."},{"t":"port","d":"This argument only applies to AF_INET and\n       AF_INET6 sockets, and specifies the remote port\n       from which the data is received. If the socket is connection-oriented,\n       port will be NULL."}]},"socket_recvmsg":{"s":"Read a message","y":"int socket_recvmsg\n    ( resource $socket\n   , string $message\n   [, int $flags\n  ] )","r":"","p":[{"t":"socket","d":""},{"t":"message","d":""},{"t":"flags","d":""}]},"socket_select":{"s":"Runs the select() system call on the given arrays of sockets with a specified timeout","y":"int socket_select\n    ( array &$read\n   , array &$write\n   , array &$except\n   , int $tv_sec\n   [, int $tv_usec = 0\n  ] )","r":"On success socket_select() returns the number of\n   socket resources contained in the modified arrays, which may be zero if\n   the timeout expires before anything interesting happens. On error FALSE\n   is returned. The error code can be retrieved with\n   socket_last_error().","p":[{"t":"read","d":"The sockets listed in the read array will be\n       watched to see if characters become available for reading (more\n       precisely, to see if a read will not block - in particular, a socket\n       resource is also ready on end-of-file, in which case a\n       socket_read() will return a zero length string)."},{"t":"write","d":"The sockets listed in the write array will be\n       watched to see if a write will not block."},{"t":"except","d":"The sockets listed in the except array will be\n       watched for exceptions."},{"t":"tv_sec","d":"The tv_sec and tv_usec\n       together form the timeout parameter. The\n       timeout is an upper bound on the amount of time\n       elapsed before socket_select() return.\n       tv_sec may be zero , causing\n       socket_select() to return immediately. This is useful\n       for polling. If tv_sec is NULL (no timeout),\n       socket_select() can block indefinitely."},{"t":"tv_usec","d":""}]},"socket_send":{"s":"Sends data to a connected socket","y":"int socket_send\n    ( resource $socket\n   , string $buf\n   , int $len\n   , int $flags\n   )","r":"socket_send() returns the number of bytes sent, or FALSE on error. ","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."},{"t":"buf","d":"A buffer containing the data that will be sent to the remote host."},{"t":"len","d":"The number of bytes that will be sent to the remote host from \n       buf."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator.\n       \n        Possible values for flags\n        \n         \n          \n           MSG_OOB\n           \n            Send OOB (out-of-band) data.\n           \n          \n\n          \n           MSG_EOR\n           \n            Indicate a record mark. The sent data completes the record.\n           \n          \n\n          \n           MSG_EOF\n           \n            Close the sender side of the socket and include an appropriate\n            notification of this at the end of the sent data. The sent data\n            completes the transaction.\n           \n          \n\n          \n           MSG_DONTROUTE\n           \n            Bypass routing, use direct interface."}]},"socket_sendmsg":{"s":"Send a message","y":"int socket_sendmsg\n    ( resource $socket\n   , array $message\n   , int $flags\n   )","r":"","p":[{"t":"socket","d":""},{"t":"message","d":""},{"t":"flags","d":""}]},"socket_sendto":{"s":"Sends a message to a socket, whether it is connected or not ","y":"int socket_sendto\n    ( resource $socket\n   , string $buf\n   , int $len\n   , int $flags\n   , string $addr\n   [, int $port = 0\n  ] )","r":"socket_sendto() returns the number of bytes sent to the\n   remote host, or FALSE if an error occurred.","p":[{"t":"socket","d":"A valid socket resource created using socket_create()."},{"t":"buf","d":"The sent data will be taken from buffer buf."},{"t":"len","d":"len bytes from buf will be\n       sent."},{"t":"flags","d":"The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator.\n       \n        Possible values for flags\n        \n         \n          \n           MSG_OOB\n           \n            Send OOB (out-of-band) data.\n           \n          \n\n          \n           MSG_EOR\n           \n            Indicate a record mark. The sent data completes the record.\n           \n          \n\n          \n           MSG_EOF\n           \n            Close the sender side of the socket and include an appropriate\n            notification of this at the end of the sent data. The sent data\n            completes the transaction.\n           \n          \n\n          \n           MSG_DONTROUTE\n           \n            Bypass routing, use direct interface."},{"t":"addr","d":"IP address of the remote host."},{"t":"port","d":"port is the remote port number at which the data\n       will be sent."}]},"socket_set_block":{"s":"Sets blocking mode on a socket resource","y":"bool socket_set_block\n    ( resource $socket\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."}]},"socket_set_blocking":{"s":"Alias of stream_set_blocking()","y":"","r":"","p":null},"socket_set_nonblock":{"s":"Sets nonblocking mode for file descriptor fd ","y":"bool socket_set_nonblock\n    ( resource $socket\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."}]},"socket_set_option":{"s":"Sets socket options for the socket","y":"bool socket_set_option\n    ( resource $socket\n   , int $level\n   , int $optname\n   , mixed $optval\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()\n       or socket_accept()."},{"t":"level","d":"The level parameter specifies the protocol\n       level at which the option resides. For example, to retrieve options at\n       the socket level, a level parameter of\n       SOL_SOCKET would be used. Other levels, such as\n       TCP, can be used by specifying the protocol number of that level. \n       Protocol numbers can be found by using the \n       getprotobyname() function."},{"t":"optname","d":"The available socket options are the same as those for the\n       socket_get_option() function."},{"t":"optval","d":"The option value."}]},"socket_set_timeout":{"s":"Alias of stream_set_timeout()","y":"","r":"","p":null},"socket_shutdown":{"s":"Shuts down a socket for receiving, sending, or both","y":"bool socket_shutdown\n    ( resource $socket\n   [, int $how = 2\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"socket","d":"A valid socket resource created with socket_create()."},{"t":"how","d":"The value of how can be one of the following:\n       \n        possible values for how\n        \n         \n          \n           0\n           \n            Shutdown socket reading\n           \n          \n\n          \n           1\n           \n            Shutdown socket writing\n           \n          \n\n          \n           2\n           \n            Shutdown socket reading and writing"}]},"socket_strerror":{"s":"Return a string describing a socket error","y":"string socket_strerror\n    ( int $errno\n   )","r":"Returns the error message associated with the errno\n   parameter.","p":[{"t":"errno","d":"A valid socket error number, likely produced by \n       socket_last_error()."}]},"socket_write":{"s":"Write to a socket","y":"int socket_write\n    ( resource $socket\n   , string $buffer\n   [, int $length = 0\n  ] )","r":"Returns the number of bytes successfully written to the socket or FALSE on failure.\n   The error code can be retrieved with\n   socket_last_error(). This code may be passed to\n   socket_strerror() to get a textual explanation of the\n   error.","p":[{"t":"socket","d":""},{"t":"buffer","d":"The buffer to be written."},{"t":"length","d":"The optional parameter length can specify an\n       alternate length of bytes written to the socket. If this length is\n       greater than the buffer length, it is silently truncated to the length\n       of the buffer."}]},"solr_get_version":{"s":"Returns the current version of the Apache Solr extension","y":"string solr_get_version\n    ( void\n   )","r":"It returns a string on success and FALSE on failure.","p":null},"sort":{"s":"Sort an array","y":"bool sort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"sort_flags","d":"The optional second parameter sort_flags\n       may be used to modify the sorting behavior using these values:"}]},"soundex":{"s":"Calculate the soundex key of a string","y":"string soundex\n    ( string $str\n   )","r":"Returns the soundex key as a string.","p":[{"t":"str","d":"The input string."}]},"split":{"s":"Split string into array by regular expression","y":"array split\n    ( string $pattern\n   , string $string\n   [, int $limit = -1\n  ] )","r":"Returns an array of strings, each of which is a substring of\n   string formed by splitting it on boundaries formed\n   by the case-sensitive regular expression pattern.","p":[{"t":"pattern","d":"Case sensitive regular expression."},{"t":"string","d":"The input string."},{"t":"limit","d":"If limit is set, the returned array will\n       contain a maximum of limit elements with the\n       last element containing the whole rest of\n       string."}]},"spliti":{"s":"Split string into array by regular expression case insensitive","y":"array spliti\n    ( string $pattern\n   , string $string\n   [, int $limit = -1\n  ] )","r":"Returns an array of strings, each of which is a substring of\n   string formed by splitting it on boundaries formed\n   by the case insensitive regular expression pattern.","p":[{"t":"pattern","d":"Case insensitive regular expression."},{"t":"string","d":"The input string."},{"t":"limit","d":"If limit is set, the returned array will\n       contain a maximum of limit elements with the\n       last element containing the whole rest of\n       string."}]},"spl_autoload":{"s":"Default implementation for __autoload()","y":"void spl_autoload\n    ( string $class_name\n   [, string $file_extensions = spl_autoload_extensions()\n  ] )","r":"No value is returned.","p":[{"t":"class_name","d":"The lowercased name of the class (and namespace) being instantiated."},{"t":"file_extensions","d":"By default it checks all include paths to\n       contain filenames built up by the lowercase class name appended by the\n       filename extensions .inc and .php."}]},"spl_autoload_call":{"s":"Try all registered __autoload() function to load the requested class","y":"void spl_autoload_call\n    ( string $class_name\n   )","r":"No value is returned.","p":[{"t":"class_name","d":"The class name being searched."}]},"spl_autoload_extensions":{"s":"Register and return default file extensions for spl_autoload","y":"string spl_autoload_extensions\n    ([ string $file_extensions\n  ] )","r":"A comma delimited list of default file extensions for\n   spl_autoload().","p":[{"t":"file_extensions","d":"When calling without an argument, it simply returns the current list\n       of extensions each separated by comma. To modify the list of file\n       extensions, simply invoke the functions with the new list of file\n       extensions to use in a single string with each extensions separated\n       by comma."}]},"spl_autoload_functions":{"s":"Return all registered __autoload() functions","y":"array spl_autoload_functions\n    ( void\n   )","r":"An array of all registered __autoload functions.\n   If the autoload stack is not activated then the return value is FALSE.\n   If no function is registered the return value will be an empty array.","p":null},"spl_autoload_unregister":{"s":"Unregister given function as __autoload() implementation","y":"bool spl_autoload_unregister\n    ( mixed $autoload_function\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"autoload_function","d":"The autoload function being unregistered."}]},"spl_classes":{"s":"Return available SPL classes","y":"array spl_classes\n    ( void\n   )","r":"Returns an array containing the currently available SPL classes.","p":null},"sprintf":{"s":"Return a formatted string","y":"string sprintf\n    ( string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )","r":"Returns a string produced according to the formatting string\n   format.","p":[{"t":"format","d":"The format string is composed of zero or more directives:\n       ordinary characters (excluding %) that are\n       copied directly to the result, and conversion\n       specifications, each of which results in fetching its\n       own parameter.  This applies to both sprintf()\n       and printf()."}]},"sqlite_array_query":{"s":"Execute a query against a given database and returns an array","y":"array sqlite_array_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )","r":"Returns an array of the entire result set; FALSE otherwise.","p":[{"t":"query","d":"The query to be executed."},{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_busy_timeout":{"s":"Set busy timeout duration, or disable busy handlers","y":"void sqlite_busy_timeout\n    ( resource $dbhandle\n   , int $milliseconds\n   )","r":"No value is returned.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."},{"t":"milliseconds","d":"The number of milliseconds.  When set to\n       0, busy handlers will be disabled and SQLite will\n       return immediately with a SQLITE_BUSY status code\n       if another process\/thread has the database locked for an update."}]},"sqlite_changes":{"s":"Returns the number of rows that were changed by the most\n   recent SQL statement","y":"int sqlite_changes\n    ( resource $dbhandle\n   )","r":"Returns the number of changed rows.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."}]},"sqlite_close":{"s":"Closes an open SQLite database","y":"void sqlite_close\n    ( resource $dbhandle\n   )","r":"No value is returned.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally."}]},"sqlite_column":{"s":"Fetches a column from the current row of a result set","y":"mixed sqlite_column\n    ( resource $result\n   , mixed $index_or_name\n   [, bool $decode_binary = true\n  ] )","r":"Returns the column value.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"index_or_name","d":"The column index or name to fetch."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_create_aggregate":{"s":"Register an aggregating UDF for use in SQL statements","y":"void sqlite_create_aggregate\n    ( resource $dbhandle\n   , string $function_name\n   , callable $step_func\n   , callable $finalize_func\n   [, int $num_args = -1\n  ] )","r":"No value is returned.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."},{"t":"function_name","d":"The name of the function used in SQL statements."},{"t":"step_func","d":"Callback function called for each row of the result set.\n       Function parameters are &amp;$context, $value, ...."},{"t":"finalize_func","d":"Callback function to aggregate the &quot;stepped&quot; data from each row.\n       Function parameter is &amp;$context and the function\n       should return the final result of aggregation."},{"t":"num_args","d":"Hint to the SQLite parser if the callback function accepts a\n       predetermined number of arguments."}]},"sqlite_create_function":{"s":"Registers a &quot;regular&quot; User Defined Function for use in SQL statements","y":"void sqlite_create_function\n    ( resource $dbhandle\n   , string $function_name\n   , callable $callback\n   [, int $num_args = -1\n  ] )","r":"No value is returned.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."},{"t":"function_name","d":"The name of the function used in SQL statements."},{"t":"callback","d":"Callback function to handle the defined SQL function."},{"t":"num_args","d":"Hint to the SQLite parser if the callback function accepts a\n       predetermined number of arguments."}]},"sqlite_current":{"s":"Fetches the current row from a result set as an array","y":"array sqlite_current\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )","r":"Returns an array of the current row from a result set; FALSE if the\n   current position is beyond the final row.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_error_string":{"s":"Returns the textual description of an error code","y":"string sqlite_error_string\n    ( int $error_code\n   )","r":"Returns a human readable description of the error_code,\n   as a string.","p":[{"t":"error_code","d":"The error code being used, which might be passed in from\n       sqlite_last_error()."}]},"sqlite_escape_string":{"s":"Escapes a string for use as a query parameter","y":"string sqlite_escape_string\n    ( string $item\n   )","r":"Returns an escaped string for use in an SQLite SQL statement.","p":[{"t":"item","d":"The string being quoted."}]},"sqlite_exec":{"s":"Executes a result-less query against a given database","y":"bool sqlite_exec\n    ( resource $dbhandle\n   , string $query\n   [, string &$error_msg\n  ] )","r":"This function will return a boolean result; TRUE for success or FALSE for failure.\n   If you need to run a query that returns rows, see sqlite_query().","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method."},{"t":"query","d":"The query to be executed."},{"t":"error_msg","d":"The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function."}]},"sqlite_factory":{"s":"Opens an SQLite database and returns an SQLiteDatabase object","y":"SQLiteDatabase sqlite_factory\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )","r":"Returns an SQLiteDatabase object on success, NULL on error.","p":[{"t":"filename","d":"The filename of the SQLite database."},{"t":"mode","d":"The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value."},{"t":"error_message","d":"Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error."}]},"sqlite_fetch_all":{"s":"Fetches all rows from a result set as an array of arrays","y":"array sqlite_fetch_all\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )","r":"Returns an array of the remaining rows in a result set. If called right\n   after sqlite_query(), it returns all rows. If called\n   after sqlite_fetch_array(), it returns the rest. If\n   there are no rows in a result set, it returns an empty array.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_fetch_array":{"s":"Fetches the next row from a result set as an array","y":"array sqlite_fetch_array\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )","r":"Returns an array of the next row from a result set; FALSE if the\n   next position is beyond the final row.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_fetch_column_types":{"s":"Return an array of column types from a particular table","y":"array sqlite_fetch_column_types\n    ( string $table_name\n   , resource $dbhandle\n   [, int $result_type = SQLITE_ASSOC\n  ] )","r":"Returns an array of column data types; FALSE on error.","p":[{"t":"table_name","d":"The table name to query."},{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."},{"t":"result_type","d":"The optional result_type parameter accepts a\n       constant and determines how the returned array will be indexed. Using\n       SQLITE_ASSOC will return only associative indices\n       (named fields) while SQLITE_NUM will return only\n       numerical indices (ordinal field numbers).\n       SQLITE_ASSOC is the default for\n       this function."}]},"sqlite_fetch_object":{"s":"Fetches the next row from a result set as an object","y":"object sqlite_fetch_object\n    ( resource $result\n   [, string $class_name\n   [, array $ctor_params\n   [, bool $decode_binary = true\n  ]]] )","r":"","p":null},"sqlite_fetch_single":{"s":"Fetches the first column of a result set as a string","y":"string sqlite_fetch_single\n    ( resource $result\n   [, bool $decode_binary = true\n  ] )","r":"Returns the first column value, as a string.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"decode_binary","d":"When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications."}]},"sqlite_fetch_string":{"s":"Alias of sqlite_fetch_single()","y":"","r":"","p":null},"sqlite_field_name":{"s":"Returns the name of a particular field","y":"string sqlite_field_name\n    ( resource $result\n   , int $field_index\n   )","r":"Returns the name of a field in an SQLite result set, given the ordinal\n   column number; FALSE on error.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"field_index","d":"The ordinal column number in the result set."}]},"sqlite_has_prev":{"s":"Returns whether or not a previous row is available","y":"bool sqlite_has_prev\n    ( resource $result\n   )","r":"Returns TRUE if there are more previous rows available from the\n   result handle, or FALSE otherwise.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_key":{"s":"Returns the current row index","y":"int SQLiteResult::key\n    ( void\n   )","r":"Returns the current row index of the buffered result set\n   result.","p":null},"sqlite_last_error":{"s":"Returns the error code of the last error for a database","y":"int sqlite_last_error\n    ( resource $dbhandle\n   )","r":"Returns an error code, or 0 if no error occurred.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."}]},"sqlite_last_insert_rowid":{"s":"Returns the rowid of the most recently inserted row","y":"int sqlite_last_insert_rowid\n    ( resource $dbhandle\n   )","r":"Returns the row id, as an integer.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method."}]},"sqlite_libencoding":{"s":"Returns the encoding of the linked SQLite library","y":"string sqlite_libencoding\n    ( void\n   )","r":"Returns the library encoding.","p":null},"sqlite_libversion":{"s":"Returns the version of the linked SQLite library","y":"string sqlite_libversion\n    ( void\n   )","r":"Returns the library version, as a string.","p":null},"sqlite_next":{"s":"Seek to the next row number","y":"bool sqlite_next\n    ( resource $result\n   )","r":"Returns TRUE on success, or FALSE if there are no more rows.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_num_fields":{"s":"Returns the number of fields in a result set","y":"int sqlite_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields, as an integer.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_num_rows":{"s":"Returns the number of rows in a buffered result set","y":"int sqlite_num_rows\n    ( resource $result\n   )","r":"Returns the number of rows, as an integer.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_open":{"s":"Opens an SQLite database and create the database if it does not exist","y":"resource sqlite_open\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )","r":"Returns a resource (database handle) on success, FALSE on error.","p":[{"t":"filename","d":"The filename of the SQLite database.  If the file does not exist, SQLite\n       will attempt to create it.  PHP must have write permissions to the file\n       if data is inserted, the database schema is modified or to create the\n       database if it does not exist."},{"t":"mode","d":"The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value."},{"t":"error_message","d":"Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error."}]},"sqlite_popen":{"s":"Opens a persistent handle to an SQLite database and create the database if it does not exist","y":"resource sqlite_popen\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )","r":"Returns a resource (database handle) on success, FALSE on error.","p":[{"t":"filename","d":"The filename of the SQLite database.  If the file does not exist, SQLite\n       will attempt to create it.  PHP must have write permissions to the file\n       if data is inserted, the database schema is modified or to create the\n       database if it does not exist."},{"t":"mode","d":"The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value."},{"t":"error_message","d":"Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error."}]},"sqlite_prev":{"s":"Seek to the previous row number of a result set","y":"bool sqlite_prev\n    ( resource $result\n   )","r":"Returns TRUE on success, or FALSE if there are no more previous rows.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_query":{"s":"Executes a query against a given database and returns a result handle","y":"resource sqlite_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg\n  ]] )","r":"This function will return a result handle or FALSE on failure.\n   For queries that return rows, the result handle can then be used with\n   functions such as sqlite_fetch_array() and\n   sqlite_seek().","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method."},{"t":"query","d":"The query to be executed."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"error_msg","d":"The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function."}]},"sqlite_rewind":{"s":"Seek to the first row number","y":"bool sqlite_rewind\n    ( resource $result\n   )","r":"Returns FALSE if there are no rows in the result set, TRUE otherwise.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlite_seek":{"s":"Seek to a particular row number of a buffered result set","y":"bool sqlite_seek\n    ( resource $result\n   , int $rownum\n   )","r":"Returns FALSE if the row does not exist, TRUE otherwise.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."},{"t":"rownum","d":"The ordinal row number to seek to.  The row number is zero-based (0 is\n       the first row)."}]},"sqlite_udf_decode_binary":{"s":"Decode binary data passed as parameters to an UDF","y":"string sqlite_udf_decode_binary\n    ( string $data\n   )","r":"The decoded string.","p":[{"t":"data","d":"The encoded data that will be decoded, data that was applied by either\n       sqlite_udf_encode_binary() or\n       sqlite_escape_string()."}]},"sqlite_udf_encode_binary":{"s":"Encode binary data before returning it from an UDF","y":"string sqlite_udf_encode_binary\n    ( string $data\n   )","r":"The encoded string.","p":[{"t":"data","d":"The string being encoded."}]},"sqlite_unbuffered_query":{"s":"Execute a query that does not prefetch and buffer all data","y":"resource sqlite_unbuffered_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg\n  ]] )","r":"Returns a result handle or FALSE on failure.","p":[{"t":"dbhandle","d":"The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method."},{"t":"query","d":"The query to be executed."},{"t":"result_type","d":"The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function."},{"t":"error_msg","d":"The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function."}]},"sqlite_valid":{"s":"Returns whether more rows are available","y":"bool sqlite_valid\n    ( resource $result\n   )","r":"Returns TRUE if there are more rows available from the\n   result handle, or FALSE otherwise.","p":[{"t":"result","d":"The SQLite result resource.  This parameter is not required when using\n       the object-oriented method."}]},"sqlsrv_begin_transaction":{"s":"Begins a database transaction","y":"bool sqlsrv_begin_transaction\n    ( resource $conn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"conn","d":"The connection resource returned by a call to sqlsrv_connect()."}]},"sqlsrv_cancel":{"s":"Cancels a statement","y":"bool sqlsrv_cancel\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"The statement resource to be cancelled."}]},"sqlsrv_client_info":{"s":"Returns information about the client and specified connection","y":"array sqlsrv_client_info\n    ( resource $conn\n   )","r":"Returns an associative array with keys described in the table below. \n   Returns FALSE otherwise. \n   \n   Array returned by sqlsrv_client_info\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      DriverDllName\n      SQLNCLI10.DLL\n     \n\n     \n      DriverODBCVer\n      ODBC version (xx.yy)\n     \n\n     \n      DriverVer\n      SQL Server Native Client DLL version (10.5.xxx)\n     \n\n     \n      ExtensionVer\n      php_sqlsrv.dll version (2.0.xxx.x)","p":[{"t":"conn","d":"The connection about which information is returned."}]},"sqlsrv_close":{"s":"Closes an open connection and releases resourses associated with the connection","y":"bool sqlsrv_close\n    ( resource $conn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"conn","d":"The connection to be closed."}]},"sqlsrv_commit":{"s":"Commits a transaction that was begun with sqlsrv_begin_transaction()","y":"bool sqlsrv_commit\n    ( resource $conn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"conn","d":"The connection on which the transaction is to be committed."}]},"sqlsrv_configure":{"s":"Changes the driver error handling and logging configurations","y":"bool sqlsrv_configure\n    ( string $setting\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"setting","d":"The name of the setting to set. The possible values are \n       &quot;WarningsReturnAsErrors&quot;, &quot;LogSubsystems&quot;, and &quot;LogSeverity&quot;."},{"t":"value","d":"The value of the specified setting. The following table shows possible values:\n          \n   Error and Logging Setting Options\n   \n    \n     \n      Setting\n      Options\n     \n\n    \n\n    \n     \n      WarningsReturnAsErrors\n      1 (TRUE) or 0 (FALSE)\n     \n\n     \n      LogSubsystems\n      SQLSRV_LOG_SYSTEM_ALL (-1) \n      SQLSRV_LOG_SYSTEM_CONN (2) \n      SQLSRV_LOG_SYSTEM_INIT (1) \n      SQLSRV_LOG_SYSTEM_OFF (0) \n      SQLSRV_LOG_SYSTEM_STMT (4) \n      SQLSRV_LOG_SYSTEM_UTIL (8)\n     \n\n     \n      LogSeverity\n      SQLSRV_LOG_SEVERITY_ALL (-1) \n      SQLSRV_LOG_SEVERITY_ERROR (1) \n      SQLSRV_LOG_SEVERITY_NOTICE (4) \n      SQLSRV_LOG_SEVERITY_WARNING (2)"}]},"sqlsrv_connect":{"s":"Opens a connection to a Microsoft SQL Server database","y":"resource sqlsrv_connect\n    ( string $serverName\n   [, array $connectionInfo\n  ] )","r":"A connection resource. If a connection cannot be successfully opened, FALSE is returned.","p":[{"t":"serverName","d":"The name of the server to which a connection is established. To connect \n       to a specific instance, follow the server name with a forward slash \n       and the instance name (e.g. serverName\\sqlexpress)."},{"t":"connectionInfo","d":"An associative array that specifies options for connecting to the server. \n       If values for the UID and PWD keys are not specified, the connection \n       will be attempted using Windows Authentication. For a complete list of supported \n       keys, see &raquo;&nbsp;SQLSRV Connection Options."}]},"sqlsrv_errors":{"s":"Returns error and warning information about the last SQLSRV operation performed","y":"mixed sqlsrv_errors\n    ([ int $errorsOrWarnings\n  ] )","r":"If errors and\/or warnings occurred on the last sqlsrv operation, an array of \n   arrays containing error information is returned. If no errors and\/or warnings \n   occurred on the last sqlsrv operation, NULL is returned. The following table \n   describes the structure of the returned arrays:\n   \n   Array returned by sqlsrv_errors\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      SQLSTATE\n      For errors that originate from the ODBC driver, the SQLSTATE returned \n      by ODBC. For errors that originate from the Microsoft Drivers for PHP for \n      SQL Server, a SQLSTATE of IMSSP. For warnings that originate from the \n      Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP.\n      \n     \n\n     \n      code\n      For errors that originate from SQL Server, the native SQL Server \n      error code. For errors that originate from the ODBC driver, the error \n      code returned by ODBC. For errors that originate from the Microsoft Drivers \n      for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code.\n      \n     \n\n     \n      message\n      A description of the error.","p":[{"t":"errorsOrWarnings","d":"Determines whether error information, warning information, or both are \n       returned. If this parameter is not supplied, both error information and \n       warning information are returned. The following are the supported values \n       for this parameter: SQLSRV_ERR_ALL, SQLSRV_ERR_ERRORS, SQLSRV_ERR_WARNINGS."}]},"sqlsrv_execute":{"s":"Executes a statement prepared with sqlsrv_prepare()","y":"bool sqlsrv_execute\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"A statement resource returned by sqlsrv_prepare()."}]},"sqlsrv_fetch":{"s":"Makes the next row in a result set available for reading","y":"mixed sqlsrv_fetch\n    ( resource $stmt\n   [, int $row\n   [, int $offset\n  ]] )","r":"Returns TRUE if the next row of a result set was successfully retrieved, \n   FALSE if an error occurs, and NULL if there are no more rows in the result set.","p":[{"t":"stmt","d":"A statement resource created by executing sqlsrv_query() \n       or sqlsrv_execute()."},{"t":"row","d":"The row to be accessed. This parameter can only be used if the specified \n       statement was prepared with a scrollable cursor. In that case, this parameter \n       can take on one of the following values:\n       \n        SQLSRV_SCROLL_NEXT\n        SQLSRV_SCROLL_PRIOR\n        SQLSRV_SCROLL_FIRST\n        SQLSRV_SCROLL_LAST\n        SQLSRV_SCROLL_ABSOLUTE\n        SQLSRV_SCROLL_RELATIVE"},{"t":"offset","d":"Specifies the row to be accessed if the row parameter is set to\n       SQLSRV_SCROLL_ABSOLUTE or\n       SQLSRV_SCROLL_RELATIVE. Note that the first row in\n       a result set has index 0."}]},"sqlsrv_fetch_array":{"s":"Returns a row as an array","y":"array sqlsrv_fetch_array\n    ( resource $stmt\n   [, int $fetchType\n   [, int $row\n   [, int $offset\n  ]]] )","r":"Returns an array on success, NULL if there are no more rows to return, and \n   FALSE if an error occurs.","p":[{"t":"stmt","d":"A statement resource returned by sqlsrv_query or sqlsrv_prepare."},{"t":"fetchType","d":"A predefined constant specifying the type of array to return. Possible \n       values are SQLSRV_FETCH_ASSOC, \n       SQLSRV_FETCH_NUMERIC, and \n       SQLSRV_FETCH_BOTH (the default)."},{"t":"row","d":"Specifies the row to access in a result set that uses a scrollable cursor. \n       Possible values are SQLSRV_SCROLL_NEXT, \n       SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, \n       SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE and, \n       SQLSRV_SCROLL_RELATIVE (the default). When this parameter \n       is specified, the fetchType must be explicitly defined."},{"t":"offset","d":"Specifies the row to be accessed if the row parameter is set to\n       SQLSRV_SCROLL_ABSOLUTE or\n       SQLSRV_SCROLL_RELATIVE. Note that the first row in\n       a result set has index 0."}]},"sqlsrv_field_metadata":{"s":"Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare()","y":"mixed sqlsrv_field_metadata\n    ( resource $stmt\n   )","r":"Returns an array of arrays is returned on success. Otherwise, FALSE is returned. \n   Each returned array is described by the following table:\n   \n   Array returned by sqlsrv_field_metadata\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      Name\n      The name of the field.\n     \n\n     \n      Type\n      The numeric value for the SQL type.\n     \n\n     \n      Size\n      The number of characters for fields of character type, the number of \n      bytes for fields of binary type, or NULL for other types.\n     \n\n     \n      Precision\n      The precision for types of variable precision, NULL for other types.\n     \n\n     \n      Scale\n      The scale for types of variable scale, NULL for other types.\n     \n\n     \n      Nullable\n      An enumeration indicating whether the column is nullable, not nullable, \n      or if it is not known.\n     \n\n    \n   \n  \n\n  For more information, see &raquo;&nbsp;sqlsrv_field_metadata \n  in the Microsoft SQLSRV documentation.","p":[{"t":"stmt","d":"The statment resource for which metadata is returned."}]},"sqlsrv_free_stmt":{"s":"Frees all resources for the specified statement","y":"bool sqlsrv_free_stmt\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"The statment for which resources are freed. \n       Note that NULL is a valid parameter value. This allows the function to be \n       called multiple times in a script."}]},"sqlsrv_get_field":{"s":"Gets field data from the currently selected row","y":"mixed sqlsrv_get_field\n    ( resource $stmt\n   , int $fieldIndex\n   [, int $getAsType\n  ] )","r":"Returns data from the specified field on success. Returns FALSE otherwise.","p":[{"t":"stmt","d":"A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute()."},{"t":"fieldIndex","d":"The index of the field to be retrieved. Field indices start at 0. Fields \n       must be accessed in order. i.e. If you access field index 1, then field \n       index 0 will not be available."},{"t":"getAsType","d":"The PHP data type for the returned field data. If this parameter is not \n       set, the field data will be returned as its default PHP data type.\n       For information about default PHP data types, see \n       &raquo;&nbsp;Default PHP Data Types \n       in the Microsoft SQLSRV documentation."}]},"sqlsrv_has_rows":{"s":"Indicates whether the specified statement has rows","y":"bool sqlsrv_has_rows\n    ( resource $stmt\n   )","r":"Returns TRUE if the specified statement has rows and FALSE if the statement \n   does not have rows or if an error occurred.","p":[{"t":"stmt","d":"A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute()."}]},"sqlsrv_next_result":{"s":"Makes the next result of the specified statement active","y":"mixed sqlsrv_next_result\n   \n    ( resource $stmt\n   )","r":"Returns TRUE if the next result was successfully retrieved, FALSE if an error \n   occurred, and NULL if there are no more results to retrieve.","p":[{"t":"stmt","d":"The statment on which the next result is being called."}]},"sqlsrv_num_fields":{"s":"Retrieves the number of fields (columns) on a statement","y":"mixed sqlsrv_num_fields\n    ( resource $stmt\n   )","r":"Returns the number of fields on success. Returns FALSE otherwise.","p":[{"t":"stmt","d":"The statment for which the number of fields is returned. \n       sqlsrv_num_fields() can be called on a statement before \n       or after statement execution."}]},"sqlsrv_num_rows":{"s":"Retrieves the number of rows in a result set","y":"mixed sqlsrv_num_rows\n    ( resource $stmt\n   )","r":"Returns the number of rows retrieved on success and FALSE if an error occurred. \n   If a forward cursor (the default) or dynamic cursor is used, FALSE is returned.","p":[{"t":"stmt","d":"The statement for which the row count is returned. The statment resource \n       must be created with a static or keyset cursor. For more information, see \n       sqlsrv_query(), sqlsrv_prepare(), or \n       &raquo;&nbsp;Specifying a Cursor Type and Selecting Rows \n       in the Microsoft SQLSRV documentation."}]},"sqlsrv_prepare":{"s":"Prepares a query for execution","y":"mixed sqlsrv_prepare\n    ( resource $conn\n   , string $sql\n   [, array $params\n   [, array $options\n  ]] )","r":"Returns a statement resource on success and FALSE if an error occurred.","p":[{"t":"conn","d":"A connection resource returned by sqlsrv_connect()."},{"t":"sql","d":"The string that defines the query to be prepared and executed."},{"t":"params","d":"An array specifying parameter information when executing a parameterized \n       query. Array elements can be any of the following:\n       \n        A literal value\n        A PHP variable\n        An array with this structure: \n        array($value [, $direction [, $phpType [, $sqlType]]])\n       \n       The following table describes the elements in the array structure above:"},{"t":"options","d":"An array specifing query property options. The supported keys are described \n       in the following table:"}]},"sqlsrv_query":{"s":"Prepares and executes a query.","y":"mixed sqlsrv_query\n    ( resource $conn\n   , string $sql\n   [, array $params\n   [, array $options\n  ]] )","r":"Returns a statement resource on success and FALSE if an error occurred.","p":[{"t":"conn","d":"A connection resource returned by sqlsrv_connect()."},{"t":"sql","d":"The string that defines the query to be prepared and executed."},{"t":"params","d":"An array specifying parameter information when executing a parameterized query. \n       Array elements can be any of the following:\n       \n        A literal value\n        A PHP variable\n        An array with this structure: \n        array($value [, $direction [, $phpType [, $sqlType]]])\n       \n       The following table describes the elements in the array structure above:"},{"t":"options","d":"An array specifing query property options. The supported keys are described \n       in the following table:"}]},"sqlsrv_rollback":{"s":"Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction()","y":"bool sqlsrv_rollback\n    ( resource $conn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"conn","d":"The connection resource returned by a call to sqlsrv_connect()."}]},"sqlsrv_rows_affected":{"s":"Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed","y":"int sqlsrv_rows_affected\n    ( resource $stmt\n   )","r":"Returns the number of rows affected by the last INSERT, UPDATE, or DELETE query. \n   If no rows were affected, 0 is returned. If the number of affected rows cannot \n   be determined, -1 is returned. If an error occurred, FALSE is returned.","p":[{"t":"stmt","d":"The executed statement resource for which the number of affected rows is returned."}]},"sqlsrv_send_stream_data":{"s":"Sends data from parameter streams to the server","y":"bool sqlsrv_send_stream_data\n    ( resource $stmt\n   )","r":"Returns TRUE if there is more data to send and FALSE if there is not.","p":[{"t":"stmt","d":"A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute()."}]},"sqlsrv_server_info":{"s":"Returns information about the server","y":"array sqlsrv_server_info\n    ( resource $conn\n   )","r":"Returns an array as described in the following table:\n  \n  Returned Array\n   \n    \n     \n      CurrentDatabase\n      The connected-to database.\n     \n\n    \n\n    \n     \n      SQLServerVersion\n      The SQL Server version.\n     \n\n     \n      SQLServerName\n      The name of the server.","p":[{"t":"conn","d":"The connection resource that connects the client and the server."}]},"sql_regcase":{"s":"Make regular expression for case insensitive match","y":"string sql_regcase\n    ( string $string\n   )","r":"Returns a valid regular expression which will match\n   string, ignoring case. This expression is\n   string with each alphabetic character converted to\n   a bracket expression; this bracket expression contains that character&#039;s\n   uppercase and lowercase form.  Other characters remain unchanged.","p":[{"t":"string","d":"The input string."}]},"sqrt":{"s":"Square root","y":"float sqrt\n     ( float $arg\n    )","r":"The square root of arg\n   or the special value NAN for negative numbers.","p":[{"t":"arg","d":"The argument to process"}]},"srand":{"s":"Seed the random number generator","y":"void srand\n     ([ int $seed\n   ] )","r":"No value is returned.","p":[{"t":"seed","d":"Optional seed value"}]},"sscanf":{"s":"Parses input from a string according to a format","y":"mixed sscanf\n    ( string $str\n   , string $format\n   [, mixed &$...\n  ] )","r":"If only two parameters were passed to this function, the values parsed will\n   be returned as an array. Otherwise, if optional parameters are passed, the\n   function will return the number of assigned values. The optional parameters\n   must be passed by reference.","p":[{"t":"str","d":"The input string being parsed."},{"t":"format","d":"The interpreted format for str, which is\n       described in the documentation for sprintf() with\n       following differences:\n       \n        \n         Function is not locale-aware.\n        \n        \n         F, g, G and\n         b are not supported.\n        \n        \n         D stands for decimal number.\n        \n        \n         i stands for integer with base detection.\n        \n        \n         n stands for number of characters processed so far."},{"t":"...","d":"Optionally pass in variables by reference that will contain the parsed values."}]},"ssdeep_fuzzy_compare":{"s":"Calculates the match score between two fuzzy hash signatures","y":"int ssdeep_fuzzy_compare\n    ( string $signature1\n   , string $signature2\n   )","r":"Returns an integer from 0 to 100 on success, FALSE otherwise. ","p":[{"t":"signature1","d":"The first fuzzy hash signature string."},{"t":"signature2","d":"The second fuzzy hash signature string."}]},"ssdeep_fuzzy_hash":{"s":"Create a fuzzy hash from a string","y":"string ssdeep_fuzzy_hash\n    ( string $to_hash\n   )","r":"Returns a string on success, FALSE otherwise.","p":[{"t":"to_hash","d":"The input string."}]},"ssdeep_fuzzy_hash_filename":{"s":"Create a fuzzy hash from a file","y":"string ssdeep_fuzzy_hash_filename\n    ( string $file_name\n   )","r":"Returns a string on success, FALSE otherwise.","p":[{"t":"file_name","d":"The filename of the file to hash."}]},"ssh2_auth_agent":{"s":"Authenticate over SSH using the ssh agent","y":"bool ssh2_auth_agent\n    ( resource $session\n   , string $username\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"username","d":"Remote user name."}]},"ssh2_auth_hostbased_file":{"s":"Authenticate using a public hostkey","y":"bool ssh2_auth_hostbased_file\n    ( resource $session\n   , string $username\n   , string $hostname\n   , string $pubkeyfile\n   , string $privkeyfile\n   [, string $passphrase\n   [, string $local_username\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"username","d":""},{"t":"hostname","d":""},{"t":"pubkeyfile","d":""},{"t":"privkeyfile","d":""},{"t":"passphrase","d":"If privkeyfile is encrypted (which it should\n       be), the passphrase must be provided."},{"t":"local_username","d":"If local_username is omitted, then the value\n       for username will be used for it."}]},"ssh2_auth_none":{"s":"Authenticate as &quot;none&quot;","y":"mixed ssh2_auth_none\n    ( resource $session\n   , string $username\n   )","r":"Returns TRUE if the server does accept &quot;none&quot; as an authentication\n   method, or an array of accepted authentication methods on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"username","d":"Remote user name."}]},"ssh2_auth_password":{"s":"Authenticate over SSH using a plain password","y":"bool ssh2_auth_password\n    ( resource $session\n   , string $username\n   , string $password\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"username","d":"Remote user name."},{"t":"password","d":"Password for username"}]},"ssh2_auth_pubkey_file":{"s":"Authenticate using a public key","y":"bool ssh2_auth_pubkey_file\n    ( resource $session\n   , string $username\n   , string $pubkeyfile\n   , string $privkeyfile\n   [, string $passphrase\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"username","d":""},{"t":"pubkeyfile","d":"The public key file needs to be in OpenSSH&#039;s format. It should look something like:"},{"t":"privkeyfile","d":""},{"t":"passphrase","d":"If privkeyfile is encrypted (which it should\n       be), the passphrase must be provided."}]},"ssh2_connect":{"s":"Connect to an SSH server","y":"resource ssh2_connect\n    ( string $host\n   [, int $port = 22\n   [, array $methods\n   [, array $callbacks\n  ]]] )","r":"Returns a resource on success, or FALSE on error.","p":[{"t":"host","d":""},{"t":"port","d":""},{"t":"methods","d":"methods may be an associative array with up to four parameters\n       as described below."},{"t":"callbacks","d":"callbacks may be an associative array with any\n       or all of the following parameters.\n       \n        \n         Callbacks parameters\n        \n        \n         \n          \n           Index\n           Meaning\n           Prototype\n          \n\n         \n\n         \n          \n           ignore\n           \n            Name of function to call when an\n            SSH2_MSG_IGNORE packet is received\n           \n           void ignore_cb($message)\n          \n\n          \n           debug\n           \n            Name of function to call when an\n            SSH2_MSG_DEBUG packet is received\n           \n           void debug_cb($message, $language, $always_display)\n          \n\n          \n           macerror\n           \n            Name of function to call when a packet is received but the\n            message authentication code failed.  If the callback returns\n            TRUE, the mismatch will be ignored, otherwise the connection\n            will be terminated.\n           \n           bool macerror_cb($packet)\n          \n\n          \n           disconnect\n           \n            Name of function to call when an\n            SSH2_MSG_DISCONNECT packet is received\n           \n           void disconnect_cb($reason, $message, $language)"}]},"ssh2_exec":{"s":"Execute a command on a remote server","y":"resource ssh2_exec\n    ( resource $session\n   , string $command\n   [, string $pty\n   [, array $env\n   [, int $width = 80\n   [, int $height = 25\n   [, int $width_height_type = SSH2_TERM_UNIT_CHARS\n  ]]]]] )","r":"Returns a stream on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"command","d":""},{"t":"pty","d":""},{"t":"env","d":"env may be passed as an associative array of\n       name\/value pairs to set in the target environment."},{"t":"width","d":"Width of the virtual terminal."},{"t":"height","d":"Height of the virtual terminal."},{"t":"width_height_type","d":"width_height_type should be one of\n       SSH2_TERM_UNIT_CHARS or\n       SSH2_TERM_UNIT_PIXELS."}]},"ssh2_fetch_stream":{"s":"Fetch an extended data stream","y":"resource ssh2_fetch_stream\n    ( resource $channel\n   , int $streamid\n   )","r":"Returns the requested stream resource.","p":[{"t":"channel","d":""},{"t":"streamid","d":"An SSH2 channel stream."}]},"ssh2_fingerprint":{"s":"Retrieve fingerprint of remote server","y":"string ssh2_fingerprint\n    ( resource $session\n   [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX\n  ] )","r":"Returns the hostkey hash as a string.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"flags","d":"flags may be either of\n       SSH2_FINGERPRINT_MD5 or\n       SSH2_FINGERPRINT_SHA1 logically ORed with\n       SSH2_FINGERPRINT_HEX or\n       SSH2_FINGERPRINT_RAW."}]},"ssh2_methods_negotiated":{"s":"Return list of negotiated methods","y":"array ssh2_methods_negotiated\n    ( resource $session\n   )","r":"","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."}]},"ssh2_publickey_add":{"s":"Add an authorized publickey","y":"bool ssh2_publickey_add\n    ( resource $pkey\n   , string $algoname\n   , string $blob\n   [, bool $overwrite = false\n   [, array $attributes\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pkey","d":"Publickey Subsystem resource created by ssh2_publickey_init()."},{"t":"algoname","d":"Publickey algorithm (e.g.): ssh-dss, ssh-rsa"},{"t":"blob","d":"Publickey blob as raw binary data"},{"t":"overwrite","d":"If the specified key already exists, should it be overwritten?"},{"t":"attributes","d":"Associative array of attributes to assign to this public key.\n       Refer to ietf-secsh-publickey-subsystem for a list of supported attributes.\n       To mark an attribute as mandatory, precede its name with an asterisk.\n       If the server is unable to support an attribute marked mandatory,\n       it will abort the add process."}]},"ssh2_publickey_list":{"s":"List currently authorized publickeys","y":"array ssh2_publickey_list\n    ( resource $pkey\n   )","r":"Returns a numerically indexed array of keys,\n   each of which is an associative array containing:\n   name, blob, and attrs elements.","p":[{"t":"pkey","d":"Publickey Subsystem resource"}]},"ssh2_publickey_remove":{"s":"Remove an authorized publickey","y":"bool ssh2_publickey_remove\n    ( resource $pkey\n   , string $algoname\n   , string $blob\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pkey","d":"Publickey Subsystem Resource"},{"t":"algoname","d":"Publickey algorithm (e.g.): ssh-dss, ssh-rsa"},{"t":"blob","d":"Publickey blob as raw binary data"}]},"ssh2_scp_recv":{"s":"Request a file via SCP","y":"bool ssh2_scp_recv\n    ( resource $session\n   , string $remote_file\n   , string $local_file\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"remote_file","d":"Path to the remote file."},{"t":"local_file","d":"Path to the local file."}]},"ssh2_scp_send":{"s":"Send a file via SCP","y":"bool ssh2_scp_send\n    ( resource $session\n   , string $local_file\n   , string $remote_file\n   [, int $create_mode = 0644\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"local_file","d":"Path to the local file."},{"t":"remote_file","d":"Path to the remote file."},{"t":"create_mode","d":"The file will be created with the mode specified by\n       create_mode."}]},"ssh2_sftp":{"s":"Initialize SFTP subsystem","y":"resource ssh2_sftp\n    ( resource $session\n   )","r":"This method returns an SSH2 SFTP resource for use with\n   all other ssh2_sftp_*() methods and the\n   ssh2.sftp:\/\/ fopen wrapper.","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."}]},"ssh2_sftp_chmod":{"s":"Changes file mode","y":"bool ssh2_sftp_chmod\n    ( resource $sftp\n   , string $filename\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"filename","d":"Path to the file."},{"t":"mode","d":"Permissions on the file. See the chmod() for more details on this parameter."}]},"ssh2_sftp_lstat":{"s":"Stat a symbolic link","y":"array ssh2_sftp_lstat\n    ( resource $sftp\n   , string $path\n   )","r":"See the documentation for stat() for details on the\n   values which may be returned.","p":[{"t":"sftp","d":""},{"t":"path","d":"Path to the remote symbolic link."}]},"ssh2_sftp_readlink":{"s":"Return the target of a symbolic link","y":"string ssh2_sftp_readlink\n    ( resource $sftp\n   , string $link\n   )","r":"Returns the target of the symbolic link.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"link","d":"Path of the symbolic link."}]},"ssh2_sftp_realpath":{"s":"Resolve the realpath of a provided path string","y":"string ssh2_sftp_realpath\n    ( resource $sftp\n   , string $filename\n   )","r":"Returns the real path as a string.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"filename","d":""}]},"ssh2_sftp_rename":{"s":"Rename a remote file","y":"bool ssh2_sftp_rename\n    ( resource $sftp\n   , string $from\n   , string $to\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"from","d":"The current file that is being renamed."},{"t":"to","d":"The new file name that replaces from."}]},"ssh2_sftp_rmdir":{"s":"Remove a directory","y":"bool ssh2_sftp_rmdir\n    ( resource $sftp\n   , string $dirname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"dirname","d":""}]},"ssh2_sftp_stat":{"s":"Stat a file on a remote filesystem","y":"array ssh2_sftp_stat\n    ( resource $sftp\n   , string $path\n   )","r":"See the documentation for stat() for details on the\n   values which may be returned.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"path","d":""}]},"ssh2_sftp_symlink":{"s":"Create a symlink","y":"bool ssh2_sftp_symlink\n    ( resource $sftp\n   , string $target\n   , string $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"target","d":"Target of the symbolic link."},{"t":"link","d":""}]},"ssh2_sftp_unlink":{"s":"Delete a file","y":"bool ssh2_sftp_unlink\n    ( resource $sftp\n   , string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"filename","d":""}]},"ssh2_shell":{"s":"Request an interactive shell","y":"resource ssh2_shell\n    ( resource $session\n   [, string $term_type = &quot;vanilla&quot;\n   [, array $env\n   [, int $width = 80\n   [, int $height = 25\n   [, int $width_height_type = SSH2_TERM_UNIT_CHARS\n  ]]]]] )","r":"","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"term_type","d":"term_type should correspond to one of the\n       entries in the target system&#039;s \/etc\/termcap file."},{"t":"env","d":"env may be passed as an associative array of\n       name\/value pairs to set in the target environment."},{"t":"width","d":"Width of the virtual terminal."},{"t":"height","d":"Height of the virtual terminal."},{"t":"width_height_type","d":"width_height_type should be one of\n       SSH2_TERM_UNIT_CHARS or\n       SSH2_TERM_UNIT_PIXELS."}]},"ssh2_tunnel":{"s":"Open a tunnel through a remote server","y":"resource ssh2_tunnel\n    ( resource $session\n   , string $host\n   , int $port\n   )","r":"","p":[{"t":"session","d":"An SSH connection link identifier, obtained from a call to\n       ssh2_connect()."},{"t":"host","d":""},{"t":"port","d":""}]},"stat":{"s":"Gives information about a file","y":"array stat\n    ( string $filename\n   )","r":"stat() and fstat() result\n     format\n    \n     \n      \n       Numeric\n       Associative (since PHP 4.0.6)\n       Description\n      \n\n     \n\n     \n      \n       0\n       dev\n       device number\n      \n\n      \n       1\n       ino\n       inode number *\n      \n\n      \n       2\n       mode\n       inode protection mode\n      \n\n      \n       3\n       nlink\n       number of links\n      \n\n      \n       4\n       uid\n       userid of owner *\n      \n\n      \n       5\n       gid\n       groupid of owner *\n      \n\n      \n       6\n       rdev\n       device type, if inode device\n      \n\n      \n       7\n       size\n       size in bytes\n      \n\n      \n       8\n       atime\n       time of last access (Unix timestamp)\n      \n\n      \n       9\n       mtime\n       time of last modification (Unix timestamp)\n      \n\n      \n       10\n       ctime\n       time of last inode change (Unix timestamp)\n      \n\n      \n       11\n       blksize\n       blocksize of filesystem IO **\n      \n\n      \n       12\n       blocks\n       number of 512-byte blocks allocated **\n      \n\n     \n    \n   \n\n   * On Windows this will always be 0.","p":[{"t":"filename","d":"Path to the file."}]},"stats_absolute_deviation":{"s":"Returns the absolute deviation of an array of values","y":"float stats_absolute_deviation\n    ( array $a\n   )","r":"","p":[{"t":"a","d":""}]},"stats_cdf_beta":{"s":"CDF function for BETA Distribution. Calculates any one parameter of the beta distribution given values for the others.","y":"float stats_cdf_beta\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"STATUS  -- 0 if calculation completed correctly\n               -I if input parameter number I is out of range\n                1 if answer appears to be lower than lowest\n                  search bound\n                2 if answer appears to be higher than greatest\n                  search bound\n                3 if P + Q .ne. 1\n                4 if X + Y .ne. 1","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":"Integer indicating which of the next four argument\n               values is to be calculated from the others.\n               Legal range: 1..4\n               which = 1 : Calculate P and Q from X,Y,A and B\n               which = 2 : Calculate X and Y from P,Q,A and B\n               which = 3 : Calculate A from P,Q,X,Y and B\n               which = 4 : Calculate B from P,Q,X,Y and A"}]},"stats_cdf_binomial":{"s":"Calculates any one parameter of the binomial distribution given values for the others.","y":"float stats_cdf_binomial\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_cauchy":{"s":"Not documented","y":"float stats_cdf_cauchy\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_chisquare":{"s":"Calculates any one parameter of the chi-square distribution given values for the others.","y":"float stats_cdf_chisquare\n    ( float $par1\n   , float $par2\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"which","d":""}]},"stats_cdf_exponential":{"s":"Not documented","y":"float stats_cdf_exponential\n    ( float $par1\n   , float $par2\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"which","d":""}]},"stats_cdf_f":{"s":"Calculates any one parameter of the F distribution given values for the others.","y":"float stats_cdf_f\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_gamma":{"s":"Calculates any one parameter of the gamma distribution given values for the others.","y":"float stats_cdf_gamma\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_laplace":{"s":"Not documented","y":"float stats_cdf_laplace\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_logistic":{"s":"Not documented","y":"float stats_cdf_logistic\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_negative_binomial":{"s":"Calculates any one parameter of the negative binomial distribution given values for the others.","y":"float stats_cdf_negative_binomial\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_noncentral_chisquare":{"s":"Calculates any one parameter of the non-central chi-square distribution given values for the others.","y":"float stats_cdf_noncentral_chisquare\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_noncentral_f":{"s":"Calculates any one parameter of the Non-central F distribution given values for the others.","y":"float stats_cdf_noncentral_f\n    ( float $par1\n   , float $par2\n   , float $par3\n   , float $par4\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"par4","d":""},{"t":"which","d":""}]},"stats_cdf_poisson":{"s":"Calculates any one parameter of the Poisson distribution given values for the others.","y":"float stats_cdf_poisson\n    ( float $par1\n   , float $par2\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"which","d":""}]},"stats_cdf_t":{"s":"Calculates any one parameter of the T distribution given values for the others.","y":"float stats_cdf_t\n    ( float $par1\n   , float $par2\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"which","d":""}]},"stats_cdf_uniform":{"s":"Not documented","y":"float stats_cdf_uniform\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_cdf_weibull":{"s":"Not documented","y":"float stats_cdf_weibull\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_covariance":{"s":"Computes the covariance of two data sets","y":"float stats_covariance\n    ( array $a\n   , array $b\n   )","r":"","p":[{"t":"a","d":""},{"t":"b","d":""}]},"stats_dens_beta":{"s":"Not documented","y":"float stats_dens_beta\n    ( float $x\n   , float $a\n   , float $b\n   )","r":"","p":[{"t":"x","d":""},{"t":"a","d":""},{"t":"b","d":""}]},"stats_dens_cauchy":{"s":"Not documented","y":"float stats_dens_cauchy\n    ( float $x\n   , float $ave\n   , float $stdev\n   )","r":"","p":[{"t":"x","d":""},{"t":"ave","d":""},{"t":"stdev","d":""}]},"stats_dens_chisquare":{"s":"Not documented","y":"float stats_dens_chisquare\n    ( float $x\n   , float $dfr\n   )","r":"","p":[{"t":"x","d":""},{"t":"dfr","d":""}]},"stats_dens_exponential":{"s":"Not documented","y":"float stats_dens_exponential\n    ( float $x\n   , float $scale\n   )","r":"","p":[{"t":"x","d":""},{"t":"scale","d":""}]},"stats_dens_f":{"s":"","y":"\n   float stats_dens_f\n    ( float $x\n   , float $dfr1\n   , float $dfr2\n   )","p":[{"t":"x","d":""},{"t":"dfr1","d":""},{"t":"dfr2","d":""}]},"stats_dens_gamma":{"s":"Not documented","y":"float stats_dens_gamma\n    ( float $x\n   , float $shape\n   , float $scale\n   )","r":"","p":[{"t":"x","d":""},{"t":"shape","d":""},{"t":"scale","d":""}]},"stats_dens_laplace":{"s":"Not documented","y":"float stats_dens_laplace\n    ( float $x\n   , float $ave\n   , float $stdev\n   )","r":"","p":[{"t":"x","d":""},{"t":"ave","d":""},{"t":"stdev","d":""}]},"stats_dens_logistic":{"s":"Not documented","y":"float stats_dens_logistic\n    ( float $x\n   , float $ave\n   , float $stdev\n   )","r":"","p":[{"t":"x","d":""},{"t":"ave","d":""},{"t":"stdev","d":""}]},"stats_dens_negative_binomial":{"s":"Not documented","y":"float stats_dens_negative_binomial\n    ( float $x\n   , float $n\n   , float $pi\n   )","r":"","p":[{"t":"x","d":""},{"t":"n","d":""},{"t":"pi","d":""}]},"stats_dens_normal":{"s":"Not documented","y":"float stats_dens_normal\n    ( float $x\n   , float $ave\n   , float $stdev\n   )","r":"","p":[{"t":"x","d":""},{"t":"ave","d":""},{"t":"stdev","d":""}]},"stats_dens_pmf_binomial":{"s":"Not documented","y":"float stats_dens_pmf_binomial\n    ( float $x\n   , float $n\n   , float $pi\n   )","r":"","p":[{"t":"x","d":""},{"t":"n","d":""},{"t":"pi","d":""}]},"stats_dens_pmf_hypergeometric":{"s":"","y":"\n   float stats_dens_pmf_hypergeometric\n    ( float $n1\n   , float $n2\n   , float $N1\n   , float $N2\n   )","p":[{"t":"n1","d":""},{"t":"n2","d":""},{"t":"N1","d":""},{"t":"N2","d":""}]},"stats_dens_pmf_poisson":{"s":"Not documented","y":"float stats_dens_pmf_poisson\n    ( float $x\n   , float $lb\n   )","r":"","p":[{"t":"x","d":""},{"t":"lb","d":""}]},"stats_dens_t":{"s":"Not documented","y":"float stats_dens_t\n    ( float $x\n   , float $dfr\n   )","r":"","p":[{"t":"x","d":""},{"t":"dfr","d":""}]},"stats_dens_weibull":{"s":"Not documented","y":"float stats_dens_weibull\n    ( float $x\n   , float $a\n   , float $b\n   )","r":"","p":[{"t":"x","d":""},{"t":"a","d":""},{"t":"b","d":""}]},"stats_den_uniform":{"s":"Not documented","y":"float stats_den_uniform\n    ( float $x\n   , float $a\n   , float $b\n   )","r":"","p":[{"t":"x","d":""},{"t":"a","d":""},{"t":"b","d":""}]},"stats_harmonic_mean":{"s":"Returns the harmonic mean of an array of values","y":"number stats_harmonic_mean\n    ( array $a\n   )","r":"","p":[{"t":"a","d":""}]},"stats_kurtosis":{"s":"Computes the kurtosis of the data in the array","y":"float stats_kurtosis\n    ( array $a\n   )","r":"","p":[{"t":"a","d":""}]},"stats_rand_gen_beta":{"s":"Generates beta random deviate","y":"float stats_rand_gen_beta\n    ( float $a\n   , float $b\n   )","r":"","p":[{"t":"a","d":""},{"t":"b","d":""}]},"stats_rand_gen_chisquare":{"s":"Generates random deviate from the distribution of a chisquare with &quot;df&quot; degrees of freedom random variable.","y":"float stats_rand_gen_chisquare\n    ( float $df\n   )","r":"","p":[{"t":"df","d":""}]},"stats_rand_gen_exponential":{"s":"Generates a single random deviate from an exponential distribution with mean &quot;av&quot;","y":"float stats_rand_gen_exponential\n    ( float $av\n   )","r":"","p":[{"t":"av","d":""}]},"stats_rand_gen_f":{"s":"Generates a random deviate","y":"float stats_rand_gen_f\n    ( float $dfn\n   , float $dfd\n   )","r":"","p":[{"t":"dfn","d":""},{"t":"dfd","d":""}]},"stats_rand_gen_funiform":{"s":"Generates uniform float between low (exclusive) and high (exclusive)","y":"float stats_rand_gen_funiform\n    ( float $low\n   , float $high\n   )","r":"","p":[{"t":"low","d":""},{"t":"high","d":""}]},"stats_rand_gen_gamma":{"s":"Generates random deviates from a gamma distribution","y":"float stats_rand_gen_gamma\n    ( float $a\n   , float $r\n   )","r":"","p":[{"t":"a","d":"location parameter of Gamma distribution (a\n       &gt; 0)."},{"t":"r","d":"shape parameter of Gamma distribution (r &gt;\n       0)."}]},"stats_rand_gen_ibinomial":{"s":"Generates a single random deviate from a binomial distribution whose number of trials is &quot;n&quot; (n &gt;= 0) and whose probability of an event in each trial is &quot;pp&quot; ([0;1]). Method : algorithm BTPE","y":"int stats_rand_gen_ibinomial\n    ( int $n\n   , float $pp\n   )","r":"","p":[{"t":"n","d":""},{"t":"pp","d":""}]},"stats_rand_gen_ibinomial_negative":{"s":"Generates a single random deviate from a negative binomial distribution. Arguments : n - the number of trials in the negative binomial distribution from which a random deviate is to be generated (n &gt; 0), p - the probability of an event (0 &lt; p &lt; 1)).","y":"int stats_rand_gen_ibinomial_negative\n    ( int $n\n   , float $p\n   )","r":"","p":[{"t":"n","d":""},{"t":"p","d":""}]},"stats_rand_gen_int":{"s":"Generates random integer between 1 and 2147483562","y":"int stats_rand_gen_int\n    ( void\n   )","r":"","p":null},"stats_rand_gen_ipoisson":{"s":"Generates a single random deviate from a Poisson distribution with mean &quot;mu&quot; (mu &gt;= 0.0).","y":"int stats_rand_gen_ipoisson\n    ( float $mu\n   )","r":"","p":[{"t":"mu","d":""}]},"stats_rand_gen_iuniform":{"s":"Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)","y":"int stats_rand_gen_iuniform\n    ( int $low\n   , int $high\n   )","r":"","p":[{"t":"low","d":""},{"t":"high","d":""}]},"stats_rand_gen_noncenral_chisquare":{"s":"Generates random deviate from the distribution of a noncentral chisquare with &quot;df&quot; degrees of freedom and noncentrality parameter &quot;xnonc&quot;. d must be &gt;= 1.0, xnonc must &gt;= 0.0","y":"float stats_rand_gen_noncenral_chisquare\n    ( float $df\n   , float $xnonc\n   )","r":"","p":[{"t":"df","d":""},{"t":"xnonc","d":""}]},"stats_rand_gen_noncentral_f":{"s":"Generates a random deviate from the noncentral F (variance ratio) distribution with &quot;dfn&quot; degrees of freedom in the numerator, and &quot;dfd&quot; degrees of freedom in the denominator, and noncentrality parameter &quot;xnonc&quot;. Method : directly generates ratio of noncentral numerator chisquare variate to central denominator chisquare variate.","y":"float stats_rand_gen_noncentral_f\n    ( float $dfn\n   , float $dfd\n   , float $xnonc\n   )","r":"","p":[{"t":"dfn","d":""},{"t":"dfd","d":""},{"t":"xnonc","d":""}]},"stats_rand_gen_noncentral_t":{"s":"Generates a single random deviate from a noncentral T distribution","y":"float stats_rand_gen_noncentral_t\n    ( float $df\n   , float $xnonc\n   )","r":"","p":[{"t":"df","d":""},{"t":"xnonc","d":""}]},"stats_rand_gen_normal":{"s":"Generates a single random deviate from a normal distribution with mean, av, and standard deviation, sd (sd &gt;= 0). Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF.","y":"float stats_rand_gen_normal\n    ( float $av\n   , float $sd\n   )","r":"","p":[{"t":"av","d":""},{"t":"sd","d":""}]},"stats_rand_gen_t":{"s":"Generates a single random deviate from a T distribution","y":"float stats_rand_gen_t\n    ( float $df\n   )","r":"","p":[{"t":"df","d":""}]},"stats_rand_phrase_to_seeds":{"s":"generate two seeds for the RGN random number generator","y":"array stats_rand_phrase_to_seeds\n    ( string $phrase\n   )","r":"","p":[{"t":"phrase","d":""}]},"stats_rand_setall":{"s":"Not documented","y":"void stats_rand_setall\n    ( int $iseed1\n   , int $iseed2\n   )","r":"","p":[{"t":"iseed1","d":""},{"t":"iseed2","d":""}]},"stats_skew":{"s":"Computes the skewness of the data in the array","y":"float stats_skew\n    ( array $a\n   )","r":"","p":[{"t":"a","d":""}]},"stats_standard_deviation":{"s":"Returns the standard deviation","y":"float stats_standard_deviation\n    ( array $a\n   [, bool $sample = false\n  ] )","r":"Returns the standard deviation on success; FALSE on failure.","p":[{"t":"a","d":"The array of data to find the standard deviation for. Note that all \n       values of the array will be cast to float."},{"t":"sample","d":"Indicates if a represents a sample of the \n       population; defaults to FALSE."}]},"stats_stat_binomial_coef":{"s":"Not documented","y":"float stats_stat_binomial_coef\n    ( int $x\n   , int $n\n   )","r":"","p":[{"t":"x","d":""},{"t":"n","d":""}]},"stats_stat_correlation":{"s":"Not documented","y":"float stats_stat_correlation\n    ( array $arr1\n   , array $arr2\n   )","r":"","p":[{"t":"arr1","d":""},{"t":"arr2","d":""}]},"stats_stat_gennch":{"s":"Not documented","y":"float stats_stat_gennch\n    ( int $n\n   )","r":"","p":[{"t":"n","d":""}]},"stats_stat_independent_t":{"s":"Not documented","y":"float stats_stat_independent_t\n    ( array $arr1\n   , array $arr2\n   )","r":"","p":[{"t":"arr1","d":""},{"t":"arr2","d":""}]},"stats_stat_innerproduct":{"s":"","y":"\n   float stats_stat_innerproduct\n    ( array $arr1\n   , array $arr2\n   )","p":[{"t":"arr1","d":""},{"t":"arr2","d":""}]},"stats_stat_noncentral_t":{"s":"Calculates any one parameter of the noncentral t distribution give values for the others.","y":"float stats_stat_noncentral_t\n    ( float $par1\n   , float $par2\n   , float $par3\n   , int $which\n   )","r":"","p":[{"t":"par1","d":""},{"t":"par2","d":""},{"t":"par3","d":""},{"t":"which","d":""}]},"stats_stat_paired_t":{"s":"Not documented","y":"float stats_stat_paired_t\n    ( array $arr1\n   , array $arr2\n   )","r":"","p":[{"t":"arr1","d":""},{"t":"arr2","d":""}]},"stats_stat_percentile":{"s":"Not documented","y":"float stats_stat_percentile\n    ( float $df\n   , float $xnonc\n   )","r":"","p":[{"t":"df","d":""},{"t":"xnonc","d":""}]},"stats_stat_powersum":{"s":"Not documented","y":"float stats_stat_powersum\n    ( array $arr\n   , float $power\n   )","r":"","p":[{"t":"arr","d":""},{"t":"power","d":""}]},"stats_variance":{"s":"Returns the population variance","y":"float stats_variance\n    ( array $a\n   [, bool $sample = false\n  ] )","r":"","p":[{"t":"a","d":""},{"t":"sample","d":""}]},"stomp_connect_error":{"s":"Returns a string description of the last connect error","y":"string stomp_connect_error\n    ( void\n   )","r":"A string that describes the error, or NULL if no error occurred. ","p":null},"stomp_version":{"s":"Gets the current stomp extension version","y":"string stomp_version\n    ( void\n   )","r":"It returns the current stomp extension version","p":null},"strcasecmp":{"s":"Binary safe case-insensitive string comparison","y":"int strcasecmp\n    ( string $str1\n   , string $str2\n   )","r":"Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.","p":[{"t":"str1","d":"The first string"},{"t":"str2","d":"The second string"}]},"strchr":{"s":"Alias of strstr()","y":"","r":"","p":null},"strcmp":{"s":"Binary safe string comparison","y":"int strcmp\n    ( string $str1\n   , string $str2\n   )","r":"Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."}]},"strcoll":{"s":"Locale based string comparison","y":"int strcoll\n    ( string $str1\n   , string $str2\n   )","r":"Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if\n   str1 is greater than\n   str2, and 0 if they are equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."}]},"strcspn":{"s":"Find length of initial segment not matching mask","y":"int strcspn\n    ( string $str1\n   , string $str2\n   [, int $start\n   [, int $length\n  ]] )","r":"Returns the length of the segment as an integer.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."},{"t":"start","d":"The start position of the string to examine."},{"t":"length","d":"The length of the string to examine."}]},"stream_bucket_prepend":{"s":"Prepend bucket to brigade","y":"void stream_bucket_prepend\n    ( resource $brigade\n   , resource $bucket\n   )","r":"No value is returned.","p":[{"t":"brigade","d":"brigade is a resource pointing to a bucket brigade\n      which contains one or more bucket objects."},{"t":"bucket","d":"A bucket object."}]},"stream_context_create":{"s":"Creates a stream context","y":"resource stream_context_create\n    ([ array $options\n   [, array $params\n  ]] )","r":"A stream context resource.","p":[{"t":"options","d":"Must be an associative array of associative arrays in the format\n       $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value."},{"t":"params","d":"Must be an associative array in the format\n       $arr[&#039;parameter&#039;] = $value.\n       Refer to context parameters for\n       a listing of standard stream parameters."}]},"stream_context_get_default":{"s":"Retrieve the default stream context","y":"resource stream_context_get_default\n    ([ array $options\n  ] )","r":"A stream context resource.","p":[{"t":"options","d":""}]},"stream_context_get_params":{"s":"Retrieves parameters from a context","y":"array stream_context_get_params\n    ( resource $stream_or_context\n   )","r":"Returns an associate array containing all context options and parameters.","p":[{"t":"stream_or_context","d":"A stream resource or a\n       context resource"}]},"stream_context_set_params":{"s":"Set parameters for a stream\/wrapper\/context","y":"bool stream_context_set_params\n    ( resource $stream_or_context\n   , array $params\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream_or_context","d":"The stream or context to apply the parameters too."},{"t":"params","d":"An array of parameters to set."}]},"stream_copy_to_stream":{"s":"Copies data from one stream to another","y":"int stream_copy_to_stream\n    ( resource $source\n   , resource $dest\n   [, int $maxlength = -1\n   [, int $offset = 0\n  ]] )","r":"Returns the total count of bytes copied.","p":[{"t":"source","d":"The source stream"},{"t":"dest","d":"The destination stream"},{"t":"maxlength","d":"Maximum bytes to copy"},{"t":"offset","d":"The offset where to start to copy data"}]},"stream_encoding":{"s":"Set character set for stream encoding","y":"bool stream_encoding\n    ( resource $stream\n   [, string $encoding\n  ] )","r":"","p":null},"stream_filter_append":{"s":"Attach a filter to a stream","y":"resource stream_filter_append\n    ( resource $stream\n   , string $filtername\n   [, int $read_write\n   [, mixed $params\n  ]] )","r":"Returns a resource which can be used to refer to this filter\n   instance during a call to stream_filter_remove().","p":[{"t":"stream","d":"The target stream."},{"t":"filtername","d":"The filter name."},{"t":"read_write","d":"By default, stream_filter_append() will\n       attach the filter to the read filter chain\n       if the file was opened for reading (i.e. File Mode:\n       r, and\/or +).  The filter\n       will also be attached to the write filter chain\n       if the file was opened for writing (i.e. File Mode:\n       w, a, and\/or +).\n       STREAM_FILTER_READ,\n       STREAM_FILTER_WRITE, and\/or\n       STREAM_FILTER_ALL can also be passed to the\n       read_write parameter to override this behavior."},{"t":"params","d":"This filter will be added with the specified \n       params to the end of\n       the list and will therefore be called last during stream operations.\n       To add a filter to the beginning of the list, use\n       stream_filter_prepend()."}]},"stream_filter_prepend":{"s":"Attach a filter to a stream","y":"resource stream_filter_prepend\n    ( resource $stream\n   , string $filtername\n   [, int $read_write\n   [, mixed $params\n  ]] )","r":"Returns a resource which can be used to refer to this filter\n   instance during a call to stream_filter_remove().","p":[{"t":"stream","d":"The target stream."},{"t":"filtername","d":"The filter name."},{"t":"read_write","d":"By default, stream_filter_prepend() will\n       attach the filter to the read filter chain\n       if the file was opened for reading (i.e. File Mode:\n       r, and\/or +).  The filter\n       will also be attached to the write filter chain\n       if the file was opened for writing (i.e. File Mode:\n       w, a, and\/or +).\n       STREAM_FILTER_READ,\n       STREAM_FILTER_WRITE, and\/or\n       STREAM_FILTER_ALL can also be passed to the\n       read_write parameter to override this behavior.\n       See stream_filter_append() for an example of\n       using this parameter."},{"t":"params","d":"This filter will be added with the specified params\n       to the beginning of the list and will therefore be\n       called first during stream operations.  To add a filter to the end of the\n       list, use stream_filter_append()."}]},"stream_filter_register":{"s":"Register a user defined stream filter","y":"bool stream_filter_register\n    ( string $filtername\n   , string $classname\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filtername","d":"The filter name to be registered."},{"t":"classname","d":"To implement a filter, you need to define a class as an extension of\n       php_user_filter with a number of member\n       functions. When performing read\/write operations on the stream\n       to which your filter is attached, PHP will pass the data through your\n       filter (and any other filters attached to that stream) so that the\n       data may be modified as desired. You must implement the methods\n       exactly as described in php_user_filter - doing\n       otherwise will lead to undefined behaviour."}]},"stream_filter_remove":{"s":"Remove a filter from a stream","y":"bool stream_filter_remove\n    ( resource $stream_filter\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream_filter","d":"The stream filter to be removed."}]},"stream_get_contents":{"s":"Reads remainder of a stream into a string","y":"string stream_get_contents\n    ( resource $handle\n   [, int $maxlength = -1\n   [, int $offset = -1\n  ]] )","r":"Returns a string or FALSE on failure.","p":[{"t":"handle","d":"A stream resource (e.g. returned from fopen())"},{"t":"maxlength","d":"The maximum bytes to read. Defaults to -1 (read all the remaining\n       buffer)."},{"t":"offset","d":"Seek to the specified offset before reading. If this number is negative,\n       no seeking will occur and reading will start from the current position."}]},"stream_get_filters":{"s":"Retrieve list of registered filters","y":"array stream_get_filters\n    ( void\n   )","r":"Returns an indexed array containing the name of all stream filters\n   available.","p":null},"stream_get_line":{"s":"Gets line from stream resource up to a given delimiter","y":"string stream_get_line\n    ( resource $handle\n   , int $length\n   [, string $ending\n  ] )","r":"Returns a string of up to length bytes read from the file\n   pointed to by handle.","p":[{"t":"handle","d":"A valid file handle."},{"t":"length","d":"The number of bytes to read from the handle."},{"t":"ending","d":"An optional string delimiter."}]},"stream_get_meta_data":{"s":"Retrieves header\/meta data from streams\/file pointers","y":"array stream_get_meta_data\n    ( resource $stream\n   )","r":"The result array contains the following items:","p":[{"t":"stream","d":"The stream can be any stream created by fopen(),\n       fsockopen() and pfsockopen()."}]},"stream_get_transports":{"s":"Retrieve list of registered socket transports","y":"array stream_get_transports\n    ( void\n   )","r":"Returns an indexed array of socket transports names.","p":null},"stream_get_wrappers":{"s":"Retrieve list of registered streams","y":"array stream_get_wrappers\n    ( void\n   )","r":"Returns an indexed array containing the name of all stream wrappers\n   available on the running system.","p":null},"stream_is_local":{"s":"Checks if a stream is a local stream","y":"bool stream_is_local\n    ( mixed $stream_or_url\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream_or_url","d":"The stream resource or URL to check."}]},"stream_notification_callback":{"s":"A callback function for the notification context paramater","y":"void stream_notification_callback\n    ( int $notification_code\n   , int $severity\n   , string $message\n   , int $message_code\n   , int $bytes_transferred\n   , int $bytes_max\n   )","r":"No value is returned.","p":[{"t":"notification_code","d":"One of the STREAM_NOTIFY_* notification constants."},{"t":"severity","d":"One of the STREAM_NOTIFY_SEVERITY_* notification constants."},{"t":"message","d":"Passed if a descriptive message is available for the event."},{"t":"message_code","d":"Passed if a descriptive message code is available for the event."},{"t":"bytes_transferred","d":"If applicable, the bytes_transferred will be\n       populated."},{"t":"bytes_max","d":"If applicable, the bytes_max will be\n       populated."}]},"stream_register_wrapper":{"s":"Alias of stream_wrapper_register()","y":"","r":"","p":null},"stream_resolve_include_path":{"s":"Resolve filename against the include path","y":"string stream_resolve_include_path\n    ( string $filename\n   \n   )","r":"Returns a string containing the resolved absolute filename,  or FALSE on failure.","p":[{"t":"filename","d":"The filename to resolve."}]},"stream_set_blocking":{"s":"Set blocking\/non-blocking mode on a stream","y":"bool stream_set_blocking\n    ( resource $stream\n   , int $mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream","d":"The stream."},{"t":"mode","d":"If mode is 0, the given stream\n       will be switched to non-blocking mode, and if 1, it\n       will be switched to blocking mode.  This affects calls like\n       fgets() and fread()\n       that read from the stream.  In non-blocking mode an\n       fgets() call will always return right away\n       while in blocking mode it will wait for data to become available\n       on the stream."}]},"stream_set_chunk_size":{"s":"Set the stream chunk size","y":"int stream_set_chunk_size\n    ( resource $fp\n   , int $chunk_size\n   )","r":"Returns the previous chunk size on success.","p":[{"t":"fp","d":"The target stream."},{"t":"chunk_size","d":"The desired new chunk size."}]},"stream_set_read_buffer":{"s":"Set read file buffering on the given stream","y":"int stream_set_read_buffer\n    ( resource $stream\n   , int $buffer\n   )","r":"Returns 0 on success, or EOF if the request\n   cannot be honored.","p":[{"t":"stream","d":"The file pointer."},{"t":"buffer","d":"The number of bytes to buffer. If buffer\n      is 0 then read operations are unbuffered.  This ensures that all reads\n      with fread() are completed before other processes are\n      allowed to read from that input stream."}]},"stream_set_timeout":{"s":"Set timeout period on a stream","y":"bool stream_set_timeout\n    ( resource $stream\n   , int $seconds\n   [, int $microseconds = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream","d":"The target stream."},{"t":"seconds","d":"The seconds part of the timeout to be set."},{"t":"microseconds","d":"The microseconds part of the timeout to be set."}]},"stream_set_write_buffer":{"s":"Sets write file buffering on the given stream","y":"int stream_set_write_buffer\n    ( resource $stream\n   , int $buffer\n   )","r":"Returns 0 on success, or EOF if the request cannot be honored.","p":[{"t":"stream","d":"The file pointer."},{"t":"buffer","d":"The number of bytes to buffer. If buffer\n       is 0 then write operations are unbuffered.  This ensures that all writes\n       with fwrite() are completed before other processes are\n       allowed to write to that output stream."}]},"stream_socket_accept":{"s":"Accept a connection on a socket created by stream_socket_server()","y":"resource stream_socket_accept\n    ( resource $server_socket\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n   [, string &$peername\n  ]] )","r":"Returns a stream to the accepted socket connection or FALSE on failure.","p":[{"t":"server_socket","d":"The server socket to accept a connection from."},{"t":"timeout","d":"Override the default socket accept timeout. Time should be given in\n       seconds."},{"t":"peername","d":"Will be set to the name (address) of the client which connected, if\n       included and available from the selected transport."}]},"stream_socket_get_name":{"s":"Retrieve the name of the local or remote sockets","y":"string stream_socket_get_name\n    ( resource $handle\n   , bool $want_peer\n   )","r":"The name of the socket.","p":[{"t":"handle","d":"The socket to get the name of."},{"t":"want_peer","d":"If set to TRUE the remote socket name will be returned, if set\n       to FALSE the local socket name will be returned."}]},"stream_socket_pair":{"s":"Creates a pair of connected, indistinguishable socket streams","y":"array stream_socket_pair\n    ( int $domain\n   , int $type\n   , int $protocol\n   )","r":"Returns an array with the two socket resources on success, or\n   FALSE on failure.","p":[{"t":"domain","d":"The protocol family to be used: STREAM_PF_INET,\n       STREAM_PF_INET6 or\n       STREAM_PF_UNIX"},{"t":"type","d":"The type of communication to be used:\n       STREAM_SOCK_DGRAM,\n       STREAM_SOCK_RAW,\n       STREAM_SOCK_RDM,\n       STREAM_SOCK_SEQPACKET or\n       STREAM_SOCK_STREAM"},{"t":"protocol","d":"The protocol to be used: STREAM_IPPROTO_ICMP,\n       STREAM_IPPROTO_IP,\n       STREAM_IPPROTO_RAW,\n       STREAM_IPPROTO_TCP or\n       STREAM_IPPROTO_UDP"}]},"stream_socket_sendto":{"s":"Sends a message to a socket, whether it is connected or not ","y":"int stream_socket_sendto\n    ( resource $socket\n   , string $data\n   [, int $flags = 0\n   [, string $address\n  ]] )","r":"Returns a result code, as an integer.","p":[{"t":"socket","d":"The socket to send data to."},{"t":"data","d":"The data to be sent."},{"t":"flags","d":"The value of flags can be any combination\n       of the following:\n       \n        possible values for flags\n        \n         \n          \n           STREAM_OOB\n           \n            Process OOB (out-of-band) data."},{"t":"address","d":"The address specified when the socket stream was created will be used\n       unless an alternate address is specified in address."}]},"stream_socket_server":{"s":"Create an Internet or Unix domain server socket","y":"resource stream_socket_server\n    ( string $local_socket\n   [, int &$errno\n   [, string &$errstr\n   [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN\n   [, resource $context\n  ]]]] )","r":"Returns the created stream, or FALSE on error.","p":[{"t":"local_socket","d":"The type of socket created is determined by the transport specified\n       using standard URL formatting: transport:\/\/target."},{"t":"errno","d":"If the optional errno and errstr\n       arguments are present they will be set to indicate the actual system\n       level error that occurred in the system-level socket(),\n       bind(), and listen() calls. If\n       the value returned in errno is \n       0 and the function returned FALSE, it is an\n       indication that the error occurred before the bind()\n       call. This is most likely due to a problem initializing the socket. \n       Note that the errno and\n       errstr arguments will always be passed by reference."},{"t":"errstr","d":"See errno description."},{"t":"flags","d":"A bitmask field which may be set to any combination of socket creation\n       flags."},{"t":"context","d":""}]},"stream_socket_shutdown":{"s":"Shutdown a full-duplex connection","y":"bool stream_socket_shutdown\n    ( resource $stream\n   , int $how\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream","d":"An open stream (opened with stream_socket_client(),\n       for example)"},{"t":"how","d":"One of the following constants: STREAM_SHUT_RD\n       (disable further receptions), STREAM_SHUT_WR\n       (disable further transmissions) or\n       STREAM_SHUT_RDWR (disable further receptions and\n       transmissions)."}]},"stream_supports_lock":{"s":"Tells whether the stream supports locking.","y":"bool stream_supports_lock\n    ( resource $stream\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream","d":"The stream to check."}]},"stream_wrapper_register":{"s":"Register a URL wrapper implemented as a PHP class","y":"bool stream_wrapper_register\n    ( string $protocol\n   , string $classname\n   [, int $flags  = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"protocol","d":"The wrapper name to be registered."},{"t":"classname","d":"The classname which implements the protocol."},{"t":"flags","d":"Should be set to STREAM_IS_URL if\n       protocol is a URL protocol. Default is 0, local\n       stream."}]},"stream_wrapper_restore":{"s":"Restores a previously unregistered built-in wrapper","y":"bool stream_wrapper_restore\n    ( string $protocol\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"protocol","d":""}]},"stream_wrapper_unregister":{"s":"Unregister a URL wrapper","y":"bool stream_wrapper_unregister\n    ( string $protocol\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"protocol","d":""}]},"strftime":{"s":"Format a local time\/date according to locale settings","y":"string strftime\n    ( string $format\n   [, int $timestamp = time()\n  ] )","r":"Returns a string formatted according format\n   using the given timestamp or the current\n   local time if no timestamp is given.  Month and weekday names and\n   other language-dependent strings respect the current locale set\n   with setlocale().","p":[{"t":"format","d":"The following characters are recognized in the\n        format parameter string\n        \n         \n          \n           format\n           Description\n           Example returned values\n          \n\n         \n\n         \n          \n           Day\n           ---\n           ---\n          \n\n          \n           %a\n           An abbreviated textual representation of the day\n           Sun through Sat\n          \n\n          \n           %A\n           A full textual representation of the day\n           Sunday through Saturday\n          \n\n          \n           %d\n           Two-digit day of the month (with leading zeros)\n           01 to 31\n          \n\n          \n           %e\n           \n            Day of the month, with a space preceding single digits. Not \n            implemented as described on Windows. See below for more information.\n           \n            1 to 31\n          \n\n          \n           %j\n           Day of the year, 3 digits with leading zeros\n           001 to 366\n          \n\n          \n           %u\n           ISO-8601 numeric representation of the day of the week\n           1 (for Monday) though 7 (for Sunday)\n          \n\n          \n           %w\n           Numeric representation of the day of the week\n           0 (for Sunday) through 6 (for Saturday)\n          \n\n          \n           Week\n           ---\n           ---\n          \n\n          \n           %U\n           Week number of the given year, starting with the first\n           Sunday as the first week\n           13 (for the 13th full week of the year)\n          \n\n          \n           %V\n           ISO-8601:1988 week number of the given year, starting with\n           the first week of the year with at least 4 weekdays, with Monday\n           being the start of the week\n           01 through 53 (where 53\n           accounts for an overlapping week)\n          \n\n          \n           %W\n           A numeric representation of the week of the year, starting\n           with the first Monday as the first week\n           46 (for the 46th week of the year beginning\n           with a Monday)\n          \n\n          \n           Month\n           ---\n           ---\n          \n\n          \n           %b\n           Abbreviated month name, based on the locale\n           Jan through Dec\n          \n\n          \n           %B\n           Full month name, based on the locale\n           January through December\n          \n\n          \n           %h\n           Abbreviated month name, based on the locale (an alias of %b)\n           Jan through Dec\n          \n\n          \n           %m\n           Two digit representation of the month\n           01 (for January) through 12 (for December)\n          \n\n          \n           Year\n           ---\n           ---\n          \n\n          \n           %C\n           Two digit representation of the century (year divided by 100, truncated to an integer)\n           19 for the 20th Century\n          \n\n          \n           %g\n           Two digit representation of the year going by ISO-8601:1988 standards (see %V)\n           Example: 09 for the week of January 6, 2009\n          \n\n          \n           %G\n           The full four-digit version of %g\n           Example: 2008 for the week of January 3, 2009\n          \n\n          \n           %y\n           Two digit representation of the year\n           Example: 09 for 2009, 79 for 1979\n          \n\n          \n           %Y\n           Four digit representation for the year\n           Example: 2038\n          \n\n          \n           Time\n           ---\n           ---\n          \n\n          \n           %H\n           Two digit representation of the hour in 24-hour format\n           00 through 23\n          \n\n          \n           %k\n           Two digit representation of the hour in 24-hour format, with\n           a space preceding single digits\n            0 through 23\n          \n\n          \n           %I\n           Two digit representation of the hour in 12-hour format\n           01 through 12\n          \n\n          \n           %l (lower-case &#039;L&#039;)\n           Hour in 12-hour format, with a space preceding single digits\n            1 through 12\n          \n\n          \n           %M\n           Two digit representation of the minute\n           00 through 59\n          \n\n          \n           %p\n           UPPER-CASE &#039;AM&#039; or &#039;PM&#039; based on the given time\n           Example: AM for 00:31, PM for 22:23\n          \n\n          \n           %P\n           lower-case &#039;am&#039; or &#039;pm&#039; based on the given time\n           Example: am for 00:31, pm for 22:23\n          \n\n          \n           %r\n           Same as &quot;%I:%M:%S %p&quot;\n           Example: 09:34:17 PM for 21:34:17\n          \n\n          \n           %R\n           Same as &quot;%H:%M&quot;\n           Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM\n          \n\n          \n           %S\n           Two digit representation of the second\n           00 through 59\n          \n\n          \n           %T\n           Same as &quot;%H:%M:%S&quot;\n           Example: 21:34:17 for 09:34:17 PM\n          \n\n          \n           %X\n           Preferred time representation based on locale, without the date\n           Example: 03:59:16 or 15:59:16\n          \n\n          \n           %z\n           The time zone offset. Not implemented as described on\n           Windows. See below for more information.\n           Example: -0500 for US Eastern Time\n          \n\n          \n           %Z\n           The time zone abbreviation. Not implemented as described on\n           Windows. See below for more information.\n           Example: EST for Eastern Time\n          \n\n          \n           Time and Date Stamps\n           ---\n           ---\n          \n\n          \n           %c\n           Preferred date and time stamp based on locale\n           Example: Tue Feb  5 00:45:10 2009 for\n           February 5, 2009 at 12:45:10 AM\n          \n\n          \n           %D\n           Same as &quot;%m\/%d\/%y&quot;\n           Example: 02\/05\/09 for February 5, 2009\n          \n\n          \n           %F\n           Same as &quot;%Y-%m-%d&quot; (commonly used in database datestamps)\n           Example: 2009-02-05 for February 5, 2009\n          \n\n          \n           %s\n           Unix Epoch Time timestamp (same as the time()\n           function)\n           Example: 305815200 for September 10, 1979 08:40:00 AM\n          \n\n          \n           %x\n           Preferred date representation based on locale, without the time\n           Example: 02\/05\/09 for February 5, 2009\n          \n\n          \n           Miscellaneous\n           ---\n           ---\n          \n\n          \n           %n\n           A newline character (&quot;\\n&quot;)\n           ---\n          \n\n          \n           %t\n           A Tab character (&quot;\\t&quot;)\n           ---\n          \n\n          \n           %%\n           A literal percentage character (&quot;%&quot;)\n           ---"}]},"stripcslashes":{"s":"Un-quote string quoted with addcslashes()","y":"string stripcslashes\n    ( string $str\n   )","r":"Returns the unescaped string.","p":[{"t":"str","d":"The string to be unescaped."}]},"stripos":{"s":"Find the position of the first occurrence of a case-insensitive substring in a string","y":"int stripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position of where the needle exists relative to the beginnning of\n   the haystack string (independent of offset).\n   Also note that string positions start at 0, and not 1.","p":[{"t":"haystack","d":"The string to search in."},{"t":"needle","d":"Note that the needle may be a string of one or\n       more characters."},{"t":"offset","d":"If specified, search will start this number of characters counted from\n       the beginning of the string. Unlike strrpos() and\n       strripos(), the offset cannot be negative."}]},"stripslashes":{"s":"Un-quotes a quoted string","y":"string stripslashes\n    ( string $str\n   )","r":"Returns a string with backslashes stripped off.\n   (\\&#039; becomes &#039; and so on.)\n   Double backslashes (\\\\) are made into a single\n   backslash (\\).","p":[{"t":"str","d":"The input string."}]},"strip_tags":{"s":"Strip HTML and PHP tags from a string","y":"string strip_tags\n    ( string $str\n   [, string $allowable_tags\n  ] )","r":"Returns the stripped string.","p":[{"t":"str","d":"The input string."},{"t":"allowable_tags","d":"You can use the optional second parameter to specify tags which should\n       not be stripped."}]},"stristr":{"s":"Case-insensitive strstr()","y":"string stristr\n    ( string $haystack\n   , mixed $needle\n   [, bool $before_needle = false\n  ] )","r":"Returns the matched substring. If needle is not\n   found, returns FALSE.","p":[{"t":"haystack","d":"The string to search in"},{"t":"needle","d":"If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character."},{"t":"before_needle","d":"If TRUE, stristr()\n       returns the part of the haystack before the\n       first occurrence of the needle (excluding needle)."}]},"strlen":{"s":"Get string length","y":"int strlen\n    ( string $string\n   )","r":"The length of the string on success, \n   and 0 if the string is empty.","p":[{"t":"string","d":"The string being measured for length."}]},"strnatcasecmp":{"s":"Case insensitive string comparisons using a &quot;natural order&quot; algorithm","y":"int strnatcasecmp\n    ( string $str1\n   , string $str2\n   )","r":"Similar to other string comparison functions, this one returns &lt; 0 if\n   str1 is less than str2 &gt;\n   0 if str1 is greater than\n   str2, and 0 if they are equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."}]},"strnatcmp":{"s":"String comparisons using a &quot;natural order&quot; algorithm","y":"int strnatcmp\n    ( string $str1\n   , string $str2\n   )","r":"Similar to other string comparison functions, this one returns &lt; 0 if\n   str1 is less than str2; &gt;\n   0 if str1 is greater than\n   str2, and 0 if they are equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."}]},"strncasecmp":{"s":"Binary safe case-insensitive string comparison of the first n characters","y":"int strncasecmp\n    ( string $str1\n   , string $str2\n   , int $len\n   )","r":"Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1 is\n   greater than str2, and 0 if they are equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."},{"t":"len","d":"The length of strings to be used in the comparison."}]},"strncmp":{"s":"Binary safe string comparison of the first n characters","y":"int strncmp\n    ( string $str1\n   , string $str2\n   , int $len\n   )","r":"Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.","p":[{"t":"str1","d":"The first string."},{"t":"str2","d":"The second string."},{"t":"len","d":"Number of characters to use in the comparison."}]},"strpbrk":{"s":"Search a string for any of a set of characters","y":"string strpbrk\n    ( string $haystack\n   , string $char_list\n   )","r":"Returns a string starting from the character found, or FALSE if it is\n   not found.","p":[{"t":"haystack","d":"The string where char_list is looked for."},{"t":"char_list","d":"This parameter is case sensitive."}]},"strpos":{"s":"Find the position of the first occurrence of a substring in a string","y":"mixed strpos\n    ( string $haystack\n   , mixed $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position of where the needle exists relative to the beginning of\n   the haystack string (independent of offset).\n   Also note that string positions start at 0, and not 1.","p":[{"t":"haystack","d":"The string to search in."},{"t":"needle","d":"If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character."},{"t":"offset","d":"If specified, search will start this number of characters counted from\n       the beginning of the string. Unlike strrpos() and\n       strripos(), the offset cannot be negative."}]},"strptime":{"s":"Parse a time\/date generated with strftime()","y":"array strptime\n      ( string $date\n     , string $format\n     )","r":"Returns an array or FALSE on failure.","p":[{"t":"date","d":"The string to parse (e.g. returned from strftime())."},{"t":"format","d":"The format used in date (e.g. the same as\n        used in strftime()). Note that some of the format\n        options available to strftime() may not have any\n        effect within strptime(); the exact subset that are\n        supported will vary based on the operating system and C library in\n        use."}]},"strrchr":{"s":"Find the last occurrence of a character in a string","y":"string strrchr\n    ( string $haystack\n   , mixed $needle\n   )","r":"This function returns the portion of string, or FALSE if\n   needle is not found.","p":[{"t":"haystack","d":"The string to search in"},{"t":"needle","d":"If needle contains more than one character,\n       only the first is used. This behavior is different from that of\n       strstr()."}]},"strrev":{"s":"Reverse a string","y":"string strrev\n    ( string $string\n   )","r":"Returns the reversed string.","p":[{"t":"string","d":"The string to be reversed."}]},"strripos":{"s":"Find the position of the last occurrence of a case-insensitive substring in a string","y":"int strripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position where the needle exists relative to the beginnning of\n   the haystack string (independent of search direction\n   or offset).\n   Also note that string positions start at 0, and not 1.","p":[{"t":"haystack","d":"The string to search in."},{"t":"needle","d":"If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character."},{"t":"offset","d":"If specified, search will start this number of characters counted from the\n       beginning of the string. If the value is negative, search will instead start\n       from that many characters from the end of the string, searching backwards."}]},"strrpos":{"s":"Find the position of the last occurrence of a substring in a string","y":"int strrpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )","r":"Returns the position where the needle exists relative to the beginnning of\n   the haystack string (independent of search direction\n   or offset).\n   Also note that string positions start at 0, and not 1.","p":[{"t":"haystack","d":"The string to search in."},{"t":"needle","d":"If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character."},{"t":"offset","d":"If specified, search will start this number of characters counted from the\n       beginning of the string. If the value is negative, search will instead start\n       from that many characters from the end of the string, searching backwards."}]},"strspn":{"s":"Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask.","y":"int strspn\n    ( string $subject\n   , string $mask\n   [, int $start\n   [, int $length\n  ]] )","r":"Returns the length of the initial segment of subject\n   which consists entirely of characters in mask.","p":[{"t":"subject","d":"The string to examine."},{"t":"mask","d":"The list of allowable characters."},{"t":"start","d":"The position in subject to\n       start searching."},{"t":"length","d":"The length of the segment from subject\n       to examine."}]},"strstr":{"s":"Find the first occurrence of a string","y":"string strstr\n    ( string $haystack\n   , mixed $needle\n   [, bool $before_needle = false\n  ] )","r":"Returns the portion of string, or FALSE if needle\n   is not found.","p":[{"t":"haystack","d":"The input string."},{"t":"needle","d":"If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character."},{"t":"before_needle","d":"If TRUE, strstr() returns\n       the part of the haystack before the first\n       occurrence of the needle (excluding the needle)."}]},"strtok":{"s":"Tokenize string","y":"string strtok\n    ( string $str\n   , string $token\n   )","r":"A string token.","p":[{"t":"str","d":"The string being split up into smaller strings (tokens)."},{"t":"token","d":"The delimiter used when splitting up str."}]},"strtolower":{"s":"Make a string lowercase","y":"string strtolower\n    ( string $str\n   )","r":"Returns the lowercased string.","p":[{"t":"str","d":"The input string."}]},"strtotime":{"s":"Parse about any English textual datetime description into a Unix timestamp","y":"int strtotime\n    ( string $time\n   [, int $now = time()\n  ] )","r":"Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0,\n   this function would return -1 on failure.","p":[{"t":"time","d":"A date\/time string. Valid formats are explained in Date and Time Formats."},{"t":"now","d":"The timestamp which is used as a base for the calculation of relative\n       dates."}]},"strtoupper":{"s":"Make a string uppercase","y":"string strtoupper\n    ( string $string\n   )","r":"Returns the uppercased string.","p":[{"t":"string","d":"The input string."}]},"strtr":{"s":"Translate characters or replace substrings","y":"string strtr\n    ( string $str\n   , string $from\n   , string $to\n   )","r":"Returns the translated string.","p":[{"t":"str","d":"The string being translated."},{"t":"from","d":"The string being translated to to."},{"t":"to","d":"The string replacing from."},{"t":"replace_pairs","d":"The replace_pairs parameter may be used instead of \n       to and from, in which case it&#039;s an\n       array in the form array(&#039;from&#039; =&gt; &#039;to&#039;, ...)."}]},"str_ireplace":{"s":"Case-insensitive version of str_replace()","y":"mixed str_ireplace\n    ( mixed $search\n   , mixed $replace\n   , mixed $subject\n   [, int &$count\n  ] )","r":"Returns a string or an array of replacements.","p":[{"t":"search","d":"The value being searched for, otherwise known as the\n       needle.  An array may be used to designate\n       multiple needles."},{"t":"replace","d":"The replacement value that replaces found search\n       values. An array may be used to designate multiple replacements."},{"t":"subject","d":"The string or array being searched and replaced on,\n       otherwise known as the haystack."},{"t":"count","d":"If passed, this will be set to the number of replacements performed."}]},"str_pad":{"s":"Pad a string to a certain length with another string","y":"string str_pad\n    ( string $input\n   , int $pad_length\n   [, string $pad_string = &quot; &quot;\n   [, int $pad_type = STR_PAD_RIGHT\n  ]] )","r":"Returns the padded string.","p":[{"t":"input","d":"The input string."},{"t":"pad_length","d":"If the value of pad_length is negative,\n       less than, or equal to the length of the input string, no padding\n       takes place."},{"t":"pad_string","d":""},{"t":"pad_type","d":"Optional argument pad_type can be\n       STR_PAD_RIGHT, STR_PAD_LEFT,\n       or STR_PAD_BOTH. If\n       pad_type is not specified it is assumed to be\n       STR_PAD_RIGHT."}]},"str_repeat":{"s":"Repeat a string","y":"string str_repeat\n    ( string $input\n   , int $multiplier\n   )","r":"Returns the repeated string.","p":[{"t":"input","d":"The string to be repeated."},{"t":"multiplier","d":"Number of time the input string should be\n       repeated."}]},"str_replace":{"s":"Replace all occurrences of the search string with the replacement string","y":"mixed str_replace\n    ( mixed $search\n   , mixed $replace\n   , mixed $subject\n   [, int &$count\n  ] )","r":"This function returns a string or an array with the replaced values.","p":[{"t":"search","d":"The value being searched for, otherwise known as the needle.\n       An array may be used to designate multiple needles."},{"t":"replace","d":"The replacement value that replaces found search\n       values. An array may be used to designate multiple replacements."},{"t":"subject","d":"The string or array being searched and replaced on,\n       otherwise known as the haystack."},{"t":"count","d":"If passed, this will be set to the number of replacements performed."}]},"str_rot13":{"s":"Perform the rot13 transform on a string","y":"string str_rot13\n    ( string $str\n   )","r":"Returns the ROT13 version of the given string.","p":[{"t":"str","d":"The input string."}]},"str_shuffle":{"s":"Randomly shuffles a string","y":"string str_shuffle\n    ( string $str\n   )","r":"Returns the shuffled string.","p":[{"t":"str","d":"The input string."}]},"str_split":{"s":"Convert a string to an array","y":"array str_split\n    ( string $string\n   [, int $split_length = 1\n  ] )","r":"If the optional split_length parameter is\n   specified, the returned array will be broken down into chunks with each\n   being split_length in length, otherwise each chunk\n   will be one character in length.","p":[{"t":"string","d":"The input string."},{"t":"split_length","d":"Maximum length of the chunk."}]},"str_word_count":{"s":"Return information about words used in a string","y":"mixed str_word_count\n    ( string $string\n   [, int $format = 0\n   [, string $charlist\n  ]] )","r":"Returns an array or an integer, depending on the\n   format chosen.","p":[{"t":"string","d":"The string"},{"t":"format","d":"Specify the return value of this function. The current supported values\n       are:\n       \n        \n         \n          0 - returns the number of words found\n         \n        \n        \n         \n          1 - returns an array containing all the words found inside the\n          string\n         \n        \n        \n         \n          2 - returns an associative array, where the key is the numeric\n          position of the word inside the string and\n          the value is the actual word itself"},{"t":"charlist","d":"A list of additional characters which will be considered as &#039;word&#039;"}]},"substr":{"s":"Return part of a string","y":"string substr\n    ( string $string\n   , int $start\n   [, int $length\n  ] )","r":"Returns the extracted part of string;  or FALSE on failure, or\n   an empty string.","p":[{"t":"string","d":"The input string. Must be one character or longer."},{"t":"start","d":"If start is non-negative, the returned string\n       will start at the start&#039;th position in\n       string, counting from zero. For instance,\n       in the string &#039;abcdef&#039;, the character at\n       position 0 is &#039;a&#039;, the\n       character at position 2 is\n       &#039;c&#039;, and so forth."}]},"substr_compare":{"s":"Binary safe comparison of two strings from an offset, up to length characters","y":"int substr_compare\n    ( string $main_str\n   , string $str\n   , int $offset\n   [, int $length\n   [, bool $case_insensitivity = false\n  ]] )","r":"Returns &lt; 0 if main_str from position\n   offset is less than str, &gt;\n   0 if it is greater than str, and 0 if they are equal.\n   If offset is equal to or greater than the length of\n   main_str or length is set and\n   is less than 1, substr_compare() prints a warning and returns\n   FALSE.","p":[{"t":"main_str","d":"The main string being compared."},{"t":"str","d":"The secondary string being compared."},{"t":"offset","d":"The start position for the comparison. If negative, it starts counting\n       from the end of the string."},{"t":"length","d":"The length of the comparison. The default value is the largest of the\n       length of the str compared to the length of\n       main_str less the\n       offset."},{"t":"case_insensitivity","d":"If case_insensitivity is TRUE, comparison is\n       case insensitive."}]},"substr_count":{"s":"Count the number of substring occurrences","y":"int substr_count\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, int $length\n  ]] )","r":"This function returns an integer.","p":[{"t":"haystack","d":"The string to search in"},{"t":"needle","d":"The substring to search for"},{"t":"offset","d":"The offset where to start counting"},{"t":"length","d":"The maximum length after the specified offset to search for the\n       substring. It outputs a warning if the offset plus the length is\n       greater than the haystack length."}]},"substr_replace":{"s":"Replace text within a portion of a string","y":"mixed substr_replace\n    ( mixed $string\n   , mixed $replacement\n   , mixed $start\n   [, mixed $length\n  ] )","r":"The result string is returned. If string is an\n   array then array is returned.","p":[{"t":"string","d":"The input string."},{"t":"replacement","d":"The replacement string."},{"t":"start","d":"If start is positive, the replacing will\n       begin at the start&#039;th offset into\n       string."},{"t":"length","d":"If given and is positive, it represents the length of the portion of\n       string which is to be replaced. If it is\n       negative, it represents the number of characters from the end of\n       string at which to stop replacing. If it\n       is not given, then it will default to strlen(\n       string ); i.e. end the replacing at the\n       end of string. Of course, if\n       length is zero then this function will have the\n       effect of inserting replacement into\n       string at the given\n       start offset."}]},"svn_add":{"s":"Schedules the addition of an item in a working directory","y":"bool svn_add\n    ( string $path\n   [, bool $recursive = true\n   [, bool $force = false\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"path","d":"Path of item to add."},{"t":"recursive","d":"If item is directory, whether or not to recursively add\n       all of its contents. Default is TRUE"},{"t":"force","d":"If true, Subversion will recurse into already versioned directories\n       in order to add unversioned files that may be hiding in those\n       directories. Default is FALSE"}]},"svn_auth_get_parameter":{"s":"Retrieves authentication parameter","y":"string svn_auth_get_parameter\n    ( string $key\n   )","r":"Returns the string value of the parameter at key;\n   returns NULL if parameter does not exist.","p":[{"t":"key","d":"String key name. Use the authentication constants\n       defined by this extension to specify a key."}]},"svn_blame":{"s":"Get the SVN blame for a file","y":"array svn_blame\n    ( string $repository_url\n   [, int $revision_no = SVN_REVISION_HEAD\n  ] )","r":"An array of SVN blame information separated by line\n   which includes the revision number, line number, line of code,\n   author, and date.","p":[{"t":"repository_url","d":"The repository URL."},{"t":"revision_no","d":"The revision number."}]},"svn_cat":{"s":"Returns the contents of a file in a repository","y":"string svn_cat\n    ( string $repos_url\n   [, int $revision_no\n  ] )","r":"Returns the string contents of the item from the repository on\n   success, and FALSE on failure.","p":[{"t":"repos_url","d":"String URL path to item in a repository."},{"t":"revision_no","d":"Integer revision number of item to retrieve, default is the HEAD\n       revision."}]},"svn_checkout":{"s":"Checks out a working copy from the repository","y":"bool svn_checkout\n    ( string $repos\n   , string $targetpath\n   [, int $revision\n   [, int $flags = 0\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"repos","d":"String URL path to directory in repository to check out."},{"t":"targetpath","d":"String local path to directory to check out in to"},{"t":"revision","d":"Integer revision number of repository to check out. Default is\n       HEAD, the most recent revision."},{"t":"flags","d":"Any combination of SVN_NON_RECURSIVE and\n       SVN_IGNORE_EXTERNALS."}]},"svn_cleanup":{"s":"Recursively cleanup a working copy directory, finishing incomplete operations and removing locks","y":"bool svn_cleanup\n    ( string $workingdir\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"workingdir","d":"String path to local working directory to cleanup"}]},"svn_client_version":{"s":"Returns the version of the SVN client libraries","y":"string svn_client_version\n    ( void\n   )","r":"String version number, usually in form of x.y.z.","p":null},"svn_commit":{"s":"Sends changes from the local working copy to the repository","y":"array svn_commit\n    ( string $log\n   , array $targets\n   [, bool $recursive = true\n  ] )","r":"Returns array in form of:","p":[{"t":"log","d":"String log text to commit"},{"t":"targets","d":"Array of local paths of files to be committed"}]},"svn_delete":{"s":"Delete items from a working copy or repository.","y":"bool svn_delete\n    ( string $path\n   [, bool $force = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"path","d":"Path of item to delete."},{"t":"force","d":"If TRUE, the file will be deleted even if it has local modifications.\n       Otherwise, local modifications will result in a failure. Default is\n       FALSE"}]},"svn_diff":{"s":"Recursively diffs two paths","y":"array svn_diff\n    ( string $path1\n   , int $rev1\n   , string $path2\n   , int $rev2\n   )","r":"Returns an array-list consisting of two streams: the first is the diff output\n   and the second contains error stream output. The streams can be\n   read using fread(). Returns FALSE or NULL on\n   error.","p":[{"t":"path1","d":"First path to diff. This can be a URL to a file\/directory in an SVN\n       repository or a local file\/directory path."}]},"svn_export":{"s":"Export the contents of a SVN directory","y":"bool svn_export\n    ( string $frompath\n   , string $topath\n   [, bool $working_copy = true\n   [, int $revision_no = -1\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"frompath","d":"The path to the current repository."},{"t":"topath","d":"The path to the new repository."},{"t":"working_copy","d":"If TRUE, it will export uncommitted files from the working copy."}]},"svn_fs_abort_txn":{"s":"Abort a transaction, returns true if everything is okay, false otherwise","y":"bool svn_fs_abort_txn\n    ( resource $txn\n   )","r":"","p":null},"svn_fs_apply_text":{"s":"Creates and returns a stream that will be used to replace","y":"resource svn_fs_apply_text\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_begin_txn2":{"s":"Create a new transaction","y":"resource svn_fs_begin_txn2\n    ( resource $repos\n   , int $rev\n   )","r":"","p":null},"svn_fs_change_node_prop":{"s":"Return true if everything is ok, false otherwise","y":"bool svn_fs_change_node_prop\n    ( resource $root\n   , string $path\n   , string $name\n   , string $value\n   )","r":"","p":null},"svn_fs_check_path":{"s":"Determines what kind of item lives at path in a given repository fsroot","y":"int svn_fs_check_path\n    ( resource $fsroot\n   , string $path\n   )","r":"","p":null},"svn_fs_contents_changed":{"s":"Return true if content is different, false otherwise","y":"bool svn_fs_contents_changed\n    ( resource $root1\n   , string $path1\n   , resource $root2\n   , string $path2\n   )","r":"","p":null},"svn_fs_copy":{"s":"Copies a file or a directory, returns true if all is ok, false otherwise","y":"bool svn_fs_copy\n    ( resource $from_root\n   , string $from_path\n   , resource $to_root\n   , string $to_path\n   )","r":"","p":null},"svn_fs_delete":{"s":"Deletes a file or a directory, return true if all is ok, false otherwise","y":"bool svn_fs_delete\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_dir_entries":{"s":"Enumerates the directory entries under path; returns a hash of dir names to file type","y":"array svn_fs_dir_entries\n    ( resource $fsroot\n   , string $path\n   )","r":"","p":null},"svn_fs_file_contents":{"s":"Returns a stream to access the contents of a file from a given version of the fs","y":"resource svn_fs_file_contents\n    ( resource $fsroot\n   , string $path\n   )","r":"","p":null},"svn_fs_file_length":{"s":"Returns the length of a file from a given version of the fs","y":"int svn_fs_file_length\n    ( resource $fsroot\n   , string $path\n   )","r":"","p":null},"svn_fs_is_dir":{"s":"Return true if the path points to a directory, false otherwise","y":"bool svn_fs_is_dir\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_is_file":{"s":"Return true if the path points to a file, false otherwise","y":"bool svn_fs_is_file\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_make_dir":{"s":"Creates a new empty directory, returns true if all is ok, false otherwise","y":"bool svn_fs_make_dir\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_make_file":{"s":"Creates a new empty file, returns true if all is ok, false otherwise","y":"bool svn_fs_make_file\n    ( resource $root\n   , string $path\n   )","r":"","p":null},"svn_fs_node_created_rev":{"s":"Returns the revision in which path under fsroot was created","y":"int svn_fs_node_created_rev\n    ( resource $fsroot\n   , string $path\n   )","r":"","p":null},"svn_fs_node_prop":{"s":"Returns the value of a property for a node","y":"string svn_fs_node_prop\n    ( resource $fsroot\n   , string $path\n   , string $propname\n   )","r":"","p":null},"svn_fs_props_changed":{"s":"Return true if props are different, false otherwise","y":"bool svn_fs_props_changed\n    ( resource $root1\n   , string $path1\n   , resource $root2\n   , string $path2\n   )","r":"","p":null},"svn_fs_revision_prop":{"s":"Fetches the value of a named property","y":"string svn_fs_revision_prop\n    ( resource $fs\n   , int $revnum\n   , string $propname\n   )","r":"","p":null},"svn_fs_revision_root":{"s":"Get a handle on a specific version of the repository root","y":"resource svn_fs_revision_root\n    ( resource $fs\n   , int $revnum\n   )","r":"","p":null},"svn_fs_txn_root":{"s":"Creates and returns a transaction root","y":"resource svn_fs_txn_root\n    ( resource $txn\n   )","r":"","p":null},"svn_fs_youngest_rev":{"s":"Returns the number of the youngest revision in the filesystem","y":"int svn_fs_youngest_rev\n    ( resource $fs\n   )","r":"","p":null},"svn_import":{"s":"Imports an unversioned path into a repository","y":"bool svn_import\n    ( string $path\n   , string $url\n   , bool $nonrecursive\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"path","d":"Path of file or directory to import."},{"t":"url","d":"Repository URL to import into."},{"t":"nonrecursive","d":"Whether or not to refrain from recursively processing directories."}]},"svn_log":{"s":"Returns the commit log messages of a repository URL","y":"array svn_log\n    ( string $repos_url\n   [, int $start_revision\n   [, int $end_revision\n   [, int $limit = 0\n   [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY\n  ]]]] )","r":"","p":[{"t":"repos_url","d":"Repository URL of the item to retrieve log history from."},{"t":"start_revision","d":"Revision number of the first log to retrieve. Use\n       SVN_REVISION_HEAD to retrieve the log from\n       the most recent revision."},{"t":"end_revision","d":"Revision number of the last log to retrieve. Defaults to\n       start_revision if specified or to\n       SVN_REVISION_INITIAL otherwise."},{"t":"limit","d":"Number of logs to retrieve."},{"t":"flags","d":"Any combination of SVN_OMIT_MESSAGES,\n       SVN_DISCOVER_CHANGED_PATHS and\n       SVN_STOP_ON_COPY."}]},"svn_ls":{"s":"Returns list of directory contents in repository URL, optionally at revision number","y":"array svn_ls\n    ( string $repos_url\n   [, int $revision_no = SVN_REVISION_HEAD\n   [, bool $recurse = false\n   [, bool $peg = false\n  ]]] )","r":"","p":[{"t":"url","d":"URL of the repository, eg. http:\/\/www.example.com\/svnroot.\n       To access a local Subversion repository via filesystem, use the\n       file URI scheme, eg. file:\/\/\/home\/user\/svn-repos"},{"t":"revision","d":"Integer revision number to retrieve listing of. When omitted,\n       the HEAD revision is used."},{"t":"recurse","d":"Enables recursion."}]},"svn_mkdir":{"s":"Creates a directory in a working copy or repository","y":"bool svn_mkdir\n    ( string $path\n   [, string $log_message\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"path","d":"The path to the working copy or repository."}]},"svn_repos_create":{"s":"Create a new subversion repository at path","y":"resource svn_repos_create\n    ( string $path\n   [, array $config\n   [, array $fsconfig\n  ]] )","r":"","p":null},"svn_repos_fs":{"s":"Gets a handle on the filesystem for a repository","y":"resource svn_repos_fs\n    ( resource $repos\n   )","r":"","p":null},"svn_repos_fs_commit_txn":{"s":"Commits a transaction and returns the new revision","y":"int svn_repos_fs_commit_txn\n    ( resource $txn\n   )","r":"","p":null},"svn_repos_hotcopy":{"s":"Make a hot-copy of the repos at repospath; copy it to destpath","y":"bool svn_repos_hotcopy\n    ( string $repospath\n   , string $destpath\n   , bool $cleanlogs\n   )","r":"","p":null},"svn_repos_recover":{"s":"Run recovery procedures on the repository located at path.","y":"bool svn_repos_recover\n    ( string $path\n   )","r":"","p":null},"svn_revert":{"s":"Revert changes to the working copy","y":"bool svn_revert\n    ( string $path\n   [, bool $recursive = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"path","d":"The path to the working repository."},{"t":"recursive","d":"Optionally make recursive changes."}]},"svn_status":{"s":"Returns the status of working copy files and directories","y":"array svn_status\n    ( string $path\n   [, int $flags = 0\n  ] )","r":"Returns a numerically indexed array of associative arrays detailing\n   the status of items in the repository:","p":[{"t":"path","d":"Local path to file or directory to retrieve status of."},{"t":"flags","d":"Any combination of SVN_NON_RECURSIVE,\n       SVN_ALL (regardless of modification status),\n       SVN_SHOW_UPDATES (entries will be added for items\n       that are out-of-date), SVN_NO_IGNORE (disregard\n       svn:ignore properties when scanning for new files)\n       and SVN_IGNORE_EXTERNALS."}]},"svn_update":{"s":"Update working copy","y":"int svn_update\n    ( string $path\n   [, int $revno = SVN_REVISION_HEAD\n   [, bool $recurse = true\n  ]] )","r":"Returns new revision number on success, returns FALSE on failure.","p":[{"t":"path","d":"Path to local working copy."},{"t":"revno","d":"Revision number to update to, default is SVN_REVISION_HEAD."},{"t":"recurse","d":"Whether or not to recursively update directories."}]},"swf_actiongeturl":{"s":"Get a URL from a Shockwave Flash movie","y":"void swf_actiongeturl\n    ( string $url\n   , string $target\n   )","r":"No value is returned.","p":[{"t":"url","d":"The URL, as a string."},{"t":"target","d":"The target, as a string."}]},"swf_actiongotoframe":{"s":"Play a frame and then stop","y":"void swf_actiongotoframe\n    ( int $framenumber\n   )","r":"No value is returned.","p":[{"t":"framenumber","d":"The frame number."}]},"swf_actiongotolabel":{"s":"Display a frame with the specified label","y":"void swf_actiongotolabel\n    ( string $label\n   )","r":"No value is returned.","p":[{"t":"label","d":"The frame label."}]},"swf_actionnextframe":{"s":"Go forward one frame","y":"void swf_actionnextframe\n    ( void\n   )","r":"No value is returned.","p":null},"swf_actionplay":{"s":"Start playing the flash movie from the current frame","y":"void swf_actionplay\n    ( void\n   )","r":"No value is returned.","p":null},"swf_actionprevframe":{"s":"Go backwards one frame","y":"void swf_actionprevframe\n    ( void\n   )","r":"No value is returned.","p":null},"swf_actionsettarget":{"s":"Set the context for actions","y":"void swf_actionsettarget\n    ( string $target\n   )","r":"No value is returned.","p":[{"t":"target","d":"The target, as a string."}]},"swf_actionstop":{"s":"Stop playing the flash movie at the current frame","y":"void swf_actionstop\n    ( void\n   )","r":"No value is returned.","p":null},"swf_actiontogglequality":{"s":"Toggle between low and high quality","y":"void swf_actiontogglequality\n    ( void\n   )","r":"No value is returned.","p":null},"swf_actionwaitforframe":{"s":"Skip actions if a frame has not been loaded","y":"void swf_actionwaitforframe\n    ( int $framenumber\n   , int $skipcount\n   )","r":"No value is returned.","p":[{"t":"framenumber","d":"The frame number."},{"t":"skipcount","d":"The number of actions to skip."}]},"swf_addbuttonrecord":{"s":"Controls location, appearance and active area of the current button","y":"void swf_addbuttonrecord\n    ( int $states\n   , int $shapeid\n   , int $depth\n   )","r":"No value is returned.","p":[{"t":"states","d":"Defines what states the button can have, these can be any or all of\n       the following constants: BSHitTest, \n       BSDown, BSOver or\n       BSUp."},{"t":"shapeid","d":"The second parameter, the shapeid is the look\n       of the button, this is usually the object id of the shape of the\n       button."},{"t":"depth","d":"This parameter is the placement of the button in the current frame."}]},"swf_addcolor":{"s":"Set the global add color to the rgba value specified","y":"void swf_addcolor\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )","r":"No value is returned.","p":[{"t":"r","d":"Red value"},{"t":"g","d":"Green value"},{"t":"b","d":"Blue value"},{"t":"a","d":"Alpha value"}]},"swf_definebitmap":{"s":"Define a bitmap","y":"void swf_definebitmap\n    ( int $objid\n   , string $image_name\n   )","r":"No value is returned.","p":[{"t":"objid","d":"An SWF object id."},{"t":"image_name","d":"A GIF, JPEG, RGB or FI image. The image will be converted into a Flash\n       JPEG or Flash color map format."}]},"swf_definefont":{"s":"Defines a font","y":"void swf_definefont\n    ( int $fontid\n   , string $fontname\n   )","r":"No value is returned.","p":[{"t":"fontid","d":"The id to be given to the font."},{"t":"fontname","d":"The font so be set as current font."}]},"swf_defineline":{"s":"Define a line","y":"void swf_defineline\n    ( int $objid\n   , float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $width\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"x1","d":"x-coordinate of start point."},{"t":"y1","d":"y-coordinate of start point."},{"t":"x2","d":"x-coordinate of end point."},{"t":"y2","d":"y-coordinate of end point."},{"t":"width","d":"The line width."}]},"swf_definepoly":{"s":"Define a polygon","y":"void swf_definepoly\n    ( int $objid\n   , array $coords\n   , int $npoints\n   , float $width\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"coords","d":"An array of x, y coordinates."},{"t":"npoints","d":"The number of overall points that are contained in the array given by\n       coords"},{"t":"width","d":"The width of the polygon&#039;s border, if set to 0.0 the polygon is\n       filled."}]},"swf_definerect":{"s":"Define a rectangle","y":"void swf_definerect\n    ( int $objid\n   , float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $width\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"x1","d":"x-coordinate of upper left point."},{"t":"y1","d":"y-coordinate of upper left point."},{"t":"x2","d":"x-coordinate of lower right point."},{"t":"y2","d":"y-coordinate of lower right point."},{"t":"width","d":"Width of the rectangles border, if the width is 0.0 then the rectangle\n       is filled."}]},"swf_definetext":{"s":"Define a text string","y":"void swf_definetext\n    ( int $objid\n   , string $str\n   , int $docenter\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"str","d":"The text, as a string."},{"t":"docenter","d":"The docenter is where the word is centered, if\n       docenter is 1, then the word is centered in x."}]},"swf_endbutton":{"s":"End the definition of the current button","y":"void swf_endbutton\n    ( void\n   )","r":"No value is returned.","p":null},"swf_endshape":{"s":"Completes the definition of the current shape","y":"void swf_endshape\n    ( void\n   )","r":"No value is returned.","p":null},"swf_fontsize":{"s":"Change the font size","y":"void swf_fontsize\n    ( float $size\n   )","r":"No value is returned.","p":[{"t":"size","d":"The font size, as an integer."}]},"swf_fontslant":{"s":"Set the font slant","y":"void swf_fontslant\n    ( float $slant\n   )","r":"No value is returned.","p":[{"t":"slant","d":"Positive values create a forward slant, negative values create a\n       negative slant."}]},"swf_fonttracking":{"s":"Set the current font tracking","y":"void swf_fonttracking\n    ( float $tracking\n   )","r":"No value is returned.","p":[{"t":"tracking","d":"The font tracking."}]},"swf_getbitmapinfo":{"s":"Get information about a bitmap","y":"array swf_getbitmapinfo\n    ( int $bitmapid\n   )","r":"Returns an array with the following elements:\n   \n    \n     \n      &quot;size&quot; -  The size in bytes of the bitmap.\n     \n    \n    \n     \n      &quot;width&quot; -  The width in pixels of the bitmap.\n     \n    \n    \n     \n      &quot;height&quot; -  The height in pixels of the bitmap.","p":[{"t":"bitmapid","d":"The bitmap id."}]},"swf_getfontinfo":{"s":"Gets font information","y":"array swf_getfontinfo\n    ( void\n   )","r":"Returns an associative array with the following parameters:\n   \n    \n     \n      Aheight -  The height in pixels of a capital A.\n     \n    \n    \n     \n      xheight -  The height in pixels of a lowercase x.","p":null},"swf_getframe":{"s":"Get the frame number of the current frame","y":"int swf_getframe\n    ( void\n   )","r":"Returns the current frame number, as an integer.","p":null},"swf_labelframe":{"s":"Label the current frame","y":"void swf_labelframe\n    ( string $name\n   )","r":"No value is returned.","p":[{"t":"name","d":"The frame label."}]},"swf_lookat":{"s":"Define a viewing transformation","y":"void swf_lookat\n    ( float $view_x\n   , float $view_y\n   , float $view_z\n   , float $reference_x\n   , float $reference_y\n   , float $reference_z\n   , float $twist\n   )","r":"No value is returned.","p":[{"t":"view_x","d":"x-coordinate for the viewing position"},{"t":"view_y","d":"y-coordinate for the viewing position"},{"t":"view_z","d":"z-coordinate for the viewing position"},{"t":"reference_x","d":"x-coordinate for the reference point"},{"t":"reference_y","d":"y-coordinate for the reference point"},{"t":"reference_z","d":"z-coordinate for the reference point"},{"t":"twist","d":"Controls the rotation along with viewer&#039;s z axis."}]},"swf_modifyobject":{"s":"Modify an object","y":"void swf_modifyobject\n    ( int $depth\n   , int $how\n   )","r":"No value is returned.","p":[{"t":"depth","d":"The depth, as an integer."},{"t":"how","d":"Determines what is updated. how can either be\n       the constant MOD_MATRIX or \n       MOD_COLOR or it can be a combination of both."}]},"swf_mulcolor":{"s":"Sets the global multiply color to the rgba value specified","y":"void swf_mulcolor\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )","r":"No value is returned.","p":[{"t":"r","d":"Red value"},{"t":"g","d":"Green value"},{"t":"b","d":"Blue value"},{"t":"a","d":"Alpha value"}]},"swf_nextid":{"s":"Returns the next free object id","y":"int swf_nextid\n    ( void\n   )","r":"Returns the id, as an integer.","p":null},"swf_oncondition":{"s":"Describe a transition used to trigger an action list","y":"void swf_oncondition\n    ( int $transition\n   )","r":"No value is returned.","p":[{"t":"transition","d":"There are several types of possible transitions, the following are for\n       buttons defined as TYPE_MENUBUTTON:\n       \n        \n         \n          IdletoOverUp\n         \n        \n        \n         \n          OverUptoIdle\n         \n        \n        \n         \n          OverUptoOverDown\n         \n        \n        \n         \n          OverDowntoOverUp\n         \n        \n        \n         \n          IdletoOverDown\n         \n        \n        \n         \n          OutDowntoIdle\n         \n        \n        \n         \n          MenuEnter (IdletoOverUp|IdletoOverDown)\n         \n        \n        \n         \n          MenuExit (OverUptoIdle|OverDowntoIdle)\n         \n        \n       \n       For TYPE_PUSHBUTTON there are the following options:\n       \n        \n         \n          IdletoOverUp\n         \n        \n        \n         \n          OverUptoIdle\n         \n        \n        \n         \n          OverUptoOverDown\n         \n        \n        \n         \n          OverDowntoOverUp\n         \n        \n        \n         \n          OverDowntoOutDown\n         \n        \n        \n         \n          OutDowntoOverDown\n         \n        \n        \n         \n          OutDowntoIdle\n         \n        \n        \n         \n          ButtonEnter (IdletoOverUp|OutDowntoOverDown)\n         \n        \n        \n         \n          ButtonExit  (OverUptoIdle|OverDowntoOutDown)"}]},"swf_openfile":{"s":"Open a new Shockwave Flash file","y":"void swf_openfile\n    ( string $filename\n   , float $width\n   , float $height\n   , float $framerate\n   , float $r\n   , float $g\n   , float $b\n   )","r":"No value is returned.","p":[{"t":"filename","d":"The path to the SWF file. If you want to send your output to the\n       screen, set this to php:\/\/stdout."},{"t":"width","d":"The movie width"},{"t":"height","d":"The movie height"},{"t":"framerate","d":"The frame rate."},{"t":"r","d":"Red value for the background."},{"t":"g","d":"Green value for the background."},{"t":"b","d":"Blue value for the background."}]},"swf_ortho":{"s":"Defines an orthographic mapping of user coordinates onto the current viewport","y":"void swf_ortho\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   , float $zmin\n   , float $zmax\n   )","r":"No value is returned.","p":[{"t":"xmin","d":""},{"t":"xmax","d":""},{"t":"ymin","d":""},{"t":"ymax","d":""},{"t":"zmin","d":""},{"t":"zmax","d":""}]},"swf_ortho2":{"s":"Defines 2D orthographic mapping of user coordinates onto the current viewport","y":"void swf_ortho2\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   )","r":"No value is returned.","p":[{"t":"xmin","d":""},{"t":"xmax","d":""},{"t":"ymin","d":""},{"t":"ymax","d":""}]},"swf_perspective":{"s":"Define a perspective projection transformation","y":"void swf_perspective\n    ( float $fovy\n   , float $aspect\n   , float $near\n   , float $far\n   )","r":"No value is returned.","p":[{"t":"fovy","d":"A field-of-view angle in the y direction."},{"t":"aspect","d":"The aspect ratio of the viewport that is being drawn onto."},{"t":"near","d":"The near clipping plane."},{"t":"far","d":"The far clipping plane."}]},"swf_placeobject":{"s":"Place an object onto the screen","y":"void swf_placeobject\n    ( int $objid\n   , int $depth\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"depth","d":"Must be between 1 and 65535."}]},"swf_polarview":{"s":"Define the viewer&#039;s position with polar coordinates","y":"void swf_polarview\n    ( float $dist\n   , float $azimuth\n   , float $incidence\n   , float $twist\n   )","r":"No value is returned.","p":[{"t":"dist","d":"The distance between the viewpoint to the world space origin."},{"t":"azimuth","d":"Defines the azimuthal angle in the x,y coordinate plane, measured in\n       distance from the y axis."},{"t":"incidence","d":"Defines the angle of incidence in the y,z plane, measured in distance\n       from the z axis.  The incidence angle is defined as the angle of the\n       viewport relative to the z axis."},{"t":"twist","d":"Specifies the amount that the viewpoint is to be rotated about the\n       line of sight using the right hand rule."}]},"swf_popmatrix":{"s":"Restore a previous transformation matrix","y":"void swf_popmatrix\n    ( void\n   )","r":"No value is returned.","p":null},"swf_posround":{"s":"Enables or Disables the rounding of the translation when objects are placed or moved","y":"void swf_posround\n    ( int $round\n   )","r":"No value is returned.","p":[{"t":"round","d":"Whether to enable rounding or not, if set to the value of 1, then\n       rounding is enabled, if set to 0 then rounding is disabled."}]},"swf_removeobject":{"s":"Remove an object","y":"void swf_removeobject\n    ( int $depth\n   )","r":"No value is returned.","p":[{"t":"depth","d":"The depth, as an integer."}]},"swf_rotate":{"s":"Rotate the current transformation","y":"void swf_rotate\n    ( float $angle\n   , string $axis\n   )","r":"No value is returned.","p":[{"t":"angle","d":"The rotation angle."},{"t":"axis","d":"The axis. Valid values axis are x (the x axis), \n       y (the y axis) or z (the z\n       axis)."}]},"swf_scale":{"s":"Scale the current transformation","y":"void swf_scale\n    ( float $x\n   , float $y\n   , float $z\n   )","r":"No value is returned.","p":[{"t":"x","d":"x scale factor."},{"t":"y","d":"y scale factor."},{"t":"z","d":"z scale factor."}]},"swf_setfont":{"s":"Change the current font","y":"void swf_setfont\n    ( int $fontid\n   )","r":"No value is returned.","p":[{"t":"fontid","d":"The font identifier."}]},"swf_setframe":{"s":"Switch to a specified frame","y":"void swf_setframe\n    ( int $framenumber\n   )","r":"No value is returned.","p":[{"t":"framenumber","d":"The frame number to be set."}]},"swf_shapearc":{"s":"Draw a circular arc","y":"void swf_shapearc\n    ( float $x\n   , float $y\n   , float $r\n   , float $ang1\n   , float $ang2\n   )","r":"No value is returned.","p":[{"t":"x","d":"x-coordinate of the center."},{"t":"y","d":"y-coordinate of the center."},{"t":"r","d":"The arc radius."},{"t":"ang1","d":"The start angle."},{"t":"ang2","d":"The end angle."}]},"swf_shapecurveto":{"s":"Draw a quadratic bezier curve between two points","y":"void swf_shapecurveto\n    ( float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   )","r":"No value is returned.","p":[{"t":"x1","d":"x-coordinate of the first point."},{"t":"y1","d":"y-coordinate of the first point."},{"t":"x2","d":"x-coordinate of the second point."},{"t":"y2","d":"y-coordinate of the second point."}]},"swf_shapecurveto3":{"s":"Draw a cubic bezier curve","y":"void swf_shapecurveto3\n    ( float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $x3\n   , float $y3\n   )","r":"No value is returned.","p":[{"t":"x1","d":"x-coordinate of the first off curve control point."},{"t":"y1","d":"y-coordinate of the first off curve control point."},{"t":"x2","d":"x-coordinate of the second off curve control point."},{"t":"y2","d":"y-coordinate of the second off curve control point."},{"t":"x3","d":"x-coordinate of the endpoint."},{"t":"y3","d":"y-coordinate of the endpoint."}]},"swf_shapefillbitmapclip":{"s":"Set current fill mode to clipped bitmap","y":"void swf_shapefillbitmapclip\n    ( int $bitmapid\n   )","r":"No value is returned.","p":[{"t":"bitmapid","d":"The bitmap id."}]},"swf_shapefillbitmaptile":{"s":"Set current fill mode to tiled bitmap","y":"void swf_shapefillbitmaptile\n    ( int $bitmapid\n   )","r":"No value is returned.","p":[{"t":"bitmapid","d":"The bitmap id."}]},"swf_shapefilloff":{"s":"Turns off filling","y":"void swf_shapefilloff\n    ( void\n   )","r":"No value is returned.","p":null},"swf_shapefillsolid":{"s":"Set the current fill style to the specified color","y":"void swf_shapefillsolid\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )","r":"No value is returned.","p":[{"t":"r","d":"Red value"},{"t":"g","d":"Green value"},{"t":"b","d":"Blue value"},{"t":"a","d":"Alpha value"}]},"swf_shapelinesolid":{"s":"Set the current line style","y":"void swf_shapelinesolid\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   , float $width\n   )","r":"No value is returned.","p":[{"t":"r","d":"Red value"},{"t":"g","d":"Green value"},{"t":"b","d":"Blue value"},{"t":"a","d":"Alpha value"},{"t":"width","d":"The line width. If 0.0 is given then no lines are drawn."}]},"swf_shapelineto":{"s":"Draw a line","y":"void swf_shapelineto\n    ( float $x\n   , float $y\n   )","r":"No value is returned.","p":[{"t":"x","d":"x-coordinate of the target."},{"t":"y","d":"y-coordinate of the target."}]},"swf_shapemoveto":{"s":"Move the current position","y":"void swf_shapemoveto\n    ( float $x\n   , float $y\n   )","r":"No value is returned.","p":[{"t":"x","d":"x-coordinate of the target."},{"t":"y","d":"y-coordinate of the target."}]},"swf_showframe":{"s":"Display the current frame","y":"void swf_showframe\n    ( void\n   )","r":"No value is returned.","p":null},"swf_startbutton":{"s":"Start the definition of a button","y":"void swf_startbutton\n    ( int $objid\n   , int $type\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."},{"t":"type","d":"Can either be TYPE_MENUBUTTON or\n       TYPE_PUSHBUTTON.  The\n       TYPE_MENUBUTTON constant allows the focus to\n       travel from the button when the mouse is down,\n       TYPE_PUSHBUTTON does not allow the focus to\n       travel when the mouse is down."}]},"swf_startdoaction":{"s":"Start a description of an action list for the current frame","y":"void swf_startdoaction\n    ( void\n   )","r":"No value is returned.","p":null},"swf_startshape":{"s":"Start a complex shape","y":"void swf_startshape\n    ( int $objid\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id."}]},"swf_startsymbol":{"s":"Define a symbol","y":"void swf_startsymbol\n    ( int $objid\n   )","r":"No value is returned.","p":[{"t":"objid","d":"The object id you want to define as a symbol."}]},"swf_textwidth":{"s":"Get the width of a string","y":"float swf_textwidth\n    ( string $str\n   )","r":"Returns the line width, as a float.","p":[{"t":"str","d":"The string."}]},"swf_viewport":{"s":"Select an area for future drawing","y":"void swf_viewport\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   )","r":"No value is returned.","p":[{"t":"xmin","d":""},{"t":"xmax","d":""},{"t":"ymin","d":""},{"t":"ymax","d":""}]},"sybase_affected_rows":{"s":"Gets number of affected rows in last query","y":"int sybase_affected_rows\n    ([ resource $link_identifier\n  ] )","r":"Returns the number of affected rows, as an integer.","p":[{"t":"link_identifier","d":"If the link identifier isn&#039;t specified, the last opened link is assumed."}]},"sybase_close":{"s":"Closes a Sybase connection","y":"bool sybase_close\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"If the link identifier isn&#039;t specified, the last opened link is\n       assumed."}]},"sybase_connect":{"s":"Opens a Sybase server connection","y":"resource sybase_connect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, string $appname\n   [, bool $new = false\n  ]]]]]] )","r":"Returns a positive Sybase link identifier on success, or FALSE on\n   failure.","p":[{"t":"servername","d":"The servername argument has to be a valid servername that is defined\n       in the &#039;interfaces&#039; file."},{"t":"username","d":"Sybase user name"},{"t":"password","d":"Password associated with username."},{"t":"charset","d":"Specifies the charset for the connection"},{"t":"appname","d":"Specifies an appname for the Sybase connection.\n       This allow you to make separate connections in the same script to the\n       same database. This may come handy when you have started a transaction\n       in your current connection, and you need to be able to do a separate\n       query which cannot be performed inside this transaction."},{"t":"new","d":"Whether to open a new connection or use the existing one."}]},"sybase_data_seek":{"s":"Moves internal row pointer","y":"bool sybase_data_seek\n    ( resource $result_identifier\n   , int $row_number\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result_identifier","d":""},{"t":"row_number","d":""}]},"sybase_deadlock_retry_count":{"s":"Sets the deadlock retry count","y":"void sybase_deadlock_retry_count\n    ( int $retry_count\n   )","r":"No value is returned.","p":[{"t":"retry_count","d":"Values for retry_count\n        \n         \n          \n           -1\n           Retry forever (default)\n          \n\n          \n           0\n           Do not retry\n          \n\n          \n           n\n           Retry n times"}]},"sybase_fetch_array":{"s":"Fetch row as array","y":"array sybase_fetch_array\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.","p":[{"t":"result","d":""}]},"sybase_fetch_assoc":{"s":"Fetch a result row as an associative array","y":"array sybase_fetch_assoc\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.","p":[{"t":"result","d":""}]},"sybase_fetch_field":{"s":"Get field information from a result","y":"object sybase_fetch_field\n    ( resource $result\n   [, int $field_offset = -1\n  ] )","r":"Returns an object containing field information.","p":[{"t":"result","d":""},{"t":"field_offset","d":"If the field offset isn&#039;t specified, the next field that wasn&#039;t yet\n       retrieved by sybase_fetch_field() is retrieved."}]},"sybase_fetch_object":{"s":"Fetch a row as an object","y":"object sybase_fetch_object\n    ( resource $result\n   [, mixed $object\n  ] )","r":"Returns an object with properties that correspond to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":""},{"t":"object","d":"Use the second object to specify the type of object\n       you want to return. If this parameter is omitted, the object will be of\n       type stdClass."}]},"sybase_fetch_row":{"s":"Get a result row as an enumerated array","y":"array sybase_fetch_row\n    ( resource $result\n   )","r":"Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows. Each result column is stored in an array offset,\n   starting at offset 0.","p":[{"t":"result","d":""}]},"sybase_field_seek":{"s":"Sets field offset","y":"bool sybase_field_seek\n    ( resource $result\n   , int $field_offset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":""},{"t":"field_offset","d":""}]},"sybase_free_result":{"s":"Frees result memory","y":"bool sybase_free_result\n    ( resource $result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":""}]},"sybase_get_last_message":{"s":"Returns the last message from the server","y":"string sybase_get_last_message\n    ( void\n   )","r":"Returns the message as a string.","p":null},"sybase_min_client_severity":{"s":"Sets minimum client severity","y":"void sybase_min_client_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":""}]},"sybase_min_error_severity":{"s":"Sets minimum error severity","y":"void sybase_min_error_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":""}]},"sybase_min_message_severity":{"s":"Sets minimum message severity","y":"void sybase_min_message_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":""}]},"sybase_min_server_severity":{"s":"Sets minimum server severity","y":"void sybase_min_server_severity\n    ( int $severity\n   )","r":"No value is returned.","p":[{"t":"severity","d":""}]},"sybase_num_fields":{"s":"Gets the number of fields in a result set","y":"int sybase_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields as an integer.","p":[{"t":"result","d":""}]},"sybase_num_rows":{"s":"Get number of rows in a result set","y":"int sybase_num_rows\n    ( resource $result\n   )","r":"Returns the number of rows as an integer.","p":[{"t":"result","d":""}]},"sybase_pconnect":{"s":"Open persistent Sybase connection","y":"resource sybase_pconnect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, string $appname\n  ]]]]] )","r":"Returns a positive Sybase persistent link identifier on success, or\n   FALSE on error.","p":[{"t":"servername","d":"The servername argument has to be a valid servername that is defined\n       in the &#039;interfaces&#039; file."},{"t":"username","d":"Sybase user name"},{"t":"password","d":"Password associated with username."},{"t":"charset","d":"Specifies the charset for the connection"},{"t":"appname","d":"Specifies an appname for the Sybase connection.\n       This allow you to make separate connections in the same script to the\n       same database. This may come handy when you have started a transaction\n       in your current connection, and you need to be able to do a separate\n       query which cannot be performed inside this transaction."}]},"sybase_query":{"s":"Sends a Sybase query","y":"mixed sybase_query\n    ( string $query\n   [, resource $link_identifier\n  ] )","r":"Returns a positive Sybase result identifier on success, FALSE on error,\n   or TRUE if the query was successful but didn&#039;t return any columns.","p":[{"t":"query","d":""},{"t":"link_identifier","d":"If the link identifier isn&#039;t specified, the last opened link is\n       assumed. If no link is open, the function tries to establish a link as\n       if sybase_connect() was called, and use it."}]},"sybase_result":{"s":"Get result data","y":"string sybase_result\n    ( resource $result\n   , int $row\n   , mixed $field\n   )","r":"sybase_result() returns the contents of one cell from a\n   Sybase result set.","p":[{"t":"result","d":""},{"t":"row","d":""},{"t":"field","d":"The field argument can be the field&#039;s offset, or the field&#039;s name, or\n       the field&#039;s table dot field&#039;s name (tablename.fieldname).  If the\n       column name has been aliased (&#039;select foo as bar from...&#039;), use the\n       alias instead of the column name."}]},"sybase_select_db":{"s":"Selects a Sybase database","y":"bool sybase_select_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"database_name","d":""},{"t":"link_identifier","d":"If no link identifier is specified, the last opened link is assumed.\n       If no link is open, the function will try to establish a link as if\n       sybase_connect() was called, and use it."}]},"sybase_set_message_handler":{"s":"Sets the handler called when a server message is raised","y":"bool sybase_set_message_handler\n    ( callable $handler\n   [, resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"handler","d":"The handler expects five arguments in the following order: message\n       number, severity, state, line number and description.  The first four\n       are integers. The last is a string. If the function returns FALSE,\n       PHP generates an ordinary error message."},{"t":"link_identifier","d":"If the link identifier isn&#039;t specified, the last opened link is assumed."}]},"sybase_unbuffered_query":{"s":"Send a Sybase query and do not block","y":"resource sybase_unbuffered_query\n    ( string $query\n   , resource $link_identifier\n   [, bool $store_result\n  ] )","r":"Returns a positive Sybase result identifier on success, or FALSE on\n   error.","p":[{"t":"query","d":""},{"t":"link_identifier","d":""},{"t":"store_result","d":"The optional store_result can be FALSE to\n       indicate the resultsets shouldn&#039;t be fetched into memory, thus\n       minimizing memory usage which is particularly interesting with very\n       large resultsets."}]},"symlink":{"s":"Creates a symbolic link","y":"bool symlink\n    ( string $target\n   , string $link\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"target","d":"Target of the link."},{"t":"link","d":"The link name."}]},"syslog":{"s":"Generate a system log message","y":"bool syslog\n    ( int $priority\n   , string $message\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"priority","d":"priority is a combination of the facility and\n       the level. Possible values are:\n       \n        syslog() Priorities (in descending order)\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_EMERG\n           system is unusable\n          \n\n          \n           LOG_ALERT\n           action must be taken immediately\n          \n\n          \n           LOG_CRIT\n           critical conditions\n          \n\n          \n           LOG_ERR\n           error conditions\n          \n\n          \n           LOG_WARNING\n           warning conditions\n          \n\n          \n           LOG_NOTICE\n           normal, but significant, condition\n          \n\n          \n           LOG_INFO\n           informational message\n          \n\n          \n           LOG_DEBUG\n           debug-level message"},{"t":"message","d":"The message to send, except that the two characters\n       %m will be replaced by the error message string\n       (strerror) corresponding to the present value of\n       errno."}]},"system":{"s":"Execute an external program and display the output","y":"string system\n    ( string $command\n   [, int &$return_var\n  ] )","r":"Returns the last line of the command output on success, and FALSE\n   on failure.","p":[{"t":"command","d":"The command that will be executed."},{"t":"return_var","d":"If the return_var argument is present, then the\n       return status of the executed command will be written to this\n       variable."}]},"sys_getloadavg":{"s":"Gets system load average","y":"array sys_getloadavg\n    ( void\n   )","r":"Returns an array with three samples (last 1, 5 and 15\n   minutes).","p":null},"sys_get_temp_dir":{"s":"Returns directory path used for temporary files","y":"string sys_get_temp_dir\n    ( void\n   )","r":"Returns the path of the temporary directory.","p":null},"taint":{"s":"Taint a string","y":"bool taint\n    ( string &$string\n   [, string $...\n  ] )","r":"Return TRUE if the transformation is done. Always return TRUE if the taint\n      extension is not enabled.    ","p":[{"t":"string","d":""},{"t":"...","d":""}]},"tanh":{"s":"Hyperbolic tangent","y":"float tanh\n     ( float $arg\n    )","r":"The hyperbolic tangent of arg","p":[{"t":"arg","d":"The argument to process"}]},"tempnam":{"s":"Create file with unique file name","y":"string tempnam\n    ( string $dir\n   , string $prefix\n   )","r":"Returns the new temporary filename (with path), or FALSE on\n   failure.","p":[{"t":"dir","d":"The directory where the temporary filename will be created."},{"t":"prefix","d":"The prefix of the generated temporary filename."}]},"textdomain":{"s":"Sets the default domain","y":"string textdomain\n       ( string $text_domain\n      )","r":"If successful, this function returns the current message\n   domain, after possibly changing it.","p":[{"t":"text_domain","d":"The new message domain, or NULL to get the current setting without\n       changing it"}]},"tidy_access_count":{"s":"Returns the Number of Tidy accessibility warnings encountered for specified document","y":"int tidy_access_count\n    ( tidy $object\n   )","r":"Returns the number of warnings.","p":[{"t":"object","d":"The Tidy object."}]},"tidy_config_count":{"s":"Returns the Number of Tidy configuration errors encountered for specified document","y":"int tidy_config_count\n    ( tidy $object\n   )","r":"Returns the number of errors.","p":[{"t":"object","d":"The Tidy object."}]},"tidy_error_count":{"s":"Returns the Number of Tidy errors encountered for specified document","y":"int tidy_error_count\n    ( tidy $object\n   )","r":"Returns the number of errors.","p":[{"t":"object","d":"The Tidy object."}]},"tidy_get_output":{"s":"Return a string representing the parsed tidy markup","y":"string tidy_get_output\n    ( tidy $object\n   )","r":"Returns the parsed tidy markup.","p":[{"t":"object","d":"The Tidy object."}]},"tidy_load_config":{"s":"Load an ASCII Tidy configuration file with the specified encoding","y":"void tidy_load_config\n    ( string $filename\n   , string $encoding\n   )","r":"No value is returned.","p":[{"t":"filename","d":""},{"t":"encoding","d":""}]},"tidy_reset_config":{"s":"Restore Tidy configuration to default values","y":"bool tidy_reset_config\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"tidy_setopt":{"s":"Updates the configuration settings for the specified tidy document","y":"bool tidy_setopt\n    ( string $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"option","d":"The tidy option name. A list of available configuration options may\n       be found at: &raquo;&nbsp;http:\/\/tidy.sourceforge.net\/docs\/quickref.html."},{"t":"value","d":"The tidy option name."}]},"tidy_set_encoding":{"s":"Set the input\/output character encoding for parsing markup","y":"bool tidy_set_encoding\n    ( string $encoding\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"encoding","d":"The encoding parameter sets the encoding for\n       input\/output documents. The possible values for encoding  are: \n       ascii, latin0, latin1,\n       raw, utf8, iso2022,\n       mac, win1252, ibm858,\n       utf16, utf16le, utf16be,\n       big5, and shiftjis."}]},"tidy_warning_count":{"s":"Returns the Number of Tidy warnings encountered for specified document","y":"int tidy_warning_count\n    ( tidy $object\n   )","r":"Returns the number of warnings.","p":[{"t":"object","d":"The Tidy object."}]},"time":{"s":"Return current Unix timestamp","y":"int time\n    ( void\n   )","r":"","p":null},"timezone_abbreviations_list":{"s":"Alias of DateTimeZone::listAbbreviations()","y":"","r":"","p":null},"timezone_identifiers_list":{"s":"Alias of DateTimeZone::listIdentifiers()","y":"","r":"","p":null},"timezone_name_from_abbr":{"s":"Returns the timezone name from abbreviation","y":"string timezone_name_from_abbr\n    ( string $abbr\n   [, int $gmtOffset = -1\n   [, int $isdst = -1\n  ]] )","r":"Returns time zone name on success or FALSE on failure.","p":[{"t":"abbr","d":"Time zone abbreviation."},{"t":"gmtOffset","d":"Offset from GMT in seconds. Defaults to -1 which means that first found\n       time zone corresponding to abbr is returned.\n       Otherwise exact offset is searched and only if not found then the first\n       time zone with any offset is returned."},{"t":"isdst","d":"Daylight saving time indicator. Defaults to -1, which means that\n       whether the time zone has daylight saving or not is not taken into\n       consideration when searching. If this is set to 1, then the\n       gmtOffset is assumed to be an offset with\n       daylight saving in effect; if 0, then gmtOffset\n       is assumed to be an offset without daylight saving in effect. If\n       abbr doesn&#039;t exist then the time zone is\n       searched solely by the gmtOffset and\n       isdst."}]},"timezone_name_get":{"s":"Alias of DateTimeZone::getName()","y":"","r":"","p":null},"timezone_offset_get":{"s":"Alias of DateTimeZone::getOffset()","y":"","r":"","p":null},"timezone_open":{"s":"Alias of DateTimeZone::__construct()","y":"","r":"","p":null},"timezone_transitions_get":{"s":"Alias of DateTimeZone::getTransitions()","y":"","r":"","p":null},"time_sleep_until":{"s":"Make the script sleep until the specified time","y":"bool time_sleep_until\n    ( float $timestamp\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"timestamp","d":"The timestamp when the script should wake."}]},"tmpfile":{"s":"Creates a temporary file","y":"resource tmpfile\n    ( void\n   )","r":"Returns a file handle, similar to the one returned by\n   fopen(), for the new file or FALSE on failure.","p":null},"token_get_all":{"s":"Split given source into PHP tokens","y":"array token_get_all\n    ( string $source\n   )","r":"An array of token identifiers. Each individual token identifier is either\n   a single character (i.e.: ;, ., \n   &gt;, !, etc...),\n   or a three element array containing the token index in element 0, the string\n   content of the original token in element 1 and the line number in element 2.","p":[{"t":"source","d":"The PHP source to parse."}]},"token_name":{"s":"Get the symbolic name of a given PHP token","y":"string token_name\n    ( int $token\n   )","r":"The symbolic name of the given token.","p":[{"t":"token","d":"The token value."}]},"touch":{"s":"Sets access and modification time of file","y":"bool touch\n    ( string $filename\n   [, int $time = time()\n   [, int $atime\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The name of the file being touched."},{"t":"time","d":"The touch time. If time is not supplied, \n       the current system time is used."},{"t":"atime","d":"If present, the access time of the given filename is set to \n       the value of atime. Otherwise, it is set to\n       the value passed to the time parameter.\n       If neither are present, the current system time is used."}]},"trader_acos":{"s":"Vector Trigonometric ACos","y":"array trader_acos\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ad":{"s":"Chaikin A\/D Line","y":"array trader_ad\n    ( array $high\n   , array $low\n   , array $close\n   , array $volume\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"volume","d":"Volume traded, array of real values."}]},"trader_add":{"s":"Vector Arithmetic Add","y":"array trader_add\n    ( array $real0\n   , array $real1\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."}]},"trader_adosc":{"s":"Chaikin A\/D Oscillator","y":"array trader_adosc\n    ( array $high\n   , array $low\n   , array $close\n   , array $volume\n   [, integer $fastPeriod\n   [, integer $slowPeriod\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"volume","d":"Volume traded, array of real values."},{"t":"fastPeriod","d":"Number of period for the fast MA. Valid range from 2 to 100000."},{"t":"slowPeriod","d":"Number of period for the slow MA. Valid range from 2 to 100000."}]},"trader_adx":{"s":"Average Directional Movement Index","y":"array trader_adx\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_adxr":{"s":"Average Directional Movement Index Rating","y":"array trader_adxr\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_apo":{"s":"Absolute Price Oscillator","y":"array trader_apo\n    ( array $real\n   [, integer $fastPeriod\n   [, integer $slowPeriod\n   [, integer $mAType\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"fastPeriod","d":"Number of period for the fast MA. Valid range from 2 to 100000."},{"t":"slowPeriod","d":"Number of period for the slow MA. Valid range from 2 to 100000."},{"t":"mAType","d":"Type of Moving Average. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_aroon":{"s":"Aroon","y":"array trader_aroon\n    ( array $high\n   , array $low\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_aroonosc":{"s":"Aroon Oscillator","y":"array trader_aroonosc\n    ( array $high\n   , array $low\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_asin":{"s":"Vector Trigonometric ASin","y":"array trader_asin\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_atan":{"s":"Vector Trigonometric ATan","y":"array trader_atan\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_atr":{"s":"Average True Range","y":"array trader_atr\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_avgprice":{"s":"Average Price","y":"array trader_avgprice\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_bbands":{"s":"Bollinger Bands","y":"array trader_bbands\n    ( array $real\n   [, integer $timePeriod\n   [, float $nbDevUp\n   [, float $nbDevDn\n   [, integer $mAType\n  ]]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"nbDevUp","d":"Deviation multiplier for upper band. Valid range from TRADER_REAL_MIN to TRADER_REAL_MAX."},{"t":"nbDevDn","d":"Deviation multiplier for lower band. Valid range from TRADER_REAL_MIN to TRADER_REAL_MAX."},{"t":"mAType","d":"Type of Moving Average. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_beta":{"s":"Beta","y":"array trader_beta\n    ( array $real0\n   , array $real1\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_bop":{"s":"Balance Of Power","y":"array trader_bop\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cci":{"s":"Commodity Channel Index","y":"array trader_cci\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_cdl2crows":{"s":"Two Crows","y":"array trader_cdl2crows\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3blackcrows":{"s":"Three Black Crows","y":"array trader_cdl3blackcrows\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3inside":{"s":"Three Inside Up\/Down","y":"array trader_cdl3inside\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3linestrike":{"s":"Three-Line Strike","y":"array trader_cdl3linestrike\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3outside":{"s":"Three Outside Up\/Down","y":"array trader_cdl3outside\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3starsinsouth":{"s":"Three Stars In The South","y":"array trader_cdl3starsinsouth\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdl3whitesoldiers":{"s":"Three Advancing White Soldiers","y":"array trader_cdl3whitesoldiers\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlabandonedbaby":{"s":"Abandoned Baby","y":"array trader_cdlabandonedbaby\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdladvanceblock":{"s":"Advance Block","y":"array trader_cdladvanceblock\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlbelthold":{"s":"Belt-hold","y":"array trader_cdlbelthold\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlbreakaway":{"s":"Breakaway","y":"array trader_cdlbreakaway\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlclosingmarubozu":{"s":"Closing Marubozu","y":"array trader_cdlclosingmarubozu\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlconcealbabyswall":{"s":"Concealing Baby Swallow","y":"array trader_cdlconcealbabyswall\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlcounterattack":{"s":"Counterattack","y":"array trader_cdlcounterattack\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdldarkcloudcover":{"s":"Dark Cloud Cover","y":"array trader_cdldarkcloudcover\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdldoji":{"s":"Doji","y":"array trader_cdldoji\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdldojistar":{"s":"Doji Star","y":"array trader_cdldojistar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdldragonflydoji":{"s":"Dragonfly Doji","y":"array trader_cdldragonflydoji\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlengulfing":{"s":"Engulfing Pattern","y":"array trader_cdlengulfing\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdleveningdojistar":{"s":"Evening Doji Star","y":"array trader_cdleveningdojistar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdleveningstar":{"s":"Evening Star","y":"array trader_cdleveningstar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdlgapsidesidewhite":{"s":"Up\/Down-gap side-by-side white lines","y":"array trader_cdlgapsidesidewhite\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlgravestonedoji":{"s":"Gravestone Doji","y":"array trader_cdlgravestonedoji\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhammer":{"s":"Hammer","y":"array trader_cdlhammer\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhangingman":{"s":"Hanging Man","y":"array trader_cdlhangingman\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlharami":{"s":"Harami Pattern","y":"array trader_cdlharami\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlharamicross":{"s":"Harami Cross Pattern","y":"array trader_cdlharamicross\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhighwave":{"s":"High-Wave Candle","y":"array trader_cdlhighwave\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhikkake":{"s":"Hikkake Pattern","y":"array trader_cdlhikkake\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhikkakemod":{"s":"Modified Hikkake Pattern","y":"array trader_cdlhikkakemod\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlhomingpigeon":{"s":"Homing Pigeon","y":"array trader_cdlhomingpigeon\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlidentical3crows":{"s":"Identical Three Crows","y":"array trader_cdlidentical3crows\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlinneck":{"s":"In-Neck Pattern","y":"array trader_cdlinneck\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlinvertedhammer":{"s":"Inverted Hammer","y":"array trader_cdlinvertedhammer\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlkicking":{"s":"Kicking","y":"array trader_cdlkicking\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlkickingbylength":{"s":"Kicking - bull\/bear determined by the longer marubozu","y":"array trader_cdlkickingbylength\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlladderbottom":{"s":"Ladder Bottom","y":"array trader_cdlladderbottom\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdllongleggeddoji":{"s":"Long Legged Doji","y":"array trader_cdllongleggeddoji\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdllongline":{"s":"Long Line Candle","y":"array trader_cdllongline\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlmarubozu":{"s":"Marubozu","y":"array trader_cdlmarubozu\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlmatchinglow":{"s":"Matching Low","y":"array trader_cdlmatchinglow\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlmathold":{"s":"Mat Hold","y":"array trader_cdlmathold\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdlmorningdojistar":{"s":"Morning Doji Star","y":"array trader_cdlmorningdojistar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"trader_cdlonneck":{"s":"On-Neck Pattern","y":"array trader_cdlonneck\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlpiercing":{"s":"Piercing Pattern","y":"array trader_cdlpiercing\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlrickshawman":{"s":"Rickshaw Man","y":"array trader_cdlrickshawman\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlrisefall3methods":{"s":"Rising\/Falling Three Methods","y":"array trader_cdlrisefall3methods\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlseparatinglines":{"s":"Separating Lines","y":"array trader_cdlseparatinglines\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlshootingstar":{"s":"Shooting Star","y":"array trader_cdlshootingstar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlshortline":{"s":"Short Line Candle","y":"array trader_cdlshortline\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlstalledpattern":{"s":"Stalled Pattern","y":"array trader_cdlstalledpattern\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlsticksandwich":{"s":"Stick Sandwich","y":"array trader_cdlsticksandwich\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdltakuri":{"s":"Takuri (Dragonfly Doji with very long lower shadow)","y":"array trader_cdltakuri\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdltasukigap":{"s":"Tasuki Gap","y":"array trader_cdltasukigap\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlthrusting":{"s":"Thrusting Pattern","y":"array trader_cdlthrusting\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdltristar":{"s":"Tristar Pattern","y":"array trader_cdltristar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlunique3river":{"s":"Unique 3 River","y":"array trader_cdlunique3river\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlupsidegap2crows":{"s":"Upside Gap Two Crows","y":"array trader_cdlupsidegap2crows\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_cdlxsidegap3methods":{"s":"Upside\/Downside Gap Three Methods","y":"array trader_cdlxsidegap3methods\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_ceil":{"s":"Vector Ceil","y":"array trader_ceil\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_cmo":{"s":"Chande Momentum Oscillator","y":"array trader_cmo\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_correl":{"s":"Pearson&#039;s Correlation Coefficient (r)","y":"array trader_correl\n    ( array $real0\n   , array $real1\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_cos":{"s":"Vector Trigonometric Cos","y":"array trader_cos\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_cosh":{"s":"Vector Trigonometric Cosh","y":"array trader_cosh\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_dema":{"s":"Double Exponential Moving Average","y":"array trader_dema\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_div":{"s":"Vector Arithmetic Div","y":"array trader_div\n    ( array $real0\n   , array $real1\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."}]},"trader_dx":{"s":"Directional Movement Index","y":"array trader_dx\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_ema":{"s":"Exponential Moving Average","y":"array trader_ema\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_errno":{"s":"Get error code","y":"integer trader_errno\n    ( void\n   )","r":"Returns the error code identified by one of the TRADER_ERR_* constants.","p":null},"trader_exp":{"s":"Vector Arithmetic Exp","y":"array trader_exp\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_floor":{"s":"Vector Floor","y":"array trader_floor\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_get_compat":{"s":"Get compatibility mode","y":"integer trader_get_compat\n    ( void\n   )","r":"Returns the compatibility mode id which can be identified by TRADER_COMPATIBILITY_* series of constants.","p":null},"trader_get_unstable_period":{"s":"Get unstable period","y":"integer trader_get_unstable_period\n    ( integer $functionId\n   )","r":"Returns the unstable period factor for the corresponding function.","p":[{"t":"functionId","d":"Function ID the factor to be read for. TRADER_FUNC_UNST_* series of constants should be used."}]},"trader_ht_dcperiod":{"s":"Hilbert Transform - Dominant Cycle Period","y":"array trader_ht_dcperiod\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ht_dcphase":{"s":"Hilbert Transform - Dominant Cycle Phase","y":"array trader_ht_dcphase\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ht_phasor":{"s":"Hilbert Transform - Phasor Components","y":"array trader_ht_phasor\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ht_sine":{"s":"Hilbert Transform - SineWave","y":"array trader_ht_sine\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ht_trendline":{"s":"Hilbert Transform - Instantaneous Trendline","y":"array trader_ht_trendline\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ht_trendmode":{"s":"Hilbert Transform - Trend vs Cycle Mode","y":"array trader_ht_trendmode\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_kama":{"s":"Kaufman Adaptive Moving Average","y":"array trader_kama\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_linearreg":{"s":"Linear Regression","y":"array trader_linearreg\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_linearreg_angle":{"s":"Linear Regression Angle","y":"array trader_linearreg_angle\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_linearreg_intercept":{"s":"Linear Regression Intercept","y":"array trader_linearreg_intercept\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_linearreg_slope":{"s":"Linear Regression Slope","y":"array trader_linearreg_slope\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_ln":{"s":"Vector Log Natural","y":"array trader_ln\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_log10":{"s":"Vector Log10","y":"array trader_log10\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_ma":{"s":"Moving average","y":"array trader_ma\n    ( array $real\n   [, integer $timePeriod\n   [, integer $mAType\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"mAType","d":"Type of Moving Average. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_macd":{"s":"Moving Average Convergence\/Divergence","y":"array trader_macd\n    ( array $real\n   [, integer $fastPeriod\n   [, integer $slowPeriod\n   [, integer $signalPeriod\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"fastPeriod","d":"Number of period for the fast MA. Valid range from 2 to 100000."},{"t":"slowPeriod","d":"Number of period for the slow MA. Valid range from 2 to 100000."},{"t":"signalPeriod","d":"Smoothing for the signal line (nb of period). Valid range from 1 to 100000."}]},"trader_macdext":{"s":"MACD with controllable MA type","y":"array trader_macdext\n    ( array $real\n   [, integer $fastPeriod\n   [, integer $fastMAType\n   [, integer $slowPeriod\n   [, integer $slowMAType\n   [, integer $signalPeriod\n   [, integer $signalMAType\n  ]]]]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"fastPeriod","d":"Number of period for the fast MA. Valid range from 2 to 100000."},{"t":"fastMAType","d":"Type of Moving Average for fast MA. TRADER_MA_TYPE_* series of constants should be used."},{"t":"slowPeriod","d":"Number of period for the slow MA. Valid range from 2 to 100000."},{"t":"slowMAType","d":"Type of Moving Average for slow MA. TRADER_MA_TYPE_* series of constants should be used."},{"t":"signalPeriod","d":"Smoothing for the signal line (nb of period). Valid range from 1 to 100000."},{"t":"signalMAType","d":"Type of Moving Average for signal line. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_macdfix":{"s":"Moving Average Convergence\/Divergence Fix 12\/26","y":"array trader_macdfix\n    ( array $real\n   [, integer $signalPeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"signalPeriod","d":"Smoothing for the signal line (nb of period). Valid range from 1 to 100000."}]},"trader_mama":{"s":"MESA Adaptive Moving Average","y":"array trader_mama\n    ( array $real\n   [, float $fastLimit\n   [, float $slowLimit\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"fastLimit","d":"Upper limit use in the adaptive algorithm. Valid range from 0.01 to 0.99."},{"t":"slowLimit","d":"Lower limit use in the adaptive algorithm. Valid range from 0.01 to 0.99."}]},"trader_mavp":{"s":"Moving average with variable period","y":"array trader_mavp\n    ( array $real\n   , array $periods\n   [, integer $minPeriod\n   [, integer $maxPeriod\n   [, integer $mAType\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"periods","d":"Array of real values."},{"t":"minPeriod","d":"Value less than minimum will be changed to Minimum period. Valid range from 2 to 100000"},{"t":"maxPeriod","d":"Value higher than minimum will be changed to Maximum period. Valid range from 2 to 100000"},{"t":"mAType","d":"Type of Moving Average. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_max":{"s":"Highest value over a specified period","y":"array trader_max\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_maxindex":{"s":"Index of highest value over a specified period","y":"array trader_maxindex\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_medprice":{"s":"Median Price","y":"array trader_medprice\n    ( array $high\n   , array $low\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."}]},"trader_mfi":{"s":"Money Flow Index","y":"array trader_mfi\n    ( array $high\n   , array $low\n   , array $close\n   , array $volume\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"volume","d":"Volume traded, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_midpoint":{"s":"MidPoint over period","y":"array trader_midpoint\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_midprice":{"s":"Midpoint Price over period","y":"array trader_midprice\n    ( array $high\n   , array $low\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_min":{"s":"Lowest value over a specified period","y":"array trader_min\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_minindex":{"s":"Index of lowest value over a specified period","y":"array trader_minindex\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_minmax":{"s":"Lowest and highest values over a specified period","y":"array trader_minmax\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_minmaxindex":{"s":"Indexes of lowest and highest values over a specified period","y":"array trader_minmaxindex\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_minus_di":{"s":"Minus Directional Indicator","y":"array trader_minus_di\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_minus_dm":{"s":"Minus Directional Movement","y":"array trader_minus_dm\n    ( array $high\n   , array $low\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_mom":{"s":"Momentum","y":"array trader_mom\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_mult":{"s":"Vector Arithmetic Mult","y":"array trader_mult\n    ( array $real0\n   , array $real1\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."}]},"trader_obv":{"s":"On Balance Volume","y":"array trader_obv\n    ( array $real\n   , array $volume\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"volume","d":"Volume traded, array of real values."}]},"trader_plus_di":{"s":"Plus Directional Indicator","y":"array trader_plus_di\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_ppo":{"s":"Percentage Price Oscillator","y":"array trader_ppo\n    ( array $real\n   [, integer $fastPeriod\n   [, integer $slowPeriod\n   [, integer $mAType\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"fastPeriod","d":"Number of period for the fast MA. Valid range from 2 to 100000."},{"t":"slowPeriod","d":"Number of period for the slow MA. Valid range from 2 to 100000."},{"t":"mAType","d":"Type of Moving Average. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_roc":{"s":"Rate of change : ((price\/prevPrice)-1)*100","y":"array trader_roc\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_rocp":{"s":"Rate of change Percentage: (price-prevPrice)\/prevPrice","y":"array trader_rocp\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_rocr":{"s":"Rate of change ratio: (price\/prevPrice)","y":"array trader_rocr\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_rocr100":{"s":"Rate of change ratio 100 scale: (price\/prevPrice)*100","y":"array trader_rocr100\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_rsi":{"s":"Relative Strength Index","y":"array trader_rsi\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_sar":{"s":"Parabolic SAR","y":"array trader_sar\n    ( array $high\n   , array $low\n   [, float $acceleration\n   [, float $maximum\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"acceleration","d":"Acceleration Factor used up to the Maximum value. Valid range from 0 to TRADER_REAL_MAX."},{"t":"maximum","d":"Acceleration Factor Maximum value. Valid range from 0 to TRADER_REAL_MAX."}]},"trader_sarext":{"s":"Parabolic SAR - Extended","y":"array trader_sarext\n    ( array $high\n   , array $low\n   [, float $startValue\n   [, float $offsetOnReverse\n   [, float $accelerationInitLong\n   [, float $accelerationLong\n   [, float $accelerationMaxLong\n   [, float $accelerationInitShort\n   [, float $accelerationShort\n   [, float $accelerationMaxShort\n  ]]]]]]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"startValue","d":"Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short. Valid range from TRADER_REAL_MIN to TRADER_REAL_MAX."},{"t":"offsetOnReverse","d":"Percent offset added\/removed to initial stop on short\/long reversal. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationInitLong","d":"Acceleration Factor initial value for the Long direction. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationLong","d":"Acceleration Factor for the Long direction. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationMaxLong","d":"Acceleration Factor maximum value for the Long direction. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationInitShort","d":"Acceleration Factor initial value for the Short direction. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationShort","d":"Acceleration Factor for the Short direction. Valid range from 0 to TRADER_REAL_MAX."},{"t":"accelerationMaxShort","d":"Acceleration Factor maximum value for the Short direction. Valid range from 0 to TRADER_REAL_MAX."}]},"trader_set_compat":{"s":"Set compatibility mode","y":"void trader_set_compat\n    ( integer $compatId\n   )","r":"No value is returned.","p":[{"t":"compatId","d":"Compatibility Id. TRADER_COMPATIBILITY_* series of constants should be used."}]},"trader_set_unstable_period":{"s":"Set unstable period","y":"void trader_set_unstable_period\n    ( integer $functionId\n   , integer $timePeriod\n   )","r":"No value is returned.","p":[{"t":"functionId","d":"Function ID the factor should be set for. TRADER_FUNC_UNST_* constant series can be used to affect the corresponding function."},{"t":"timePeriod","d":"Unstable period value."}]},"trader_sin":{"s":"Vector Trigonometric Sin","y":"array trader_sin\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_sinh":{"s":"Vector Trigonometric Sinh","y":"array trader_sinh\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_sma":{"s":"Simple Moving Average","y":"array trader_sma\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_sqrt":{"s":"Vector Square Root","y":"array trader_sqrt\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_stddev":{"s":"Standard Deviation","y":"array trader_stddev\n    ( array $real\n   [, integer $timePeriod\n   [, float $nbDev\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"nbDev","d":""}]},"trader_stoch":{"s":"Stochastic","y":"array trader_stoch\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $fastK_Period\n   [, integer $slowK_Period\n   [, integer $slowK_MAType\n   [, integer $slowD_Period\n   [, integer $slowD_MAType\n  ]]]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"fastK_Period","d":"Time period for building the Fast-K line. Valid range from 1 to 100000."},{"t":"slowK_Period","d":"Smoothing for making the Slow-K line. Valid range from 1 to 100000, usually set to 3."},{"t":"slowK_MAType","d":"Type of Moving Average for Slow-K. TRADER_MA_TYPE_* series of constants should be used."},{"t":"slowD_Period","d":"Smoothing for making the Slow-D line. Valid range from 1 to 100000."},{"t":"slowD_MAType","d":"Type of Moving Average for Slow-D. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_stochf":{"s":"Stochastic Fast","y":"array trader_stochf\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $fastK_Period\n   [, integer $fastD_Period\n   [, integer $fastD_MAType\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"fastK_Period","d":"Time period for building the Fast-K line. Valid range from 1 to 100000."},{"t":"fastD_Period","d":"Smoothing for making the Fast-D line. Valid range from 1 to 100000, usually set to 3."},{"t":"fastD_MAType","d":"Type of Moving Average for Fast-D. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_stochrsi":{"s":"Stochastic Relative Strength Index","y":"array trader_stochrsi\n    ( array $real\n   [, integer $timePeriod\n   [, integer $fastK_Period\n   [, integer $fastD_Period\n   [, integer $fastD_MAType\n  ]]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"fastK_Period","d":"Time period for building the Fast-K line. Valid range from 1 to 100000."},{"t":"fastD_Period","d":"Smoothing for making the Fast-D line. Valid range from 1 to 100000, usually set to 3."},{"t":"fastD_MAType","d":"Type of Moving Average for Fast-D. TRADER_MA_TYPE_* series of constants should be used."}]},"trader_sub":{"s":"Vector Arithmetic Subtraction","y":"array trader_sub\n    ( array $real0\n   , array $real1\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real0","d":"Array of real values."},{"t":"real1","d":"Array of real values."}]},"trader_sum":{"s":"Summation","y":"array trader_sum\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_t3":{"s":"Triple Exponential Moving Average (T3)","y":"array trader_t3\n    ( array $real\n   [, integer $timePeriod\n   [, float $vFactor\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"vFactor","d":"Volume Factor. Valid range from 1 to 0."}]},"trader_tan":{"s":"Vector Trigonometric Tan","y":"array trader_tan\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_tanh":{"s":"Vector Trigonometric Tanh","y":"array trader_tanh\n    ( array $real\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."}]},"trader_tema":{"s":"Triple Exponential Moving Average","y":"array trader_tema\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_trange":{"s":"True Range","y":"array trader_trange\n    ( array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_trima":{"s":"Triangular Moving Average","y":"array trader_trima\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_trix":{"s":"1-day Rate-Of-Change (ROC) of a Triple Smooth EMA","y":"array trader_trix\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_tsf":{"s":"Time Series Forecast","y":"array trader_tsf\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trader_typprice":{"s":"Typical Price","y":"array trader_typprice\n    ( array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_ultosc":{"s":"Ultimate Oscillator","y":"array trader_ultosc\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod1\n   [, integer $timePeriod2\n   [, integer $timePeriod3\n  ]]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod1","d":"Number of bars for 1st period. Valid range from 1 to 100000."},{"t":"timePeriod2","d":"Number of bars for 2nd period. Valid range from 1 to 100000."},{"t":"timePeriod3","d":"Number of bars for 3rd period. Valid range from 1 to 100000."}]},"trader_var":{"s":"Variance","y":"array trader_var\n    ( array $real\n   [, integer $timePeriod\n   [, float $nbDev\n  ]] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."},{"t":"nbDev","d":""}]},"trader_wclprice":{"s":"Weighted Close Price","y":"array trader_wclprice\n    ( array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"trader_wma":{"s":"Weighted Moving Average","y":"array trader_wma\n    ( array $real\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"real","d":"Array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"trait_exists":{"s":"Checks if the trait exists","y":"bool trait_exists\n    ( string $traitname\n   [, bool $autoload\n  ] )","r":"Returns TRUE if trait exists, FALSE if not, NULL in case of an error.","p":[{"t":"traitname","d":"Name of the trait to check"},{"t":"autoload","d":"Whether to autoload if not already loaded."}]},"trigger_error":{"s":"Generates a user-level error\/warning\/notice message","y":"bool trigger_error\n    ( string $error_msg\n   [, int $error_type = E_USER_NOTICE\n  ] )","r":"This function returns FALSE if wrong error_type is\n   specified, TRUE otherwise.","p":[{"t":"error_msg","d":"The designated error message for this error. It&#039;s limited to 1024 \n       bytes in length. Any additional characters beyond 1024 bytes will be \n       truncated."},{"t":"error_type","d":"The designated error type for this error. It only works with the E_USER\n       family of constants, and will default to E_USER_NOTICE."}]},"trim":{"s":"Strip whitespace (or other characters) from the beginning and end of a string","y":"string trim\n    ( string $str\n   [, string $character_mask = &quot; \\t\\n\\r\\0\\x0B&quot;\n  ] )","r":"The trimmed string.","p":[{"t":"str","d":"The string that will be trimmed."},{"t":"character_mask","d":"Optionally, the stripped characters can also be specified using\n       the character_mask parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters."}]},"uasort":{"s":"Sort an array with a user-defined comparison function and maintain index association","y":"bool uasort\n    ( array &$array\n   , callable $value_compare_func\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"value_compare_func","d":"See usort() and uksort() for\n       examples of user-defined comparison functions."}]},"ucfirst":{"s":"Make a string&#039;s first character uppercase","y":"string ucfirst\n    ( string $str\n   )","r":"Returns the resulting string.","p":[{"t":"str","d":"The input string."}]},"ucwords":{"s":"Uppercase the first character of each word in a string","y":"string ucwords\n    ( string $str\n   )","r":"Returns the modified string.","p":[{"t":"str","d":"The input string."}]},"udm_add_search_limit":{"s":"Add various search limits","y":"bool udm_add_search_limit\n    ( resource $agent\n   , int $var\n   , string $val\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"var","d":"Defines the parameter, indicating limits. \n       Possible var values:\n       \n        \n         \n          UDM_LIMIT_URL - defines document URL limitations to limit the search\n          through subsection of the database. It supports SQL % and _  LIKE wildcards,\n          where % matches any number of characters, even zero characters,\n          and _ matches exactly one character. E.g. http:\/\/www.example.___\/catalog\n          may stand for http:\/\/www.example.com\/catalog and http:\/\/www.example.net\/catalog.\n         \n        \n        \n         \n          UDM_LIMIT_TAG - defines site TAG limitations. In indexer-conf you can\n          assign specific TAGs to various sites and parts of a site. Tags in\n          mnoGoSearch 3.1.x are lines, that may contain metasymbols % and _.\n          Metasymbols allow searching among groups of tags.\n          E.g. there are links with tags ABCD and ABCE, and search restriction\n          is by ABC_ - the search will be made among both of the tags.\n         \n        \n        \n         \n          UDM_LIMIT_LANG - defines document language limitations.\n         \n        \n        \n         \n          UDM_LIMIT_CAT - defines document category limitations. Categories are\n          similar to tag feature, but nested. So you can have one category inside\n          another and so on. You have to use two characters for each level. Use a\n          hex number going from 0-F or a 36 base number going from 0-Z.\n          Therefore a top-level category like &#039;Auto&#039; would be 01. If it has a\n          subcategory like &#039;Ford&#039;, then it would be 01 (the parent category) and then\n          &#039;Ford&#039; which we will give 01. Put those together and you get 0101. If &#039;Auto&#039;\n          had another subcategory named &#039;VW&#039;, then it&#039;s id would be 01 because it\n          belongs to the &#039;Ford&#039; category and then 02 because it&#039;s the next category.\n          So it&#039;s id would be 0102. If VW had a sub category called &#039;Engine&#039; then it&#039;s\n          id would start at 01 again and it would get the &#039;VW&#039; id 02 and &#039;Auto&#039; id of\n          01, making it 010201. If you want to search for sites under that category\n          then you pass it cat=010201 in the URL.\n         \n        \n        \n         \n          UDM_LIMIT_DATE - defines limitation by date the document was modified."}]},"udm_alloc_agent":{"s":"Allocate mnoGoSearch session","y":"resource udm_alloc_agent\n    ( string $dbaddr\n   [, string $dbmode\n  ] )","r":"Returns a mnogosearch agent identifier on success, FALSE on failure. This\n   function creates a session with database parameters.","p":[{"t":"dbaddr","d":"dbaddr - URL-style database description, with\n       options (type, host, database name, port, user and password) to connect\n       to SQL database. Do not matter for built-in text files support. Format for\n       dbaddr:\n       DBType:[\/\/[DBUser[:DBPass]@]DBHost[:DBPort]]\/DBName\/.\n       Currently supported DBType values are: mysql, pgsql, msql, solid, mssql, oracle,\n       and ibase. Actually, it does not matter for native libraries support, but\n       ODBC users should specify one of the supported values. If your database\n       type is not supported, you may use unknown instead."},{"t":"dbmode","d":"dbmode - You may select the SQL database mode of\n       words storage. Possible values of dbmode are:\n       single, multi, crc,\n       or crc-multi. When single is\n       specified, all words are stored in the same table. If multi\n        is selected, words will be located in different tables depending\n       of their lengths. &quot;multi&quot; mode is usually faster, but requires more tables\n       in the database. If &quot;crc&quot; mode is selected, mnoGoSearch will store 32 bit\n       integer word IDs calculated by CRC32 algorithm instead of words. This mode\n       requires less disk space and it is faster comparing with &quot;single&quot; and\n       &quot;multi&quot; modes. crc-multi uses the same storage structure\n       with the &quot;crc&quot; mode, but also stores words in different tables depending on\n       words lengths like in &quot;multi&quot; mode."}]},"udm_alloc_agent_array":{"s":"Allocate mnoGoSearch session","y":"resource udm_alloc_agent_array\n    ( array $databases\n   )","r":"Returns a resource link identifier on success or FALSE on failure.","p":[{"t":"databases","d":"The array databases must contain one database\n       URL per element, analog to the first parameter of\n       udm_alloc_agent()."}]},"udm_api_version":{"s":"Get mnoGoSearch API version","y":"int udm_api_version\n    ( void\n   )","r":"udm_api_version() returns the mnoGoSearch API version\n   number. E.g. if mnoGoSearch 3.1.10 API is used, this function will return\n   30110.","p":null},"udm_cat_list":{"s":"Get all the categories on the same level with the current one","y":"array udm_cat_list\n    ( resource $agent\n   , string $category\n   )","r":"Returns an array listing all categories of the same level as the current\n   category in the categories tree.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"category","d":""}]},"udm_cat_path":{"s":"Get the path to the current category","y":"array udm_cat_path\n    ( resource $agent\n   , string $category\n   )","r":"The returned array consists of pairs. Elements with even index numbers\n   contain the category paths, odd elements contain the corresponding category\n   names.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"category","d":""}]},"udm_check_charset":{"s":"Check if the given charset is known to mnogosearch","y":"bool udm_check_charset\n    ( resource $agent\n   , string $charset\n   )","r":"","p":null},"udm_check_stored":{"s":"Check connection to stored","y":"int udm_check_stored\n    ( resource $agent\n   , int $link\n   , string $doc_id\n   )","r":"","p":null},"udm_clear_search_limits":{"s":"Clear all mnoGoSearch search restrictions","y":"bool udm_clear_search_limits\n    ( resource $agent\n   )","r":"Returns TRUE.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"udm_close_stored":{"s":"Close connection to stored","y":"int udm_close_stored\n    ( resource $agent\n   , int $link\n   )","r":"","p":null},"udm_crc32":{"s":"Return CRC32 checksum of given string","y":"int udm_crc32\n    ( resource $agent\n   , string $str\n   )","r":"","p":null},"udm_errno":{"s":"Get mnoGoSearch error number","y":"int udm_errno\n    ( resource $agent\n   )","r":"Returns the mnoGoSearch error number, zero if no error.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"udm_error":{"s":"Get mnoGoSearch error message","y":"string udm_error\n    ( resource $agent\n   )","r":"udm_error() returns mnoGoSearch error message,\n   empty string if no error.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"udm_find":{"s":"Perform search","y":"resource udm_find\n    ( resource $agent\n   , string $query\n   )","r":"Returns a result link identifier on success or FALSE on failure.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"query","d":"mnoGoSearch understands the following boolean operators:"}]},"udm_free_agent":{"s":"Free mnoGoSearch session","y":"int udm_free_agent\n    ( resource $agent\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"udm_free_res":{"s":"Free mnoGoSearch result","y":"bool udm_free_res\n    ( resource $res\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"res","d":"A link to a result identifier, received after call to\n       udm_find()."}]},"udm_get_doc_count":{"s":"Get total number of documents in database","y":"int udm_get_doc_count\n    ( resource $agent\n   )","r":"Returns the number of documents.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"udm_get_res_field":{"s":"Fetch a result field","y":"string udm_get_res_field\n    ( resource $res\n   , int $row\n   , int $field\n   )","r":"udm_get_res_field() returns result field value on\n   success, FALSE on error.","p":[{"t":"res","d":"res - a link to result identifier, received\n       after call to udm_find()."},{"t":"row","d":"row - the number of the link on the current page.\n       May have values from 0 to\n       UDM_PARAM_NUM_ROWS-1."},{"t":"field","d":"field - field identifier, may have the following values:\n      \n       \n        \n         UDM_FIELD_URL - document URL field\n        \n       \n       \n        \n         UDM_FIELD_CONTENT - document\n         Content-type field (for example, text\/html).\n        \n       \n       \n        \n         UDM_FIELD_CATEGORY - document category field. Use\n         udm_cat_path() to get full path to current category\n         from the categories tree root. (This parameter is available only in PHP\n         4.0.6 or later).\n        \n       \n       \n        \n         UDM_FIELD_TITLE - document title field.\n        \n       \n       \n        \n         UDM_FIELD_KEYWORDS - document keywords field (from META KEYWORDS tag).\n        \n       \n       \n        \n         UDM_FIELD_DESC - document description field (from META DESCRIPTION tag).\n        \n       \n       \n        \n         UDM_FIELD_TEXT - document body text (the first couple of lines to give an\n         idea of what the document is about).\n        \n       \n       \n        \n         UDM_FIELD_SIZE - document size.\n        \n       \n       \n        \n         UDM_FIELD_URLID - unique URL ID of the link.\n        \n       \n       \n        \n         UDM_FIELD_RATING  - page rating (as calculated by mnoGoSearch).\n        \n       \n       \n        \n         UDM_FIELD_MODIFIED - last-modified field in unixtime format.\n        \n       \n       \n        \n         UDM_FIELD_ORDER - the number of the current document in set of found documents.\n        \n       \n       \n        \n         UDM_FIELD_CRC - document CRC."}]},"udm_get_res_param":{"s":"Get mnoGoSearch result parameters","y":"string udm_get_res_param\n    ( resource $res\n   , int $param\n   )","r":"udm_get_res_param() returns result parameter value on\n   success, FALSE on error.","p":[{"t":"res","d":"res - a link to result identifier, received after\n       call to udm_find()."},{"t":"param","d":"param - parameter identifier, may have the following values:\n       \n        \n         \n          UDM_PARAM_NUM_ROWS - number of received found links on the current page.  It is equal to\n          UDM_PARAM_PAGE_SIZE for all search pages, on the last page - the rest of links.\n         \n        \n        \n         \n          UDM_PARAM_FOUND - total number of results matching the query.\n         \n        \n        \n         \n          UDM_PARAM_WORDINFO - information on the words found. E.g. search for\n          &quot;a good book&quot; will return &quot;a: stopword, good:5637, book: 120&quot;\n         \n        \n        \n         \n          UDM_PARAM_SEARCHTIME - search time in seconds.\n         \n        \n        \n         \n          UDM_PARAM_FIRST_DOC - the number of the first document displayed on current page.\n         \n        \n        \n         \n          UDM_PARAM_LAST_DOC - the number of the last document displayed on current page."}]},"udm_hash32":{"s":"Return Hash32 checksum of gived string","y":"int udm_hash32\n    ( resource $agent\n   , string $str\n   )","r":"Returns a 32-bit hash number.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"str","d":"The input string."}]},"udm_load_ispell_data":{"s":"Load ispell data","y":"bool udm_load_ispell_data\n    ( resource $agent\n   , int $var\n   , string $val1\n   , string $val2\n   , int $flag\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"var","d":"Indicates the source for ispell data. May have the following values:\n       \n        \n         \n          UDM_ISPELL_TYPE_DB - indicates that ispell data should be loaded from SQL.\n          In this case, parameters val1 and val2\n          are ignored and should be left blank. flag\n          should be equal to 1.\n         \n         Note: \n          \n           flag indicates that after loading ispell data\n           from defined source it should be sorted (it is necessary for correct\n           functioning of ispell). In case of loading ispell data from files\n           there may be several calls to udm_load_ispell_data(),\n           and there is no sense to sort data after every call, but only after\n           the last one. Since in db mode all the data is loaded by one call,\n           this parameter should have the value 1. In this mode\n           in case of error, e.g. if ispell tables are absent, the function will\n           return FALSE and code and error message will be accessible through\n           udm_error() and udm_errno()."}]},"udm_set_agent_param":{"s":"Set mnoGoSearch agent session parameters","y":"bool udm_set_agent_param\n    ( resource $agent\n   , int $var\n   , string $val\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."},{"t":"var","d":"The following parameters and their values are available:\n       \n        \n         \n          UDM_PARAM_PAGE_NUM - used to choose search results page number (results\n          are returned by pages beginning from 0, with UDM_PARAM_PAGE_SIZE results per page).\n         \n        \n        \n         \n          UDM_PARAM_PAGE_SIZE - number of search results displayed on one page.\n         \n        \n        \n         \n          UDM_PARAM_SEARCH_MODE - search mode. The following values available: UDM_MODE_ALL -\n          search for all words; UDM_MODE_ANY - search for any word; UDM_MODE_PHRASE -\n          phrase search; UDM_MODE_BOOL - boolean search. See udm_find()\n          for details on boolean search.\n         \n        \n        \n         \n          UDM_PARAM_CACHE_MODE - turns on or off search result cache mode.\n          When enabled, the search engine will store\n          search results to disk. In case a similar search is performed later,\n          the engine will take results from the cache for faster performance.\n          Available values: UDM_CACHE_ENABLED,\n          UDM_CACHE_DISABLED.\n         \n        \n        \n         \n          UDM_PARAM_TRACK_MODE - turns on or off trackquery mode. Since\n          version 3.1.2 mnoGoSearch has a query tracking support.\n          Note that tracking is implemented in SQL version only and not available\n           in built-in database.\n          To use tracking, you have to create tables for tracking support.\n          For MySQL, use create\/mysql\/track.txt.\n          When doing a search, front-end uses those tables to store query words,\n          a number of found documents and current Unix timestamp in seconds.\n          Available values: UDM_TRACK_ENABLED,\n          UDM_TRACK_DISABLED.\n         \n        \n        \n         \n          UDM_PARAM_PHRASE_MODE - defines whether index database using phrases\n          (&quot;phrase&quot; parameter in indexer.conf).\n          Possible values: UDM_PHRASE_ENABLED and UDM_PHRASE_DISABLED.\n          Please note, that if phrase search is enabled (UDM_PHRASE_ENABLED),\n          it is still possible to do search in any mode (ANY, ALL,\n          BOOL or PHRASE).\n          In 3.1.10 version of mnoGoSearch phrase search is supported only in sql\n          and built-in database modes,\n          while beginning with 3.1.11 phrases are supported in cachemode as well.\n         \n         \n          Examples of phrase search:\n         \n         \n          &quot;Arizona desert&quot; - This query returns all indexed documents that contain\n          &quot;Arizona desert&quot; as a phrase. Notice that you need to put double quotes\n          around the phrase\n         \n        \n        \n         \n          UDM_PARAM_CHARSET - defines local charset. Available values: set of\n          charsets supported by mnoGoSearch, e.g. koi8-r, cp1251, ...\n         \n        \n        \n         \n          UDM_PARAM_STOPFILE - Defines name and path\n          to stopwords file.  (There is a small difference with mnoGoSearch\n          - while in mnoGoSearch if relative path or no path entered, it\n          looks for this file in relation to UDM_CONF_DIR, the module looks for\n          the file in relation to current path, i.e. to the path where the\n          PHP script is executed.)\n         \n        \n        \n         \n          UDM_PARAM_STOPTABLE - Load stop words from the given SQL table. You may use\n          several StopwordTable commands.\n          This command has no effect when compiled without SQL database support.\n         \n        \n        \n         \n          UDM_PARAM_WEIGHT_FACTOR - represents weight factors for specific document parts.\n          Currently body, title, keywords, description, url are supported.\n          To activate this feature please use degrees of 2 in *Weight commands of\n          the indexer.conf. Let&#039;s imagine that we have these weights:\n         \n         \n      URLWeight     1\n      BodyWeight    2\n      TitleWeight   4\n      KeywordWeight 8\n      DescWeight    16\n         \n     \n         \n          As far as indexer uses bit OR operation for word weights when some\n          word presents several time in the same document, it is possible at search\n          time to detect word appearance in different document parts. Word which\n          appears only in the body will have 00000010 aggregate weight (in binary notation).\n          Word used in all document parts will have 00011111 aggregate weight.\n         \n     \n         \n          This parameter&#039;s value is a string of hex digits ABCDE. Each digit is a\n          factor for corresponding bit in word weight. For the given above weights\n          configuration:\n         \n         \n       E is a factor for weight 1  (URL Weight bit)\n       D is a factor for weight 2  (BodyWeight bit)\n       C is a factor for weight 4  (TitleWeight bit)\n       B is a factor for weight 8  (KeywordWeight bit)\n       A is a factor for weight 16 (DescWeight bit)\n         \n         \n          Examples:\n         \n         \n          UDM_PARAM_WEIGHT_FACTOR=00001 will search through URLs only.\n         \n         \n          UDM_PARAM_WEIGHT_FACTOR=00100 will search through Titles only.\n         \n         \n          UDM_PARAM_WEIGHT_FACTOR=11100 will search through Title,Keywords,Description\n          but not through URL and Body.\n         \n         \n          UDM_PARAM_WEIGHT_FACTOR=F9421 will search through:\n         \n         \n        Description with factor 15  (F hex)\n        Keywords with factor 9\n        Title with factor  4\n        Body with factor 2\n        URL with factor 1\n         \n         \n          If UDM_PARAM_WEIGHT_FACTOR variable is omitted, original weight value is\n          taken to sort results. For a given above weight configuration it means\n          that document description has a most big weight 16.\n         \n        \n        \n         \n          UDM_PARAM_WORD_MATCH - word match. You may use this parameter to choose\n          word match type. This feature works only in &quot;single&quot; and &quot;multi&quot; modes\n          using SQL based and built-in database. It does not work in cachemode and other modes\n          since they use word CRC and do not support substring search. Available values:\n         \n         UDM_MATCH_BEGIN - word beginning match;\n         UDM_MATCH_END - word ending match;\n         UDM_MATCH_WORD - whole word match;\n         UDM_MATCH_SUBSTR - word substring match.\n        \n        \n         \n          UDM_PARAM_MIN_WORD_LEN - defines minimal word length.\n          Any word shorter this limit is considered to be a stopword. Please note\n          that this parameter value is inclusive, i.e. if UDM_PARAM_MIN_WORD_LEN=3,\n          a word 3 characters long will not be considered a stopword, while\n          a word 2 characters long will be. Default value is 1.\n         \n        \n        \n         \n          UDM_PARAM_ISPELL_PREFIXES - Possible values: UDM_PREFIXES_ENABLED and\n          UDM_PREFIXES_DISABLED, that respectively enable or disable using prefixes.\n          E.g. if a word &quot;tested&quot; is in search query, also words like &quot;test&quot;,\n          &quot;testing&quot;, etc. Only suffixes are supported by default. Prefixes usually\n          change word meanings, for example if somebody is searching for the word &quot;tested&quot;\n          one hardly wants &quot;untested&quot;  to be found. Prefixes support may also be\n          found useful for site&#039;s spelling checking purposes. In order to enable\n          ispell, you have to load ispell data with udm_load_ispell_data().\n         \n        \n        \n         \n          UDM_PARAM_CROSS_WORDS - enables or disables crosswords support.\n          Possible values: UDM_CROSS_WORDS_ENABLED and UDM_CROSS_WORDS_DISABLED.\n         \n         \n          The crosswords feature allows to assign words between &lt;a href=&quot;xxx&quot;&gt; and &lt;\/a&gt;\n          also to a document this link leads to. It works in SQL database mode and\n          is not supported in built-in database and Cachemode.\n         \n        \n        \n         \n          UDM_PARAM_VARDIR - specifies a custom path to directory where indexer\n          stores data when using built-in database and in cache mode.\n          By default \/var directory of\n          mnoGoSearch installation is used. Can have\n          only string values."},{"t":"val","d":""}]},"uksort":{"s":"Sort an array by keys using a user-defined comparison function","y":"bool uksort\n    ( array &$array\n   , callable $key_compare_func\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"key_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"umask":{"s":"Changes the current umask","y":"int umask\n    ([ int $mask\n  ] )","r":"umask() without arguments simply returns the\n   current umask otherwise the old umask is returned.","p":[{"t":"mask","d":"The new umask."}]},"uniqid":{"s":"Generate a unique ID","y":"string uniqid\n    ([ string $prefix = &quot;&quot;\n   [, bool $more_entropy = false\n  ]] )","r":"Returns the unique identifier, as a string.","p":[{"t":"prefix","d":"Can be useful, for instance, if you generate identifiers\n       simultaneously on several hosts that might happen to generate the\n       identifier at the same microsecond."},{"t":"more_entropy","d":"If set to TRUE, uniqid() will add additional\n       entropy (using the combined linear congruential generator) at the end\n       of the return value, which increases the likelihood that the result\n       will be unique."}]},"unixtojd":{"s":"Convert Unix timestamp to Julian Day","y":"int unixtojd\n    ([ int $timestamp = time()\n  ] )","r":"A julian day number as integer.","p":[{"t":"timestamp","d":"A unix timestamp to convert."}]},"unlink":{"s":"Deletes a file","y":"bool unlink\n    ( string $filename\n   [, resource $context\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the file."},{"t":"context","d":""}]},"unpack":{"s":"Unpack data from binary string","y":"array unpack\n    ( string $format\n   , string $data\n   )","r":"Returns an associative array containing unpacked elements of binary\n   string.","p":[{"t":"format","d":"See pack() for an explanation of the format codes."},{"t":"data","d":"The packed data."}]},"unregister_tick_function":{"s":"De-register a function for execution on each tick","y":"void unregister_tick_function\n    ( string $function_name\n   )","r":"No value is returned.","p":[{"t":"function_name","d":"The function name, as a string."}]},"unserialize":{"s":"Creates a PHP value from a stored representation","y":"mixed unserialize\n    ( string $str\n   )","r":"The converted value is returned, and can be a boolean,\n   integer, float, string,\n   array or object.","p":[{"t":"str","d":"The serialized string."}]},"unset":{"s":"Unset a given variable","y":"void unset\n    ( mixed $var\n   [, mixed $...\n  ] )","r":"No value is returned.","p":[{"t":"var","d":"The variable to be unset."},{"t":"...","d":"Another variable ..."}]},"untaint":{"s":"Untaint strings","y":"bool untaint\n    ( string &$string\n   [, string $...\n  ] )","r":"","p":[{"t":"string","d":""},{"t":"...","d":""}]},"urldecode":{"s":"Decodes URL-encoded string","y":"string urldecode\n    ( string $str\n   )","r":"Returns the decoded string.","p":[{"t":"str","d":"The string to be decoded."}]},"urlencode":{"s":"URL-encodes string","y":"string urlencode\n    ( string $str\n   )","r":"Returns a string in which all non-alphanumeric characters except\n   -_. have been replaced with a percent\n   (%) sign followed by two hex digits and spaces encoded\n   as plus (+) signs.  It is encoded the same way that the\n   posted data from a WWW form is encoded, that is the same way as in\n   application\/x-www-form-urlencoded media type. This\n   differs from the &raquo;&nbsp;RFC 3986 encoding (see\n   rawurlencode()) in that for historical reasons, spaces\n   are encoded as plus (+) signs.","p":[{"t":"str","d":"The string to be encoded."}]},"user_error":{"s":"Alias of trigger_error()","y":"","r":"","p":null},"use_soap_error_handler":{"s":"Set whether to use the SOAP error handler","y":"bool use_soap_error_handler\n    ([ bool $handler = true\n  ] )","r":"Returns the original value.","p":[{"t":"handler","d":"Set to TRUE to send error details to clients."}]},"usleep":{"s":"Delay execution in microseconds","y":"void usleep\n    ( int $micro_seconds\n   )","r":"No value is returned.","p":[{"t":"micro_seconds","d":"Halt time in micro seconds. A micro second is one millionth of a\n       second."}]},"usort":{"s":"Sort an array by values using a user-defined comparison function","y":"bool usort\n    ( array &$array\n   , callable $value_compare_func\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"array","d":"The input array."},{"t":"value_compare_func","d":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second."}]},"utf8_decode":{"s":"Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1","y":"string utf8_decode\n    ( string $data\n   )","r":"Returns the ISO-8859-1 translation of data.","p":[{"t":"data","d":"An UTF-8 encoded string."}]},"utf8_encode":{"s":"Encodes an ISO-8859-1 string to UTF-8","y":"string utf8_encode\n    ( string $data\n   )","r":"Returns the UTF-8 translation of data.","p":[{"t":"data","d":"An ISO-8859-1 string."}]},"variant_abs":{"s":"Returns the absolute value of a variant","y":"mixed variant_abs\n    ( mixed $val\n   )","r":"Returns the absolute value of val.","p":[{"t":"val","d":"The variant."}]},"variant_add":{"s":"&quot;Adds&quot; two variant values together and returns the result","y":"mixed variant_add\n    ( mixed $left\n   , mixed $right\n   )","r":"Returns the result.","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_and":{"s":"Performs a bitwise AND operation between two variants","y":"mixed variant_and\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant AND Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUETRUE\n\n      TRUEFALSEFALSE\n\n      TRUENULLNULL\n\n      FALSETRUEFALSE\n\n      FALSEFALSEFALSE\n\n      FALSENULLFALSE\n\n      NULLTRUENULL\n\n      NULLFALSEFALSE\n\n      NULLNULLNULL","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_cast":{"s":"Convert a variant into a new variant object of another type","y":"variant variant_cast\n    ( variant $variant\n   , int $type\n   )","r":"Returns a VT_DATE variant.","p":[{"t":"variant","d":"The variant."},{"t":"type","d":"type should be one of the\n       VT_XXX constants."}]},"variant_cat":{"s":"concatenates two variant values together and returns the result","y":"mixed variant_cat\n    ( mixed $left\n   , mixed $right\n   )","r":"Returns the result of the concatenation.","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_cmp":{"s":"Compares two variants","y":"int variant_cmp\n    ( mixed $left\n   , mixed $right\n   [, int $lcid\n   [, int $flags\n  ]] )","r":"Returns one of the following:\n   \n    Variant Comparision Results\n    \n     \n      \n       value\n       meaning\n      \n\n     \n\n     \n      \n       VARCMP_LT\n       left is less than\n        right\n       \n      \n\n      \n       VARCMP_EQ\n       left is equal to\n        right\n       \n      \n\n      \n       VARCMP_GT\n       left is greater than\n        right\n       \n      \n\n      \n       VARCMP_NULL\n       Either left,\n        right or both are NULL","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."},{"t":"lcid","d":"A valid Locale Identifier to use when comparing strings (this affects\n       string collation)."},{"t":"flags","d":"flags can be one or more of the following values\n       OR&#039;d together, and affects string comparisons:\n       \n        Variant Comparision Flags\n        \n         \n          \n           value\n           meaning\n          \n\n         \n\n         \n          \n           NORM_IGNORECASE\n           Compare case insensitively\n          \n\n          \n           NORM_IGNORENONSPACE\n           Ignore nonspacing characters\n          \n\n          \n           NORM_IGNORESYMBOLS\n           Ignore symbols\n          \n\n          \n           NORM_IGNOREWIDTH\n           Ignore string width\n          \n\n          \n           NORM_IGNOREKANATYPE\n           Ignore Kana type\n          \n\n          \n           NORM_IGNOREKASHIDA\n           Ignore Arabic kashida characters"}]},"variant_date_from_timestamp":{"s":"Returns a variant date representation of a Unix timestamp","y":"variant variant_date_from_timestamp\n    ( int $timestamp\n   )","r":"Returns a VT_DATE variant.","p":[{"t":"timestamp","d":"A unix timestamp."}]},"variant_date_to_timestamp":{"s":"Converts a variant date\/time value to Unix timestamp","y":"int variant_date_to_timestamp\n    ( variant $variant\n   )","r":"Returns a unix timestamp.","p":[{"t":"variant","d":"The variant."}]},"variant_div":{"s":"Returns the result from dividing two variants","y":"mixed variant_div\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant Division Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Double is returned\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Division and a double is returned\n      \n\n      \n       One expression is numeric and the other is a string\n       Division and a double is returned.\n      \n\n      \n       Both expressions are numeric\n       Division and a double is returned\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       right is empty and\n       left is anything but empty\n       A com_exception with code DISP_E_DIVBYZERO\n       is thrown\n      \n\n      \n       left is empty and\n       right is anything but empty.\n       0 as type double is returned\n      \n\n      \n       Both expressions are empty\n       A com_exception with code DISP_E_OVERFLOW\n       is thrown","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_eqv":{"s":"Performs a bitwise equivalence on two variants","y":"mixed variant_eqv\n    ( mixed $left\n   , mixed $right\n   )","r":"If each bit in left is equal to the corresponding\n   bit in right then TRUE is returned, otherwise\n   FALSE is returned.","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_fix":{"s":"Returns the integer portion of a variant","y":"mixed variant_fix\n    ( mixed $variant\n   )","r":"If variant is negative, then the first negative\n   integer greater than or equal to the variant is returned, otherwise\n   returns the integer portion of the value of\n   variant.","p":[{"t":"variant","d":"The variant."}]},"variant_get_type":{"s":"Returns the type of a variant object","y":"int variant_get_type\n    ( variant $variant\n   )","r":"This function returns an integer value that indicates the type of\n   variant, which can be an instance of\n   COM, DOTNET or\n   VARIANT classes.  The return value can be compared\n   to one of the VT_XXX constants.","p":[{"t":"variant","d":"The variant object."}]},"variant_idiv":{"s":"Converts variants to integers and then returns the result from dividing them","y":"mixed variant_idiv\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant Integer Division Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Division and integer is returned\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Division\n      \n\n      \n       One expression is numeric and the other is a string\n       Division\n      \n\n      \n       Both expressions are numeric\n       Division\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       A com_exception with code DISP_E_DIVBYZERO\n       is thrown","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_imp":{"s":"Performs a bitwise implication on two variants","y":"mixed variant_imp\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant Implication Table\n    \n    \n     \n      If left is\n      If right is\n      then the result is\n     \n\n    \n\n    \n     TRUETRUETRUE\n\n     TRUEFALSETRUE\n\n     TRUENULLTRUE\n\n     FALSETRUETRUE\n\n     FALSEFALSETRUE\n\n     FALSENULLTRUE\n\n     NULLTRUETRUE\n\n     NULLFALSENULL\n\n     NULLNULLNULL","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_int":{"s":"Returns the integer portion of a variant","y":"mixed variant_int\n    ( mixed $variant\n   )","r":"If variant is negative, then the first negative\n   integer greater than or equal to the variant is returned, otherwise\n   returns the integer portion of the value of\n   variant.","p":[{"t":"variant","d":"The variant."}]},"variant_mul":{"s":"Multiplies the values of the two variants","y":"mixed variant_mul\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant Multiplication Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Multiplication\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Multiplication\n      \n\n      \n       One expression is numeric and the other is a string\n       Multiplication\n      \n\n      \n       Both expressions are numeric\n       Multiplication\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       Empty string is returned","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_neg":{"s":"Performs logical negation on a variant","y":"mixed variant_neg\n    ( mixed $variant\n   )","r":"Returns the result of the logical negation.","p":[{"t":"variant","d":"The variant."}]},"variant_not":{"s":"Performs bitwise not negation on a variant","y":"mixed variant_not\n    ( mixed $variant\n   )","r":"Returns the bitwise not negation. If variant is\n   NULL, the result will also be NULL.","p":[{"t":"variant","d":"The variant."}]},"variant_or":{"s":"Performs a logical disjunction on two variants","y":"mixed variant_or\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant OR Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUETRUE\n\n      TRUEFALSETRUE\n\n      TRUENULLTRUE\n\n      FALSETRUETRUE\n\n      FALSEFALSEFALSE\n\n      FALSENULLNULL\n\n      NULLTRUETRUE\n\n      NULLFALSENULL\n\n      NULLNULLNULL","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_pow":{"s":"Returns the result of performing the power function with two variants","y":"mixed variant_pow\n    ( mixed $left\n   , mixed $right\n   )","r":"Returns the result of left to the power of\n   right.","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"variant_round":{"s":"Rounds a variant to the specified number of decimal places","y":"mixed variant_round\n    ( mixed $variant\n   , int $decimals\n   )","r":"Returns the rounded value.","p":[{"t":"variant","d":"The variant."},{"t":"decimals","d":"Number of decimal places."}]},"variant_set":{"s":"Assigns a new value for a variant object","y":"void variant_set\n    ( variant $variant\n   , mixed $value\n   )","r":"No value is returned.","p":[{"t":"variant","d":"The variant."},{"t":"value","d":""}]},"variant_set_type":{"s":"Convert a variant into another type &quot;in-place&quot;","y":"void variant_set_type\n    ( variant $variant\n   , int $type\n   )","r":"No value is returned.","p":[{"t":"variant","d":"The variant."},{"t":"type","d":""}]},"variant_sub":{"s":"Subtracts the value of the right variant from the left variant value","y":"mixed variant_sub\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant Subtraction Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string type\n       Subtraction\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Subtraction\n      \n\n      \n       One expression is numeric and the other is a string\n       Subtraction.\n      \n\n      \n       Both expressions are numeric\n       Subtraction\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       Empty string is returned","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"var_dump":{"s":"Dumps information about a variable","y":"void var_dump\n    ( mixed $expression\n   [, mixed $...\n  ] )","r":"No value is returned.","p":[{"t":"expression","d":"The variable you want to dump."}]},"var_export":{"s":"Outputs or returns a parsable string representation of a variable","y":"mixed var_export\n    ( mixed $expression\n   [, bool $return = false\n  ] )","r":"Returns the variable representation when the return \n   parameter is used and evaluates to TRUE. Otherwise, this function will\n   return NULL.","p":[{"t":"expression","d":"The variable you want to export."},{"t":"return","d":"If used and set to TRUE, var_export() will return\n       the variable representation instead of outputting it."}]},"version_compare":{"s":"Compares two &quot;PHP-standardized&quot; version number strings","y":"mixed version_compare\n    ( string $version1\n   , string $version2\n   [, string $operator\n  ] )","r":"By default, version_compare() returns\n   -1 if the first version is lower than the second, \n   0 if they are equal, and\n   1 if the second is lower. ","p":[{"t":"version1","d":"First version number."},{"t":"version2","d":"Second version number."},{"t":"operator","d":"If you specify the third optional operator\n       argument, you can test for a particular relationship. The\n       possible operators are: &lt;,\n       lt, &lt;=,\n       le, &gt;,\n       gt, &gt;=,\n       ge, ==,\n       =, eq,\n       !=, &lt;&gt;,\n       ne respectively."}]},"vfprintf":{"s":"Write a formatted string to a stream","y":"int vfprintf\n    ( resource $handle\n   , string $format\n   , array $args\n   )","r":"Returns the length of the outputted string.","p":[{"t":"handle","d":""},{"t":"format","d":"See sprintf() for a description of\n       format."},{"t":"args","d":""}]},"virtual":{"s":"Perform an Apache sub-request","y":"bool virtual\n    ( string $filename\n   )","r":"Performs the virtual command on success, or returns FALSE on failure.","p":[{"t":"filename","d":"The file that the virtual command will be performed on."}]},"vpopmail_add_alias_domain":{"s":"Add an alias for a virtual domain","y":"bool vpopmail_add_alias_domain\n    ( string $domain\n   , string $aliasdomain\n   )","r":"","p":null},"vpopmail_add_alias_domain_ex":{"s":"Add alias to an existing virtual domain","y":"bool vpopmail_add_alias_domain_ex\n    ( string $olddomain\n   , string $newdomain\n   )","r":"","p":null},"vpopmail_add_domain":{"s":"Add a new virtual domain","y":"bool vpopmail_add_domain\n    ( string $domain\n   , string $dir\n   , int $uid\n   , int $gid\n   )","r":"","p":null},"vpopmail_add_domain_ex":{"s":"Add a new virtual domain","y":"bool vpopmail_add_domain_ex\n    ( string $domain\n   , string $passwd\n   [, string $quota\n   [, string $bounce\n   [, bool $apop\n  ]]] )","r":"","p":null},"vpopmail_add_user":{"s":"Add a new user to the specified virtual domain","y":"bool vpopmail_add_user\n    ( string $user\n   , string $domain\n   , string $password\n   [, string $gecos\n   [, bool $apop\n  ]] )","r":"","p":null},"vpopmail_alias_del":{"s":"Deletes all virtual aliases of a user","y":"bool vpopmail_alias_del\n    ( string $user\n   , string $domain\n   )","r":"","p":null},"vpopmail_alias_get":{"s":"Get all lines of an alias for a domain","y":"array vpopmail_alias_get\n    ( string $alias\n   , string $domain\n   )","r":"","p":null},"vpopmail_alias_get_all":{"s":"Get all lines of an alias for a domain","y":"array vpopmail_alias_get_all\n    ( string $domain\n   )","r":"","p":null},"vpopmail_auth_user":{"s":"Attempt to validate a username\/domain\/password","y":"bool vpopmail_auth_user\n    ( string $user\n   , string $domain\n   , string $password\n   [, string $apop\n  ] )","r":"","p":null},"vpopmail_del_domain":{"s":"Delete a virtual domain","y":"bool vpopmail_del_domain\n    ( string $domain\n   )","r":"","p":null},"vpopmail_del_domain_ex":{"s":"Delete a virtual domain","y":"bool vpopmail_del_domain_ex\n    ( string $domain\n   )","r":"","p":null},"vpopmail_del_user":{"s":"Delete a user from a virtual domain","y":"bool vpopmail_del_user\n    ( string $user\n   , string $domain\n   )","r":"","p":null},"vpopmail_error":{"s":"Get text message for last vpopmail error","y":"string vpopmail_error\n    ( void\n   )","r":"","p":null},"vpopmail_passwd":{"s":"Change a virtual user&#039;s password","y":"bool vpopmail_passwd\n    ( string $user\n   , string $domain\n   , string $password\n   [, bool $apop\n  ] )","r":"","p":null},"vpopmail_set_user_quota":{"s":"Sets a virtual user&#039;s quota","y":"bool vpopmail_set_user_quota\n    ( string $user\n   , string $domain\n   , string $quota\n   )","r":"","p":null},"vprintf":{"s":"Output a formatted string","y":"int vprintf\n    ( string $format\n   , array $args\n   )","r":"Returns the length of the outputted string.","p":[{"t":"format","d":"See sprintf() for a description of\n       format."},{"t":"args","d":""}]},"vsprintf":{"s":"Return a formatted string","y":"string vsprintf\n    ( string $format\n   , array $args\n   )","r":"Return array values as a formatted string according to\n   format (which is described in the documentation\n   for sprintf()).","p":[{"t":"format","d":"See sprintf() for a description of\n       format."},{"t":"args","d":""}]},"w32api_deftype":{"s":"Defines a type for use with other w32api_functions","y":"bool w32api_deftype\n    ( string $typename\n   , string $member1_type\n   , string $member1_name\n   [, string $...\n   [, string $...\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"typename","d":"The name of the type."},{"t":"member1_type","d":"A member type can be a user defined type. All the type names are case\n       sensitive. Built in type names should be provided in lowercase."},{"t":"member1_name","d":"The member name of member1_type."},{"t":"...","d":""},{"t":"...","d":""}]},"w32api_init_dtype":{"s":"Creates an instance of the data type typename and fills it with the values passed","y":"resource w32api_init_dtype\n    ( string $typename\n   , mixed $value\n   [, mixed $...\n  ] )","r":"Returns a dynaparm resource.","p":[{"t":"typename","d":"The typename parameter is case sensitive."},{"t":"value","d":"You should give the values in the same order as you defined the data\n       type with w32api_deftype()."},{"t":"...","d":""}]},"w32api_invoke_function":{"s":"Invokes function funcname with the arguments passed after the function name","y":"mixed w32api_invoke_function\n    ( string $funcname\n   , mixed $argument\n   [, mixed $...\n  ] )","r":"The return type is the one you set when you registered the function, the\n   value is the one returned by the function itself.","p":[{"t":"funcname","d":"The function name."},{"t":"argument","d":"Any of the arguments can be of any PHP type or\n       w32api_deftype() defined type, as needed."},{"t":"...","d":""}]},"w32api_set_call_method":{"s":"Sets the calling method used","y":"void w32api_set_call_method\n    ( int $method\n   )","r":"No value is returned.","p":[{"t":"method","d":"Can be one of DC_CALL_CDECL or\n       DC_CALL_STD (the extension default)."}]},"wddx_add_vars":{"s":"Add variables to a WDDX packet with the specified ID","y":"bool wddx_add_vars\n    ( resource $packet_id\n   , mixed $var_name\n   [, mixed $...\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"packet_id","d":"A WDDX packet, returned by wddx_packet_start()."},{"t":"var_name","d":"Can be either a string naming a variable or an array containing\n       strings naming the variables or another array, etc."},{"t":"...","d":""}]},"wddx_deserialize":{"s":"Unserializes a WDDX packet","y":"mixed wddx_deserialize\n    ( string $packet\n   )","r":"Returns the deserialized value which can be a string, a number or an\n   array. Note that structures are deserialized into associative arrays.","p":[{"t":"packet","d":"A WDDX packet, as a string or stream."}]},"wddx_packet_end":{"s":"Ends a WDDX packet with the specified ID","y":"string wddx_packet_end\n    ( resource $packet_id\n   )","r":"Returns the string containing the WDDX packet.","p":[{"t":"packet_id","d":"A WDDX packet, returned by wddx_packet_start()."}]},"wddx_packet_start":{"s":"Starts a new WDDX packet with structure inside it","y":"resource wddx_packet_start\n    ([ string $comment\n  ] )","r":"Returns a packet ID for use in later functions, or FALSE on error.","p":[{"t":"comment","d":"An optional comment string."}]},"wddx_serialize_value":{"s":"Serialize a single value into a WDDX packet","y":"string wddx_serialize_value\n    ( mixed $var\n   [, string $comment\n  ] )","r":"Returns the WDDX packet, or FALSE on error.","p":[{"t":"var","d":"The value to be serialized"},{"t":"comment","d":"An optional comment string that appears in the packet header."}]},"wddx_serialize_vars":{"s":"Serialize variables into a WDDX packet","y":"string wddx_serialize_vars\n    ( mixed $var_name\n   [, mixed $...\n  ] )","r":"Returns the WDDX packet, or FALSE on error.","p":[{"t":"var_name","d":"Can be either a string naming a variable or an array containing\n       strings naming the variables or another array, etc."},{"t":"...","d":""}]},"win32_continue_service":{"s":"Resumes a paused service","y":"int win32_continue_service\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"Optional machine name.  If omitted, the local machine is used."}]},"win32_create_service":{"s":"Creates a new service entry in the SCM database","y":"mixed win32_create_service\n    ( array $details\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"details","d":""},{"t":"service","d":"The short name of the service.  This is the name that you\n           will use to control the service using the net\n           command.  The service must be unique (no two services can share the\n           same name), and, ideally, should avoid having spaces in the name."},{"t":"display","d":"The display name of the service.  This is the name that you\n          will see in the Services Applet."},{"t":"description","d":"The long description of the service.  This is the description\n          that you will see in the Services Applet."},{"t":"user","d":"The name of the user account under which you want the service to\n           run.  If omitted, the service will run as the LocalSystem account.\n           If the username is specified, you must also provide a password."},{"t":"password","d":"The password that corresponds to the user."},{"t":"path","d":"The full path to the executable module that will be launched when\n           the service is started.  If omitted, the path to the current PHP\n           process will be used."},{"t":"params","d":"Command line parameters to pass to the service when it starts.\n           If you want to run a PHP script as the service, then the first\n           parameter should be the full path to the PHP script that you intend\n           to run. If the script name or path contains spaces, then wrap the\n           full path to the PHP script with &quot;."},{"t":"load_order","d":"Controls the load_order.  This is not yet fully supported."},{"t":"svc_type","d":"Sets the service type.  If omitted, the default value is\n           WIN32_SERVICE_WIN32_OWN_PROCESS.\n           Don&#039;t change this unless you know what you&#039;re doing."},{"t":"start_type","d":"Specifies how the service should be started.  The default is\n           WIN32_SERVICE_AUTO_START which means the\n           service will be launched when the machine starts up."},{"t":"error_control","d":"Informs the SCM what it should do when it detects a problem with\n           the service.  The default is\n           WIN32_SERVER_ERROR_IGNORE.  Changing this\n           value is not yet fully supported."},{"t":"delayed_start","d":"If delayed_start is set to TRUE, then this\n           will inform the SCM that this service should be started after other\n           auto-start services are started plus a short delay."},{"t":"base_priority","d":"To reduce the impact on processor utilisation, it may be necessary\n           to set a base priority lower than normal."},{"t":"machine","d":"The optional machine name on which you want to create a service.\n       If omitted, it will use the local machine."}]},"win32_delete_service":{"s":"Deletes a service entry from the SCM database","y":"mixed win32_delete_service\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"The optional machine name.  If omitted, the local machine will be used."}]},"win32_get_last_control_message":{"s":"Returns the last control message that was sent to this service","y":"int win32_get_last_control_message\n    ( void\n   )","r":"Returns a control constant which will be one of the\n   Win32Service Service Control Message Constants:\n   WIN32_SERVICE_CONTROL_CONTINUE,\n   WIN32_SERVICE_CONTROL_INTERROGATE,\n   WIN32_SERVICE_CONTROL_PAUSE,\n   WIN32_SERVICE_CONTROL_PRESHUTDOWN,\n   WIN32_SERVICE_CONTROL_SHUTDOWN,\n   WIN32_SERVICE_CONTROL_STOP.","p":null},"win32_pause_service":{"s":"Pauses a service","y":"int win32_pause_service\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"Optional machine name.  If omitted, the local machine is used."}]},"win32_ps_list_procs":{"s":"List running processes","y":"array win32_ps_list_procs\n    ( void\n   )","r":"Returns FALSE on failure, or an array consisting of process statistics like \n   win32_ps_stat_proc() returns for all running processes on success.","p":null},"win32_ps_stat_mem":{"s":"Stat memory utilization","y":"array win32_ps_stat_mem\n    ( void\n   )","r":"Returns FALSE on failure, or an array consisting of the\n   following information on success:","p":null},"win32_ps_stat_proc":{"s":"Stat process","y":"array win32_ps_stat_proc\n    ([ int $pid = 0\n  ] )","r":"Returns FALSE on failure, or an array consisting of the\n   following information on success:","p":[{"t":"pid","d":"The process id of the process to stat.  If omitted, the id of the current process."}]},"win32_query_service_status":{"s":"Queries the status of a service","y":"mixed win32_query_service_status\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns an array consisting of the following information on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"The optional machine name.  If omitted, the local machine will be used."}]},"win32_set_service_status":{"s":"Update the service status","y":"bool win32_set_service_status\n    ( int $status\n   [, int $checkpoint = 0\n  ] )","r":"Returns TRUE on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"status","d":"The service status code, one of\n       WIN32_SERVICE_RUNNING,\n       WIN32_SERVICE_STOPPED,\n       WIN32_SERVICE_STOP_PENDING,\n       WIN32_SERVICE_START_PENDING,\n       WIN32_SERVICE_CONTINUE_PENDING,\n       WIN32_SERVICE_PAUSE_PENDING,\n       WIN32_SERVICE_PAUSED."},{"t":"checkpoint","d":"The checkpoint value the service increments periodically to report its\n       progress during a lengthy start, stop, pause, or continue operation.\n       For example, the service should increment this value as it completes\n       each step of its initialization when it is starting up."}]},"win32_start_service":{"s":"Starts a service","y":"int win32_start_service\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"Optional machine name.  If omitted, the local machine is used."}]},"win32_start_service_ctrl_dispatcher":{"s":"Registers the script with the SCM, so that it can act as the service with the given name","y":"mixed win32_start_service_ctrl_dispatcher\n    ( string $name\n   )","r":"Returns TRUE on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"name","d":"The short-name of the service, as registered by\n       win32_create_service()."}]},"win32_stop_service":{"s":"Stops a service","y":"int win32_stop_service\n    ( string $servicename\n   [, string $machine\n  ] )","r":"Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 Error Code on failure.","p":[{"t":"servicename","d":"The short name of the service."},{"t":"machine","d":"Optional machine name.  If omitted, the local machine is used."}]},"wincache_fcache_fileinfo":{"s":"Retrieves information about files cached in the file cache","y":"array wincache_fcache_fileinfo\n    ([ bool $summaryonly = false\n  ] )","r":"Array of meta data about file cache  or FALSE on failure","p":[{"t":"summaryonly","d":"Controls whether the returned array will contain information about individual cache entries \n       along with the file cache summary."}]},"wincache_lock":{"s":"Acquires an exclusive lock on a given key","y":"bool wincache_lock\n    ( string $key\n   [, bool $isglobal = false\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"Name of the key in the cache to get the lock on."},{"t":"isglobal","d":"Controls whether the scope of the lock is system-wide or local. Local locks are scoped to the application pool \n       in IIS FastCGI case or to all php processes that have the same parent process identifier."}]},"wincache_ocache_fileinfo":{"s":"Retrieves information about files cached in the opcode cache","y":"array wincache_ocache_fileinfo\n    ([ bool $summaryonly = false\n  ] )","r":"Array of meta data about opcode cache  or FALSE on failure","p":[{"t":"summaryonly","d":"Controls whether the returned array will contain information about individual cache entries \n       along with the opcode cache summary."}]},"wincache_refresh_if_changed":{"s":"Refreshes the cache entries for the cached files","y":"bool wincache_refresh_if_changed\n    ([ array $files\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"files","d":"An array of file names for files that need to be refreshed. \n       An absolute or relative file paths can be used."}]},"wincache_scache_info":{"s":"Retrieves information about files cached in the session cache","y":"array wincache_scache_info\n    ([ bool $summaryonly = false\n  ] )","r":"Array of meta data about session cache  or FALSE on failure","p":[{"t":"summaryonly","d":"Controls whether the returned array will contain information about individual cache entries \n       along with the session cache summary."}]},"wincache_ucache_add":{"s":"Adds a variable in user cache only if variable does not already exist in the cache","y":"bool wincache_ucache_add\n    ( string $key\n   , mixed $value\n   [, int $ttl = 0\n  ] )","r":"If key is an array, the function returns:\n   \n    \n     \n      If all the name =&gt; value pairs in the array can be set, function returns an empty array;\n     \n    \n    \n     \n     If all the name =&gt; value pairs in the array cannot be set, function returns FALSE;\n     \n    \n    \n     \n      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.","p":[{"t":"key","d":"Store the variable using this key name. If a variable with same key is already present the function\n       will fail and return FALSE. key is case sensitive. To override the value even if \n       key is present use wincache_ucache_set() function instad. \n       key can also take array of name =&gt; value pairs where names will be used as keys. \n       This can be used to add multiple values in the cache in one operation, thus avoiding race condition."},{"t":"value","d":"Value of a variable to store. Value supports all data types except resources, such as file handles.\n       This paramter is ignored if first argument is an array. A general guidance is to pass NULL \n       as value while using array as key. If value is an\n       object, or an array containing objects, then the objects will be serialized. See\n       __sleep() for details on serializing objects."},{"t":"values","d":"Associative array of keys and values."},{"t":"ttl","d":"Time for the variable to live in the cache in seconds. After the value specified in ttl has passed \n       the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means \n       the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete() \n       or wincache_ucache_clear() functions."}]},"wincache_ucache_cas":{"s":"Compares the variable with old value and assigns new value to it","y":"bool wincache_ucache_cas\n    ( string $key\n   , int $old_value\n   , int $new_value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key that is used to store the variable in the cache. \n       key is case sensitive."},{"t":"old_value","d":"Old value of the variable pointed by key in the user cache. \n       The value should be of type long, otherwise the function returns \n       FALSE."},{"t":"new_value","d":"New value which will get assigned to variable pointer by key if a \n       match is found. The value should be of type long, otherwise \n       the function returns FALSE."}]},"wincache_ucache_dec":{"s":"Decrements the value associated with the key","y":"mixed wincache_ucache_dec\n    ( string $key\n   [, int $dec_by = 1\n   [, bool &$success\n  ]] )","r":"","p":[{"t":"key","d":"The key that was used to store the variable in the cache. \n       key is case sensitive."},{"t":"dec_by","d":"The value by which the variable associated with the key will get decremented. \n       If the argument is a floating point number it will be truncated to nearest integer. The variable \n       associated with the key should be of type long, otherwise \n       the function fails and returns FALSE."},{"t":"success","d":"Will be set to TRUE on success and FALSE on failure."}]},"wincache_ucache_delete":{"s":"Deletes variables from the user cache","y":"bool wincache_ucache_delete\n    ( mixed $key\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"The key that was used to store the variable in the cache. \n       key is case sensitive. key can be an \n       array of keys."}]},"wincache_ucache_exists":{"s":"Checks if a variable exists in the user cache","y":"bool wincache_ucache_exists\n    ( string $key\n   )","r":"Returns TRUE if variable with the key exitsts, \n   otherwise returns FALSE.","p":[{"t":"key","d":"The key that was used to store the variable in the cache. \n       key is case sensitive."}]},"wincache_ucache_get":{"s":"Gets a variable stored in the user cache","y":"mixed wincache_ucache_get\n    ( mixed $key\n   [, bool &$success\n  ] )","r":"","p":[{"t":"key","d":"The key that was used to store the variable in the cache. \n       key is case sensitive. key can be an \n       array of keys. In this case the return value will be an array of values of each element \n       in the key array. If an object, or an array containing objects,\n       is returned, then the objects will be unserialized. See\n       __wakeup() for details on unserializing objects."},{"t":"success","d":"Will be set to TRUE on success and FALSE on failure."}]},"wincache_ucache_inc":{"s":"Increments the value associated with the key","y":"mixed wincache_ucache_inc\n    ( string $key\n   [, int $inc_by = 1\n   [, bool &$success\n  ]] )","r":"","p":[{"t":"key","d":"The key that was used to store the variable in the cache. \n       key is case sensitive."},{"t":"inc_by","d":"The value by which the variable associated with the key will get incremented. \n       If the argument is a floating point number it will be truncated to nearest integer. The variable \n       associated with the key should be of type long, otherwise \n       the function fails and returns FALSE."},{"t":"success","d":"Will be set to TRUE on success and FALSE on failure."}]},"wincache_ucache_info":{"s":"Retrieves information about data stored in the user cache","y":"array wincache_ucache_info\n    ([ bool $summaryonly = false\n   [, string $key\n  ]] )","r":"Array of meta data about user cache  or FALSE on failure","p":[{"t":"summaryonly","d":"Controls whether the returned array will contain information about individual cache entries \n       along with the user cache summary."},{"t":"key","d":"The key of an entry in the user cache. If specified then the returned array will contain information \n       only about that cache entry. If not specified and summaryonly is set to \n       FALSE then the returned array will contain information about all entries in the cache."}]},"wincache_ucache_set":{"s":"Adds a variable in user cache and overwrites a variable if it already exists in the cache","y":"bool wincache_ucache_set\n    ( mixed $key\n   , mixed $value\n   [, int $ttl = 0\n  ] )","r":"If key is an array, the function returns:\n   \n    \n     \n      If all the name =&gt; value pairs in the array can be set, function returns an empty array;\n     \n    \n    \n     \n     If all the name =&gt; value pairs in the array cannot be set, function returns FALSE;\n     \n    \n    \n     \n      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.","p":[{"t":"key","d":"Store the variable using this key name. If a variable with same \n       key is already present the function will overwrite the previous \n       value with the new one. key is case sensitive. \n       key can also take array of name =&gt; value pairs where names will be used as \n       keys. This can be used to add multiple values in the cache in one operation, thus avoiding \n       race condition."},{"t":"value","d":"Value of a variable to store. Value supports all data types except resources, such as file handles.\n       This paramter is ignored if first argument is an array. A general guidance is to pass NULL \n       as value while using array as key. If value is an\n       object, or an array containing objects, then the objects will be serialized. See\n       __sleep() for details on serializing objects."},{"t":"values","d":"Associative array of keys and values."},{"t":"ttl","d":"Time for the variable to live in the cache in seconds. After the value specified in ttl has passed \n       the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means \n       the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete() \n       or wincache_ucache_clear() functions."}]},"wincache_unlock":{"s":"Releases an exclusive lock on a given key","y":"bool wincache_unlock\n    ( string $key\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"key","d":"Name of the key in the cache to release the lock on."}]},"wordwrap":{"s":"Wraps a string to a given number of characters","y":"string wordwrap\n    ( string $str\n   [, int $width = 75\n   [, string $break = &quot;\\n&quot;\n   [, bool $cut = false\n  ]]] )","r":"Returns the given string wrapped at the specified length.","p":[{"t":"str","d":"The input string."},{"t":"width","d":"The number of characters at which the string will be wrapped."},{"t":"break","d":"The line is broken using the optional\n       break parameter."},{"t":"cut","d":"If the cut is set to TRUE, the string is\n       always wrapped at or before the specified width.  So if you have\n       a word that is larger than the given width, it is broken apart.\n       (See second example)."}]},"xattr_get":{"s":"Get an extended attribute","y":"string xattr_get\n    ( string $filename\n   , string $name\n   [, int $flags = 0\n  ] )","r":"Returns a string containing the value or FALSE if the attribute doesn&#039;t \n   exist. ","p":[{"t":"filename","d":"The file from which we get the attribute."},{"t":"name","d":"The name of the attribute."},{"t":"flags","d":"Supported xattr flags\n        \n         \n          \n           XATTR_DONTFOLLOW\n           Do not follow the symbolic link but operate on symbolic link itself.\n          \n\n          \n           XATTR_ROOT\n           Set attribute in root (trusted) namespace. Requires root privileges."}]},"xattr_list":{"s":"Get a list of extended attributes","y":"array xattr_list\n    ( string $filename\n   [, int $flags = 0\n  ] )","r":"This function returns an array with names of extended attributes. ","p":[{"t":"filename","d":"The path of the file."},{"t":"flags","d":"Supported xattr flags\n        \n         \n          \n           XATTR_DONTFOLLOW\n           Do not follow the symbolic link but operate on symbolic link itself.\n          \n\n          \n           XATTR_ROOT\n           Set attribute in root (trusted) namespace. Requires root privileges."}]},"xattr_remove":{"s":"Remove an extended attribute","y":"bool xattr_remove\n    ( string $filename\n   , string $name\n   [, int $flags = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The file from which we remove the attribute."},{"t":"name","d":"The name of the attribute to remove."},{"t":"flags","d":"Supported xattr flags\n        \n         \n          \n           XATTR_DONTFOLLOW\n           Do not follow the symbolic link but operate on symbolic link itself.\n          \n\n          \n           XATTR_ROOT\n           Set attribute in root (trusted) namespace. Requires root privileges."}]},"xattr_supported":{"s":"Check if filesystem supports extended attributes","y":"bool xattr_supported\n    ( string $filename\n   [, int $flags = 0\n  ] )","r":"This function returns TRUE if filesystem supports extended attributes,\n   FALSE if it doesn&#039;t and NULL if it can&#039;t be determined (for example\n   wrong path or lack of permissions to file).","p":[{"t":"filename","d":"The path of the tested file."},{"t":"flags","d":"Supported xattr flags\n        \n         \n          \n           XATTR_DONTFOLLOW\n           Do not follow the symbolic link but operate on symbolic link itself."}]},"xdiff_file_bdiff":{"s":"Make binary diff of two files","y":"bool xdiff_file_bdiff\n    ( string $old_file\n   , string $new_file\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"old_file","d":"Path to the first file. This file acts as &quot;old&quot; file."},{"t":"new_file","d":"Path to the second file. This file acts as &quot;new&quot; file."},{"t":"dest","d":"Path of the resulting patch file. Resulting file contains differences\n       between &quot;old&quot; and &quot;new&quot; files. It is in binary format and is human-unreadable."}]},"xdiff_file_bdiff_size":{"s":"Read a size of file created by applying a binary diff","y":"int xdiff_file_bdiff_size\n    ( string $file\n   )","r":"Returns the size of file that would be created.","p":[{"t":"file","d":"The path to the binary patch created by xdiff_string_bdiff() or \n       xdiff_string_rabdiff() function."}]},"xdiff_file_bpatch":{"s":"Patch a file with a binary diff","y":"bool xdiff_file_bpatch\n    ( string $file\n   , string $patch\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"file","d":"The original file."},{"t":"patch","d":"The binary patch file."},{"t":"dest","d":"Path of the resulting file."}]},"xdiff_file_diff":{"s":"Make unified diff of two files","y":"bool xdiff_file_diff\n    ( string $old_file\n   , string $new_file\n   , string $dest\n   [, int $context = 3\n   [, bool $minimal = false\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"old_file","d":"Path to the first file. This file acts as &quot;old&quot; file."},{"t":"new_file","d":"Path to the second file. This file acts as &quot;new&quot; file."},{"t":"dest","d":"Path of the resulting patch file."},{"t":"context","d":"Indicates how many lines of context you want to include in diff\n       result."},{"t":"minimal","d":"Set this parameter to TRUE if you want to minimalize size of the result\n       (can take a long time)."}]},"xdiff_file_diff_binary":{"s":"Alias of xdiff_file_bdiff","y":"bool xdiff_file_diff_binary\n    ( string $old_file\n   , string $new_file\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"old_file","d":"Path to the first file. This file acts as &quot;old&quot; file."},{"t":"new_file","d":"Path to the second file. This file acts as &quot;new&quot; file."},{"t":"dest","d":"Path of the resulting patch file. Resulting file contains differences\n       between &quot;old&quot; and &quot;new&quot; files. It is in binary format and is human-unreadable."}]},"xdiff_file_merge3":{"s":"Merge 3 files into one","y":"mixed xdiff_file_merge3\n    ( string $old_file\n   , string $new_file1\n   , string $new_file2\n   , string $dest\n   )","r":"Returns TRUE if merge was successful, string with rejected chunks if\n   it was not or FALSE if an internal error happened.","p":[{"t":"old_file","d":"Path to the first file. It acts as &quot;old&quot; file."},{"t":"new_file1","d":"Path to the second file. It acts as modified version of old_file."},{"t":"new_file2","d":"Path to the third file. It acts as modified version of old_file."},{"t":"dest","d":"Path of the resulting file, containing merged changed from both new_file1 and\n       new_file2."}]},"xdiff_file_patch":{"s":"Patch a file with an unified diff","y":"mixed xdiff_file_patch\n    ( string $file\n   , string $patch\n   , string $dest\n   [, int $flags = DIFF_PATCH_NORMAL\n  ] )","r":"Returns FALSE if an internal error happened, string with rejected\n   chunks if patch couldn&#039;t be applied or TRUE if patch has been successfully applied.","p":[{"t":"file","d":"The original file."},{"t":"patch","d":"The unified patch file. It has to be created using xdiff_string_diff(), \n       xdiff_file_diff() functions or compatible tools."},{"t":"dest","d":"Path of the resulting file."},{"t":"flags","d":"Can be either XDIFF_PATCH_NORMAL (default mode,\n       normal patch) or XDIFF_PATCH_REVERSE (reversed\n       patch)."}]},"xdiff_file_patch_binary":{"s":"Alias of xdiff_file_bpatch","y":"bool xdiff_file_patch_binary\n    ( string $file\n   , string $patch\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"file","d":"The original file."},{"t":"patch","d":"The binary patch file."},{"t":"dest","d":"Path of the resulting file."}]},"xdiff_file_rabdiff":{"s":"Make binary diff of two files using the Rabin&#039;s polynomial fingerprinting algorithm","y":"bool xdiff_file_rabdiff\n    ( string $old_file\n   , string $new_file\n   , string $dest\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"old_file","d":"Path to the first file. This file acts as &quot;old&quot; file."},{"t":"new_file","d":"Path to the second file. This file acts as &quot;new&quot; file."},{"t":"dest","d":"Path of the resulting patch file. Resulting file contains differences\n       between &quot;old&quot; and &quot;new&quot; files. It is in binary format and is human-unreadable."}]},"xdiff_string_bdiff":{"s":"Make binary diff of two strings","y":"string xdiff_string_bdiff\n    ( string $old_data\n   , string $new_data\n   )","r":"Returns string with binary diff containing differences between &quot;old&quot; and &quot;new&quot;\n   data or FALSE if an internal error occurred.","p":[{"t":"old_data","d":"First string with binary data. It acts as &quot;old&quot; data."},{"t":"new_data","d":"Second string with binary data. It acts as &quot;new&quot; data."}]},"xdiff_string_bdiff_size":{"s":"Read a size of file created by applying a binary diff","y":"int xdiff_string_bdiff_size\n    ( string $patch\n   )","r":"Returns the size of file that would be created.","p":[{"t":"patch","d":"The binary patch created by xdiff_string_bdiff() or \n       xdiff_string_rabdiff() function."}]},"xdiff_string_bpatch":{"s":"Patch a string with a binary diff","y":"string xdiff_string_bpatch\n    ( string $str\n   , string $patch\n   )","r":"Returns the patched string, or FALSE on error.","p":[{"t":"str","d":"The original binary string."},{"t":"patch","d":"The binary patch string."}]},"xdiff_string_diff":{"s":"Make unified diff of two strings","y":"string xdiff_string_diff\n    ( string $old_data\n   , string $new_data\n   [, int $context = 3\n   [, bool $minimal = false\n  ]] )","r":"Returns string with resulting diff or FALSE if an internal error happened.","p":[{"t":"old_data","d":"First string with data. It acts as &quot;old&quot; data."},{"t":"new_data","d":"Second string with data. It acts as &quot;new&quot; data."},{"t":"context","d":"Indicates how many lines of context you want to include in the diff\n       result."},{"t":"minimal","d":"Set this parameter to TRUE if you want to minimalize the size of the\n       result (can take a long time)."}]},"xdiff_string_diff_binary":{"s":"Alias of xdiff_string_bdiff","y":"string xdiff_string_bdiff\n    ( string $old_data\n   , string $new_data\n   )","r":"Returns string with result or FALSE if an internal error happened.","p":[{"t":"old_data","d":"First string with binary data. It acts as &quot;old&quot; data."},{"t":"new_data","d":"Second string with binary data. It acts as &quot;new&quot; data."}]},"xdiff_string_merge3":{"s":"Merge 3 strings into one","y":"mixed xdiff_string_merge3\n    ( string $old_data\n   , string $new_data1\n   , string $new_data2\n   [, string &$error\n  ] )","r":"Returns the merged string, FALSE if an internal error happened, or TRUE\n   if merged string is empty.","p":[{"t":"old_data","d":"First string with data. It acts as &quot;old&quot; data."},{"t":"new_data1","d":"Second string with data. It acts as modified version of old_data."},{"t":"new_data2","d":"Third string with data. It acts as modified version of old_data."},{"t":"error","d":"If provided then rejected parts are stored inside this variable."}]},"xdiff_string_patch":{"s":"Patch a string with an unified diff","y":"string xdiff_string_patch\n    ( string $str\n   , string $patch\n   [, int $flags\n   [, string &$error\n  ]] )","r":"Returns the patched string, or FALSE on error.","p":[{"t":"str","d":"The original string."},{"t":"patch","d":"The unified patch string. It has to be created using xdiff_string_diff(), \n       xdiff_file_diff() functions or compatible tools."},{"t":"flags","d":"flags can be either\n       XDIFF_PATCH_NORMAL (default mode, normal patch)\n       or XDIFF_PATCH_REVERSE (reversed patch)."},{"t":"error","d":"If provided then rejected parts are stored inside this variable."}]},"xdiff_string_patch_binary":{"s":"Alias of xdiff_string_bpatch","y":"string xdiff_string_patch_binary\n    ( string $str\n   , string $patch\n   )","r":"Returns the patched string, or FALSE on error.","p":[{"t":"str","d":"The original binary string."},{"t":"patch","d":"The binary patch string."}]},"xdiff_string_rabdiff":{"s":"Make binary diff of two strings using the Rabin&#039;s polynomial fingerprinting algorithm","y":"string xdiff_string_bdiff\n    ( string $old_data\n   , string $new_data\n   )","r":"Returns string with binary diff containing differences between &quot;old&quot; and &quot;new&quot;\n   data or FALSE if an internal error occurred.","p":[{"t":"old_data","d":"First string with binary data. It acts as &quot;old&quot; data."},{"t":"new_data","d":"Second string with binary data. It acts as &quot;new&quot; data."}]},"xhprof_disable":{"s":"Stops xhprof profiler","y":"array xhprof_disable\n    ( void\n   )","r":"An array of xhprof data, from the run.","p":null},"xhprof_enable":{"s":"Start xhprof profiler","y":"void xhprof_enable\n    ([ int $flags = 0\n   [, array $options\n  ]] )","r":"NULL","p":[{"t":"flags","d":"Optional flags to add additional information to the profiling. See the\n       XHprof constants for further\n       information about these flags, e.g., XHPROF_FLAGS_MEMORY\n       to enable memory profiling."},{"t":"options","d":"An array of optional options, namely, the\n       &#039;ignored_functions&#039; option to pass in functions to be ignored\n       during profiling."}]},"xhprof_sample_disable":{"s":"Stops xhprof sample profiler","y":"array xhprof_sample_disable\n    ( void\n   )","r":"An array of xhprof sample data, from the run.","p":null},"xhprof_sample_enable":{"s":"Start XHProf profiling in sampling mode","y":"void xhprof_sample_enable\n    ( void\n   )","r":"NULL","p":null},"xmlrpc_decode":{"s":"Decodes XML into native PHP types","y":"mixed xmlrpc_decode\n    ( string $xml\n   [, string $encoding = &quot;iso-8859-1&quot;\n  ] )","r":"Returns either an array, or an integer, or a string, or a boolean according\n   to the response returned by the XMLRPC method.","p":[{"t":"xml","d":"XML response returned by XMLRPC method."},{"t":"encoding","d":"Input encoding supported by iconv."}]},"xmlrpc_decode_request":{"s":"Decodes XML into native PHP types","y":"mixed xmlrpc_decode_request\n    ( string $xml\n   , string &$method\n   [, string $encoding\n  ] )","r":"","p":null},"xmlrpc_encode":{"s":"Generates XML for a PHP value","y":"string xmlrpc_encode\n    ( mixed $value\n   )","r":"","p":null},"xmlrpc_encode_request":{"s":"Generates XML for a method request","y":"string xmlrpc_encode_request\n    ( string $method\n   , mixed $params\n   [, array $output_options\n  ] )","r":"Returns a string containing the XML representation of the request.","p":[{"t":"method","d":"Name of the method to call."},{"t":"params","d":"Method parameters compatible with method signature."},{"t":"output_options","d":"Array specifying output options may contain (default values are\n       emphasised):\n       \n        output_type: php, xml"}]},"xmlrpc_get_type":{"s":"Gets xmlrpc type for a PHP value","y":"string xmlrpc_get_type\n    ( mixed $value\n   )","r":"Returns the XML-RPC type.","p":[{"t":"value","d":"PHP value"}]},"xmlrpc_is_fault":{"s":"Determines if an array value represents an XMLRPC fault","y":"bool xmlrpc_is_fault\n    ( array $arg\n   )","r":"Returns TRUE if the argument means fault, FALSE otherwise. Fault\n   description is available in $arg[&quot;faultString&quot;], fault\n   code is in $arg[&quot;faultCode&quot;].","p":[{"t":"arg","d":"Array returned by xmlrpc_decode()."}]},"xmlrpc_parse_method_descriptions":{"s":"Decodes XML into a list of method descriptions","y":"array xmlrpc_parse_method_descriptions\n    ( string $xml\n   )","r":"","p":null},"xmlrpc_server_add_introspection_data":{"s":"Adds introspection documentation","y":"int xmlrpc_server_add_introspection_data\n    ( resource $server\n   , array $desc\n   )","r":"","p":null},"xmlrpc_server_call_method":{"s":"Parses XML requests and call methods","y":"string xmlrpc_server_call_method\n    ( resource $server\n   , string $xml\n   , mixed $user_data\n   [, array $output_options\n  ] )","r":"","p":null},"xmlrpc_server_create":{"s":"Creates an xmlrpc server","y":"resource xmlrpc_server_create\n    ( void\n   )","r":"","p":null},"xmlrpc_server_destroy":{"s":"Destroys server resources","y":"int xmlrpc_server_destroy\n    ( resource $server\n   )","r":"","p":null},"xmlrpc_server_register_introspection_callback":{"s":"Register a PHP function to generate documentation","y":"bool xmlrpc_server_register_introspection_callback\n    ( resource $server\n   , string $function\n   )","r":"","p":null},"xmlrpc_server_register_method":{"s":"Register a PHP function to resource method matching method_name","y":"bool xmlrpc_server_register_method\n    ( resource $server\n   , string $method_name\n   , string $function\n   )","r":"","p":null},"xmlrpc_set_type":{"s":"Sets xmlrpc type, base64 or datetime, for a PHP string value","y":"bool xmlrpc_set_type\n    ( string &$value\n   , string $type\n   )","r":"Returns TRUE on success or FALSE on failure.\n   If successful, value is converted to an object.","p":[{"t":"value","d":"Value to set the type"},{"t":"type","d":"&#039;base64&#039; or &#039;datetime&#039;"}]},"xmlwriter_end_attribute":{"s":"End attribute","y":"bool XMLWriter::endAttribute\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_cdata":{"s":"End current CDATA","y":"bool XMLWriter::endCData\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_document":{"s":"End current document","y":"bool XMLWriter::endDocument\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_dtd":{"s":"End current DTD","y":"bool XMLWriter::endDTD\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_dtd_attlist":{"s":"End current DTD AttList","y":"bool XMLWriter::endDTDAttlist\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_dtd_element":{"s":"End current DTD element","y":"bool XMLWriter::endDTDElement\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_dtd_entity":{"s":"End current DTD Entity","y":"bool XMLWriter::endDTDEntity\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_element":{"s":"End current element","y":"bool XMLWriter::endElement\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_end_pi":{"s":"End current PI","y":"bool XMLWriter::endPI\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_full_end_element":{"s":"End current element","y":"bool XMLWriter::fullEndElement\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_open_memory":{"s":"Create new xmlwriter using memory for string output","y":"bool XMLWriter::openMemory\n    ( void\n   )","r":"Object oriented style: Returns TRUE on success or FALSE on failure.","p":null},"xmlwriter_open_uri":{"s":"Create new xmlwriter using source uri for output","y":"bool XMLWriter::openURI\n    ( string $uri\n   )","r":"Object oriented style: Returns TRUE on success or FALSE on failure.","p":[{"t":"uri","d":"The URI of the resource for the output."}]},"xmlwriter_output_memory":{"s":"Returns current buffer","y":"string XMLWriter::outputMemory\n    ([ bool $flush = true\n  ] )","r":"Returns the current buffer as a string.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"flush","d":"Whether to flush the output buffer or not. Default is TRUE."}]},"xmlwriter_set_indent":{"s":"Toggle indentation on\/off","y":"bool XMLWriter::setIndent\n    ( bool $indent\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"indent","d":"Whether indentation is enabled."}]},"xmlwriter_set_indent_string":{"s":"Set string used for indenting","y":"bool XMLWriter::setIndentString\n    ( string $indentString\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"indentString","d":"The indentation string."}]},"xmlwriter_start_attribute":{"s":"Create start attribute","y":"bool XMLWriter::startAttribute\n    ( string $name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The attribute name."}]},"xmlwriter_start_attribute_ns":{"s":"Create start namespaced attribute","y":"bool XMLWriter::startAttributeNS\n    ( string $prefix\n   , string $name\n   , string $uri\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"prefix","d":"The namespace prefix."},{"t":"name","d":"The attribute name."},{"t":"uri","d":"The namespace URI."}]},"xmlwriter_start_cdata":{"s":"Create start CDATA tag","y":"bool XMLWriter::startCData\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_start_comment":{"s":"Create start comment","y":"bool XMLWriter::startComment\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"xmlwriter_start_document":{"s":"Create document tag","y":"bool XMLWriter::startDocument\n    ([ string $version = 1.0\n   [, string $encoding = NULL\n   [, string $standalone\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"version","d":"The version number of the document as part of the XML declaration."},{"t":"encoding","d":"The encoding of the document as part of the XML declaration."},{"t":"standalone","d":"yes or no."}]},"xmlwriter_start_dtd":{"s":"Create start DTD tag","y":"bool XMLWriter::startDTD\n    ( string $qualifiedName\n   [, string $publicId\n   [, string $systemId\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"qualifiedName","d":"The qualified name of the document type to create."},{"t":"publicId","d":"The external subset public identifier."},{"t":"systemId","d":"The external subset system identifier."}]},"xmlwriter_start_dtd_attlist":{"s":"Create start DTD AttList","y":"bool XMLWriter::startDTDAttlist\n    ( string $name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The attribute list name."}]},"xmlwriter_start_dtd_element":{"s":"Create start DTD element","y":"bool XMLWriter::startDTDElement\n    ( string $qualifiedName\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"qualifiedName","d":"The qualified name of the document type to create."}]},"xmlwriter_start_dtd_entity":{"s":"Create start DTD Entity","y":"bool XMLWriter::startDTDEntity\n    ( string $name\n   , bool $isparam\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The name of the entity."},{"t":"isparam","d":""}]},"xmlwriter_start_element":{"s":"Create start element tag","y":"bool XMLWriter::startElement\n    ( string $name\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The element name."}]},"xmlwriter_start_element_ns":{"s":"Create start namespaced element tag","y":"bool XMLWriter::startElementNS\n    ( string $prefix\n   , string $name\n   , string $uri\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"prefix","d":"The namespace prefix."},{"t":"name","d":"The element name."},{"t":"uri","d":"The namespace URI."}]},"xmlwriter_start_pi":{"s":"Create start PI tag","y":"bool XMLWriter::startPI\n    ( string $target\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"target","d":"The target of the processing instruction."}]},"xmlwriter_text":{"s":"Write text","y":"bool XMLWriter::text\n    ( string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"content","d":"The contents of the text."}]},"xmlwriter_write_attribute":{"s":"Write full attribute","y":"bool XMLWriter::writeAttribute\n    ( string $name\n   , string $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The name of the attribute."},{"t":"value","d":"The value of the attribute."}]},"xmlwriter_write_attribute_ns":{"s":"Write full namespaced attribute","y":"bool XMLWriter::writeAttributeNS\n    ( string $prefix\n   , string $name\n   , string $uri\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"prefix","d":"The namespace prefix."},{"t":"name","d":"The attribute name."},{"t":"uri","d":"The namespace URI."},{"t":"content","d":"The attribute value."}]},"xmlwriter_write_cdata":{"s":"Write full CDATA tag","y":"bool XMLWriter::writeCData\n    ( string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"content","d":"The contents of the CDATA."}]},"xmlwriter_write_comment":{"s":"Write full comment tag","y":"bool XMLWriter::writeComment\n    ( string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"content","d":"The contents of the comment."}]},"xmlwriter_write_dtd":{"s":"Write full DTD tag","y":"bool XMLWriter::writeDTD\n    ( string $name\n   [, string $publicId\n   [, string $systemId\n   [, string $subset\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The DTD name."},{"t":"publicId","d":"The external subset public identifier."},{"t":"systemId","d":"The external subset system identifier."},{"t":"subset","d":"The content of the DTD."}]},"xmlwriter_write_dtd_attlist":{"s":"Write full DTD AttList tag","y":"bool XMLWriter::writeDTDAttlist\n    ( string $name\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The name of the DTD attribute list."},{"t":"content","d":"The content of the DTD attribute list."}]},"xmlwriter_write_dtd_element":{"s":"Write full DTD element tag","y":"bool XMLWriter::writeDTDElement\n    ( string $name\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The name of the DTD element."},{"t":"content","d":"The content of the element."}]},"xmlwriter_write_dtd_entity":{"s":"Write full DTD Entity tag","y":"bool XMLWriter::writeDTDEntity\n    ( string $name\n   , string $content\n   , bool $pe\n   , string $pubid\n   , string $sysid\n   , string $ndataid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The name of the entity."},{"t":"content","d":"The content of the entity."}]},"xmlwriter_write_element":{"s":"Write full element tag","y":"bool XMLWriter::writeElement\n    ( string $name\n   [, string $content\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"name","d":"The element name."},{"t":"content","d":"The element contents."}]},"xmlwriter_write_element_ns":{"s":"Write full namespaced element tag","y":"bool XMLWriter::writeElementNS\n    ( string $prefix\n   , string $name\n   , string $uri\n   [, string $content\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"prefix","d":"The namespace prefix."},{"t":"name","d":"The element name."},{"t":"uri","d":"The namespace URI."},{"t":"content","d":"The element contents."}]},"xmlwriter_write_pi":{"s":"Writes a PI","y":"bool XMLWriter::writePI\n    ( string $target\n   , string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"target","d":"The target of the processing instruction."},{"t":"content","d":"The content of the processing instruction."}]},"xmlwriter_write_raw":{"s":"Write a raw XML text","y":"bool XMLWriter::writeRaw\n    ( string $content\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"content","d":"The text string to write."}]},"xml_error_string":{"s":"Get XML parser error string","y":"string xml_error_string\n    ( int $code\n   )","r":"Returns a string with a textual description of the error\n   code, or FALSE if no description was found.","p":[{"t":"code","d":"An error code from xml_get_error_code()."}]},"xml_get_current_byte_index":{"s":"Get current byte index for an XML parser","y":"int xml_get_current_byte_index\n    ( resource $parser\n   )","r":"This function returns FALSE if parser does\n   not refer to a valid parser, or else it returns which byte index\n   the parser is currently at in its data buffer (starting at 0).","p":[{"t":"parser","d":"A reference to the XML parser to get byte index from."}]},"xml_get_current_column_number":{"s":"Get current column number for an XML parser","y":"int xml_get_current_column_number\n    ( resource $parser\n   )","r":"This function returns FALSE if parser does\n   not refer to a valid parser, or else it returns which column on\n   the current line (as given by\n   xml_get_current_line_number()) the parser is\n   currently at.","p":[{"t":"parser","d":"A reference to the XML parser to get column number from."}]},"xml_get_current_line_number":{"s":"Get current line number for an XML parser","y":"int xml_get_current_line_number\n    ( resource $parser\n   )","r":"This function returns FALSE if parser does\n   not refer to a valid parser, or else it returns which line the\n   parser is currently at in its data buffer.","p":[{"t":"parser","d":"A reference to the XML parser to get line number from."}]},"xml_get_error_code":{"s":"Get XML parser error code","y":"int xml_get_error_code\n    ( resource $parser\n   )","r":"This function returns FALSE if parser does\n   not refer to a valid parser, or else it returns one of the error\n   codes listed in the error codes\n   section.","p":[{"t":"parser","d":"A reference to the XML parser to get error code from."}]},"xml_parse":{"s":"Start parsing an XML document","y":"int xml_parse\n    ( resource $parser\n   , string $data\n   [, bool $is_final = false\n  ] )","r":"Returns 1 on success or 0 on failure.","p":[{"t":"parser","d":"A reference to the XML parser to use."},{"t":"data","d":"Chunk of data to parse.  A document may be parsed piece-wise by\n       calling xml_parse() several times with new data,\n       as long as the is_final parameter is set and\n       TRUE when the last data is parsed."},{"t":"is_final","d":"If set and TRUE, data is the last piece of\n       data sent in this parse."}]},"xml_parser_create":{"s":"Create an XML parser","y":"resource xml_parser_create\n    ([ string $encoding\n  ] )","r":"Returns a resource handle for the new XML parser.","p":[{"t":"encoding","d":"The optional encoding specifies the character\n       encoding for the input\/output in PHP 4. Starting from PHP 5, the input\n       encoding is automatically detected, so that the\n       encoding parameter specifies only the output\n       encoding. In PHP 4, the default output encoding is the same as the\n       input charset. If empty string is passed, the parser attempts to identify\n       which encoding the document is encoded in by looking at the heading 3 or\n       4 bytes. In PHP 5.0.0 and 5.0.1, the default output charset is\n       ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported\n       encodings are ISO-8859-1, UTF-8 and\n       US-ASCII."}]},"xml_parser_create_ns":{"s":"Create an XML parser with namespace support","y":"resource xml_parser_create_ns\n    ([ string $encoding\n   [, string $separator = &quot;:&quot;\n  ]] )","r":"Returns a resource handle for the new XML parser.","p":[{"t":"encoding","d":"The optional encoding specifies the character\n       encoding for the input\/output in PHP 4. Starting from PHP 5, the input\n       encoding is automatically detected, so that the\n       encoding parameter specifies only the output\n       encoding. In PHP 4, the default output encoding is the same as the\n       input charset. In PHP 5.0.0 and 5.0.1, the default output charset is\n       ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported\n       encodings are ISO-8859-1, UTF-8 and\n       US-ASCII."},{"t":"separator","d":"With a namespace aware parser tag parameters passed to the various\n       handler functions will consist of namespace and tag name separated by\n       the string specified in separator."}]},"xml_parser_free":{"s":"Free an XML parser","y":"bool xml_parser_free\n    ( resource $parser\n   )","r":"This function returns FALSE if parser does not\n   refer to a valid parser, or else it frees the parser and returns TRUE.","p":[{"t":"parser","d":""}]},"xml_parser_get_option":{"s":"Get options from an XML parser","y":"mixed xml_parser_get_option\n    ( resource $parser\n   , int $option\n   )","r":"This function returns FALSE if parser does\n   not refer to a valid parser or if option isn&#039;t\n   valid (generates also a E_WARNING).\n   Else the option&#039;s value is returned.","p":[{"t":"parser","d":""},{"t":"option","d":""}]},"xml_parser_set_option":{"s":"Set options in an XML parser","y":"bool xml_parser_set_option\n    ( resource $parser\n   , int $option\n   , mixed $value\n   )","r":"This function returns FALSE if parser does not\n   refer to a valid parser, or if the option could not be set.  Else the\n   option is set and TRUE is returned.","p":[{"t":"parser","d":"A reference to the XML parser to set an option in."},{"t":"option","d":"Which option to set.  See below."},{"t":"value","d":"The option&#039;s new value."}]},"xml_parse_into_struct":{"s":"Parse XML data into an array structure","y":"int xml_parse_into_struct\n    ( resource $parser\n   , string $data\n   , array &$values\n   [, array &$index\n  ] )","r":"xml_parse_into_struct() returns 0 for failure and 1 for\n   success. This is not the same as FALSE and TRUE, be careful with\n   operators such as ===.","p":[{"t":"parser","d":"A reference to the XML parser."},{"t":"data","d":"A string containing the XML data."},{"t":"values","d":"An array containing the values of the XML data"},{"t":"index","d":"An array containing pointers to the location of the appropriate values in the $values."}]},"xml_set_character_data_handler":{"s":"Set up character data handler","y":"bool xml_set_character_data_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up character data handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_default_handler":{"s":"Set up default handler","y":"bool xml_set_default_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up default handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_element_handler":{"s":"Set up start and end element handlers","y":"bool xml_set_element_handler\n    ( resource $parser\n   , callable $start_element_handler\n   , callable $end_element_handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up start and end element handler functions."},{"t":"start_element_handler","d":""}]},"xml_set_end_namespace_decl_handler":{"s":"Set up end namespace declaration handler","y":"bool xml_set_end_namespace_decl_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_external_entity_ref_handler":{"s":"Set up external entity reference handler","y":"bool xml_set_external_entity_ref_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up external entity reference handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_notation_decl_handler":{"s":"Set up notation declaration handler","y":"bool xml_set_notation_decl_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up notation declaration handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_object":{"s":"Use XML Parser within an object","y":"bool xml_set_object\n    ( resource $parser\n   , object &$object\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to use inside the object."},{"t":"object","d":"The object where to use the XML parser."}]},"xml_set_processing_instruction_handler":{"s":"Set up processing instruction (PI) handler","y":"bool xml_set_processing_instruction_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up processing instruction (PI) handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_start_namespace_decl_handler":{"s":"Set up start namespace declaration handler","y":"bool xml_set_start_namespace_decl_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xml_set_unparsed_entity_decl_handler":{"s":"Set up unparsed entity declaration handler","y":"bool xml_set_unparsed_entity_decl_handler\n    ( resource $parser\n   , callable $handler\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"parser","d":"A reference to the XML parser to set up unparsed entity declaration handler function."},{"t":"handler","d":"handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser."}]},"xslt_backend_info":{"s":"Returns the information on the compilation settings of the backend","y":"string xslt_backend_info\n    ( void\n   )","r":"Returns a string with information about the compilation setting of the\n   backend or an error string when no information available.","p":null},"xslt_backend_name":{"s":"Returns the name of the backend","y":"string xslt_backend_name\n    ( void\n   )","r":"Returns Sablotron.","p":null},"xslt_backend_version":{"s":"Returns the version number of Sablotron","y":"string xslt_backend_version\n    ( void\n   )","r":"Returns the version number, or FALSE if not available.","p":null},"xslt_create":{"s":"Create a new XSLT processor","y":"resource xslt_create\n    ( void\n   )","r":"Returns an XSLT processor link identifier on success, or FALSE on error.","p":null},"xslt_errno":{"s":"Returns an error number","y":"int xslt_errno\n    ( resource $xh\n   )","r":"Returns the error code, as an integer.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."}]},"xslt_error":{"s":"Returns an error string","y":"string xslt_error\n    ( resource $xh\n   )","r":"Returns the error message, as a string.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."}]},"xslt_free":{"s":"Free XSLT processor","y":"void xslt_free\n    ( resource $xh\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."}]},"xslt_getopt":{"s":"Get options on a given xsl processor","y":"int xslt_getopt\n    ( resource $processor\n   )","r":"Returns the options, a bitmask constructed with the \n   XSLT_SABOPT_XXX constants.","p":[{"t":"processor","d":"The XSLT processor\nlink identifier, created with xslt_create()."}]},"xslt_process":{"s":"Perform an XSLT transformation","y":"mixed xslt_process\n    ( resource $xh\n   , string $xmlcontainer\n   , string $xslcontainer\n   [, string $resultcontainer\n   [, array $arguments\n   [, array $parameters\n  ]]] )","r":"Returns TRUE on success or FALSE on failure. If the result container is not specified - i.e.\n   NULL - than the result is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"xmlcontainer","d":"Path to XML file or placeholder for the\n       XML argument."},{"t":"xslcontainer","d":"Path to XSL file or placeholder for the\n       XML argument."},{"t":"resultcontainer","d":"The result container defaults to a filename for the transformed\n       document. If the result container is not specified - i.e. NULL\n       - than the result is returned."},{"t":"arguments","d":"Instead of files as the XML and XSLT arguments to the xslt_process()\n       function, you can specify &quot;argument place holders&quot; which are then substituted by values\n       given in the arguments array."},{"t":"parameters","d":"An array for any top-level parameters that will be passed to the XSLT\n       document.  These parameters can then be accessed within your XSL files\n       using the &lt;xsl:param name=&quot;parameter_name&quot;&gt;\n       instruction. The parameters must be UTF-8 encoded and their values will be\n       interpreted as strings by the Sablotron processor.\n       In other words - you cannot pass node-sets as parameters to\n       the XSLT document."}]},"xslt_setopt":{"s":"Set options on a given XSLT processor","y":"mixed xslt_setopt\n    ( resource $processor\n   , int $newmask\n   )","r":"Returns the number of previous mask is possible, TRUE otherwise,\n   FALSE in case of an error.","p":[{"t":"processor","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"newmask","d":"newmask is a bitmask constructed with the\n       following constants:\n       \n        \n         \n          XSLT_SABOPT_PARSE_PUBLIC_ENTITIES - Tell the\n          processor to parse public entities. By default this has been turned\n          off."}]},"xslt_set_base":{"s":"Set the base URI for all XSLT transformations","y":"void xslt_set_base\n    ( resource $xh\n   , string $uri\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"uri","d":"The base URI to be used."}]},"xslt_set_encoding":{"s":"Set the encoding for the parsing of XML documents","y":"void xslt_set_encoding\n    ( resource $xh\n   , string $encoding\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"encoding","d":"An output encoding, e.g iso-8859-1."}]},"xslt_set_error_handler":{"s":"Set an error handler for a XSLT processor","y":"void xslt_set_error_handler\n    ( resource $xh\n   , mixed $handler\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"handler","d":""}]},"xslt_set_log":{"s":"Set the log file to write log messages to","y":"void xslt_set_log\n    ( resource $xh\n   [, mixed $log\n  ] )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"log","d":"This parameter is either a boolean value which toggles logging on and\n       off, or a string containing the logfile in which log errors too."}]},"xslt_set_object":{"s":"Sets the object in which to resolve callback functions","y":"bool xslt_set_object\n    ( resource $processor\n   , object &$obj\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"processor","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"obj","d":"An object."}]},"xslt_set_sax_handler":{"s":"Set SAX handlers for a XSLT processor","y":"void xslt_set_sax_handler\n    ( resource $xh\n   , array $handlers\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"handlers","d":""}]},"xslt_set_sax_handlers":{"s":"Set the SAX handlers to be called when the XML document gets processed","y":"void xslt_set_sax_handlers\n    ( resource $processor\n   , array $handlers\n   )","r":"No value is returned.","p":[{"t":"processor","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"handlers","d":""}]},"xslt_set_scheme_handler":{"s":"Set Scheme handlers for a XSLT processor","y":"void xslt_set_scheme_handler\n    ( resource $xh\n   , array $handlers\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"handlers","d":""}]},"xslt_set_scheme_handlers":{"s":"Set the scheme handlers for the XSLT processor","y":"void xslt_set_scheme_handlers\n    ( resource $xh\n   , array $handlers\n   )","r":"No value is returned.","p":[{"t":"xh","d":"The XSLT processor\nlink identifier, created with xslt_create()."},{"t":"handlers","d":"An array with the following keys: &quot;get_all&quot;, \n       &quot;open&quot;, &quot;get&quot;, &quot;put&quot;,\n       and &quot;close&quot;."}]},"yaml_emit":{"s":"Returns the YAML representation of a value","y":"string yaml_emit\n    ( mixed $data\n   [, int $encoding = YAML_ANY_ENCODING\n   [, int $linebreak = YAML_ANY_BREAK\n   [, array $callbacks\n  ]]] )","r":"Returns a YAML encoded string on success.","p":[{"t":"data","d":"The data being encoded. Can be any type except\n       a resource."},{"t":"encoding","d":"Output character encoding chosen from\n       YAML_ANY_ENCODING,\n       YAML_UTF8_ENCODING,\n       YAML_UTF16LE_ENCODING,\n       YAML_UTF16BE_ENCODING."},{"t":"linebreak","d":"Output linebreak style chosen from\n       YAML_ANY_BREAK,\n       YAML_CR_BREAK,\n       YAML_LN_BREAK,\n       YAML_CRLN_BREAK."},{"t":"callbacks","d":"Content handlers for emitting YAML nodes. Associative array\n       of classname =&gt; callable mappings. See\n       emit callbacks for more\n       details."}]},"yaml_emit_file":{"s":"Send the YAML representation of a value to a file","y":"bool yaml_emit_file\n    ( string $filename\n   , mixed $data\n   [, int $encoding = YAML_ANY_ENCODING\n   [, int $linebreak = YAML_ANY_BREAK\n   [, array $callbacks\n  ]]] )","r":"Returns TRUE on success.","p":[{"t":"filename","d":"Path to the file."},{"t":"data","d":"The data being encoded. Can be any type except\n       a resource."},{"t":"encoding","d":"Output character encoding chosen from\n       YAML_ANY_ENCODING,\n       YAML_UTF8_ENCODING,\n       YAML_UTF16LE_ENCODING,\n       YAML_UTF16BE_ENCODING."},{"t":"linebreak","d":"Output linebreak style chosen from\n       YAML_ANY_BREAK,\n       YAML_CR_BREAK,\n       YAML_LN_BREAK,\n       YAML_CRLN_BREAK."},{"t":"callbacks","d":"Content handlers for emitting YAML nodes. Associative array\n       of classname =&gt; callable mappings. See\n       emit callbacks for more\n       details."}]},"yaml_parse":{"s":"Parse a YAML stream","y":"mixed yaml_parse\n    ( string $input\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )","r":"Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.","p":[{"t":"input","d":"The string to parse as a YAML document stream."},{"t":"pos","d":"Document to extract from stream (-1 for all\n       documents, 0 for first document, ...)."},{"t":"ndocs","d":"If ndocs is provided, then it is filled with the\n       number of documents found in stream."},{"t":"callbacks","d":"Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callable mappings. See\n       parse callbacks for more\n       details."}]},"yaml_parse_file":{"s":"Parse a YAML stream from a file","y":"mixed yaml_parse_file\n    ( string $filename\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )","r":"Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.","p":[{"t":"filename","d":"Path to the file."},{"t":"pos","d":"Document to extract from stream (-1 for all\n       documents, 0 for first document, ...)."},{"t":"ndocs","d":"If ndocs is provided, then it is filled with the\n       number of documents found in stream."},{"t":"callbacks","d":"Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callable mappings. See\n       parse callbacks for more\n       details."}]},"yaml_parse_url":{"s":"Parse a Yaml stream from a URL","y":"mixed yaml_parse_url\n    ( string $url\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )","r":"Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.","p":[{"t":"url","d":"url should be of the form &quot;scheme:\/\/...&quot;. PHP\n       will search for a protocol handler (also known as a wrapper) for that\n       scheme. If no wrappers for that protocol are registered, PHP will emit\n       a notice to help you track potential problems in your script and then\n       continue as though filename specifies a regular file."},{"t":"pos","d":"Document to extract from stream (-1 for all\n       documents, 0 for first document, ...)."},{"t":"ndocs","d":"If ndocs is provided, then it is filled with the\n       number of documents found in stream."},{"t":"callbacks","d":"Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callable mappings. See\n       parse callbacks for more"}]},"yaz_addinfo":{"s":"Returns additional error information","y":"string yaz_addinfo\n    ( resource $id\n   )","r":"A string containing additional error information or an empty string if the\n   last operation was successful or if no additional information was provided\n   by the server.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_ccl_conf":{"s":"Configure CCL parser","y":"void yaz_ccl_conf\n    ( resource $id\n   , array $config\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"config","d":"An array of configuration. Each key of the array is the name of a CCL\n       field and the corresponding value holds a string that specifies a \n       mapping to RPN."}]},"yaz_connect":{"s":"Prepares for a connection to a Z39.50 server","y":"mixed yaz_connect\n    ( string $zurl\n   [, mixed $options\n  ] )","r":"A connection resource on success, FALSE on error.","p":[{"t":"zurl","d":"A string that takes the form host[:port][\/database].\n       If port is omitted, port 210 is used. If database is omitted \n       Default is used."},{"t":"options","d":"If given as a string, it is treated as the Z39.50 V2 authentication \n       string (OpenAuth)."},{"t":"","d":"Username for authentication."},{"t":"","d":"Group for authentication."},{"t":"","d":"Password for authentication."},{"t":"","d":"Cookie for session (YAZ proxy)."},{"t":"","d":"Proxy for connection (YAZ proxy)."},{"t":"","d":"A boolean. If TRUE the connection is persistent; If FALSE the\n           connection is not persistent. By default connections are persistent."},{"t":"","d":"A boolean. If TRUE piggyback is enabled for searches; If FALSE\n           piggyback is disabled. By default piggyback is enabled."},{"t":"","d":"A string that specifies character set to be used in Z39.50 \n           language and character set negotiation. Use strings such as:\n           ISO-8859-1, UTF-8, \n           UTF-16."},{"t":"","d":"An integer that specifies the maximum byte size of all records\n           to be returned by a target during retrieval. See the\n           &raquo;&nbsp;Z39.50 standard for more\n           information."},{"t":"","d":"An integer that specifies the maximum byte size of a single record\n           to be returned by a target during retrieval. This\n           entity is referred to as Exceptional-record-size in the\n          &raquo;&nbsp;Z39.50 standard."}]},"yaz_database":{"s":"Specifies the databases within a session","y":"bool yaz_database\n    ( resource $id\n   , string $databases\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"databases","d":"A string containing one or more databases. Multiple databases are \n       separated by a plus sign +."}]},"yaz_element":{"s":"Specifies Element-Set Name for retrieval","y":"bool yaz_element\n    ( resource $id\n   , string $elementset\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"elementset","d":"Most servers support F (for full records) and\n       B (for brief records)."}]},"yaz_errno":{"s":"Returns error number","y":"int yaz_errno\n    ( resource $id\n   )","r":"Returns an error code. The error code is either a Z39.50 diagnostic code\n   (usually a Bib-1 diagnostic) or a client side error code which is \n   generated by PHP\/YAZ itself, such as &quot;Connect failed&quot;, &quot;Init Rejected&quot;, \n   etc.  ","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_error":{"s":"Returns error description","y":"string yaz_error\n    ( resource $id\n   )","r":"Returns an error text message for server (last request), identified by\n   parameter id. An empty string is returned if the\n   last operation was successful.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_es":{"s":"Prepares for an Extended Service Request","y":"void yaz_es\n    ( \n    resource $id\n   \n   , \n    string $type\n   \n   , \n    array $args\n   \n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"type","d":"A string which represents the type of the Extended Service: \n       itemorder (Item Order),\n       create (Create Database),\n       drop (Drop Database),\n       commit (Commit Operation),\n       update (Update Record),\n       xmlupdate (XML Update).\n       Each type is specified in the following section."},{"t":"args","d":"An array with extended service options plus\n       package specific options. The options are identical to\n       those offered in the C API of ZOOM C. Refer to\n       the ZOOM &raquo;&nbsp;Extended Services."}]},"yaz_es_result":{"s":"Inspects Extended Services Result","y":"array yaz_es_result\n    ( resource $id\n   )","r":"Returns array with element targetReference\n   for the reference for the extended service operation (generated\n   and returned from the server).","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_get_option":{"s":"Returns value of option for connection","y":"string yaz_get_option\n    ( resource $id\n   , string $name\n   )","r":"Returns the value of the specified option or an empty string if the option\n   wasn&#039;t set.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"name","d":"The option name."}]},"yaz_hits":{"s":"Returns number of hits for last search","y":"int yaz_hits\n    ( resource $id\n   [, array &$searchresult\n  ] )","r":"Returns the number of hits for the last search or 0 if no search was \n   performed.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"searchresult","d":"Result array for detailed search result information."}]},"yaz_itemorder":{"s":"Prepares for Z39.50 Item Order with an ILL-Request package","y":"void yaz_itemorder\n    ( resource $id\n   , array $args\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"args","d":"Must be an associative array with information about the Item Order \n       request to be sent. The key of the hash is the name of the \n       corresponding ASN.1 tag path. For example, the ISBN below the Item-ID\n       has the key item-id,ISBN."}]},"yaz_present":{"s":"Prepares for retrieval (Z39.50 present)","y":"bool yaz_present\n    ( resource $id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_range":{"s":"Specifies a range of records to retrieve","y":"void yaz_range\n    ( resource $id\n   , int $start\n   , int $number\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"start","d":"Specifies the position of the first record to be retrieved. The \n       records numbers goes from 1 to yaz_hits()."},{"t":"number","d":"Specifies the number of records to be retrieved."}]},"yaz_record":{"s":"Returns a record","y":"string yaz_record\n    ( resource $id\n   , int $pos\n   , string $type\n   )","r":"    \n   Returns the record at position pos or an empty\n   string if no record exists at the given position.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"pos","d":"The record position. Records positions in a result set are numbered 1,\n       2, ... $hits where $hits is the count returned by yaz_hits()."},{"t":"type","d":"The type specifies the form of the\n       returned record."},{"t":"","d":"The record is returned as a string for simple display.\n          In this mode, all MARC records are converted to a line-by-line format\n          since ISO2709 is hardly readable.\n          XML records and SUTRS are returned in their original format.\n          GRS-1 are returned in a (ugly) line-by-line format."},{"t":"string","d":"The record is returned as an XML string if possible.\n          In this mode, all MARC records are converted to \n          &raquo;&nbsp;MARCXML.\n          XML records and SUTRS are returned in their original format.\n          GRS-1 is not supported."},{"t":"","d":"The record is returned as a string in its original form.\n          This type is suitable for MARC, XML and SUTRS. It does not\n          work for GRS-1."},{"t":"","d":"The syntax of the record is returned as a string, i.e.\n          USmarc, GRS-1,\n          XML, etc."},{"t":"","d":"The name of database associated with record at the position\n          is returned as a string."},{"t":"","d":"The record is returned as an array that reflects the GRS-1\n          structure. This type is suitable for MARC and GRS-1. XML, SUTRS\n          are not supported and if the actual record is XML or SUTRS an\n          empty string will be returned."}]},"yaz_scan":{"s":"Prepares for a scan","y":"void yaz_scan\n    ( resource $id\n   , string $type\n   , string $startterm\n   [, array $flags\n  ] )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"type","d":"Currently only type rpn is supported."},{"t":"startterm","d":"Starting term point for the scan."},{"t":"flags","d":"This optional parameter specifies additional information to control \n       the behaviour of the scan request. Three indexes are currently read \n       from the flags array:\n       number (number of terms requested),\n       position (preferred position of term) and\n       stepSize (preferred step size)."}]},"yaz_scan_result":{"s":"Returns Scan Response result","y":"array yaz_scan_result\n    ( resource $id\n   [, array &$result\n  ] )","r":"Returns an array (0..n-1) where n is the number of terms returned. Each \n   value is a pair where the first item is the term, and the second item is \n   the result-count.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"result","d":"If given, this array will be modified to hold additional information \n       taken from the Scan Response:\n       \n        \n         \n          number - Number of entries returned"}]},"yaz_schema":{"s":"Specifies schema for retrieval","y":"void yaz_schema\n    ( resource $id\n   , string $schema\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"schema","d":"Must be specified as an OID (Object Identifier) in a raw dot-notation \n       (like 1.2.840.10003.13.4) or as one of the known \n       registered schemas: GILS-schema, \n       Holdings, Zthes, ..."}]},"yaz_search":{"s":"Prepares for a search","y":"bool yaz_search\n    ( resource $id\n   , string $type\n   , string $query\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"type","d":"This parameter represents the query type - only &quot;rpn&quot;\n       is supported now in which case the third argument specifies a Type-1 \n       query in prefix query notation."},{"t":"query","d":"The RPN query is a textual representation of the Type-1 query as\n       defined by the Z39.50 standard. However, in the text representation\n       as used by YAZ a prefix notation is used, that is the operator\n       precedes the operands. The query string is a sequence of tokens where\n       white space is ignored unless surrounded by double quotes. Tokens beginning\n       with an at-character (@) are considered operators,\n       otherwise they are treated as search terms."}]},"yaz_set_option":{"s":"Sets one or more options for connection","y":"void yaz_set_option\n    ( resource $id\n   , string $name\n   , string $value\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"name","d":"May be either a string or an array."},{"t":"value","d":"The new value of the option. Use this only if the previous argument is\n       a string."}]},"yaz_sort":{"s":"Sets sorting criteria","y":"void yaz_sort\n    ( resource $id\n   , string $criteria\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"criteria","d":"A string that takes the form field1 flags1 field2 \n       flags2 where field1 specifies the primary attributes for\n       sort, field2 seconds, etc.."},{"t":"","d":"Sort ascending"},{"t":"","d":"Sort descending"},{"t":"","d":"Case insensitive sorting"},{"t":"","d":"Case sensitive sorting"}]},"yaz_syntax":{"s":"Specifies the preferred record syntax for retrieval","y":"void yaz_syntax\n    ( resource $id\n   , string $syntax\n   )","r":"No value is returned.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"syntax","d":"The syntax must be specified as an OID (Object Identifier) in a raw\n       dot-notation (like 1.2.840.10003.5.10) or as one of\n       the known registered record syntaxes (sutrs, usmarc, grs1, xml, etc.)."}]},"yaz_wait":{"s":"Wait for Z39.50 requests to complete","y":"mixed yaz_wait\n    ([ array &$options\n  ] )","r":"Returns TRUE on success or FALSE on failure.\n   In event mode, returns resource  or FALSE on failure.","p":[{"t":"options","d":""},{"t":"","d":"Sets timeout in seconds. If a server has not responded within the\n           timeout it is considered dead and yaz_wait()\n           returns. The default value for timeout is 15 seconds."},{"t":"","d":"A boolean."}]},"yp_all":{"s":"Traverse the map and call a function on each entry","y":"void yp_all\n    ( string $domain\n   , string $map\n   , string $callback\n   )","r":"No value is returned.","p":[{"t":"domain","d":"The NIS domain name."},{"t":"map","d":"The NIS map."},{"t":"callback","d":""}]},"yp_errno":{"s":"Returns the error code of the previous operation","y":"int yp_errno\n    ( void\n   )","r":"Returns one of the YPERR_XXX error constants.","p":null},"yp_err_string":{"s":"Returns the error string associated with the given error code","y":"string yp_err_string\n    ( int $errorcode\n   )","r":"Returns the error message, as a string.","p":[{"t":"errorcode","d":"The error code."}]},"yp_first":{"s":"Returns the first key-value pair from the named map","y":"array yp_first\n    ( string $domain\n   , string $map\n   )","r":"Returns the first key-value pair as an array on success, or FALSE on\n   errors.","p":[{"t":"domain","d":"The NIS domain name."},{"t":"map","d":"The NIS map."}]},"yp_get_default_domain":{"s":"Fetches the machine&#039;s default NIS domain","y":"string yp_get_default_domain\n    ( void\n   )","r":"Returns the default domain of the node or FALSE. Can be used as the\n   domain parameter for successive NIS calls.","p":null},"yp_master":{"s":"Returns the machine name of the master NIS server for a map","y":"string yp_master\n    ( string $domain\n   , string $map\n   )","r":"","p":[{"t":"domain","d":"The NIS domain name."},{"t":"map","d":"The NIS map."}]},"yp_match":{"s":"Returns the matched line","y":"string yp_match\n    ( string $domain\n   , string $map\n   , string $key\n   )","r":"Returns the value, or FALSE on errors.","p":[{"t":"domain","d":"The NIS domain name."},{"t":"map","d":"The NIS map."},{"t":"key","d":"This key must be exact."}]},"yp_next":{"s":"Returns the next key-value pair in the named map","y":"array yp_next\n    ( string $domain\n   , string $map\n   , string $key\n   )","r":"Returns the next key-value pair as an array, or FALSE on errors.","p":[{"t":"domain","d":""},{"t":"map","d":""},{"t":"key","d":""}]},"yp_order":{"s":"Returns the order number for a map","y":"int yp_order\n    ( string $domain\n   , string $map\n   )","r":"Returns the order number for a map or FALSE on error.","p":[{"t":"domain","d":""},{"t":"map","d":""}]},"zend_logo_guid":{"s":"Gets the Zend guid","y":"string zend_logo_guid\n    ( void\n   )","r":"Returns PHPE9568F35-D428-11d2-A769-00AA001ACF42.","p":null},"zend_thread_id":{"s":"Returns a unique identifier for the current thread","y":"int zend_thread_id\n    ( void\n   )","r":"Returns the thread id as an integer.","p":null},"zip_close":{"s":"Close a ZIP file archive","y":"void zip_close\n    ( resource $zip\n   )","r":"No value is returned.","p":[{"t":"zip","d":"A ZIP file previously opened with zip_open()."}]},"zip_entry_close":{"s":"Close a directory entry","y":"bool zip_entry_close\n    ( resource $zip_entry\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"zip_entry","d":"A directory entry previously opened zip_entry_open()."}]},"zip_entry_compressedsize":{"s":"Retrieve the compressed size of a directory entry","y":"int zip_entry_compressedsize\n    ( resource $zip_entry\n   )","r":"The compressed size.","p":[{"t":"zip_entry","d":"A directory entry returned by zip_read()."}]},"zip_entry_compressionmethod":{"s":"Retrieve the compression method of a directory entry","y":"string zip_entry_compressionmethod\n    ( resource $zip_entry\n   )","r":"The compression method.","p":[{"t":"zip_entry","d":"A directory entry returned by zip_read()."}]},"zip_entry_filesize":{"s":"Retrieve the actual file size of a directory entry","y":"int zip_entry_filesize\n    ( resource $zip_entry\n   )","r":"The size of the directory entry.","p":[{"t":"zip_entry","d":"A directory entry returned by zip_read()."}]},"zip_entry_name":{"s":"Retrieve the name of a directory entry","y":"string zip_entry_name\n    ( resource $zip_entry\n   )","r":"The name of the directory entry.","p":[{"t":"zip_entry","d":"A directory entry returned by zip_read()."}]},"zip_entry_open":{"s":"Open a directory entry for reading","y":"bool zip_entry_open      \n    ( resource $zip\n   , resource $zip_entry\n   [, string $mode\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"zip","d":"A valid resource handle returned by zip_open()."},{"t":"zip_entry","d":"A directory entry returned by zip_read()."},{"t":"mode","d":"Any of the modes specified in the documentation of\n       fopen()."}]},"zip_entry_read":{"s":"Read from an open directory entry","y":"string zip_entry_read\n    ( resource $zip_entry\n   [, int $length = 1024\n  ] )","r":"Returns the data read, empty string on end of a file, or FALSE on error.","p":[{"t":"zip_entry","d":"A directory entry returned by zip_read()."},{"t":"length","d":"The number of bytes to return."}]},"zip_open":{"s":"Open a ZIP file archive","y":"resource zip_open\n    ( string $filename\n   )","r":"Returns a resource handle for later use with\n   zip_read() and zip_close()\n   or returns the number of error if filename does not\n   exist or in case of other error.","p":[{"t":"filename","d":"The file name of the ZIP archive to open."}]},"zlib_decode":{"s":"Uncompress any raw\/gzip\/zlib encoded data","y":"string zlib_decode\n    ( string $data\n   [, string $max_decoded_len\n  ] )","r":"","p":[{"t":"data","d":""},{"t":"max_decoded_len","d":""}]},"zlib_encode":{"s":"Compress data with the specified encoding","y":"string zlib_encode\n    ( string $data\n   , string $encoding\n   [, string $level = -1\n  ] )","r":"","p":[{"t":"data","d":""},{"t":"encoding","d":""},{"t":"level","d":""}]},"zlib_get_coding_type":{"s":"Returns the coding type used for output compression","y":"string zlib_get_coding_type\n    ( void\n   )","r":"Possible return values are gzip, deflate,\n   or FALSE.","p":null},"vpopmail_alias_add":{"s":"Insert a virtual alias","y":"bool vpopmail_alias_add\n    ( string $user\n   , string $domain\n   , string $alias\n   )","r":"","p":null},"fam_open":{"s":"Open connection to FAM daemon","y":"resource fam_open\n    ([ string $appname\n  ] )","r":"Returns a resource representing a connection to the FAM service on success\n   or FALSE on errors.","p":[{"t":"appname","d":"A string identifying the application for logging reasons"}]},"extension_loaded":{"s":"Find out whether an extension is loaded","y":"bool extension_loaded\n    ( string $name\n   )","r":"Returns TRUE if the extension identified by name\n   is loaded, FALSE otherwise.","p":[{"t":"name","d":"The extension name."}]},"intl_error_name":{"s":"Get symbolic name for a given error code","y":"string \n   intl_error_name\n    ( int $error_code\n   )","r":"The returned string will be the same as the name of the error code\n   constant.","p":[{"t":"error_code","d":"ICU error code."}]},"db2_num_fields":{"s":"Returns the number of fields contained in a result set","y":"int db2_num_fields\n    ( resource $stmt\n   )","r":"Returns an integer value representing the number of fields in the result\n   set associated with the specified statement resource. Returns FALSE if\n   the statement resource is not a valid input value. ","p":[{"t":"stmt","d":"A valid statement resource containing a result set."}]},"trader_cdlspinningtop":{"s":"Spinning Top","y":"array trader_cdlspinningtop\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."}]},"mysql_fetch_assoc":{"s":"Fetch a result row as an associative array","y":"array mysql_fetch_assoc\n    ( resource $result\n   )","r":"Returns an associative array of strings that corresponds to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"easter_date":{"s":"Get Unix timestamp for midnight on Easter of a given year","y":"int easter_date\n    ([ int $year\n  ] )","r":"The easter date as a unix timestamp.","p":[{"t":"year","d":"The year as a number between 1970 an 2037"}]},"maxdb_field_seek":{"s":"Set result pointer to a specified field offset","y":"bool maxdb_field_seek\n    ( resource $result\n   , int $fieldnr\n   )","r":"maxdb_field_seek() returns previuos value of field cursor.","p":null},"ftp_mkdir":{"s":"Creates a directory","y":"string ftp_mkdir\n    ( resource $ftp_stream\n   , string $directory\n   )","r":"Returns the newly created directory name on success or FALSE on error.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"directory","d":"The name of the directory that will be created."}]},"udm_open_stored":{"s":"Open connection to stored","y":"int udm_open_stored\n    ( resource $agent\n   , string $storedaddr\n   )","r":"","p":null},"m_responseparam":{"s":"Get a custom response parameter","y":"string m_responseparam\n    ( resource $conn\n   , int $identifier\n   , string $key\n   )","r":"","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"identifier","d":""},{"t":"key","d":""}]},"ifx_close":{"s":"Close Informix connection","y":"bool ifx_close\n    ([ resource $link_identifier\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"The link identifier. If not specified, the last opened link is\n       assumed."}]},"newt_init":{"s":"Initialize newt","y":"int newt_init\n    ( void\n   )","r":"Returns 1 on success, 0 on failure.","p":null},"db2_fetch_assoc":{"s":"Returns an array, indexed by column name, representing a row in a result set","y":"array db2_fetch_assoc\n    ( resource $stmt\n   [, int $row_number = -1\n  ] )","r":"Returns an associative array with column values indexed by the column name\n   representing the next or requested row in the result set. Returns FALSE if\n   there are no rows left in the result set, or if the row requested by\n   row_number does not exist in the result set.","p":[{"t":"stmt","d":"A valid stmt resource containing a result set."},{"t":"row_number","d":"Requests a specific 1-indexed row from the result set. Passing this\n       parameter results in a PHP warning if the result set uses a\n       forward-only cursor."}]},"getmyuid":{"s":"Gets PHP script owner&#039;s UID","y":"int getmyuid\n    ( void\n   )","r":"Returns the user ID of the current script, or FALSE on error.","p":null},"fbsql_errno":{"s":"Returns the error number from previous operation","y":"int fbsql_errno\n    ([ resource $link_identifier\n  ] )","r":"Returns the error number from the last fbsql function, or\n   0 (zero) if no error occurred.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"snmpget":{"s":"Fetch an SNMP object","y":"string snmpget\n    ( string $hostname\n   , string $community\n   , string $object_id\n   [, int $timeout = 1000000\n   [, int $retries = 5\n  ]] )","r":"Returns SNMP object value on success or FALSE on error.","p":[{"t":"hostname","d":"The SNMP agent."},{"t":"community","d":"The read community."},{"t":"object_id","d":"The SNMP object."},{"t":"timeout","d":"The number of microseconds until the first timeout."},{"t":"retries","d":"The number of times to retry if timeouts occur."}]},"gmp_clrbit":{"s":"Clear bit","y":"void gmp_clrbit\n    ( resource $a\n   , int $index\n   )","r":"A GMP number resource.","p":[{"t":"a","d":"It can be either a GMP number resource, or a\nnumeric string given that it is possible to convert the latter to a number."},{"t":"index","d":"The index of the bit to clear.  Index 0 represents the least significant bit."}]},"openal_source_destroy":{"s":"Destroy a source resource","y":"bool openal_source_destroy\n    ( resource $source\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"source","d":"An Open AL(Source) resource\n      (previously created by openal_source_create())."}]},"memcache_debug":{"s":"Turn debug output on\/off","y":"bool memcache_debug\n    ( bool $on_off\n   )","r":"Returns TRUE if PHP was built with --enable-debug option, otherwise\n   returns FALSE.","p":[{"t":"on_off","d":"Turns debug output on if equals to TRUE.\n       Turns debug output off if equals to FALSE."}]},"ocicollsize":{"s":"Alias of OCI-Collection::size()","y":"","r":"","p":null},"udm_free_ispell_data":{"s":"Free memory allocated for ispell data","y":"bool udm_free_ispell_data\n    ( int $agent\n   )","r":"udm_free_ispell_data() always returns TRUE.","p":[{"t":"agent","d":"A link to Agent, received after call to\n       udm_alloc_agent()."}]},"fann_get_cascade_max_cand_epochs":{"s":"Returns the maximum candidate epochs","y":"int fann_get_cascade_max_cand_epochs\n    ( resource $ann\n   )","r":"The maximum candidate epochs, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"stream_context_set_option":{"s":"Sets an option for a stream\/wrapper\/context","y":"bool stream_context_set_option\n    ( resource $stream_or_context\n   , string $wrapper\n   , string $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stream_or_context","d":"The stream or context resource to apply the options to."},{"t":"options","d":"The options to set for the default context."}]},"ssh2_sftp_mkdir":{"s":"Create a directory","y":"bool ssh2_sftp_mkdir\n    ( resource $sftp\n   , string $dirname\n   [, int $mode = 0777\n   [, bool $recursive = false\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"sftp","d":"An SSH2 SFTP resource opened by ssh2_sftp()."},{"t":"dirname","d":"Path of the new directory."},{"t":"mode","d":"Permissions on the new directory."},{"t":"recursive","d":"If recursive is TRUE any parent directories\n       required for dirname will be automatically created as well."}]},"imap_list":{"s":"Read the list of mailboxes","y":"array imap_list\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )","r":"Returns an array containing the names of the mailboxes.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"ref","d":"ref should normally be just the server\n       specification as described in imap_open()."},{"t":"pattern","d":"Specifies where in the mailbox hierarchy\nto start searching."}]},"define_syslog_variables":{"s":"Initializes all syslog related variables","y":"void define_syslog_variables\n    ( void\n   )","r":"No value is returned.","p":null},"event_buffer_write":{"s":"Write data to a buffered event","y":"bool event_buffer_write\n    ( resource $bevent\n   , string $data\n   [, int $data_size = -1\n  ] )","r":"event_buffer_write() returns TRUE on success or FALSE on error.","p":[{"t":"bevent","d":"Valid buffered event resource."},{"t":"data","d":"The data to be written."},{"t":"data_size","d":"Optional size parameter. event_buffer_write() writes\n       all the data by default."}]},"ob_tidyhandler":{"s":"ob_start callback function to repair the buffer","y":"string ob_tidyhandler\n    ( string $input\n   [, int $mode\n  ] )","r":"Returns the modified buffer.","p":[{"t":"input","d":"The buffer."},{"t":"mode","d":"The buffer mode."}]},"ming_useconstants":{"s":"Use constant pool","y":"void ming_useconstants\n    ( int $use\n   )","r":"No value is returned.","p":null},"imagecreatefromjpeg":{"s":"Create a new image from file or URL","y":"resource imagecreatefromjpeg\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the JPEG image."}]},"variant_xor":{"s":"Performs a logical exclusion on two variants","y":"mixed variant_xor\n    ( mixed $left\n   , mixed $right\n   )","r":"Variant XOR Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUEFALSE\n\n      TRUEFALSETRUE\n\n      FALSETRUETRUE\n\n      FALSEFALSEFALSE\n\n      NULLNULLNULL","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"cairo_surface_get_font_options":{"s":"Description","y":"CairoFontOptions cairo_surface_get_font_options\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"strval":{"s":"Get string value of a variable","y":"string strval\n    ( mixed $var\n   )","r":"The string value of var.","p":[{"t":"var","d":"The variable that is being converted to a string."}]},"ncurses_vline":{"s":"Draw a vertical line at current position using an attributed character and max. n characters long ","y":"int ncurses_vline\n    ( int $charattr\n   , int $n\n   )","r":"","p":[{"t":"charattr","d":""},{"t":"n","d":""}]},"yaz_close":{"s":"Close YAZ connection","y":"bool yaz_close\n    ( resource $id\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."}]},"yaz_ccl_parse":{"s":"Invoke CCL Parser","y":"bool yaz_ccl_parse\n    ( resource $id\n   , string $query\n   , array &$result\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"id","d":"The connection resource returned by yaz_connect()."},{"t":"query","d":"The CCL FIND query."},{"t":"result","d":"If the function was executed successfully, this will be an array \n       containing the valid RPN query under the key rpn."}]},"curl_multi_init":{"s":"Returns a new cURL multi handle","y":"resource curl_multi_init\n    ( void\n   )","r":"Returns a cURL multi handle resource on success, FALSE on failure.","p":null},"gmp_div":{"s":"Alias of gmp_div_q()","y":"","r":"","p":null},"tan":{"s":"Tangent","y":"float tan\n     ( float $arg\n    )","r":"The tangent of arg","p":[{"t":"arg","d":"The argument to process in radians"}]},"radius_strerror":{"s":"Returns an error message","y":"string radius_strerror\n    ( resource $radius_handle\n   )","r":"Returns error messages as string from failed radius functions.","p":null},"imap_uid":{"s":"This function returns the UID for the given message sequence number","y":"int imap_uid\n    ( resource $imap_stream\n   , int $msg_number\n   )","r":"The UID of the given message.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"msg_number","d":"The message number."}]},"maxdb_embedded_connect":{"s":"Open a connection to an embedded MaxDB server","y":"resource maxdb_embedded_connect\n    ([ string $dbname\n  ] )","r":"","p":null},"cairo_surface_get_content":{"s":"Description","y":"int cairo_surface_get_content\n    ( CairoSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"rawurlencode":{"s":"URL-encode according to RFC 3986","y":"string rawurlencode\n    ( string $str\n   )","r":"Returns a string in which all non-alphanumeric characters except\n   -_.~ have been replaced with a percent\n   (%) sign followed by two hex digits.  This is the\n   encoding described in &raquo;&nbsp;RFC 3986 for\n   protecting literal characters from being interpreted as special URL\n   delimiters, and for protecting URLs from being mangled by transmission\n   media with character conversions (like some email systems).\n   Note: \n    \n     Prior to PHP 5.3.0, rawurlencode encoded tildes (~) as per\n     &raquo;&nbsp;RFC 1738.","p":[{"t":"str","d":"The URL to be encoded."}]},"odbc_result":{"s":"Get result data","y":"mixed odbc_result\n    ( resource $result_id\n   , mixed $field\n   )","r":"Returns the string contents of the field, FALSE on error, NULL for\n   NULL data, or TRUE for binary data.","p":[{"t":"result_id","d":"The ODBC resource."},{"t":"field","d":"The field name being retrieved. It can either be an integer containing\n       the column number of the field you want; or it can be a string\n       containing the name of the field."}]},"px_set_tablename":{"s":"Sets the name of a table (deprecated)","y":"void px_set_tablename\n    ( resource $pxdoc\n   , string $name\n   )","r":"Returns NULL on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."},{"t":"tablename","d":"The name of the table. If it is not set explicitly it will be set\n       to the name of the database file."}]},"http_build_str":{"s":"Build query string","y":"string http_build_str\n    ( array $query\n   [, string $prefix\n   [, string $arg_separator = ini_get(&quot;arg_separator.output&quot;)\n  ]] )","r":"Returns the built query as string on success or FALSE on failure.","p":[{"t":"query","d":"associative array of query string parameters"},{"t":"prefix","d":"top level prefix"},{"t":"arg_separator","d":"argument separator to use (by default the INI setting arg_separator.output will be used, or &quot;&amp;&quot; if neither is set"}]},"fgetc":{"s":"Gets character from file pointer","y":"string fgetc\n    ( resource $handle\n   )","r":"Returns a string containing a single character read from the file pointed\n   to by handle. Returns FALSE on EOF.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."}]},"maxdb_send_query":{"s":"Send the query and return","y":"bool maxdb_send_query\n    ( resource $link\n   , string $query\n   )","r":"","p":null},"stats_rand_get_seeds":{"s":"Not documented","y":"array stats_rand_get_seeds\n    ( void\n   )","r":"","p":null},"ldap_next_attribute":{"s":"Get the next attribute in result","y":"string ldap_next_attribute\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )","r":"Returns the next attribute in an entry on success and FALSE on\n   error.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"result_entry_identifier","d":""},{"t":"ber_identifier","d":"The internal state of the pointer is maintained by this parameter."}]},"maxdb_get_server_version":{"s":"Returns the version of the MaxDB server as an integer","y":"int maxdb_get_server_version\n    ( resource $link\n   )","r":"An integer representing the server version.","p":null},"ftp_nb_fget":{"s":"Retrieves a file from the FTP server and writes it to an open file (non-blocking)","y":"int ftp_nb_fget\n    ( resource $ftp_stream\n   , resource $handle\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )","r":"Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.","p":[{"t":"ftp_stream","d":"The link identifier of the FTP connection."},{"t":"handle","d":"An open file pointer in which we store the data."},{"t":"remote_file","d":"The remote file path."},{"t":"mode","d":"The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY."},{"t":"resumepos","d":"The position in the remote file to start downloading from."}]},"radius_salt_encrypt_attr":{"s":"Salt-encrypts a value","y":"string radius_salt_encrypt_attr\n    ( resource $radius_handle\n   , string $data\n   )","r":"Returns the salt-encrypted data  or FALSE on failure.","p":[{"t":"data","d":"The data to be salt-encrypted."}]},"exif_tagname":{"s":"Get the header name for an index","y":"string exif_tagname     \n    ( int $index\n   )","r":"Returns the header name, or FALSE if index is\n   not a defined EXIF tag id.","p":[{"t":"index","d":"The Tag ID for which a Tag Name will be looked up."}]},"stream_select":{"s":"Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec ","y":"int stream_select\n    ( array &$read\n   , array &$write\n   , array &$except\n   , int $tv_sec\n   [, int $tv_usec = 0\n  ] )","r":"On success stream_select() returns the number of\n   stream resources contained in the modified arrays, which may be zero if\n   the timeout expires before anything interesting happens. On error FALSE\n   is returned and a warning raised (this can happen if the system call is\n   interrupted by an incoming signal).","p":[{"t":"read","d":"The streams listed in the read array will be watched to\n       see if characters become available for reading (more precisely, to see if\n       a read will not block - in particular, a stream resource is also ready on\n       end-of-file, in which case an fread() will return\n       a zero length string)."},{"t":"write","d":"The streams listed in the write array will be\n       watched to see if a write will not block."},{"t":"except","d":"The streams listed in the except array will be\n       watched for high priority exceptional (&quot;out-of-band&quot;) data arriving."},{"t":"tv_sec","d":"The tv_sec and tv_usec\n       together form the timeout parameter,\n       tv_sec specifies the number of seconds while\n       tv_usec the number of microseconds.\n       The timeout is an upper bound on the amount of time\n       that stream_select() will wait before it returns.\n       If tv_sec and tv_usec are\n       both set to 0, stream_select() will\n       not wait for data - instead it will return immediately, indicating the\n       current status of the streams."}]},"xattr_set":{"s":"Set an extended attribute","y":"bool xattr_set\n    ( string $filename\n   , string $name\n   , string $value\n   [, int $flags = 0\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"The file in which we set the attribute."},{"t":"name","d":"The name of the extended attribute. This attribute will be created if \n       it doesn&#039;t exist or replaced otherwise. You can change this behaviour \n       by using the flags parameter."},{"t":"value","d":"The value of the attribute."},{"t":"flags","d":"Supported xattr flags\n        \n         \n          \n           XATTR_CREATE\n           Function will fail if extended attribute already exists.\n          \n\n          \n           XATTR_REPLACE\n           Function will fail if extended attribute doesn&#039;t exist.\n          \n\n          \n           XATTR_DONTFOLLOW\n           Do not follow the symbolic link but operate on symbolic link itself.\n          \n\n          \n           XATTR_ROOT\n           Set attribute in root (trusted) namespace. Requires root privileges."}]},"bbcode_set_flags":{"s":"Set or alter parser options","y":"bool bbcode_set_flags\n    ( resource $bbcode_container\n   , int $flags\n   [, int $mode = BBCODE_SET_FLAGS_SET\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bbcode_container","d":"BBCode_Container resource, returned by bbcode_create()."},{"t":"flags","d":"The flag set that must be applied to the bbcode_container options"},{"t":"mode","d":"One of the BBCODE_SET_FLAGS_* constant to set, unset\n       a specific flag set or to replace the flag set by flags."}]},"cairo_ps_get_levels":{"s":"Description","y":"array cairo_ps_get_levels\n    ( void\n   )","r":"What is returned on success and failure","p":null},"ob_get_length":{"s":"Return the length of the output buffer","y":"int ob_get_length\n    ( void\n   )","r":"Returns the length of the output buffer contents or FALSE if no\n   buffering is active.","p":null},"imagestringup":{"s":"Draw a string vertically","y":"bool imagestringup\n    ( resource $image\n   , int $font\n   , int $x\n   , int $y\n   , string $string\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."},{"t":"x","d":"x-coordinate of the bottom left corner."},{"t":"y","d":"y-coordinate of the bottom left corner."},{"t":"string","d":"The string to be written."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"imagejpeg":{"s":"Output image to browser or file","y":"bool imagejpeg\n    ( resource $image\n   [, string $filename\n   [, int $quality\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."},{"t":"quality","d":"quality is optional, and ranges from 0 (worst\n       quality, smaller file) to 100 (best quality, biggest file). The \n       default is the default IJG quality value (about 75)."}]},"px_get_info":{"s":"Return lots of information about a paradox file","y":"array px_get_info\n    ( resource $pxdoc\n   )","r":"Returns an associated array with lots of information about a paradox\n   file. This array is likely to be extended in the future.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database\n       as returned by px_new()."}]},"imagecreatefromxpm":{"s":"Create a new image from file or URL","y":"resource imagecreatefromxpm\n    ( string $filename\n   )","r":"Returns an image resource identifier on success, FALSE on errors.","p":[{"t":"filename","d":"Path to the XPM image."}]},"kadm5_get_policies":{"s":"Gets all policies from the Kerberos database","y":"array kadm5_get_policies\n    ( resource $handle\n   )","r":"Returns array of policies on success or FALSE on failure.","p":[{"t":"handle","d":"A KADM5 handle."}]},"ncurses_nl":{"s":"Translate newline and carriage return \/ line feed ","y":"bool ncurses_nl\n    ( void\n   )","r":"","p":null},"ifxus_tell_slob":{"s":"Returns the current file or seek position","y":"int ifxus_tell_slob\n    ( int $bid\n   )","r":"Returns the seek position as an integer, or FALSE on errors.","p":[{"t":"bid","d":"An existing slob id."}]},"fdf_set_file":{"s":"Set PDF document to display FDF data in","y":"bool fdf_set_file\n    ( resource $fdf_document\n   , string $url\n   [, string $target_frame\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."},{"t":"url","d":"Should be given as an absolute URL."},{"t":"target_frame","d":"Use this parameter to specify the frame in which the document will be\n       displayed. You can also set the default value for this parameter using\n       fdf_set_target_frame()."}]},"feof":{"s":"Tests for end-of-file on a file pointer","y":"bool feof\n    ( resource $handle\n   )","r":"Returns TRUE if the file pointer is at EOF or an error occurs\n   (including socket timeout); otherwise returns FALSE.","p":[{"t":"handle","d":"The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose())."}]},"shm_get_var":{"s":"Returns a variable from shared memory","y":"mixed shm_get_var\n    ( resource $shm_identifier\n   , int $variable_key\n   )","r":"Returns the variable with the given key.","p":[{"t":"shm_identifier","d":"Shared memory segment, obtained from shm_attach()."},{"t":"variable_key","d":"The variable key."}]},"db2_close":{"s":"Closes a database connection","y":"bool db2_close\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"Specifies an active DB2 client connection."}]},"rpm_close":{"s":"Closes an RPM file","y":"bool rpm_close\n    ( resource $rpmr\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"rpmr","d":"A file pointer resource successfully opened by\n        rpm_open()."}]},"swf_translate":{"s":"Translate the current transformations","y":"void swf_translate\n    ( float $x\n   , float $y\n   , float $z\n   )","r":"No value is returned.","p":[{"t":"x","d":"x value."},{"t":"y","d":"y value."},{"t":"z","d":"z value."}]},"ingres_errsqlstate":{"s":"Get the last SQLSTATE error code generated","y":"string ingres_errsqlstate\n    ([ resource $link\n  ] )","r":"Returns a string containing the last SQLSTATE, or NULL if no error has\n   occurred.","p":[{"t":"link","d":"The connection link identifier"}]},"bcsub":{"s":"Subtract one arbitrary precision number from another","y":"string bcsub\n    ( string $left_operand = &quot;&quot;\n   , string $right_operand = &quot;&quot;\n   [, int $scale = int\n  ] )","r":"The result of the subtraction, as a string.","p":[{"t":"left_operand","d":"The left operand, as a string."},{"t":"right_operand","d":"The right operand, as a string."},{"t":"scale","d":"This optional parameter is used to set the number\nof digits after the decimal place in the result. You can also set the global default scale\nfor all functions by using bcscale()."}]},"trader_willr":{"s":"Williams&#039; %R","y":"array trader_willr\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"localeconv":{"s":"Get numeric formatting information","y":"array localeconv\n    ( void\n   )","r":"localeconv() returns data based upon the current locale\n   as set by setlocale().  The associative array that is\n   returned contains the following fields:\n   \n    \n     \n      \n       Array element\n       Description\n      \n\n     \n\n     \n      \n       decimal_point\n       Decimal point character\n      \n\n      \n       thousands_sep\n       Thousands separator\n      \n\n      \n       grouping\n       Array containing numeric groupings\n      \n\n      \n       int_curr_symbol\n       International currency symbol (i.e. USD)\n      \n\n      \n       currency_symbol\n       Local currency symbol (i.e. $)\n      \n\n      \n       mon_decimal_point\n       Monetary decimal point character\n      \n\n      \n       mon_thousands_sep\n       Monetary thousands separator\n      \n\n      \n       mon_grouping\n       Array containing monetary groupings\n      \n\n      \n       positive_sign\n       Sign for positive values\n      \n\n      \n       negative_sign\n       Sign for negative values\n      \n\n      \n       int_frac_digits\n       International fractional digits\n      \n\n      \n       frac_digits\n       Local fractional digits\n      \n\n      \n       p_cs_precedes\n       \n        TRUE if currency_symbol precedes a positive value, FALSE\n        if it succeeds one\n       \n      \n\n      \n       p_sep_by_space\n       \n        TRUE if a space separates currency_symbol from a positive\n        value, FALSE otherwise\n       \n      \n\n      \n       n_cs_precedes\n       \n        TRUE if currency_symbol precedes a negative value, FALSE\n        if it succeeds one\n       \n      \n\n      \n       n_sep_by_space\n       \n        TRUE if a space separates currency_symbol from a negative\n        value, FALSE otherwise\n       \n      \n\n      \n       p_sign_posn\n       \n        \n         0 - Parentheses surround the quantity and currency_symbol\n         1 - The sign string precedes the quantity and currency_symbol\n         2 - The sign string succeeds the quantity and currency_symbol\n         3 - The sign string immediately precedes the currency_symbol\n         4 - The sign string immediately succeeds the currency_symbol\n        \n       \n      \n\n      \n       n_sign_posn\n       \n        \n         0 - Parentheses surround the quantity and currency_symbol\n         1 - The sign string precedes the quantity and currency_symbol\n         2 - The sign string succeeds the quantity and currency_symbol\n         3 - The sign string immediately precedes the currency_symbol\n         4 - The sign string immediately succeeds the currency_symbol","p":null},"svn_repos_open":{"s":"Open a shared lock on a repository.","y":"resource svn_repos_open\n    ( string $path\n   )","r":"","p":null},"oci_set_client_info":{"s":"Sets the client information","y":"bool oci_set_client_info\n    ( resource $connection\n   , string $client_info\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier,\nreturned by oci_connect(), oci_pconnect(),\nor oci_new_connect()."},{"t":"client_info","d":"User chosen string up to 64 bytes long."}]},"ncurses_use_extended_names":{"s":"Control use of extended names in terminfo descriptions ","y":"int ncurses_use_extended_names\n    ( bool $flag\n   )","r":"","p":[{"t":"flag","d":""}]},"mysql_unbuffered_query":{"s":"Send an SQL query to MySQL without fetching and buffering the result rows.","y":"resource mysql_unbuffered_query\n    ( string $query\n   [, resource $link_identifier = NULL\n  ] )","r":"For SELECT, SHOW, DESCRIBE or EXPLAIN statements,\n   mysql_unbuffered_query() \n   returns a resource on success, or FALSE on\n   error.","p":[{"t":"query","d":"The SQL query to execute."},{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"trader_cdlmorningstar":{"s":"Morning Star","y":"array trader_cdlmorningstar\n    ( array $open\n   , array $high\n   , array $low\n   , array $close\n   [, float $penetration\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"open","d":"Opening price, array of real values."},{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"penetration","d":"Percentage of penetration of a candle within another candle."}]},"gztell":{"s":"Tell gz-file pointer read\/write position","y":"int gztell\n    ( resource $zp\n   )","r":"The position of the file pointer or FALSE if an error occurs.","p":[{"t":"zp","d":"The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen()."}]},"ifx_free_blob":{"s":"Deletes the blob object","y":"bool ifx_free_blob\n    ( int $bid\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"bid","d":"The BLOB object id."}]},"cubrid_load_from_glo":{"s":"Read data from a GLO instance and save it in a file","y":"int cubrid_load_from_glo\n    ( resource $conn_identifier  \n   , string $oid  \n   , string $file_name  \n   )","r":"TRUE, when process is successful.","p":[{"t":"conn_identifier","d":"Connection identifier."},{"t":"oid","d":"Oid of the glo instance that you want to read the data from."},{"t":"file_name","d":"Name of the file where you want to save the data in."}]},"http_deflate":{"s":"Deflate data","y":"string http_deflate\n    ( string $data\n   [, int $flags = 0\n  ] )","r":"Returns the encoded string on success, or NULL on failure.","p":[{"t":"data","d":"String containing the data that should be encoded"},{"t":"flags","d":"deflate options"}]},"fdf_get_version":{"s":"Gets version number for FDF API or file ","y":"string fdf_get_version\n    ([ resource $fdf_document\n  ] )","r":"Returns the version as a string. For the current FDF toolkit 5.0 the API\n   version number is 5.0 and the document version number\n   is either 1.2, 1.3 or \n   1.4.","p":[{"t":"fdf_document","d":"The FDF document handle, returned by fdf_create(),\n       fdf_open() or fdf_open_string()."}]},"imap_listsubscribed":{"s":"Alias of imap_lsub()","y":"","r":"","p":null},"swf_pushmatrix":{"s":"Push the current transformation matrix back onto the stack","y":"void swf_pushmatrix\n    ( void\n   )","r":"No value is returned.","p":null},"fann_scale_train":{"s":"Scale input and output data based on previously calculated parameters","y":"bool fann_scale_train\n    ( resource $ann\n   , resource $train_data\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"train_data","d":"Neural network training data resource."}]},"radius_put_addr":{"s":"Attaches an IP address attribute","y":"bool radius_put_addr\n    ( resource $radius_handle\n   , int $type      \n   , string $addr            \n   [, int $options = 0\n   [, int $tag\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"radius_handle","d":"The RADIUS resource."},{"t":"type","d":"The attribute type."},{"t":"addr","d":"An IPv4 address in string form, such as 10.0.0.1."},{"t":"options","d":"A bitmask of the attribute options. The available options include RADIUS_OPTION_TAGGED and RADIUS_OPTION_SALT."},{"t":"tag","d":"The attribute tag. This parameter is ignored unless the RADIUS_OPTION_TAGGED option is set."}]},"forward_static_call_array":{"s":"Call a static method and pass the arguments as array","y":"mixed forward_static_call_array\n    ( callable $function\n   , array $parameters\n   )","r":"Returns the function result, or FALSE on error.","p":[{"t":"function","d":"The function or method to be called. This parameter may be an array,\n       with the name of the class, and the method, or a string, with a function\n       name."},{"t":"parameter","d":"One parameter, gathering all the method parameter in one array."}]},"variant_mod":{"s":"Divides two variants and returns only the remainder","y":"mixed variant_mod\n    ( mixed $left\n   , mixed $right\n   )","r":"Returns the remainder of the division.","p":[{"t":"left","d":"The left operand."},{"t":"right","d":"The right operand."}]},"sqlsrv_fetch_object":{"s":"Retrieves the next row of data in a result set as an object","y":"mixed sqlsrv_fetch_object\n    ( resource $stmt\n   [, string $className\n   [, array $ctorParams\n   [, int $row\n   [, int $offset\n  ]]]] )","r":" \n   Returns an object on success, NULL if there are no more rows to return, \n   and FALSE if an error occurs or if the specified class does not exist.","p":[{"t":"stmt","d":"A statement resource created by sqlsrv_query() or \n       sqlsrv_execute()."},{"t":"className","d":"The name of the class to instantiate. If no class name is specified, \n       stdClass is instantiated."},{"t":"ctorParams","d":"Values passed to the constructor of the specified class. If the constructor \n       of the specified class takes parameters, the ctorParams array must be \n       supplied."},{"t":"row","d":"The row to be accessed. This parameter can only be used if the specified \n       statement was prepared with a scrollable cursor. In that case, this parameter \n       can take on one of the following values:\n       \n        SQLSRV_SCROLL_NEXT\n        SQLSRV_SCROLL_PRIOR\n        SQLSRV_SCROLL_FIRST\n        SQLSRV_SCROLL_LAST\n        SQLSRV_SCROLL_ABSOLUTE\n        SQLSRV_SCROLL_RELATIVE"},{"t":"offset","d":"Specifies the row to be accessed if the row parameter is set to\n       SQLSRV_SCROLL_ABSOLUTE or\n       SQLSRV_SCROLL_RELATIVE. Note that the first row in\n       a result set has index 0."}]},"fbsql_insert_id":{"s":"Get the id generated from the previous INSERT operation","y":"int fbsql_insert_id\n    ([ resource $link_identifier\n  ] )","r":"Returns the ID generated from the previous INSERT query, or 0 if the\n   previous query does not generate an DEFAULT UNIQUE value.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."}]},"openssl_x509_read":{"s":"Parse an X.509 certificate and return a resource identifier for\n  it","y":"resource openssl_x509_read\n    ( mixed $x509certdata\n   )","r":"Returns a resource identifier on success or FALSE on failure.","p":[{"t":"x509certdata","d":""}]},"ncurses_panel_below":{"s":"Returns the panel below panel","y":"resource ncurses_panel_below\n    ( resource $panel\n   )","r":"","p":[{"t":"panel","d":""}]},"is_array":{"s":"Finds whether a variable is an array","y":"bool is_array\n     ( mixed $var\n    )","r":"Returns TRUE if var is an array,\n   FALSE otherwise.","p":[{"t":"var","d":"The variable being evaluated."}]},"mysql_num_fields":{"s":"Get number of fields in result","y":"int mysql_num_fields\n    ( resource $result\n   )","r":"Returns the number of fields in the result set resource on\n   success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."}]},"pg_field_num":{"s":"Returns the field number of the named field","y":"int pg_field_num\n    ( resource $result\n   , string $field_name\n   )","r":"The field number (numbered from 0), or -1 on error.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"field_name","d":"The name of the field."}]},"db2_special_columns":{"s":"Returns a result set listing the unique row identifier columns for a table","y":"resource db2_special_columns\n    ( resource $connection\n   , string $qualifier\n   , string $schema\n   , string $table_name\n   , int $scope\n   )","r":"Returns a statement resource with a result set containing rows with unique\n   row identifier information for a table. The rows are composed of the\n   following columns:\n   \n    \n     \n      \n       Column name\n       Description\n      \n\n     \n\n     \n      \n       SCOPE\n       \n        \n         \n          \n           \n            \n             Integer value\n             SQL constant\n             Description\n            \n\n           \n\n           \n            \n             0\n             SQL_SCOPE_CURROW\n             Row identifier is valid only while the cursor is positioned\n             on the row.\n            \n\n            \n             1\n             SQL_SCOPE_TRANSACTION\n             Row identifier is valid for the duration of the\n              transaction.\n            \n\n            \n             2\n             SQL_SCOPE_SESSION\n             Row identifier is valid for the duration of the\n              connection.","p":[{"t":"connection","d":"A valid connection to an IBM DB2, Cloudscape, or Apache Derby database."},{"t":"qualifier","d":"A qualifier for DB2 databases running on OS\/390 or z\/OS servers. For\n       other databases, pass NULL or an empty string."},{"t":"schema","d":"The schema which contains the tables."},{"t":"table_name","d":"The name of the table."},{"t":"scope","d":"Integer value representing the minimum duration for which the\n       unique row identifier is valid. This can be one of the following\n       values:\n       \n        \n         \n          \n           Integer value\n           SQL constant\n           Description\n          \n\n         \n\n         \n          \n           0\n           SQL_SCOPE_CURROW\n           Row identifier is valid only while the cursor is positioned\n           on the row.\n          \n\n          \n           1\n           SQL_SCOPE_TRANSACTION\n           Row identifier is valid for the duration of the\n            transaction.\n          \n\n          \n           2\n           SQL_SCOPE_SESSION\n           Row identifier is valid for the duration of the\n            connection."}]},"die":{"s":"Equivalent to exit","y":"","r":"","p":null},"apc_inc":{"s":"Increase a stored number","y":"int apc_inc\n    ( string $key\n   [, int $step = 1\n   [, bool &$success\n  ]] )","r":"Returns the current value of key&#039;s value on success,\n    or FALSE on failure","p":[{"t":"key","d":"The key of the value being increased."},{"t":"step","d":"The step, or value to increase."},{"t":"success","d":"Optionally pass the success or fail boolean value to\n      this referenced variable."}]},"vpopmail_alias_del_domain":{"s":"Deletes all virtual aliases of a domain","y":"bool vpopmail_alias_del_domain\n    ( string $domain\n   )","r":"","p":null},"geoip_isp_by_name":{"s":"Get the Internet Service Provider (ISP) name","y":"string geoip_isp_by_name\n    ( string $hostname\n   )","r":"Returns the ISP name on success, or FALSE if the address\n   cannot be found in the database.","p":[{"t":"hostname","d":"The hostname or IP address."}]},"ncurses_qiflush":{"s":"Flush on signal characters ","y":"void ncurses_qiflush\n    ( void\n   )","r":"","p":null},"ngettext":{"s":"Plural version of gettext","y":"string ngettext\n    ( string $msgid1\n   , string $msgid2\n   , int $n\n   )","r":"Returns correct plural form of message identified by \n   msgid1 and msgid2\n   for count n. ","p":[{"t":"msgid1","d":""},{"t":"msgid2","d":""},{"t":"n","d":""}]},"xmlwriter_flush":{"s":"Flush current buffer","y":"mixed XMLWriter::flush\n    ([ bool $empty = true\n  ] )","r":"If you opened the writer in memory, this function returns the generated XML buffer,\n   Else, if using URI, this function will write the buffer and return the number of \n   written bytes.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."},{"t":"empty","d":"Whether to empty the buffer or not. Default is TRUE."}]},"gupnp_control_point_new":{"s":"Create a new control point","y":"resource gupnp_control_point_new\n    ( resource $context\n   , string $target\n   )","r":"A control point identifier.","p":[{"t":"context","d":"A context identifier, returned by gupnp_context_new()."},{"t":"target","d":"The search target. target should be a service \n       or device name, such as urn:schemas-upnp-org:service:WANIPConnection:1 or\n       urn:schemas-upnp-org:device:MediaRenderer:1."}]},"zend_version":{"s":"Gets the version of the current Zend engine","y":"string zend_version\n    ( void\n   )","r":"Returns the Zend Engine version number, as a string.","p":null},"printer_start_doc":{"s":"Start a new document","y":"bool printer_start_doc\n    ( resource $printer_handle\n   [, string $document\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"printer_handle","d":"printer_handle must be a valid printer handle."},{"t":"document","d":"The optional parameter document can be used to\n       set an alternative document name."}]},"db2_free_result":{"s":"Frees resources associated with a result set","y":"bool db2_free_result\n    ( resource $stmt\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"stmt","d":"A valid statement resource."}]},"yp_cat":{"s":"Return an array containing the entire map","y":"array yp_cat\n    ( string $domain\n   , string $map\n   )","r":"Returns an array of all map entries, the maps key values as array indices\n   and the maps entries as array data.","p":[{"t":"domain","d":"The NIS domain name."},{"t":"map","d":"The NIS map."}]},"tidy_save_config":{"s":"Save current settings to named file","y":"bool tidy_save_config\n    ( string $filename\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"filename","d":"Path to the config file."}]},"w32api_register_function":{"s":"Registers function function_name from library with PHP","y":"bool w32api_register_function\n    ( string $library\n   , string $function_name\n   , string $return_type\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"library","d":"The library name, as a string."},{"t":"function_name","d":"The function name, as a string."},{"t":"return_type","d":"The function will be registered with the given \n       return_type. This type can be a generic PHP\n       type, or a type defined with w32api_deftype().\n       All type names are case sensitive. Built in type names should be\n       provided in lowercase."}]},"fbsql_database_password":{"s":"Sets or retrieves the password for a FrontBase database","y":"string fbsql_database_password\n    ( resource $link_identifier\n   [, string $database_password\n  ] )","r":"Returns the database password associated with the link identifier.","p":[{"t":"link_identifier","d":"A FrontBase link identifier\nreturned by fbsql_connect() or\nfbsql_pconnect()."},{"t":"database_password","d":"The database password, as a string. If given, the function sets the\n       database password for the specified link identifier."}]},"imap_append":{"s":"Append a string message to a specified mailbox","y":"bool imap_append\n    ( resource $imap_stream\n   , string $mailbox\n   , string $message\n   [, string $options = NULL\n   [, string $internal_date = NULL\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"message","d":"The message to be append, as a string"},{"t":"options","d":"If provided, the options will also be written\n       to the mailbox"},{"t":"internal_date","d":"If this parameter is set, it will set the INTERNALDATE on the appended message.  The parameter should be a date string that conforms to the rfc2060 specifications for a date_time value."}]},"ibase_blob_get":{"s":"Get len bytes data from open blob","y":"string ibase_blob_get\n    ( resource $blob_handle\n   , int $len\n   )","r":"Returns at most len bytes from the BLOB, or FALSE\n   on failure.","p":[{"t":"blob_handle","d":"A BLOB handle opened with ibase_blob_open()."},{"t":"len","d":"Size of returned data."}]},"trader_plus_dm":{"s":"Plus Directional Movement","y":"array trader_plus_dm\n    ( array $high\n   , array $low\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"dbplus_errno":{"s":"Get error code for last operation","y":"int dbplus_errno\n    ( void\n   )","r":"Returns the error code, as an integer.","p":null},"php_strip_whitespace":{"s":"Return source with stripped comments and whitespace","y":"string php_strip_whitespace\n    ( string $filename\n   )","r":"The stripped source code will be returned on success, or an empty string\n   on failure.","p":[{"t":"filename","d":"Path to the PHP file."}]},"fbsql_fetch_assoc":{"s":"Fetch a result row as an associative array","y":"array fbsql_fetch_assoc\n    ( resource $result\n   )","r":"Returns an associative array that corresponds to the fetched row, or\n   FALSE if there are no more rows.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."}]},"sqlite_has_more":{"s":"Finds whether or not more rows are available","y":"bool sqlite_has_more\n    ( resource $result\n   )","r":"Returns TRUE if there are more rows available from the\n   result handle, or FALSE otherwise.","p":[{"t":"result","d":"The SQLite result resource."}]},"imap_status":{"s":"Returns status information on a mailbox","y":"object imap_status\n    ( resource $imap_stream\n   , string $mailbox\n   , int $options\n   )","r":"This function returns an object containing status information.\n   The object has the following properties: messages,\n   recent, unseen, \n   uidnext, and uidvalidity.  ","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"mailbox","d":"The mailbox name, see imap_open() for more\n       information"},{"t":"options","d":"Valid flags are:\n       \n        \n         \n          SA_MESSAGES - set $status->messages to the\n          number of messages in the mailbox\n         \n        \n        \n         \n          SA_RECENT - set $status->recent to the number\n          of recent messages in the mailbox\n         \n        \n        \n         \n          SA_UNSEEN - set $status->unseen to the number\n          of unseen (new) messages in the mailbox\n         \n        \n        \n         \n          SA_UIDNEXT - set $status->uidnext to the next\n          uid to be used in the mailbox\n         \n        \n        \n         \n          SA_UIDVALIDITY - set $status->uidvalidity to a\n          constant that changes when uids for the mailbox may no longer be\n          valid\n         \n        \n        \n         \n          SA_ALL - set all of the above"}]},"cos":{"s":"Cosine","y":"float cos\n     ( float $arg\n    )","r":"The cosine of arg","p":[{"t":"arg","d":"An angle in radians"}]},"trader_natr":{"s":"Normalized Average True Range","y":"array trader_natr\n    ( array $high\n   , array $low\n   , array $close\n   [, integer $timePeriod\n  ] )","r":"Returns an array with calculated data or false on failure.","p":[{"t":"high","d":"High price, array of real values."},{"t":"low","d":"Low price, array of real values."},{"t":"close","d":"Closing price, array of real values."},{"t":"timePeriod","d":"Number of period. Valid range from 2 to 100000."}]},"http_build_cookie":{"s":"Build cookie string","y":"string http_build_cookie\n    ( array $cookie\n   )","r":"Returns the cookie(s) as string.","p":[{"t":"cookie","d":"a cookie list like returned from http_parse_cookie()"}]},"spl_object_hash":{"s":"Return hash id for given object","y":"string spl_object_hash\n    ( object $obj\n   )","r":"A string that is unique for each currently existing object and is always\n   the same for each object.","p":[{"t":"object","d":"Any object."}]},"hebrev":{"s":"Convert logical Hebrew text to visual text","y":"string hebrev\n    ( string $hebrew_text\n   [, int $max_chars_per_line = 0\n  ] )","r":"Returns the visual string.","p":[{"t":"hebrew_text","d":"A Hebrew input string."},{"t":"max_chars_per_line","d":"This optional parameter indicates maximum number of characters per\n       line that will be returned."}]},"eregi_replace":{"s":"Replace regular expression case insensitive","y":"string eregi_replace\n    ( string $pattern\n   , string $replacement\n   , string $string\n   )","r":"The modified string is returned. If no matches are found in \n   string, then it will be returned unchanged.","p":[{"t":"pattern","d":"A POSIX extended regular expression."},{"t":"replacement","d":"If pattern contains parenthesized substrings,\n       replacement may contain substrings of the form\n       \\digit, which will be\n       replaced by the text matching the digit&#039;th parenthesized substring; \n       \\0 will produce the entire contents of string.\n       Up to nine substrings may be used. Parentheses may be nested, in which\n       case they are counted by the opening parenthesis."},{"t":"string","d":"The input string."}]},"m_completeauthorizations":{"s":"Number of complete authorizations in queue, returning an array of their identifiers","y":"int m_completeauthorizations\n    ( resource $conn\n   , int &$array\n   )","r":"What the function returns, first on success, then on failure. See\n   also the &amp;return.success; entity","p":[{"t":"conn","d":"An MCVE_CONN resource returned by\nm_initengine()."},{"t":"array","d":"Its description"}]},"ldap_rename":{"s":"Modify the name of an entry","y":"bool ldap_rename\n    ( resource $link_identifier\n   , string $dn\n   , string $newrdn\n   , string $newparent\n   , bool $deleteoldrdn\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"link_identifier","d":"An LDAP link identifier, returned by ldap_connect()."},{"t":"dn","d":"The distinguished name of an LDAP entity."},{"t":"newrdn","d":"The new RDN."},{"t":"newparent","d":"The new parent\/superior entry."},{"t":"deleteoldrdn","d":"If TRUE the old RDN value(s) is removed, else the old RDN value(s)\n       is retained as non-distinguished values of the entry."}]},"tcpwrap_check":{"s":"Performs a tcpwrap check","y":"bool tcpwrap_check\n    ( string $daemon\n   , string $address\n   [, string $user\n   [, bool $nodns = false\n  ]] )","r":"This function returns TRUE if access should be granted, FALSE otherwise.","p":[{"t":"daemon","d":"The service name."},{"t":"address","d":"The client remote address. Can be either an IP address or a domain name."},{"t":"user","d":"An optional user name."},{"t":"nodns","d":"If address looks like domain name then DNS is \n       used to resolve it to IP address; set nodns to \n       TRUE to avoid this."}]},"eio_fchown":{"s":"Change file ownership","y":"resource eio_fchown\n    ( mixed $fd\n   , int $uid\n   [, int $gid = -1\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )","r":"","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor."},{"t":"uid","d":"User ID. Is ignored when equal to -1."},{"t":"gid","d":"Group ID. Is ignored when equal to -1."},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"fann_get_cascade_output_change_fraction":{"s":"Returns the cascade output change fraction","y":"float fann_get_cascade_output_change_fraction\n    ( resource $ann\n   )","r":"The cascade output change fraction, or FALSE on error.","p":[{"t":"ann","d":"Neural network resource."}]},"time_nanosleep":{"s":"Delay for a number of seconds and nanoseconds","y":"mixed time_nanosleep\n    ( int $seconds\n   , int $nanoseconds\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"seconds","d":"Must be a non-negative integer."},{"t":"nanoseconds","d":"Must be a non-negative integer less than 1 billion."}]},"parsekit_compile_file":{"s":"Compile a string of PHP code and return the resulting op array","y":"array parsekit_compile_file\n    ( string $filename\n   [, array &$errors\n   [, int $options = PARSEKIT_QUIET\n  ]] )","r":"Returns a complex multi-layer array structure as detailed below.","p":[{"t":"filename","d":"A string containing the name of the file to compile. \n       Similar to the argument to include."},{"t":"errors","d":"A 2D hash of errors (including fatal errors) encountered during compilation.\n       Returned by reference."},{"t":"options","d":"One of either PARSEKIT_QUIET or \n       PARSEKIT_SIMPLE. To produce varying\n       degrees of verbosity in the returned output."}]},"hw_getrellink":{"s":"Get link from source to dest relative to rootid","y":"string hw_getrellink\n    ( int $link\n   , int $rootid\n   , int $sourceid\n   , int $destid\n   )","r":"","p":null},"stream_socket_client":{"s":"Open Internet or Unix domain socket connection","y":"resource stream_socket_client\n    ( string $remote_socket\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n   [, int $flags = STREAM_CLIENT_CONNECT\n   [, resource $context\n  ]]]]] )","r":"On success a stream resource is returned which may\n   be used together with the other file functions (such as\n   fgets(), fgetss(),\n   fwrite(), fclose(), and\n   feof()), FALSE on failure.","p":[{"t":"remote_socket","d":"Address to the socket to connect to."},{"t":"errno","d":"Will be set to the system level error number if connection fails."},{"t":"errstr","d":"Will be set to the system level error message if the connection fails."},{"t":"timeout","d":"Number of seconds until the connect() system call\n       should timeout.\n       Note: \n        \n         This parameter only applies when not making asynchronous\n         connection attempts."},{"t":"flags","d":"Bitmask field which may be set to any combination of connection flags.\n       Currently the select of connection flags is limited to\n       STREAM_CLIENT_CONNECT (default),\n       STREAM_CLIENT_ASYNC_CONNECT and\n       STREAM_CLIENT_PERSISTENT."},{"t":"context","d":"A valid context resource created with stream_context_create()."}]},"ps_set_text_pos":{"s":"Sets position for text output","y":"bool ps_set_text_pos\n    ( resource $psdoc\n   , float $x\n   , float $y\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"x","d":"x-coordinate of the new text position."},{"t":"y","d":"y-coordinate of the new text position."}]},"mysql_field_len":{"s":"Returns the length of the specified field","y":"int mysql_field_len\n    ( resource $result\n   , int $field_offset\n   )","r":"The length of the specified field index on success or FALSE on failure.","p":[{"t":"result","d":"The result resource that\nis being evaluated. This result comes from a call to\nmysql_query()."},{"t":"field_offset","d":"The numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued."}]},"svn_repos_fs_begin_txn_for_commit":{"s":"Create a new transaction","y":"resource svn_repos_fs_begin_txn_for_commit\n    ( resource $repos\n   , int $rev\n   , string $author\n   , string $log_msg\n   )","r":"","p":null},"svn_auth_set_parameter":{"s":"Sets an authentication parameter","y":"void svn_auth_set_parameter\n    ( string $key\n   , string $value\n   )","r":"No value is returned.","p":[{"t":"key","d":"String key name. Use the authentication constants\n       defined by this extension to specify a key."},{"t":"value","d":"String value to set to parameter at key. Format of value varies\n       with the parameter."}]},"str_getcsv":{"s":"Parse a CSV string into an array","y":"array str_getcsv\n    ( string $input\n   [, string $delimiter = &quot;,&quot;\n   [, string $enclosure = &#039;&quot;&#039;\n   [, string $escape = &quot;\\\\&quot;\n  ]]] )","r":"Returns an indexed array containing the fields read.","p":[{"t":"input","d":"The string to parse."},{"t":"delimiter","d":"Set the field delimiter (one character only)."},{"t":"enclosure","d":"Set the field enclosure character (one character only)."},{"t":"escape","d":"Set the escape character (one character only). Defaults as a backslash\n       (\\)"}]},"imagechar":{"s":"Draw a character horizontally","y":"bool imagechar\n    ( resource $image\n   , int $font\n   , int $x\n   , int $y\n   , string $c\n   , int $color\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"font","d":"Can be 1, 2, 3, 4, 5 for built-in\nfonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your\nown font identifiers registered with imageloadfont()."},{"t":"x","d":"x-coordinate of the start."},{"t":"y","d":"y-coordinate of the start."},{"t":"c","d":"The character to draw."},{"t":"color","d":"A color identifier created with \n       imagecolorallocate()."}]},"ncurses_clear":{"s":"Clear screen ","y":"bool ncurses_clear\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"stream_context_get_options":{"s":"Retrieve options for a stream\/wrapper\/context","y":"array stream_context_get_options\n    ( resource $stream_or_context\n   )","r":"Returns an associative array with the options.","p":[{"t":"stream_or_context","d":"The stream or context to get options from"}]},"mysql_error":{"s":"Returns the text of the error message from previous MySQL operation","y":"string mysql_error\n    ([ resource $link_identifier = NULL\n  ] )","r":"Returns the error text from the last MySQL function, or\n   &#039;&#039; (empty string) if no error occurred.","p":[{"t":"link_identifier","d":"The MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated."}]},"maxdb_bind_result":{"s":"Alias of maxdb_stmt_bind_result()","y":"","r":"","p":null},"stream_context_set_default":{"s":"Set the default stream context","y":"resource stream_context_set_default\n    ( array $options\n   )","r":"Returns the default stream context. ","p":[{"t":"options","d":"The options to set for the default context."}]},"cairo_font_options_get_hint_metrics":{"s":"Description","y":"int cairo_font_options_get_hint_metrics\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"fann_set_activation_steepness":{"s":"Sets the activation steepness for supplied neuron and layer number","y":"bool fann_set_activation_steepness\n    ( resource $ann\n   , float $activation_steepness\n   , int $layer\n   , int $neuron\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"activation_steepness","d":"The activation steepness."},{"t":"layer","d":"Layer number."},{"t":"neuron","d":"Neuron number."}]},"ob_gzhandler":{"s":"ob_start callback function to gzip output buffer","y":"string ob_gzhandler\n    ( string $buffer\n   , int $mode\n   )","r":"","p":[{"t":"buffer","d":""},{"t":"mode","d":""}]},"deg2rad":{"s":"Converts the number in degrees to the radian equivalent","y":"float deg2rad\n     ( float $number\n    )","r":"The radian equivalent of number","p":[{"t":"number","d":"Angular value in degrees"}]},"pg_fetch_object":{"s":"Fetch a row as an object","y":"object pg_fetch_object\n    ( resource $result\n   [, int $row\n   [, int $result_type = PGSQL_ASSOC\n  ]] )","r":"An object with one attribute for each field\n   name in the result.  Database NULL\n   values are returned as NULL.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."},{"t":"row","d":"Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched."},{"t":"result_type","d":"Ignored and deprecated."},{"t":"class_name","d":"The name of the class to instantiate, set the properties of and return.\n        If not specified, a stdClass object is returned."},{"t":"params","d":"An optional array of parameters to pass to the constructor\n        for class_name objects."}]},"openal_buffer_get":{"s":"Retrieve an OpenAL buffer property","y":"int openal_buffer_get\n    ( resource $buffer\n   , int $property\n   )","r":"Returns an integer value appropriate to the property\n   requested or FALSE on failure.","p":[{"t":"buffer","d":"An Open AL(Buffer) resource\n      (previously created by openal_buffer_create())."},{"t":"property","d":"Specific property, one of:\n      AL_FREQUENCY,\n      AL_BITS,\n      AL_CHANNELS and\n      AL_SIZE."}]},"ssh2_publickey_init":{"s":"Initialize Publickey subsystem","y":"resource ssh2_publickey_init\n    ( resource $session\n   )","r":"Returns an SSH2 Publickey Subsystem resource for use\n   with all other ssh2_publickey_*() methods or FALSE on failure.","p":[{"t":"session","d":""}]},"eio_ftruncate":{"s":"Truncate a file","y":"resource eio_ftruncate\n    ( mixed $fd\n   [, int $offset = 0\n   [, int $pri = EIO_PRI_DEFAULT\n   [, callable $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )","r":"eio_ftruncate() returns request resource on success or FALSE on error.","p":[{"t":"fd","d":"Stream, Socket resource, or numeric file descriptor."},{"t":"offset","d":"Offset from beginning of the file"},{"t":"pri","d":"The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT."},{"t":"callback","d":""}]},"preg_grep":{"s":"Return array entries that match the pattern","y":"array preg_grep\n    ( string $pattern\n   , array $input\n   [, int $flags = 0\n  ] )","r":"Returns an array indexed using the keys from the\n   input array. ","p":[{"t":"pattern","d":"The pattern to search for, as a string."},{"t":"input","d":"The input array."},{"t":"flags","d":"If set to PREG_GREP_INVERT, this function returns\n       the elements of the input array that do not match\n       the given pattern."}]},"gupnp_service_proxy_add_notify":{"s":"Sets up callback for variable change notification","y":"bool gupnp_service_proxy_add_notify\n    ( resource $proxy\n   , string $value\n   , int $type\n   , mixed $callback\n   [, mixed $arg\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"value","d":"The variable to add notification for."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"callback","d":"The callback to call when variable changes. Typically, callback function \n       takes on three parameters. The variable \n       parameter being the first, value parameter\n       being the second, and the arg is third."},{"t":"arg","d":"User data for callback."}]},"gupnp_service_action_set":{"s":"Sets the specified action return values","y":"bool gupnp_service_action_set\n    ( resource $action\n   , string $name\n   , int $type\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"action","d":"A service action identifier."},{"t":"name","d":"The name of the variable to retrieve."},{"t":"type","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"","d":""},{"t":"value","d":"The value of the variable to retrieve."}]},"imap_set_quota":{"s":"Sets a quota for a given mailbox","y":"bool imap_set_quota\n    ( resource $imap_stream\n   , string $quota_root\n   , int $quota_limit\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"quota_root","d":"The mailbox to have a quota set. This should follow the IMAP standard\n       format for a mailbox: user.name."},{"t":"quota_limit","d":"The maximum size (in KB) for the quota_root"}]},"fbsql_set_lob_mode":{"s":"Set the LOB retrieve mode for a FrontBase result set","y":"bool fbsql_set_lob_mode\n    ( resource $result\n   , int $lob_mode\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"result","d":"A result identifier\nreturned by fbsql_query() or\nfbsql_db_query()."},{"t":"lob_mode","d":"Can be one of:\n       \n        \n         \n          FBSQL_LOB_DIRECT - LOB data is retrieved\n          directly. When data is fetched from the database with\n          fbsql_fetch_row(), and other fetch functions,\n          all CLOB and BLOB columns will be returned as ordinary columns.\n          This is the default value on a new FrontBase result.\n         \n        \n        \n         \n          FBSQL_LOB_HANDLE - LOB data is retrieved as\n          handles to the data.  When data is fetched from the database with\n          fbsql_fetch_row(), and other fetch functions,\n          LOB data will be returned as a handle to the data if the data is\n          stored indirect or the data if it is stored direct.  If a handle\n          is returned it will be a 27 byte string formatted as \n          @&#039;000000000000000000000000&#039;."}]},"curl_share_init":{"s":"Initialize a cURL share handle","y":"resource curl_share_init\n    ( void\n   )","r":"Returns resource of type &quot;cURL Share Handle&quot;.","p":null},"stream_socket_recvfrom":{"s":"Receives data from a socket, connected or not ","y":"string stream_socket_recvfrom\n    ( resource $socket\n   , int $length\n   [, int $flags = 0\n   [, string &$address\n  ]] )","r":"Returns the read data, as a string","p":[{"t":"socket","d":"The remote socket."},{"t":"length","d":"The number of bytes to receive from the socket."},{"t":"flags","d":"The value of flags can be any combination\n       of the following:\n       \n        Possible values for flags\n        \n         \n          \n           STREAM_OOB\n           \n            Process OOB (out-of-band) data.\n           \n          \n\n          \n           STREAM_PEEK\n           \n            Retrieve data from the socket, but do not consume the buffer.\n            Subsequent calls to fread() or\n            stream_socket_recvfrom() will see\n            the same data."},{"t":"address","d":"If address is provided it will be populated with\n       the address of the remote socket."}]},"image2wbmp":{"s":"Output image to browser or file","y":"bool image2wbmp\n    ( resource $image\n   [, string $filename\n   [, int $threshold\n  ]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"image","d":"An image resource, returned by one of the image creation functions,\nsuch as imagecreatetruecolor()."},{"t":"filename","d":"Path to the saved file. If not given, the raw image stream will be\n       outputted directly."},{"t":"threshold","d":"Threshold value, between 0 and 255 (inclusive)."}]},"maxdb_options":{"s":"Set options","y":"bool maxdb_options\n    ( resource $link\n   , int $option\n   , mixed $value\n   )","r":"Returns TRUE on success or FALSE on failure.","p":null},"spl_autoload_register":{"s":"Register given function as __autoload() implementation","y":"bool spl_autoload_register\n    ([ callable $autoload_function\n   [, bool $throw = true\n   [, bool $prepend = false\n  ]]] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"autoload_function","d":"The autoload function being registered.\n       If no parameter is provided, then the default implementation of\n       spl_autoload() will be registered."},{"t":"throw","d":"This parameter specifies whether\n       spl_autoload_register() should throw \n       exceptions when the autoload_function\n       cannot be registered."},{"t":"prepend","d":"If true, spl_autoload_register() will prepend\n       the autoloader on the autoload stack instead of appending it."}]},"timezone_location_get":{"s":"Alias of DateTimeZone::getLocation()","y":"","r":"","p":null},"cairo_ps_surface_dsc_begin_page_setup":{"s":"Description","y":"void cairo_ps_surface_dsc_begin_page_setup\n    ( CairoPsSurface $surface\n   )","r":"What is returned on success and failure","p":[{"t":"surface","d":"Description..."}]},"oci_get_implicit_resultset":{"s":"Returns the next child statement resource from a parent statement resource that has Oracle Database 12c Implicit Result Sets","y":"resource  oci_get_implicit_resultset\n    ( resource $statement\n   )","r":"Returns a statement handle for the next child statement available\n   on statement.  Returns FALSE when child\n   statements do not exist, or all child statements have been returned\n   by previous calls\n   to oci_get_implicit_resultset().","p":[{"t":"statement","d":"A valid OCI8 statement identifier created\n         by oci_parse() and executed\n         by oci_execute().  The statement\n         identifier may or may not be associated with a SQL statement\n         that returns Implicit Result Sets."}]},"bzwrite":{"s":"Binary safe bzip2 file write","y":"int bzwrite\n    ( resource $bz\n   , string $data\n   [, int $length\n  ] )","r":"Returns the number of bytes written, or FALSE on error.","p":[{"t":"bz","d":"The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen()."},{"t":"data","d":"The written data."},{"t":"length","d":"If supplied, writing will stop after length \n       (uncompressed) bytes have been written or the end of \n       data is reached, whichever comes first."}]},"openssl_pkcs12_export_to_file":{"s":"Exports a PKCS#12 Compatible Certificate Store File","y":"bool openssl_pkcs12_export_to_file\n    ( mixed $x509\n   , string $filename\n   , mixed $priv_key\n   , string $pass\n   [, array $args\n  ] )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"x509","d":"See Key\/Certificate parameters for a list of valid values."},{"t":"filename","d":"Path to the output file."},{"t":"priv_key","d":"Private key component of PKCS#12 file."},{"t":"pass","d":"Encryption password for unlocking the PKCS#12 file."},{"t":"args","d":""}]},"crypt":{"s":"One-way string hashing","y":"string crypt\n    ( string $str\n   [, string $salt\n  ] )","r":"Returns the hashed string or a string that is shorter than 13 characters\n   and is guaranteed to differ from the salt on failure.","p":[{"t":"str","d":"The string to be hashed."}]},"printer_create_pen":{"s":"Create a new pen","y":"resource printer_create_pen\n    ( int $style\n   , int $width\n   , string $color\n   )","r":"Returns a pen handle or FALSE on error.","p":[{"t":"style","d":"style must be one of the following constants:\n       \n        \n         \n          PRINTER_PEN_SOLID:\n          creates a solid pen.\n         \n        \n        \n         \n          PRINTER_PEN_DASH:\n          creates a dashed pen.\n         \n        \n        \n         \n          PRINTER_PEN_DOT:\n          creates a dotted pen.\n         \n        \n        \n         \n          PRINTER_PEN_DASHDOT:\n          creates a pen with dashes and dots.\n         \n        \n        \n         \n          PRINTER_PEN_DASHDOTDOT:\n          creates a pen with dashes and double dots.\n         \n        \n        \n         \n          PRINTER_PEN_INVISIBLE:\n          creates an invisible pen."},{"t":"width","d":"width specifies the width of the pen."},{"t":"color","d":"color must be a color in RGB hex format, i.e. \n       &quot;000000&quot; for black."}]},"zip_read":{"s":"Read next entry in a ZIP file archive","y":"resource zip_read\n    ( resource $zip\n   )","r":"Returns a directory entry resource for later use with the\n   zip_entry_... functions, or FALSE if\n   there are no more entries to read, or an error code if an error\n   occurred.","p":[{"t":"zip","d":"A ZIP file previously opened with zip_open()."}]},"stats_rand_ranf":{"s":"Returns a random floating point number from a uniform distribution over 0 - 1 (endpoints of this interval are not returned) using the current generator","y":"float stats_rand_ranf\n    ( void\n   )","r":"","p":null},"cairo_font_options_status":{"s":"Description","y":"int cairo_font_options_status\n    ( CairoFontOptions $options\n   )","r":"What is returned on success and failure","p":[{"t":"options","d":"Description..."}]},"fann_set_weight_array":{"s":"Set connections in the network","y":"bool fann_set_weight_array\n    ( resource $ann\n   , array $connections\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"connections","d":"An array of FANNConnection objects"}]},"swf_closefile":{"s":"Close the current Shockwave Flash file","y":"void swf_closefile\n    ([ int $return_file\n  ] )","r":"No value is returned.","p":[{"t":"return_file","d":"If set then the contents of the SWF file are returned from the\n       function."}]},"gnupg_cleardecryptkeys":{"s":"Removes all keys which were set for decryption before","y":"bool gnupg_cleardecryptkeys\n    ( resource $identifier\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"identifier","d":"The gnupg identifier, from a call to\ngnupg_init() or gnupg."}]},"px_timestamp2string":{"s":"Converts the timestamp into a string.","y":"string px_timestamp2string\n    ( resource $pxdoc\n   , float $value\n   , string $format\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"pxdoc","d":"Resource identifier of the paradox database."},{"t":"value","d":"Value as stored in paradox database field of type\n       PX_FIELD_TIME, or PX_FIELD_TIMESTAMP."},{"t":"format","d":"String format similar to the format used by date().\n        The placeholders support by this function is a subset of those\n        supported by date() (Y, y, m, n, d, j, H, h, G, g,\n        i, s, A, a, L)."}]},"http_request_method_name":{"s":"Get request method name","y":"string http_request_method_name\n    ( int $method\n   )","r":"Returns the request method name as string on success or FALSE on failure.","p":[{"t":"method","d":"request method ID"}]},"fann_copy":{"s":"Creates a copy of a fann structure","y":"resource fann_copy\n    ( resource $ann\n   )","r":"Returns a copy of neural network resource on success, or FALSE on error","p":[{"t":"ann","d":"Neural network resource."}]},"xmlwriter_end_comment":{"s":"Create end comment","y":"bool XMLWriter::endComment\n    ( void\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"xmlwriter","d":"Only for procedural calls.\nThe XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}]},"ctype_punct":{"s":"Check for any printable character which is not whitespace or an\n   alphanumeric character","y":"bool ctype_punct\n    ( string $text\n   )","r":"Returns TRUE if every character in text \n   is printable, but neither letter, digit or blank, FALSE otherwise.","p":[{"t":"text","d":"The tested string."}]},"sqlsrv_get_config":{"s":"Returns the value of the specified configuration setting","y":"mixed sqlsrv_get_config\n    ( string $setting\n   )","r":"Returns the value of the specified setting. If an invalid setting is specified, \n   FALSE is returned.","p":[{"t":"setting","d":"The name of the setting for which the value is returned. For a list of \n       configurable settings, see sqlsrv_configure()."}]},"ps_show_boxed":{"s":"Output text in a box","y":"int ps_show_boxed\n    ( resource $psdoc\n   , string $text\n   , float $left\n   , float $bottom\n   , float $width\n   , float $height\n   , string $hmode\n   [, string $feature\n  ] )","r":"Number of characters that could not be written.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"text","d":"The text to be output into the given box."},{"t":"left","d":"x-coordinate of the lower left corner of the box."},{"t":"bottom","d":"y-coordinate of the lower left corner of the box."},{"t":"width","d":"Width of the box."},{"t":"height","d":"Height of the box."},{"t":"hmode","d":"The parameter hmode can be &quot;justify&quot;,\n       &quot;fulljustify&quot;, &quot;right&quot;, &quot;left&quot;, or &quot;center&quot;. The difference of\n       &quot;justify&quot; and &quot;fulljustify&quot; just affects the last line of the box. In\n       fulljustify mode the last line will be left and right justified unless\n       this is also the last line of paragraph. In justify mode it will always\n       be left justified."},{"t":"feature","d":""}]},"ncurses_slk_init":{"s":"Initializes soft label key functions","y":"bool ncurses_slk_init\n    ( int $format\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"format","d":"If ncurses_init() eventually uses a line from\n       stdscr to emulate the soft labels, then this parameter determines how\n       the labels are arranged of the screen."}]},"ps_setcolor":{"s":"Sets current color","y":"bool ps_setcolor\n    ( resource $psdoc\n   , string $type\n   , string $colorspace\n   , float $c1\n   , float $c2\n   , float $c3\n   , float $c4\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"psdoc","d":"Resource identifier of the postscript file\n       as returned by ps_new()."},{"t":"type","d":"The parameter type can be \n       both, fill, or\n       fillstroke."},{"t":"colorspace","d":"The colorspace should be one of gray,\n       rgb, cmyk, \n       spot, pattern. Depending on the\n       colorspace either only the first, the first three or all parameters\n       will be used."},{"t":"c1","d":"Depending on the colorspace this is either the red component (rgb),\n       the cyan component (cmyk), the gray value (gray), the identifier of\n       the spot color or the identifier of the pattern."},{"t":"c2","d":"Depending on the colorspace this is either the green component (rgb),\n       the magenta component (cmyk)."},{"t":"c3","d":"Depending on the colorspace this is either the blue component (rgb),\n       the yellow component (cmyk)."},{"t":"c4","d":"This must only be set in cmyk colorspace and specifies the black\n       component."}]},"odbc_fetch_into":{"s":"Fetch one result row into array","y":"int odbc_fetch_into\n    ( resource $result_id\n   , array &$result_array\n   [, int $rownumber\n  ] )","r":"Returns the number of columns in the result;\n   FALSE on error.","p":[{"t":"result_id","d":"The result resource."},{"t":"result_array","d":"The result array\n       that can be of any type since it will be converted to type\n       array. The array will contain the column values starting at array\n       index 0."},{"t":"rownumber","d":"The row number."}]},"gupnp_service_proxy_set_subscribed":{"s":"(Un)subscribes to the service.","y":"bool gupnp_service_proxy_set_subscribed\n    ( resource $proxy\n   , bool $subscribed\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"proxy","d":"A service proxy identifier."},{"t":"subscribed","d":"Set TRUE to subscribe to this service."}]},"array_count_values":{"s":"Counts all the values of an array","y":"array array_count_values\n    ( array $array\n   )","r":"Returns an associative array of values from array as\n   keys and their count as value.","p":[{"t":"array","d":"The array of values to count"}]},"oci_close":{"s":"Closes an Oracle connection","y":"bool oci_close\n    ( resource $connection\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"connection","d":"An Oracle connection identifier returned by \n       oci_connect(), oci_pconnect(),\n       or oci_new_connect()."}]},"dbplus_setindexbynumber":{"s":"Set index by number","y":"int dbplus_setindexbynumber\n    ( resource $relation\n   , int $idx_number\n   )","r":"","p":[{"t":"relation","d":"A relation opened by dbplus_open()."},{"t":"idx_number","d":""}]},"imagepsslantfont":{"s":"Slant a font","y":"bool imagepsslantfont\n    ( resource $font_index\n   , float $slant\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"font_index","d":"A font resource, returned by imagepsloadfont()."},{"t":"slant","d":"Slant level."}]},"cubrid_lob_close":{"s":"Close BLOB\/CLOB data","y":"bool cubrid_lob_close\n    ( array $lob_identifier_array  \n   )","r":"TRUE, when process is successful.","p":[{"t":"lob_identifier_array","d":"LOB identifier array return from cubrid_lob_get."}]},"gupnp_root_device_stop":{"s":"Stop main loop","y":"bool gupnp_root_device_stop\n    ( resource $root_device\n   )","r":"Returns TRUE on success or FALSE on failure.","p":[{"t":"root_device","d":"A root device identifier, returned by gupnp_root_device_new()."}]},"end":{"s":"Set the internal pointer of an array to its last element","y":"mixed end\n    ( array &$array\n   )","r":"Returns the value of the last element or FALSE for empty array.","p":[{"t":"array","d":"The array.  This array is passed by reference because it is modified by\n       the function.  This means you must pass it a real variable and not\n       a function returning an array because only actual variables may be\n       passed by reference."}]},"ovrimos_num_rows":{"s":"Returns the number of rows affected by update operations","y":"int ovrimos_num_rows\n    ( int $result_id\n   )","r":"Returns the number of rows as an integer, or FALSE on error.","p":[{"t":"result_id","d":"A result identifier, returned by ovrimos_execute()\n       or ovrimos_exec()."}]},"imap_timeout":{"s":"Set or fetch imap timeout","y":"mixed imap_timeout\n    ( int $timeout_type\n   [, int $timeout = -1\n  ] )","r":"If the timeout parameter is set, this function\n   returns TRUE on success and FALSE on failure.","p":[{"t":"timeout_type","d":"One of the following:\n       IMAP_OPENTIMEOUT,\n       IMAP_READTIMEOUT,\n       IMAP_WRITETIMEOUT, or\n       IMAP_CLOSETIMEOUT."},{"t":"timeout","d":"The timeout, in seconds."}]},"imap_get_quota":{"s":"Retrieve the quota level settings, and usage statics per mailbox","y":"array imap_get_quota\n    ( resource $imap_stream\n   , string $quota_root\n   )","r":"Returns an array with integer values limit and usage for the given\n   mailbox.  The value of limit represents the total amount of space\n   allowed for this mailbox.  The usage value represents the mailboxes\n   current level of capacity.  Will return FALSE in the case of failure.","p":[{"t":"imap_stream","d":"An IMAP stream returned by\nimap_open()."},{"t":"quota_root","d":"quota_root should normally be in the form of\n       user.name where name is the mailbox you wish to\n       retrieve information about."}]},"pg_version":{"s":"Returns an array with client, protocol and server version (when available)","y":"array pg_version\n    ([ resource $connection\n  ] )","r":"Returns an array with client, protocol \n   and server keys and values (if available).  Returns\n   FALSE on error or invalid connection.","p":[{"t":"connection","d":"PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect()."}]},"is_integer":{"s":"Alias of is_int()","y":"","r":"","p":null},"stream_socket_enable_crypto":{"s":"Turns encryption on\/off on an already connected socket","y":"mixed stream_socket_enable_crypto\n    ( resource $stream\n   , bool $enable\n   [, int $crypto_type\n   [, resource $session_stream\n  ]] )","r":"Returns TRUE on success, FALSE if negotiation has failed or\n   0 if there isn&#039;t enough data and you should try again\n   (only for non-blocking sockets).","p":[{"t":"stream","d":"The stream resource."},{"t":"enable","d":"Enable\/disable cryptography on the stream."},{"t":"crypto_type","d":"Setup encryption on the stream.\n       Valid methods are\n       \n        STREAM_CRYPTO_METHOD_SSLv2_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv3_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv23_CLIENT\n        STREAM_CRYPTO_METHOD_TLS_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv2_SERVER\n        STREAM_CRYPTO_METHOD_SSLv3_SERVER\n        STREAM_CRYPTO_METHOD_SSLv23_SERVER\n        STREAM_CRYPTO_METHOD_TLS_SERVER"},{"t":"session_stream","d":"Seed the stream with settings from session_stream."}]},"event_free":{"s":"Free event resource","y":"void event_free\n    ( resource $event\n   )","r":"","p":[{"t":"event","d":"Valid event resource."}]},"pg_num_fields":{"s":"Returns the number of fields in a result","y":"int pg_num_fields\n    ( resource $result\n   )","r":"The number of fields (columns) in the result. On error, -1 is returned.","p":[{"t":"result","d":"PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others)."}]},"fann_set_training_algorithm":{"s":"Sets the training algorithm","y":"bool fann_set_training_algorithm\n    ( resource $ann\n   , int $training_algorithm\n   )","r":"Returns TRUE on success, or FALSE otherwise.","p":[{"t":"ann","d":"Neural network resource."},{"t":"training_algorithm","d":"Training algorithm constant"}]},"ocilogon":{"s":"Alias of oci_connect()","y":"","r":"","p":null}}